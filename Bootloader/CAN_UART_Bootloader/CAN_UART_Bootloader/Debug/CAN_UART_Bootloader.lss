
CAN_UART_Bootloader.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002360  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     000001e8  20000000  00002360  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000034c  200001e8  00002548  000201e8  2**2
                  ALLOC
  3 .stack        00002004  20000534  00002894  000201e8  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY
  6 .debug_info   000285da  00000000  00000000  00020269  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003a83  00000000  00000000  00048843  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000df68  00000000  00000000  0004c2c6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000bb0  00000000  00000000  0005a22e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000c68  00000000  00000000  0005adde  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00022c5a  00000000  00000000  0005ba46  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00014d9b  00000000  00000000  0007e6a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000a373f  00000000  00000000  0009343b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  0000266c  00000000  00000000  00136b7c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	38 25 00 20 35 01 00 00 31 01 00 00 31 01 00 00     8%. 5...1...1...
	...
      2c:	31 01 00 00 00 00 00 00 00 00 00 00 31 01 00 00     1...........1...
      3c:	31 01 00 00 31 01 00 00 31 01 00 00 31 01 00 00     1...1...1...1...
      4c:	31 01 00 00 31 01 00 00 31 01 00 00 3d 09 00 00     1...1...1...=...
      5c:	31 01 00 00 31 01 00 00 31 01 00 00 31 01 00 00     1...1...1...1...
      6c:	31 01 00 00 31 01 00 00 31 01 00 00 31 01 00 00     1...1...1...1...
      7c:	31 01 00 00 75 07 00 00 31 01 00 00 31 01 00 00     1...u...1...1...
      8c:	31 01 00 00 31 01 00 00 31 01 00 00 31 01 00 00     1...1...1...1...
      9c:	31 01 00 00 31 01 00 00 31 01 00 00 31 01 00 00     1...1...1...1...
      ac:	31 01 00 00 31 01 00 00 31 01 00 00 31 01 00 00     1...1...1...1...

000000bc <__do_global_dtors_aux>:
      bc:	b510      	push	{r4, lr}
      be:	4c06      	ldr	r4, [pc, #24]	; (d8 <__do_global_dtors_aux+0x1c>)
      c0:	7823      	ldrb	r3, [r4, #0]
      c2:	2b00      	cmp	r3, #0
      c4:	d107      	bne.n	d6 <__do_global_dtors_aux+0x1a>
      c6:	4b05      	ldr	r3, [pc, #20]	; (dc <__do_global_dtors_aux+0x20>)
      c8:	2b00      	cmp	r3, #0
      ca:	d002      	beq.n	d2 <__do_global_dtors_aux+0x16>
      cc:	4804      	ldr	r0, [pc, #16]	; (e0 <__do_global_dtors_aux+0x24>)
      ce:	e000      	b.n	d2 <__do_global_dtors_aux+0x16>
      d0:	bf00      	nop
      d2:	2301      	movs	r3, #1
      d4:	7023      	strb	r3, [r4, #0]
      d6:	bd10      	pop	{r4, pc}
      d8:	200001e8 	.word	0x200001e8
      dc:	00000000 	.word	0x00000000
      e0:	00002360 	.word	0x00002360

000000e4 <frame_dummy>:
      e4:	4b08      	ldr	r3, [pc, #32]	; (108 <frame_dummy+0x24>)
      e6:	b510      	push	{r4, lr}
      e8:	2b00      	cmp	r3, #0
      ea:	d003      	beq.n	f4 <frame_dummy+0x10>
      ec:	4907      	ldr	r1, [pc, #28]	; (10c <frame_dummy+0x28>)
      ee:	4808      	ldr	r0, [pc, #32]	; (110 <frame_dummy+0x2c>)
      f0:	e000      	b.n	f4 <frame_dummy+0x10>
      f2:	bf00      	nop
      f4:	4807      	ldr	r0, [pc, #28]	; (114 <frame_dummy+0x30>)
      f6:	6803      	ldr	r3, [r0, #0]
      f8:	2b00      	cmp	r3, #0
      fa:	d100      	bne.n	fe <frame_dummy+0x1a>
      fc:	bd10      	pop	{r4, pc}
      fe:	4b06      	ldr	r3, [pc, #24]	; (118 <frame_dummy+0x34>)
     100:	2b00      	cmp	r3, #0
     102:	d0fb      	beq.n	fc <frame_dummy+0x18>
     104:	4798      	blx	r3
     106:	e7f9      	b.n	fc <frame_dummy+0x18>
     108:	00000000 	.word	0x00000000
     10c:	200001ec 	.word	0x200001ec
     110:	00002360 	.word	0x00002360
     114:	00002360 	.word	0x00002360
     118:	00000000 	.word	0x00000000

0000011c <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
     11c:	b510      	push	{r4, lr}
	system_init();
     11e:	4b02      	ldr	r3, [pc, #8]	; (128 <atmel_start_init+0xc>)
     120:	4798      	blx	r3
	stdio_redirect_init();
     122:	4b02      	ldr	r3, [pc, #8]	; (12c <atmel_start_init+0x10>)
     124:	4798      	blx	r3
}
     126:	bd10      	pop	{r4, pc}
     128:	000002e1 	.word	0x000002e1
     12c:	0000110d 	.word	0x0000110d

00000130 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     130:	e7fe      	b.n	130 <Dummy_Handler>
	...

00000134 <Reset_Handler>:
{
     134:	b510      	push	{r4, lr}
        if (pSrc != pDest) {
     136:	4a10      	ldr	r2, [pc, #64]	; (178 <Reset_Handler+0x44>)
     138:	4b10      	ldr	r3, [pc, #64]	; (17c <Reset_Handler+0x48>)
     13a:	429a      	cmp	r2, r3
     13c:	d009      	beq.n	152 <Reset_Handler+0x1e>
     13e:	4b0f      	ldr	r3, [pc, #60]	; (17c <Reset_Handler+0x48>)
     140:	4a0d      	ldr	r2, [pc, #52]	; (178 <Reset_Handler+0x44>)
     142:	e003      	b.n	14c <Reset_Handler+0x18>
                        *pDest++ = *pSrc++;
     144:	6811      	ldr	r1, [r2, #0]
     146:	6019      	str	r1, [r3, #0]
     148:	3304      	adds	r3, #4
     14a:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
     14c:	490c      	ldr	r1, [pc, #48]	; (180 <Reset_Handler+0x4c>)
     14e:	428b      	cmp	r3, r1
     150:	d3f8      	bcc.n	144 <Reset_Handler+0x10>
                        *pDest++ = *pSrc++;
     152:	4b0c      	ldr	r3, [pc, #48]	; (184 <Reset_Handler+0x50>)
     154:	e002      	b.n	15c <Reset_Handler+0x28>
                *pDest++ = 0;
     156:	2200      	movs	r2, #0
     158:	601a      	str	r2, [r3, #0]
     15a:	3304      	adds	r3, #4
        for (pDest = &_szero; pDest < &_ezero;) {
     15c:	4a0a      	ldr	r2, [pc, #40]	; (188 <Reset_Handler+0x54>)
     15e:	4293      	cmp	r3, r2
     160:	d3f9      	bcc.n	156 <Reset_Handler+0x22>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     162:	4a0a      	ldr	r2, [pc, #40]	; (18c <Reset_Handler+0x58>)
     164:	21ff      	movs	r1, #255	; 0xff
     166:	4b0a      	ldr	r3, [pc, #40]	; (190 <Reset_Handler+0x5c>)
     168:	438b      	bics	r3, r1
     16a:	6093      	str	r3, [r2, #8]
        __libc_init_array();
     16c:	4b09      	ldr	r3, [pc, #36]	; (194 <Reset_Handler+0x60>)
     16e:	4798      	blx	r3
        main();
     170:	4b09      	ldr	r3, [pc, #36]	; (198 <Reset_Handler+0x64>)
     172:	4798      	blx	r3
     174:	e7fe      	b.n	174 <Reset_Handler+0x40>
     176:	46c0      	nop			; (mov r8, r8)
     178:	00002360 	.word	0x00002360
     17c:	20000000 	.word	0x20000000
     180:	200001e8 	.word	0x200001e8
     184:	200001e8 	.word	0x200001e8
     188:	20000534 	.word	0x20000534
     18c:	e000ed00 	.word	0xe000ed00
     190:	00000000 	.word	0x00000000
     194:	0000112d 	.word	0x0000112d
     198:	00000c4d 	.word	0x00000c4d

0000019c <FLASH_0_CLOCK_init>:
}

static inline void hri_mclk_set_AHBMASK_NVMCTRL_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_NVMCTRL;
     19c:	4a02      	ldr	r2, [pc, #8]	; (1a8 <FLASH_0_CLOCK_init+0xc>)
     19e:	6913      	ldr	r3, [r2, #16]
     1a0:	2120      	movs	r1, #32
     1a2:	430b      	orrs	r3, r1
     1a4:	6113      	str	r3, [r2, #16]

void FLASH_0_CLOCK_init(void)
{

	hri_mclk_set_AHBMASK_NVMCTRL_bit(MCLK);
}
     1a6:	4770      	bx	lr
     1a8:	40000800 	.word	0x40000800

000001ac <FLASH_0_init>:

void FLASH_0_init(void)
{
     1ac:	b510      	push	{r4, lr}
	FLASH_0_CLOCK_init();
     1ae:	4b03      	ldr	r3, [pc, #12]	; (1bc <FLASH_0_init+0x10>)
     1b0:	4798      	blx	r3
	flash_init(&FLASH_0, NVMCTRL);
     1b2:	4903      	ldr	r1, [pc, #12]	; (1c0 <FLASH_0_init+0x14>)
     1b4:	4803      	ldr	r0, [pc, #12]	; (1c4 <FLASH_0_init+0x18>)
     1b6:	4b04      	ldr	r3, [pc, #16]	; (1c8 <FLASH_0_init+0x1c>)
     1b8:	4798      	blx	r3
}
     1ba:	bd10      	pop	{r4, pc}
     1bc:	0000019d 	.word	0x0000019d
     1c0:	41004000 	.word	0x41004000
     1c4:	200002ec 	.word	0x200002ec
     1c8:	00000395 	.word	0x00000395

000001cc <TARGET_IO_PORT_init>:

void TARGET_IO_PORT_init(void)
{
     1cc:	b530      	push	{r4, r5, lr}
static inline void hri_port_write_PINCFG_PMUXEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                    bool value)
{
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     1ce:	2382      	movs	r3, #130	; 0x82
     1d0:	05db      	lsls	r3, r3, #23
     1d2:	22ca      	movs	r2, #202	; 0xca
     1d4:	5c99      	ldrb	r1, [r3, r2]
	tmp &= ~PORT_PINCFG_PMUXEN;
     1d6:	2501      	movs	r5, #1
     1d8:	43a9      	bics	r1, r5
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     1da:	2401      	movs	r4, #1
     1dc:	4321      	orrs	r1, r4
     1de:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     1e0:	5499      	strb	r1, [r3, r2]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     1e2:	20b5      	movs	r0, #181	; 0xb5
     1e4:	5c19      	ldrb	r1, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     1e6:	3abb      	subs	r2, #187	; 0xbb
     1e8:	4391      	bics	r1, r2
	tmp |= PORT_PMUX_PMUXE(data);
     1ea:	2203      	movs	r2, #3
     1ec:	4311      	orrs	r1, r2
     1ee:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     1f0:	5419      	strb	r1, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     1f2:	21cb      	movs	r1, #203	; 0xcb
     1f4:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PINCFG_PMUXEN;
     1f6:	43aa      	bics	r2, r5
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     1f8:	4322      	orrs	r2, r4
     1fa:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     1fc:	545a      	strb	r2, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     1fe:	5c1a      	ldrb	r2, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     200:	39bc      	subs	r1, #188	; 0xbc
     202:	400a      	ands	r2, r1
	tmp |= PORT_PMUX_PMUXO(data);
     204:	2130      	movs	r1, #48	; 0x30
     206:	430a      	orrs	r2, r1
     208:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     20a:	541a      	strb	r2, [r3, r0]

	gpio_set_pin_function(PB10, PINMUX_PB10D_SERCOM4_PAD2);

	gpio_set_pin_function(PB11, PINMUX_PB11D_SERCOM4_PAD3);
}
     20c:	bd30      	pop	{r4, r5, pc}
	...

00000210 <TARGET_IO_CLOCK_init>:
}

static inline void hri_gclk_write_PCHCTRL_reg(const void *const hw, uint8_t index, hri_gclk_pchctrl_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->PCHCTRL[index].reg = data;
     210:	4b06      	ldr	r3, [pc, #24]	; (22c <TARGET_IO_CLOCK_init+0x1c>)
     212:	2140      	movs	r1, #64	; 0x40
     214:	22dc      	movs	r2, #220	; 0xdc
     216:	5099      	str	r1, [r3, r2]
     218:	3103      	adds	r1, #3
     21a:	3a14      	subs	r2, #20
     21c:	5099      	str	r1, [r3, r2]
}

static inline void hri_mclk_set_APBCMASK_SERCOM4_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_SERCOM4;
     21e:	4a04      	ldr	r2, [pc, #16]	; (230 <TARGET_IO_CLOCK_init+0x20>)
     220:	69d3      	ldr	r3, [r2, #28]
     222:	3923      	subs	r1, #35	; 0x23
     224:	430b      	orrs	r3, r1
     226:	61d3      	str	r3, [r2, #28]
{
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM4_GCLK_ID_CORE, CONF_GCLK_SERCOM4_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM4_GCLK_ID_SLOW, CONF_GCLK_SERCOM4_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));

	hri_mclk_set_APBCMASK_SERCOM4_bit(MCLK);
}
     228:	4770      	bx	lr
     22a:	46c0      	nop			; (mov r8, r8)
     22c:	40001c00 	.word	0x40001c00
     230:	40000800 	.word	0x40000800

00000234 <TARGET_IO_init>:

void TARGET_IO_init(void)
{
     234:	b510      	push	{r4, lr}
	TARGET_IO_CLOCK_init();
     236:	4b05      	ldr	r3, [pc, #20]	; (24c <TARGET_IO_init+0x18>)
     238:	4798      	blx	r3
	usart_sync_init(&TARGET_IO, SERCOM4, (void *)NULL);
     23a:	2200      	movs	r2, #0
     23c:	4904      	ldr	r1, [pc, #16]	; (250 <TARGET_IO_init+0x1c>)
     23e:	4805      	ldr	r0, [pc, #20]	; (254 <TARGET_IO_init+0x20>)
     240:	4b05      	ldr	r3, [pc, #20]	; (258 <TARGET_IO_init+0x24>)
     242:	4798      	blx	r3
	TARGET_IO_PORT_init();
     244:	4b05      	ldr	r3, [pc, #20]	; (25c <TARGET_IO_init+0x28>)
     246:	4798      	blx	r3
}
     248:	bd10      	pop	{r4, pc}
     24a:	46c0      	nop			; (mov r8, r8)
     24c:	00000211 	.word	0x00000211
     250:	42001400 	.word	0x42001400
     254:	20000308 	.word	0x20000308
     258:	00000559 	.word	0x00000559
     25c:	000001cd 	.word	0x000001cd

00000260 <CAN_1_PORT_init>:

void CAN_1_PORT_init(void)
{
     260:	b530      	push	{r4, r5, lr}
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     262:	2382      	movs	r3, #130	; 0x82
     264:	05db      	lsls	r3, r3, #23
     266:	22cf      	movs	r2, #207	; 0xcf
     268:	5c99      	ldrb	r1, [r3, r2]
	tmp &= ~PORT_PINCFG_PMUXEN;
     26a:	2501      	movs	r5, #1
     26c:	43a9      	bics	r1, r5
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     26e:	2401      	movs	r4, #1
     270:	4321      	orrs	r1, r4
     272:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     274:	5499      	strb	r1, [r3, r2]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     276:	20b7      	movs	r0, #183	; 0xb7
     278:	5c19      	ldrb	r1, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     27a:	3ac0      	subs	r2, #192	; 0xc0
     27c:	4011      	ands	r1, r2
	tmp |= PORT_PMUX_PMUXO(data);
     27e:	2260      	movs	r2, #96	; 0x60
     280:	4311      	orrs	r1, r2
     282:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     284:	5419      	strb	r1, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     286:	21ce      	movs	r1, #206	; 0xce
     288:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PINCFG_PMUXEN;
     28a:	43aa      	bics	r2, r5
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     28c:	4322      	orrs	r2, r4
     28e:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     290:	545a      	strb	r2, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     292:	5c1a      	ldrb	r2, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     294:	39bf      	subs	r1, #191	; 0xbf
     296:	438a      	bics	r2, r1
	tmp |= PORT_PMUX_PMUXE(data);
     298:	2106      	movs	r1, #6
     29a:	430a      	orrs	r2, r1
     29c:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     29e:	541a      	strb	r2, [r3, r0]

	gpio_set_pin_function(PB15, PINMUX_PB15G_CAN1_RX);

	gpio_set_pin_function(PB14, PINMUX_PB14G_CAN1_TX);
}
     2a0:	bd30      	pop	{r4, r5, pc}
	...

000002a4 <CAN_1_init>:
 * \brief CAN initialization function
 *
 * Enables CAN peripheral, clocks and initializes CAN driver
 */
void CAN_1_init(void)
{
     2a4:	b510      	push	{r4, lr}
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_CAN1;
     2a6:	4a08      	ldr	r2, [pc, #32]	; (2c8 <CAN_1_init+0x24>)
     2a8:	6911      	ldr	r1, [r2, #16]
     2aa:	2380      	movs	r3, #128	; 0x80
     2ac:	009b      	lsls	r3, r3, #2
     2ae:	430b      	orrs	r3, r1
     2b0:	6113      	str	r3, [r2, #16]
     2b2:	2140      	movs	r1, #64	; 0x40
     2b4:	23ec      	movs	r3, #236	; 0xec
     2b6:	4a05      	ldr	r2, [pc, #20]	; (2cc <CAN_1_init+0x28>)
     2b8:	50d1      	str	r1, [r2, r3]
	hri_mclk_set_AHBMASK_CAN1_bit(MCLK);
	hri_gclk_write_PCHCTRL_reg(GCLK, CAN1_GCLK_ID, CONF_GCLK_CAN1_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
	can_async_init(&CAN_1, CAN1);
     2ba:	4905      	ldr	r1, [pc, #20]	; (2d0 <CAN_1_init+0x2c>)
     2bc:	4805      	ldr	r0, [pc, #20]	; (2d4 <CAN_1_init+0x30>)
     2be:	4b06      	ldr	r3, [pc, #24]	; (2d8 <CAN_1_init+0x34>)
     2c0:	4798      	blx	r3
	CAN_1_PORT_init();
     2c2:	4b06      	ldr	r3, [pc, #24]	; (2dc <CAN_1_init+0x38>)
     2c4:	4798      	blx	r3
}
     2c6:	bd10      	pop	{r4, pc}
     2c8:	40000800 	.word	0x40000800
     2cc:	40001c00 	.word	0x40001c00
     2d0:	42002000 	.word	0x42002000
     2d4:	20000314 	.word	0x20000314
     2d8:	00000329 	.word	0x00000329
     2dc:	00000261 	.word	0x00000261

000002e0 <system_init>:

void system_init(void)
{
     2e0:	b510      	push	{r4, lr}
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
	_init_chip();
     2e2:	4b04      	ldr	r3, [pc, #16]	; (2f4 <system_init+0x14>)
     2e4:	4798      	blx	r3
	init_mcu();

	FLASH_0_init();
     2e6:	4b04      	ldr	r3, [pc, #16]	; (2f8 <system_init+0x18>)
     2e8:	4798      	blx	r3

	TARGET_IO_init();
     2ea:	4b04      	ldr	r3, [pc, #16]	; (2fc <system_init+0x1c>)
     2ec:	4798      	blx	r3
	CAN_1_init();
     2ee:	4b04      	ldr	r3, [pc, #16]	; (300 <system_init+0x20>)
     2f0:	4798      	blx	r3
}
     2f2:	bd10      	pop	{r4, pc}
     2f4:	000007e5 	.word	0x000007e5
     2f8:	000001ad 	.word	0x000001ad
     2fc:	00000235 	.word	0x00000235
     300:	000002a5 	.word	0x000002a5

00000304 <can_tx_done>:

/**
 * \internal Callback of CAN Message Write finished
 */
static void can_tx_done(struct _can_async_device *dev)
{
     304:	b510      	push	{r4, lr}
	struct can_async_descriptor *const descr = CONTAINER_OF(dev, struct can_async_descriptor, dev);

	if (descr->cb.tx_done) {
     306:	69c3      	ldr	r3, [r0, #28]
     308:	2b00      	cmp	r3, #0
     30a:	d000      	beq.n	30e <can_tx_done+0xa>
		descr->cb.tx_done(descr);
     30c:	4798      	blx	r3
	}
}
     30e:	bd10      	pop	{r4, pc}

00000310 <can_rx_done>:

/**
 * \internal Callback of CAN Message Read finished
 */
static void can_rx_done(struct _can_async_device *dev)
{
     310:	b510      	push	{r4, lr}
	struct can_async_descriptor *const descr = CONTAINER_OF(dev, struct can_async_descriptor, dev);

	if (descr->cb.rx_done) {
     312:	6a03      	ldr	r3, [r0, #32]
     314:	2b00      	cmp	r3, #0
     316:	d000      	beq.n	31a <can_rx_done+0xa>
		descr->cb.rx_done(descr);
     318:	4798      	blx	r3
	}
}
     31a:	bd10      	pop	{r4, pc}

0000031c <can_irq_handler>:

/**
 * \internal Callback of CAN Interrupt
 */
static void can_irq_handler(struct _can_async_device *dev, enum can_async_interrupt_type type)
{
     31c:	b510      	push	{r4, lr}
	struct can_async_descriptor *const descr = CONTAINER_OF(dev, struct can_async_descriptor, dev);

	if (descr->cb.irq_handler) {
     31e:	6a43      	ldr	r3, [r0, #36]	; 0x24
     320:	2b00      	cmp	r3, #0
     322:	d000      	beq.n	326 <can_irq_handler+0xa>
		descr->cb.irq_handler(descr, type);
     324:	4798      	blx	r3
	}
}
     326:	bd10      	pop	{r4, pc}

00000328 <can_async_init>:
{
     328:	b570      	push	{r4, r5, r6, lr}
     32a:	0004      	movs	r4, r0
     32c:	000d      	movs	r5, r1
	ASSERT(descr && hw);
     32e:	2800      	cmp	r0, #0
     330:	d015      	beq.n	35e <can_async_init+0x36>
     332:	2900      	cmp	r1, #0
     334:	d011      	beq.n	35a <can_async_init+0x32>
     336:	2001      	movs	r0, #1
     338:	2241      	movs	r2, #65	; 0x41
     33a:	490a      	ldr	r1, [pc, #40]	; (364 <can_async_init+0x3c>)
     33c:	4b0a      	ldr	r3, [pc, #40]	; (368 <can_async_init+0x40>)
     33e:	4798      	blx	r3
	rc = _can_async_init(&descr->dev, hw);
     340:	0029      	movs	r1, r5
     342:	0020      	movs	r0, r4
     344:	4b09      	ldr	r3, [pc, #36]	; (36c <can_async_init+0x44>)
     346:	4798      	blx	r3
	if (rc) {
     348:	2800      	cmp	r0, #0
     34a:	d105      	bne.n	358 <can_async_init+0x30>
	descr->dev.cb.tx_done     = can_tx_done;
     34c:	4b08      	ldr	r3, [pc, #32]	; (370 <can_async_init+0x48>)
     34e:	6063      	str	r3, [r4, #4]
	descr->dev.cb.rx_done     = can_rx_done;
     350:	4b08      	ldr	r3, [pc, #32]	; (374 <can_async_init+0x4c>)
     352:	60a3      	str	r3, [r4, #8]
	descr->dev.cb.irq_handler = can_irq_handler;
     354:	4b08      	ldr	r3, [pc, #32]	; (378 <can_async_init+0x50>)
     356:	60e3      	str	r3, [r4, #12]
}
     358:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(descr && hw);
     35a:	2000      	movs	r0, #0
     35c:	e7ec      	b.n	338 <can_async_init+0x10>
     35e:	2000      	movs	r0, #0
     360:	e7ea      	b.n	338 <can_async_init+0x10>
     362:	46c0      	nop			; (mov r8, r8)
     364:	00002088 	.word	0x00002088
     368:	00000629 	.word	0x00000629
     36c:	00000669 	.word	0x00000669
     370:	00000305 	.word	0x00000305
     374:	00000311 	.word	0x00000311
     378:	0000031d 	.word	0x0000031d

0000037c <flash_ready>:
 * \internal Ready for a new flash command
 *
 * \param[in] device The pointer to flash device structure
 */
static void flash_ready(struct _flash_device *device)
{
     37c:	b510      	push	{r4, lr}
	struct flash_descriptor *const descr = CONTAINER_OF(device, struct flash_descriptor, dev);
	if (descr->callbacks.cb_ready) {
     37e:	6943      	ldr	r3, [r0, #20]
     380:	2b00      	cmp	r3, #0
     382:	d000      	beq.n	386 <flash_ready+0xa>
		descr->callbacks.cb_ready(descr);
     384:	4798      	blx	r3
	}
}
     386:	bd10      	pop	{r4, pc}

00000388 <flash_error>:
 * \internal Error occurs in flash command
 *
 * \param[in] device The pointer to flash device structure
 */
static void flash_error(struct _flash_device *device)
{
     388:	b510      	push	{r4, lr}
	struct flash_descriptor *const descr = CONTAINER_OF(device, struct flash_descriptor, dev);
	if (descr->callbacks.cb_error) {
     38a:	6983      	ldr	r3, [r0, #24]
     38c:	2b00      	cmp	r3, #0
     38e:	d000      	beq.n	392 <flash_error+0xa>
		descr->callbacks.cb_error(descr);
     390:	4798      	blx	r3
	}
}
     392:	bd10      	pop	{r4, pc}

00000394 <flash_init>:
{
     394:	b570      	push	{r4, r5, r6, lr}
     396:	0004      	movs	r4, r0
     398:	000d      	movs	r5, r1
	ASSERT(flash && hw);
     39a:	2800      	cmp	r0, #0
     39c:	d013      	beq.n	3c6 <flash_init+0x32>
     39e:	2900      	cmp	r1, #0
     3a0:	d00f      	beq.n	3c2 <flash_init+0x2e>
     3a2:	2001      	movs	r0, #1
     3a4:	2238      	movs	r2, #56	; 0x38
     3a6:	4909      	ldr	r1, [pc, #36]	; (3cc <flash_init+0x38>)
     3a8:	4b09      	ldr	r3, [pc, #36]	; (3d0 <flash_init+0x3c>)
     3aa:	4798      	blx	r3
	rc = _flash_init(&flash->dev, hw);
     3ac:	0029      	movs	r1, r5
     3ae:	0020      	movs	r0, r4
     3b0:	4b08      	ldr	r3, [pc, #32]	; (3d4 <flash_init+0x40>)
     3b2:	4798      	blx	r3
	if (rc) {
     3b4:	2800      	cmp	r0, #0
     3b6:	d103      	bne.n	3c0 <flash_init+0x2c>
	flash->dev.flash_cb.ready_cb = flash_ready;
     3b8:	4b07      	ldr	r3, [pc, #28]	; (3d8 <flash_init+0x44>)
     3ba:	6023      	str	r3, [r4, #0]
	flash->dev.flash_cb.error_cb = flash_error;
     3bc:	4b07      	ldr	r3, [pc, #28]	; (3dc <flash_init+0x48>)
     3be:	6063      	str	r3, [r4, #4]
}
     3c0:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(flash && hw);
     3c2:	2000      	movs	r0, #0
     3c4:	e7ee      	b.n	3a4 <flash_init+0x10>
     3c6:	2000      	movs	r0, #0
     3c8:	e7ec      	b.n	3a4 <flash_init+0x10>
     3ca:	46c0      	nop			; (mov r8, r8)
     3cc:	000020a4 	.word	0x000020a4
     3d0:	00000629 	.word	0x00000629
     3d4:	000008d9 	.word	0x000008d9
     3d8:	0000037d 	.word	0x0000037d
     3dc:	00000389 	.word	0x00000389

000003e0 <flash_get_page_size>:
{
     3e0:	b510      	push	{r4, lr}
     3e2:	0004      	movs	r4, r0
	ASSERT(flash);
     3e4:	1e43      	subs	r3, r0, #1
     3e6:	4198      	sbcs	r0, r3
     3e8:	b2c0      	uxtb	r0, r0
     3ea:	22f7      	movs	r2, #247	; 0xf7
     3ec:	4903      	ldr	r1, [pc, #12]	; (3fc <flash_get_page_size+0x1c>)
     3ee:	4b04      	ldr	r3, [pc, #16]	; (400 <flash_get_page_size+0x20>)
     3f0:	4798      	blx	r3
	return _flash_get_page_size(&flash->dev);
     3f2:	0020      	movs	r0, r4
     3f4:	4b03      	ldr	r3, [pc, #12]	; (404 <flash_get_page_size+0x24>)
     3f6:	4798      	blx	r3
}
     3f8:	bd10      	pop	{r4, pc}
     3fa:	46c0      	nop			; (mov r8, r8)
     3fc:	000020a4 	.word	0x000020a4
     400:	00000629 	.word	0x00000629
     404:	00000939 	.word	0x00000939

00000408 <io_write>:

/**
 * \brief I/O write interface
 */
int32_t io_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
     408:	b570      	push	{r4, r5, r6, lr}
     40a:	0004      	movs	r4, r0
     40c:	000d      	movs	r5, r1
     40e:	0016      	movs	r6, r2
	ASSERT(io_descr && buf);
     410:	2800      	cmp	r0, #0
     412:	d00e      	beq.n	432 <io_write+0x2a>
     414:	2900      	cmp	r1, #0
     416:	d00a      	beq.n	42e <io_write+0x26>
     418:	2001      	movs	r0, #1
     41a:	2234      	movs	r2, #52	; 0x34
     41c:	4906      	ldr	r1, [pc, #24]	; (438 <io_write+0x30>)
     41e:	4b07      	ldr	r3, [pc, #28]	; (43c <io_write+0x34>)
     420:	4798      	blx	r3
	return io_descr->write(io_descr, buf, length);
     422:	6823      	ldr	r3, [r4, #0]
     424:	0032      	movs	r2, r6
     426:	0029      	movs	r1, r5
     428:	0020      	movs	r0, r4
     42a:	4798      	blx	r3
}
     42c:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(io_descr && buf);
     42e:	2000      	movs	r0, #0
     430:	e7f3      	b.n	41a <io_write+0x12>
     432:	2000      	movs	r0, #0
     434:	e7f1      	b.n	41a <io_write+0x12>
     436:	46c0      	nop			; (mov r8, r8)
     438:	000020bc 	.word	0x000020bc
     43c:	00000629 	.word	0x00000629

00000440 <io_read>:

/**
 * \brief I/O read interface
 */
int32_t io_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
     440:	b570      	push	{r4, r5, r6, lr}
     442:	0004      	movs	r4, r0
     444:	000d      	movs	r5, r1
     446:	0016      	movs	r6, r2
	ASSERT(io_descr && buf);
     448:	2800      	cmp	r0, #0
     44a:	d00e      	beq.n	46a <io_read+0x2a>
     44c:	2900      	cmp	r1, #0
     44e:	d00a      	beq.n	466 <io_read+0x26>
     450:	2001      	movs	r0, #1
     452:	223d      	movs	r2, #61	; 0x3d
     454:	4906      	ldr	r1, [pc, #24]	; (470 <io_read+0x30>)
     456:	4b07      	ldr	r3, [pc, #28]	; (474 <io_read+0x34>)
     458:	4798      	blx	r3
	return io_descr->read(io_descr, buf, length);
     45a:	6863      	ldr	r3, [r4, #4]
     45c:	0032      	movs	r2, r6
     45e:	0029      	movs	r1, r5
     460:	0020      	movs	r0, r4
     462:	4798      	blx	r3
}
     464:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(io_descr && buf);
     466:	2000      	movs	r0, #0
     468:	e7f3      	b.n	452 <io_read+0x12>
     46a:	2000      	movs	r0, #0
     46c:	e7f1      	b.n	452 <io_read+0x12>
     46e:	46c0      	nop			; (mov r8, r8)
     470:	000020bc 	.word	0x000020bc
     474:	00000629 	.word	0x00000629

00000478 <usart_sync_write>:
 * \param[in] length The number of bytes to write
 *
 * \return The number of bytes written.
 */
static int32_t usart_sync_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
     478:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     47a:	0005      	movs	r5, r0
     47c:	000e      	movs	r6, r1
     47e:	0017      	movs	r7, r2
	uint32_t                      offset = 0;
	struct usart_sync_descriptor *descr  = CONTAINER_OF(io_descr, struct usart_sync_descriptor, io);

	ASSERT(io_descr && buf && length);
     480:	2800      	cmp	r0, #0
     482:	d023      	beq.n	4cc <usart_sync_write+0x54>
     484:	2900      	cmp	r1, #0
     486:	d023      	beq.n	4d0 <usart_sync_write+0x58>
     488:	2a00      	cmp	r2, #0
     48a:	d123      	bne.n	4d4 <usart_sync_write+0x5c>
     48c:	2000      	movs	r0, #0
     48e:	22f1      	movs	r2, #241	; 0xf1
     490:	4911      	ldr	r1, [pc, #68]	; (4d8 <usart_sync_write+0x60>)
     492:	4b12      	ldr	r3, [pc, #72]	; (4dc <usart_sync_write+0x64>)
     494:	4798      	blx	r3
	while (!_usart_sync_is_ready_to_send(&descr->device))
     496:	002c      	movs	r4, r5
     498:	3408      	adds	r4, #8
     49a:	0020      	movs	r0, r4
     49c:	4b10      	ldr	r3, [pc, #64]	; (4e0 <usart_sync_write+0x68>)
     49e:	4798      	blx	r3
     4a0:	2800      	cmp	r0, #0
     4a2:	d0f8      	beq.n	496 <usart_sync_write+0x1e>
     4a4:	2500      	movs	r5, #0
		;
	do {
		_usart_sync_write_byte(&descr->device, buf[offset]);
     4a6:	5d71      	ldrb	r1, [r6, r5]
     4a8:	0020      	movs	r0, r4
     4aa:	4b0e      	ldr	r3, [pc, #56]	; (4e4 <usart_sync_write+0x6c>)
     4ac:	4798      	blx	r3
		while (!_usart_sync_is_ready_to_send(&descr->device))
     4ae:	0020      	movs	r0, r4
     4b0:	4b0b      	ldr	r3, [pc, #44]	; (4e0 <usart_sync_write+0x68>)
     4b2:	4798      	blx	r3
     4b4:	2800      	cmp	r0, #0
     4b6:	d0fa      	beq.n	4ae <usart_sync_write+0x36>
			;
	} while (++offset < length);
     4b8:	3501      	adds	r5, #1
     4ba:	42bd      	cmp	r5, r7
     4bc:	d3f3      	bcc.n	4a6 <usart_sync_write+0x2e>
	while (!_usart_sync_is_transmit_done(&descr->device))
     4be:	0020      	movs	r0, r4
     4c0:	4b09      	ldr	r3, [pc, #36]	; (4e8 <usart_sync_write+0x70>)
     4c2:	4798      	blx	r3
     4c4:	2800      	cmp	r0, #0
     4c6:	d0fa      	beq.n	4be <usart_sync_write+0x46>
		;
	return (int32_t)offset;
}
     4c8:	0028      	movs	r0, r5
     4ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	ASSERT(io_descr && buf && length);
     4cc:	2000      	movs	r0, #0
     4ce:	e7de      	b.n	48e <usart_sync_write+0x16>
     4d0:	2000      	movs	r0, #0
     4d2:	e7dc      	b.n	48e <usart_sync_write+0x16>
     4d4:	2001      	movs	r0, #1
     4d6:	e7da      	b.n	48e <usart_sync_write+0x16>
     4d8:	000020d0 	.word	0x000020d0
     4dc:	00000629 	.word	0x00000629
     4e0:	00000bcf 	.word	0x00000bcf
     4e4:	00000bbf 	.word	0x00000bbf
     4e8:	00000bd9 	.word	0x00000bd9

000004ec <usart_sync_read>:
 * \param[in] length The size of a buffer
 *
 * \return The number of bytes read.
 */
static int32_t usart_sync_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
     4ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     4ee:	46ce      	mov	lr, r9
     4f0:	4647      	mov	r7, r8
     4f2:	b580      	push	{r7, lr}
     4f4:	1e05      	subs	r5, r0, #0
     4f6:	4688      	mov	r8, r1
     4f8:	4691      	mov	r9, r2
	uint32_t                      offset = 0;
	struct usart_sync_descriptor *descr  = CONTAINER_OF(io_descr, struct usart_sync_descriptor, io);

	ASSERT(io_descr && buf && length);
     4fa:	d01f      	beq.n	53c <usart_sync_read+0x50>
     4fc:	2900      	cmp	r1, #0
     4fe:	d01f      	beq.n	540 <usart_sync_read+0x54>
     500:	2a00      	cmp	r2, #0
     502:	d11f      	bne.n	544 <usart_sync_read+0x58>
     504:	2000      	movs	r0, #0
     506:	2286      	movs	r2, #134	; 0x86
     508:	0052      	lsls	r2, r2, #1
     50a:	490f      	ldr	r1, [pc, #60]	; (548 <usart_sync_read+0x5c>)
     50c:	4b0f      	ldr	r3, [pc, #60]	; (54c <usart_sync_read+0x60>)
     50e:	4798      	blx	r3
	uint32_t                      offset = 0;
     510:	2600      	movs	r6, #0
	do {
		while (!_usart_sync_is_byte_received(&descr->device))
     512:	002c      	movs	r4, r5
     514:	3408      	adds	r4, #8
     516:	0020      	movs	r0, r4
     518:	4b0d      	ldr	r3, [pc, #52]	; (550 <usart_sync_read+0x64>)
     51a:	4798      	blx	r3
     51c:	2800      	cmp	r0, #0
     51e:	d0f8      	beq.n	512 <usart_sync_read+0x26>
			;
		buf[offset] = _usart_sync_read_byte(&descr->device);
     520:	4643      	mov	r3, r8
     522:	199f      	adds	r7, r3, r6
     524:	0020      	movs	r0, r4
     526:	4b0b      	ldr	r3, [pc, #44]	; (554 <usart_sync_read+0x68>)
     528:	4798      	blx	r3
     52a:	7038      	strb	r0, [r7, #0]
	} while (++offset < length);
     52c:	3601      	adds	r6, #1
     52e:	454e      	cmp	r6, r9
     530:	d3ef      	bcc.n	512 <usart_sync_read+0x26>

	return (int32_t)offset;
}
     532:	0030      	movs	r0, r6
     534:	bc0c      	pop	{r2, r3}
     536:	4690      	mov	r8, r2
     538:	4699      	mov	r9, r3
     53a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	ASSERT(io_descr && buf && length);
     53c:	2000      	movs	r0, #0
     53e:	e7e2      	b.n	506 <usart_sync_read+0x1a>
     540:	2000      	movs	r0, #0
     542:	e7e0      	b.n	506 <usart_sync_read+0x1a>
     544:	2001      	movs	r0, #1
     546:	e7de      	b.n	506 <usart_sync_read+0x1a>
     548:	000020d0 	.word	0x000020d0
     54c:	00000629 	.word	0x00000629
     550:	00000be5 	.word	0x00000be5
     554:	00000bc7 	.word	0x00000bc7

00000558 <usart_sync_init>:
{
     558:	b570      	push	{r4, r5, r6, lr}
     55a:	0004      	movs	r4, r0
     55c:	000d      	movs	r5, r1
	ASSERT(descr && hw);
     55e:	2800      	cmp	r0, #0
     560:	d014      	beq.n	58c <usart_sync_init+0x34>
     562:	2900      	cmp	r1, #0
     564:	d010      	beq.n	588 <usart_sync_init+0x30>
     566:	2001      	movs	r0, #1
     568:	2234      	movs	r2, #52	; 0x34
     56a:	4909      	ldr	r1, [pc, #36]	; (590 <usart_sync_init+0x38>)
     56c:	4b09      	ldr	r3, [pc, #36]	; (594 <usart_sync_init+0x3c>)
     56e:	4798      	blx	r3
	init_status = _usart_sync_init(&descr->device, hw);
     570:	0020      	movs	r0, r4
     572:	3008      	adds	r0, #8
     574:	0029      	movs	r1, r5
     576:	4b08      	ldr	r3, [pc, #32]	; (598 <usart_sync_init+0x40>)
     578:	4798      	blx	r3
	if (init_status) {
     57a:	2800      	cmp	r0, #0
     57c:	d103      	bne.n	586 <usart_sync_init+0x2e>
	descr->io.read  = usart_sync_read;
     57e:	4b07      	ldr	r3, [pc, #28]	; (59c <usart_sync_init+0x44>)
     580:	6063      	str	r3, [r4, #4]
	descr->io.write = usart_sync_write;
     582:	4b07      	ldr	r3, [pc, #28]	; (5a0 <usart_sync_init+0x48>)
     584:	6023      	str	r3, [r4, #0]
}
     586:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(descr && hw);
     588:	2000      	movs	r0, #0
     58a:	e7ed      	b.n	568 <usart_sync_init+0x10>
     58c:	2000      	movs	r0, #0
     58e:	e7eb      	b.n	568 <usart_sync_init+0x10>
     590:	000020d0 	.word	0x000020d0
     594:	00000629 	.word	0x00000629
     598:	00000b81 	.word	0x00000b81
     59c:	000004ed 	.word	0x000004ed
     5a0:	00000479 	.word	0x00000479

000005a4 <usart_sync_enable>:
{
     5a4:	b510      	push	{r4, lr}
     5a6:	0004      	movs	r4, r0
	ASSERT(descr);
     5a8:	1e43      	subs	r3, r0, #1
     5aa:	4198      	sbcs	r0, r3
     5ac:	b2c0      	uxtb	r0, r0
     5ae:	2253      	movs	r2, #83	; 0x53
     5b0:	4904      	ldr	r1, [pc, #16]	; (5c4 <usart_sync_enable+0x20>)
     5b2:	4b05      	ldr	r3, [pc, #20]	; (5c8 <usart_sync_enable+0x24>)
     5b4:	4798      	blx	r3
	_usart_sync_enable(&descr->device);
     5b6:	0020      	movs	r0, r4
     5b8:	3008      	adds	r0, #8
     5ba:	4b04      	ldr	r3, [pc, #16]	; (5cc <usart_sync_enable+0x28>)
     5bc:	4798      	blx	r3
}
     5be:	2000      	movs	r0, #0
     5c0:	bd10      	pop	{r4, pc}
     5c2:	46c0      	nop			; (mov r8, r8)
     5c4:	000020d0 	.word	0x000020d0
     5c8:	00000629 	.word	0x00000629
     5cc:	00000bad 	.word	0x00000bad

000005d0 <usart_sync_get_io_descriptor>:
{
     5d0:	b570      	push	{r4, r5, r6, lr}
     5d2:	0004      	movs	r4, r0
     5d4:	000d      	movs	r5, r1
	ASSERT(descr && io);
     5d6:	2800      	cmp	r0, #0
     5d8:	d00b      	beq.n	5f2 <usart_sync_get_io_descriptor+0x22>
     5da:	2900      	cmp	r1, #0
     5dc:	d007      	beq.n	5ee <usart_sync_get_io_descriptor+0x1e>
     5de:	2001      	movs	r0, #1
     5e0:	2269      	movs	r2, #105	; 0x69
     5e2:	4905      	ldr	r1, [pc, #20]	; (5f8 <usart_sync_get_io_descriptor+0x28>)
     5e4:	4b05      	ldr	r3, [pc, #20]	; (5fc <usart_sync_get_io_descriptor+0x2c>)
     5e6:	4798      	blx	r3
	*io = &descr->io;
     5e8:	602c      	str	r4, [r5, #0]
}
     5ea:	2000      	movs	r0, #0
     5ec:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(descr && io);
     5ee:	2000      	movs	r0, #0
     5f0:	e7f6      	b.n	5e0 <usart_sync_get_io_descriptor+0x10>
     5f2:	2000      	movs	r0, #0
     5f4:	e7f4      	b.n	5e0 <usart_sync_get_io_descriptor+0x10>
     5f6:	46c0      	nop			; (mov r8, r8)
     5f8:	000020d0 	.word	0x000020d0
     5fc:	00000629 	.word	0x00000629

00000600 <usart_sync_is_rx_not_empty>:
{
     600:	b510      	push	{r4, lr}
     602:	0004      	movs	r4, r0
	ASSERT(descr);
     604:	1e43      	subs	r3, r0, #1
     606:	4198      	sbcs	r0, r3
     608:	b2c0      	uxtb	r0, r0
     60a:	22d7      	movs	r2, #215	; 0xd7
     60c:	4903      	ldr	r1, [pc, #12]	; (61c <usart_sync_is_rx_not_empty+0x1c>)
     60e:	4b04      	ldr	r3, [pc, #16]	; (620 <usart_sync_is_rx_not_empty+0x20>)
     610:	4798      	blx	r3
	return _usart_sync_is_byte_received(&descr->device);
     612:	0020      	movs	r0, r4
     614:	3008      	adds	r0, #8
     616:	4b03      	ldr	r3, [pc, #12]	; (624 <usart_sync_is_rx_not_empty+0x24>)
     618:	4798      	blx	r3
}
     61a:	bd10      	pop	{r4, pc}
     61c:	000020d0 	.word	0x000020d0
     620:	00000629 	.word	0x00000629
     624:	00000be5 	.word	0x00000be5

00000628 <assert>:
/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
	if (!(condition)) {
     628:	2800      	cmp	r0, #0
     62a:	d100      	bne.n	62e <assert+0x6>
		__asm("BKPT #0");
     62c:	be00      	bkpt	0x0000
	}
	(void)file;
	(void)line;
}
     62e:	4770      	bx	lr

00000630 <_sbrk>:

/**
 * \brief Replacement of C library of _sbrk
 */
extern caddr_t _sbrk(int incr)
{
     630:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *       prev_heap;

	if (heap == NULL) {
     632:	4a06      	ldr	r2, [pc, #24]	; (64c <_sbrk+0x1c>)
     634:	6812      	ldr	r2, [r2, #0]
     636:	2a00      	cmp	r2, #0
     638:	d004      	beq.n	644 <_sbrk+0x14>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
     63a:	4a04      	ldr	r2, [pc, #16]	; (64c <_sbrk+0x1c>)
     63c:	6810      	ldr	r0, [r2, #0]

	heap += incr;
     63e:	18c3      	adds	r3, r0, r3
     640:	6013      	str	r3, [r2, #0]

	return (caddr_t)prev_heap;
}
     642:	4770      	bx	lr
		heap = (unsigned char *)&_end;
     644:	4902      	ldr	r1, [pc, #8]	; (650 <_sbrk+0x20>)
     646:	4a01      	ldr	r2, [pc, #4]	; (64c <_sbrk+0x1c>)
     648:	6011      	str	r1, [r2, #0]
     64a:	e7f6      	b.n	63a <_sbrk+0xa>
     64c:	20000204 	.word	0x20000204
     650:	20002538 	.word	0x20002538

00000654 <_close>:
 */
extern int _close(int file)
{
	(void)file;
	return -1;
}
     654:	2001      	movs	r0, #1
     656:	4240      	negs	r0, r0
     658:	4770      	bx	lr

0000065a <_fstat>:
 * \brief Replacement of C library of _fstat
 */
extern int _fstat(int file, struct stat *st)
{
	(void)file;
	st->st_mode = S_IFCHR;
     65a:	2380      	movs	r3, #128	; 0x80
     65c:	019b      	lsls	r3, r3, #6
     65e:	604b      	str	r3, [r1, #4]

	return 0;
}
     660:	2000      	movs	r0, #0
     662:	4770      	bx	lr

00000664 <_lseek>:
 */
extern int _lseek(int file, int ptr, int dir)
{
	(void)file, (void)ptr, (void)dir;
	return 0;
}
     664:	2000      	movs	r0, #0
     666:	4770      	bx	lr

00000668 <_can_async_init>:

/**
 * \brief Initialize CAN.
 */
int32_t _can_async_init(struct _can_async_device *const dev, void *const hw)
{
     668:	b5f0      	push	{r4, r5, r6, r7, lr}
	dev->hw = hw;
     66a:	6001      	str	r1, [r0, #0]
}

static inline void hri_can_set_CCCR_INIT_bit(const void *const hw)
{
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg |= CAN_CCCR_INIT;
     66c:	698b      	ldr	r3, [r1, #24]
     66e:	2201      	movs	r2, #1
     670:	4313      	orrs	r3, r2
     672:	618b      	str	r3, [r1, #24]
	hri_can_set_CCCR_INIT_bit(dev->hw);
	while (hri_can_get_CCCR_INIT_bit(dev->hw) == 0)
     674:	6803      	ldr	r3, [r0, #0]
}

static inline bool hri_can_get_CCCR_INIT_bit(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Can *)hw)->CCCR.reg;
     676:	699a      	ldr	r2, [r3, #24]
     678:	07d2      	lsls	r2, r2, #31
     67a:	d5fb      	bpl.n	674 <_can_async_init+0xc>
}

static inline void hri_can_set_CCCR_CCE_bit(const void *const hw)
{
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg |= CAN_CCCR_CCE;
     67c:	699a      	ldr	r2, [r3, #24]
     67e:	2402      	movs	r4, #2
     680:	4322      	orrs	r2, r4
     682:	619a      	str	r2, [r3, #24]
		hri_can_write_ILE_reg(dev->hw, CAN_ILE_EINT0);
	}
#endif

#ifdef CONF_CAN1_ENABLED
	if (hw == CAN1) {
     684:	4b33      	ldr	r3, [pc, #204]	; (754 <_can_async_init+0xec>)
     686:	4299      	cmp	r1, r3
     688:	d00f      	beq.n	6aa <_can_async_init+0x42>
		hri_can_write_ILE_reg(dev->hw, CAN_ILE_EINT0);
	}
#endif

	/* Disable CCE to prevent Configuration Change */
	hri_can_clear_CCCR_CCE_bit(dev->hw);
     68a:	6802      	ldr	r2, [r0, #0]
}

static inline void hri_can_clear_CCCR_CCE_bit(const void *const hw)
{
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg &= ~CAN_CCCR_CCE;
     68c:	6993      	ldr	r3, [r2, #24]
     68e:	2102      	movs	r1, #2
     690:	438b      	bics	r3, r1
     692:	6193      	str	r3, [r2, #24]
	hri_can_clear_CCCR_INIT_bit(dev->hw);
     694:	6802      	ldr	r2, [r0, #0]
	((Can *)hw)->CCCR.reg &= ~CAN_CCCR_INIT;
     696:	6993      	ldr	r3, [r2, #24]
     698:	3901      	subs	r1, #1
     69a:	438b      	bics	r3, r1
     69c:	6193      	str	r3, [r2, #24]
	while (hri_can_get_CCCR_INIT_bit(dev->hw)) {
     69e:	6803      	ldr	r3, [r0, #0]
	tmp = ((Can *)hw)->CCCR.reg;
     6a0:	699b      	ldr	r3, [r3, #24]
     6a2:	07db      	lsls	r3, r3, #31
     6a4:	d4fb      	bmi.n	69e <_can_async_init+0x36>
	};

	return ERR_NONE;
}
     6a6:	2000      	movs	r0, #0
     6a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		_can1_dev    = dev;
     6aa:	4b2b      	ldr	r3, [pc, #172]	; (758 <_can_async_init+0xf0>)
     6ac:	001a      	movs	r2, r3
     6ae:	c201      	stmia	r2!, {r0}
		dev->context = (void *)&_can1_context;
     6b0:	492a      	ldr	r1, [pc, #168]	; (75c <_can_async_init+0xf4>)
     6b2:	6181      	str	r1, [r0, #24]
		hri_can_set_CCCR_reg(dev->hw, CONF_CAN1_CCCR_REG);
     6b4:	6801      	ldr	r1, [r0, #0]
}

static inline void hri_can_set_CCCR_reg(const void *const hw, hri_can_cccr_reg_t mask)
{
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg |= mask;
     6b6:	698c      	ldr	r4, [r1, #24]
     6b8:	618c      	str	r4, [r1, #24]
		hri_can_write_MRCFG_reg(dev->hw, CONF_CAN1_MRCFG_REG);
     6ba:	6801      	ldr	r1, [r0, #0]
	((Can *)hw)->MRCFG.reg = data;
     6bc:	2400      	movs	r4, #0
     6be:	608c      	str	r4, [r1, #8]
		hri_can_write_NBTP_reg(dev->hw, CONF_CAN1_BTP_REG);
     6c0:	6801      	ldr	r1, [r0, #0]
}

static inline void hri_can_write_NBTP_reg(const void *const hw, hri_can_nbtp_reg_t data)
{
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->NBTP.reg = data;
     6c2:	4d27      	ldr	r5, [pc, #156]	; (760 <_can_async_init+0xf8>)
     6c4:	61cd      	str	r5, [r1, #28]
		hri_can_write_DBTP_reg(dev->hw, CONF_CAN1_DBTP_REG);
     6c6:	6801      	ldr	r1, [r0, #0]
	((Can *)hw)->DBTP.reg = data;
     6c8:	4d26      	ldr	r5, [pc, #152]	; (764 <_can_async_init+0xfc>)
     6ca:	60cd      	str	r5, [r1, #12]
		hri_can_write_RXF0C_reg(dev->hw, CONF_CAN1_RXF0C_REG | CAN_RXF0C_F0SA((uint32_t)can1_rx_fifo));
     6cc:	4d26      	ldr	r5, [pc, #152]	; (768 <_can_async_init+0x100>)
     6ce:	042d      	lsls	r5, r5, #16
     6d0:	0c2d      	lsrs	r5, r5, #16
     6d2:	2180      	movs	r1, #128	; 0x80
     6d4:	0289      	lsls	r1, r1, #10
     6d6:	430d      	orrs	r5, r1
}

static inline void hri_can_write_RXF0C_reg(const void *const hw, hri_can_rxf0c_reg_t data)
{
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->RXF0C.reg = data;
     6d8:	26a0      	movs	r6, #160	; 0xa0
     6da:	6807      	ldr	r7, [r0, #0]
     6dc:	51bd      	str	r5, [r7, r6]
}

static inline void hri_can_write_RXESC_reg(const void *const hw, hri_can_rxesc_reg_t data)
{
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->RXESC.reg = data;
     6de:	25bc      	movs	r5, #188	; 0xbc
     6e0:	6806      	ldr	r6, [r0, #0]
     6e2:	5174      	str	r4, [r6, r5]
}

static inline void hri_can_write_TXESC_reg(const void *const hw, hri_can_txesc_reg_t data)
{
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->TXESC.reg = data;
     6e4:	350c      	adds	r5, #12
     6e6:	6806      	ldr	r6, [r0, #0]
     6e8:	5174      	str	r4, [r6, r5]
		hri_can_write_TXBC_reg(dev->hw, CONF_CAN1_TXBC_REG | CAN_TXBC_TBSA((uint32_t)can1_tx_fifo));
     6ea:	4d20      	ldr	r5, [pc, #128]	; (76c <_can_async_init+0x104>)
     6ec:	042d      	lsls	r5, r5, #16
     6ee:	0c2d      	lsrs	r5, r5, #16
     6f0:	2680      	movs	r6, #128	; 0x80
     6f2:	04b6      	lsls	r6, r6, #18
     6f4:	4335      	orrs	r5, r6
	((Can *)hw)->TXBC.reg = data;
     6f6:	26c0      	movs	r6, #192	; 0xc0
     6f8:	6807      	ldr	r7, [r0, #0]
     6fa:	51bd      	str	r5, [r7, r6]
		hri_can_write_TXEFC_reg(dev->hw, CONF_CAN1_TXEFC_REG | CAN_TXEFC_EFSA((uint32_t)can1_tx_event_fifo));
     6fc:	0412      	lsls	r2, r2, #16
     6fe:	0c12      	lsrs	r2, r2, #16
     700:	430a      	orrs	r2, r1
}

static inline void hri_can_write_TXEFC_reg(const void *const hw, hri_can_txefc_reg_t data)
{
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->TXEFC.reg = data;
     702:	25f0      	movs	r5, #240	; 0xf0
     704:	6806      	ldr	r6, [r0, #0]
     706:	5172      	str	r2, [r6, r5]
	((Can *)hw)->GFC.reg = data;
     708:	3d70      	subs	r5, #112	; 0x70
     70a:	2228      	movs	r2, #40	; 0x28
     70c:	6806      	ldr	r6, [r0, #0]
     70e:	5172      	str	r2, [r6, r5]
		hri_can_write_SIDFC_reg(dev->hw, CONF_CAN1_SIDFC_REG | CAN_SIDFC_FLSSA((uint32_t)can1_rx_std_filter));
     710:	001a      	movs	r2, r3
     712:	3214      	adds	r2, #20
     714:	0412      	lsls	r2, r2, #16
     716:	0c12      	lsrs	r2, r2, #16
     718:	430a      	orrs	r2, r1
	((Can *)hw)->SIDFC.reg = data;
     71a:	2684      	movs	r6, #132	; 0x84
     71c:	6807      	ldr	r7, [r0, #0]
     71e:	51ba      	str	r2, [r7, r6]
		hri_can_write_XIDFC_reg(dev->hw, CONF_CAN1_XIDFC_REG | CAN_XIDFC_FLESA((uint32_t)can1_rx_ext_filter));
     720:	331c      	adds	r3, #28
     722:	041b      	lsls	r3, r3, #16
     724:	0c1b      	lsrs	r3, r3, #16
     726:	430b      	orrs	r3, r1
	((Can *)hw)->XIDFC.reg = data;
     728:	2288      	movs	r2, #136	; 0x88
     72a:	6801      	ldr	r1, [r0, #0]
     72c:	508b      	str	r3, [r1, r2]
	((Can *)hw)->XIDAM.reg = data;
     72e:	2390      	movs	r3, #144	; 0x90
     730:	6802      	ldr	r2, [r0, #0]
     732:	50d4      	str	r4, [r2, r3]
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     734:	4b0e      	ldr	r3, [pc, #56]	; (770 <_can_async_init+0x108>)
     736:	2280      	movs	r2, #128	; 0x80
     738:	0252      	lsls	r2, r2, #9
     73a:	515a      	str	r2, [r3, r5]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
     73c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
     740:	f3bf 8f6f 	isb	sy
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     744:	21c0      	movs	r1, #192	; 0xc0
     746:	0049      	lsls	r1, r1, #1
     748:	505a      	str	r2, [r3, r1]
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     74a:	601a      	str	r2, [r3, #0]
		hri_can_write_ILE_reg(dev->hw, CAN_ILE_EINT0);
     74c:	6803      	ldr	r3, [r0, #0]
	((Can *)hw)->ILE.reg = data;
     74e:	2201      	movs	r2, #1
     750:	65da      	str	r2, [r3, #92]	; 0x5c
     752:	e79a      	b.n	68a <_can_async_init+0x22>
     754:	42002000 	.word	0x42002000
     758:	20000208 	.word	0x20000208
     75c:	20000000 	.word	0x20000000
     760:	06020a07 	.word	0x06020a07
     764:	00000a33 	.word	0x00000a33
     768:	2000035c 	.word	0x2000035c
     76c:	2000033c 	.word	0x2000033c
     770:	e000e100 	.word	0xe000e100

00000774 <CAN1_Handler>:

/*
 * \brief CAN interrupt handler
 */
void CAN1_Handler(void)
{
     774:	b570      	push	{r4, r5, r6, lr}
	struct _can_async_device *dev = _can1_dev;
     776:	4b1a      	ldr	r3, [pc, #104]	; (7e0 <CAN1_Handler+0x6c>)
     778:	681d      	ldr	r5, [r3, #0]
	uint32_t                  ir;
	ir = hri_can_read_IR_reg(dev->hw);
     77a:	682b      	ldr	r3, [r5, #0]
	return ((Can *)hw)->IR.reg;
     77c:	6d1c      	ldr	r4, [r3, #80]	; 0x50

	if (ir & CAN_IR_RF0N) {
     77e:	07e3      	lsls	r3, r4, #31
     780:	d414      	bmi.n	7ac <CAN1_Handler+0x38>
		dev->cb.rx_done(dev);
	}

	if (ir & CAN_IR_TC) {
     782:	05a3      	lsls	r3, r4, #22
     784:	d416      	bmi.n	7b4 <CAN1_Handler+0x40>
		dev->cb.tx_done(dev);
	}

	if (ir & CAN_IR_BO) {
     786:	01a3      	lsls	r3, r4, #6
     788:	d418      	bmi.n	7bc <CAN1_Handler+0x48>
		dev->cb.irq_handler(dev, CAN_IRQ_BO);
	}

	if (ir & CAN_IR_EW) {
     78a:	01e3      	lsls	r3, r4, #7
     78c:	d41b      	bmi.n	7c6 <CAN1_Handler+0x52>
		dev->cb.irq_handler(dev, CAN_IRQ_EW);
	}

	if (ir & CAN_IR_EP) {
     78e:	0223      	lsls	r3, r4, #8
     790:	d507      	bpl.n	7a2 <CAN1_Handler+0x2e>
		dev->cb.irq_handler(dev, hri_can_get_PSR_EP_bit(dev->hw) ? CAN_IRQ_EP : CAN_IRQ_EA);
     792:	68eb      	ldr	r3, [r5, #12]
     794:	682a      	ldr	r2, [r5, #0]
	return (((Can *)hw)->PSR.reg & CAN_PSR_EP) >> CAN_PSR_EP_Pos;
     796:	6c52      	ldr	r2, [r2, #68]	; 0x44
     798:	0692      	lsls	r2, r2, #26
     79a:	d519      	bpl.n	7d0 <CAN1_Handler+0x5c>
     79c:	2102      	movs	r1, #2
     79e:	0028      	movs	r0, r5
     7a0:	4798      	blx	r3
	}

	if (ir & CAN_IR_RF0L) {
     7a2:	0723      	lsls	r3, r4, #28
     7a4:	d416      	bmi.n	7d4 <CAN1_Handler+0x60>
		dev->cb.irq_handler(dev, CAN_IRQ_DO);
	}

	hri_can_write_IR_reg(dev->hw, ir);
     7a6:	682b      	ldr	r3, [r5, #0]
	((Can *)hw)->IR.reg = data;
     7a8:	651c      	str	r4, [r3, #80]	; 0x50
}
     7aa:	bd70      	pop	{r4, r5, r6, pc}
		dev->cb.rx_done(dev);
     7ac:	0028      	movs	r0, r5
     7ae:	68ab      	ldr	r3, [r5, #8]
     7b0:	4798      	blx	r3
     7b2:	e7e6      	b.n	782 <CAN1_Handler+0xe>
		dev->cb.tx_done(dev);
     7b4:	0028      	movs	r0, r5
     7b6:	686b      	ldr	r3, [r5, #4]
     7b8:	4798      	blx	r3
     7ba:	e7e4      	b.n	786 <CAN1_Handler+0x12>
		dev->cb.irq_handler(dev, CAN_IRQ_BO);
     7bc:	2103      	movs	r1, #3
     7be:	0028      	movs	r0, r5
     7c0:	68eb      	ldr	r3, [r5, #12]
     7c2:	4798      	blx	r3
     7c4:	e7e1      	b.n	78a <CAN1_Handler+0x16>
		dev->cb.irq_handler(dev, CAN_IRQ_EW);
     7c6:	2100      	movs	r1, #0
     7c8:	0028      	movs	r0, r5
     7ca:	68eb      	ldr	r3, [r5, #12]
     7cc:	4798      	blx	r3
     7ce:	e7de      	b.n	78e <CAN1_Handler+0x1a>
		dev->cb.irq_handler(dev, hri_can_get_PSR_EP_bit(dev->hw) ? CAN_IRQ_EP : CAN_IRQ_EA);
     7d0:	2101      	movs	r1, #1
     7d2:	e7e4      	b.n	79e <CAN1_Handler+0x2a>
		dev->cb.irq_handler(dev, CAN_IRQ_DO);
     7d4:	2104      	movs	r1, #4
     7d6:	0028      	movs	r0, r5
     7d8:	68eb      	ldr	r3, [r5, #12]
     7da:	4798      	blx	r3
     7dc:	e7e3      	b.n	7a6 <CAN1_Handler+0x32>
     7de:	46c0      	nop			; (mov r8, r8)
     7e0:	20000208 	.word	0x20000208

000007e4 <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
     7e4:	b510      	push	{r4, lr}
}

static inline void hri_nvmctrl_set_CTRLB_RWS_bf(const void *const hw, hri_nvmctrl_ctrlb_reg_t mask)
{
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLB.reg |= NVMCTRL_CTRLB_RWS(mask);
     7e6:	4a09      	ldr	r2, [pc, #36]	; (80c <_init_chip+0x28>)
     7e8:	6853      	ldr	r3, [r2, #4]
     7ea:	2104      	movs	r1, #4
     7ec:	430b      	orrs	r3, r1
     7ee:	6053      	str	r3, [r2, #4]
	hri_nvmctrl_set_CTRLB_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);

	_osc32kctrl_init_sources();
     7f0:	4b07      	ldr	r3, [pc, #28]	; (810 <_init_chip+0x2c>)
     7f2:	4798      	blx	r3
	_oscctrl_init_sources();
     7f4:	4b07      	ldr	r3, [pc, #28]	; (814 <_init_chip+0x30>)
     7f6:	4798      	blx	r3
	_mclk_init();
     7f8:	4b07      	ldr	r3, [pc, #28]	; (818 <_init_chip+0x34>)
     7fa:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
#endif
	_oscctrl_init_referenced_generators();
     7fc:	4b07      	ldr	r3, [pc, #28]	; (81c <_init_chip+0x38>)
     7fe:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
     800:	20ff      	movs	r0, #255	; 0xff
     802:	4b07      	ldr	r3, [pc, #28]	; (820 <_init_chip+0x3c>)
     804:	4798      	blx	r3

	_div_init();
     806:	4b07      	ldr	r3, [pc, #28]	; (824 <_init_chip+0x40>)
     808:	4798      	blx	r3
#endif

#if (CONF_PORT_EVCTRL_PORT_0 | CONF_PORT_EVCTRL_PORT_1 | CONF_PORT_EVCTRL_PORT_2 | CONF_PORT_EVCTRL_PORT_3)
	_port_event_init();
#endif
}
     80a:	bd10      	pop	{r4, pc}
     80c:	41004000 	.word	0x41004000
     810:	0000096d 	.word	0x0000096d
     814:	00000991 	.word	0x00000991
     818:	000008cd 	.word	0x000008cd
     81c:	00000995 	.word	0x00000995
     820:	000008a9 	.word	0x000008a9
     824:	00000829 	.word	0x00000829

00000828 <_div_init>:

static inline void hri_divas_write_CTRLA_DLZ_bit(const void *const hw, bool value)
{
	uint8_t tmp;
	DIVAS_CRITICAL_SECTION_ENTER();
	tmp = ((Divas *)hw)->CTRLA.reg;
     828:	2290      	movs	r2, #144	; 0x90
     82a:	05d2      	lsls	r2, r2, #23
     82c:	7813      	ldrb	r3, [r2, #0]
	tmp &= ~DIVAS_CTRLA_DLZ;
     82e:	2102      	movs	r1, #2
     830:	438b      	bics	r3, r1
	tmp |= value << DIVAS_CTRLA_DLZ_Pos;
	((Divas *)hw)->CTRLA.reg = tmp;
     832:	7013      	strb	r3, [r2, #0]
 * \brief Initialize hardware for division operation
 */
void _div_init(void)
{
	hri_divas_write_CTRLA_DLZ_bit(DIVAS, CONF_DIVAS_DLZ);
}
     834:	4770      	bx	lr

00000836 <__aeabi_uidiv>:

/**
 * \brief Do unsigned division
 */
uint32_t __aeabi_uidiv(uint32_t numerator, uint32_t denominator)
{
     836:	b510      	push	{r4, lr}
     838:	b082      	sub	sp, #8
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
     83a:	f3ef 8310 	mrs	r3, PRIMASK
	uint32_t res;
	_DIVAS_CRITICAL_ENTER();
     83e:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
     840:	b672      	cpsid	i
	DIVAS->CTRLA.bit.SIGNED = s;
     842:	2390      	movs	r3, #144	; 0x90
     844:	05db      	lsls	r3, r3, #23
     846:	781a      	ldrb	r2, [r3, #0]
     848:	2401      	movs	r4, #1
     84a:	43a2      	bics	r2, r4
     84c:	701a      	strb	r2, [r3, #0]
	DIVAS->DIVIDEND.reg     = n;
     84e:	6098      	str	r0, [r3, #8]
	DIVAS->DIVISOR.reg      = d;
     850:	60d9      	str	r1, [r3, #12]
	while (DIVAS->STATUS.bit.BUSY) {
     852:	2390      	movs	r3, #144	; 0x90
     854:	05db      	lsls	r3, r3, #23
     856:	791b      	ldrb	r3, [r3, #4]
     858:	07db      	lsls	r3, r3, #31
     85a:	d4fa      	bmi.n	852 <__aeabi_uidiv+0x1c>
	_divas_div(0, numerator, denominator);
	res = _divas_result32();
     85c:	2390      	movs	r3, #144	; 0x90
     85e:	05db      	lsls	r3, r3, #23
     860:	6918      	ldr	r0, [r3, #16]
	_DIVAS_CRITICAL_LEAVE();
     862:	9b01      	ldr	r3, [sp, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
     864:	f383 8810 	msr	PRIMASK, r3
	return res;
}
     868:	b002      	add	sp, #8
     86a:	bd10      	pop	{r4, pc}

0000086c <__aeabi_uidivmod>:

/**
 * \brief Do unsigned division, return result and remainder
 */
uint64_t __aeabi_uidivmod(unsigned numerator, unsigned denominator)
{
     86c:	b510      	push	{r4, lr}
     86e:	b082      	sub	sp, #8
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
     870:	f3ef 8310 	mrs	r3, PRIMASK
	uint64_t res;
	_DIVAS_CRITICAL_ENTER();
     874:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
     876:	b672      	cpsid	i
	DIVAS->CTRLA.bit.SIGNED = s;
     878:	2390      	movs	r3, #144	; 0x90
     87a:	05db      	lsls	r3, r3, #23
     87c:	781a      	ldrb	r2, [r3, #0]
     87e:	2401      	movs	r4, #1
     880:	43a2      	bics	r2, r4
     882:	701a      	strb	r2, [r3, #0]
	DIVAS->DIVIDEND.reg     = n;
     884:	6098      	str	r0, [r3, #8]
	DIVAS->DIVISOR.reg      = d;
     886:	60d9      	str	r1, [r3, #12]
	while (DIVAS->STATUS.bit.BUSY) {
     888:	2390      	movs	r3, #144	; 0x90
     88a:	05db      	lsls	r3, r3, #23
     88c:	791b      	ldrb	r3, [r3, #4]
     88e:	07db      	lsls	r3, r3, #31
     890:	d4fa      	bmi.n	888 <__aeabi_uidivmod+0x1c>
	_divas_div(0, numerator, denominator);
	res = _divas_result64();
     892:	4b04      	ldr	r3, [pc, #16]	; (8a4 <__aeabi_uidivmod+0x38>)
     894:	6818      	ldr	r0, [r3, #0]
     896:	6859      	ldr	r1, [r3, #4]
	_DIVAS_CRITICAL_LEAVE();
     898:	9b01      	ldr	r3, [sp, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
     89a:	f383 8810 	msr	PRIMASK, r3
	return res;
}
     89e:	b002      	add	sp, #8
     8a0:	bd10      	pop	{r4, pc}
     8a2:	46c0      	nop			; (mov r8, r8)
     8a4:	48000010 	.word	0x48000010

000008a8 <_gclk_init_generators_by_fref>:

void _gclk_init_generators_by_fref(uint32_t bm)
{

#if CONF_GCLK_GENERATOR_0_CONFIG == 1
	if (bm & (1ul << 0)) {
     8a8:	07c3      	lsls	r3, r0, #31
     8aa:	d507      	bpl.n	8bc <_gclk_init_generators_by_fref+0x14>
	((Gclk *)hw)->GENCTRL[index].reg = data;
     8ac:	4a04      	ldr	r2, [pc, #16]	; (8c0 <_gclk_init_generators_by_fref+0x18>)
     8ae:	4b05      	ldr	r3, [pc, #20]	; (8c4 <_gclk_init_generators_by_fref+0x1c>)
     8b0:	621a      	str	r2, [r3, #32]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
     8b2:	4b04      	ldr	r3, [pc, #16]	; (8c4 <_gclk_init_generators_by_fref+0x1c>)
     8b4:	685a      	ldr	r2, [r3, #4]
     8b6:	4b04      	ldr	r3, [pc, #16]	; (8c8 <_gclk_init_generators_by_fref+0x20>)
     8b8:	421a      	tst	r2, r3
     8ba:	d1fa      	bne.n	8b2 <_gclk_init_generators_by_fref+0xa>
		        | (CONF_GCLK_GEN_8_DIVSEL << GCLK_GENCTRL_DIVSEL_Pos) | (CONF_GCLK_GEN_8_OE << GCLK_GENCTRL_OE_Pos)
		        | (CONF_GCLK_GEN_8_OOV << GCLK_GENCTRL_OOV_Pos) | (CONF_GCLK_GEN_8_IDC << GCLK_GENCTRL_IDC_Pos)
		        | (CONF_GCLK_GENERATOR_8_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_8_SOURCE);
	}
#endif
}
     8bc:	4770      	bx	lr
     8be:	46c0      	nop			; (mov r8, r8)
     8c0:	00010107 	.word	0x00010107
     8c4:	40001c00 	.word	0x40001c00
     8c8:	000007fd 	.word	0x000007fd

000008cc <_mclk_init>:
	((Mclk *)hw)->CPUDIV.reg = data;
     8cc:	2201      	movs	r2, #1
     8ce:	4b01      	ldr	r3, [pc, #4]	; (8d4 <_mclk_init+0x8>)
     8d0:	711a      	strb	r2, [r3, #4]
 */
void _mclk_init(void)
{
	void *hw = (void *)MCLK;
	hri_mclk_write_CPUDIV_reg(hw, MCLK_CPUDIV_CPUDIV(CONF_MCLK_CPUDIV));
}
     8d2:	4770      	bx	lr
     8d4:	40000800 	.word	0x40000800

000008d8 <_flash_init>:

/**
 * \brief Initialize NVM
 */
int32_t _flash_init(struct _flash_device *const device, void *const hw)
{
     8d8:	b570      	push	{r4, r5, r6, lr}
     8da:	0005      	movs	r5, r0
     8dc:	000c      	movs	r4, r1
	ASSERT(device && (hw == NVMCTRL));
     8de:	2800      	cmp	r0, #0
     8e0:	d01c      	beq.n	91c <_flash_init+0x44>
     8e2:	4b10      	ldr	r3, [pc, #64]	; (924 <_flash_init+0x4c>)
     8e4:	4299      	cmp	r1, r3
     8e6:	d01b      	beq.n	920 <_flash_init+0x48>
     8e8:	2000      	movs	r0, #0
     8ea:	2246      	movs	r2, #70	; 0x46
     8ec:	490e      	ldr	r1, [pc, #56]	; (928 <_flash_init+0x50>)
     8ee:	4b0f      	ldr	r3, [pc, #60]	; (92c <_flash_init+0x54>)
     8f0:	4798      	blx	r3
	uint32_t ctrlb;

	device->hw = hw;
     8f2:	612c      	str	r4, [r5, #16]
}

static inline hri_nvmctrl_ctrlb_reg_t hri_nvmctrl_get_CTRLB_reg(const void *const hw, hri_nvmctrl_ctrlb_reg_t mask)
{
	uint32_t tmp;
	tmp = ((Nvmctrl *)hw)->CTRLB.reg;
     8f4:	6862      	ldr	r2, [r4, #4]
	tmp &= mask;
     8f6:	239e      	movs	r3, #158	; 0x9e
     8f8:	4013      	ands	r3, r2
}

static inline void hri_nvmctrl_write_CTRLB_reg(const void *const hw, hri_nvmctrl_ctrlb_reg_t data)
{
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLB.reg = data;
     8fa:	6063      	str	r3, [r4, #4]
	ctrlb      = _nvm.ctrlb & ~(NVMCTRL_CTRLB_RWS_Msk | NVMCTRL_CTRLB_MANW);
	ctrlb |= hri_nvmctrl_get_CTRLB_reg(device->hw, NVMCTRL_CTRLB_RWS_Msk | NVMCTRL_CTRLB_MANW);
	hri_nvmctrl_write_CTRLB_reg(device->hw, ctrlb);

	_nvm_dev = device;
     8fc:	4b0c      	ldr	r3, [pc, #48]	; (930 <_flash_init+0x58>)
     8fe:	601d      	str	r5, [r3, #0]
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     900:	4b0c      	ldr	r3, [pc, #48]	; (934 <_flash_init+0x5c>)
     902:	2240      	movs	r2, #64	; 0x40
     904:	2180      	movs	r1, #128	; 0x80
     906:	505a      	str	r2, [r3, r1]
  __ASM volatile ("dsb 0xF":::"memory");
     908:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
     90c:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     910:	3101      	adds	r1, #1
     912:	31ff      	adds	r1, #255	; 0xff
     914:	505a      	str	r2, [r3, r1]
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     916:	601a      	str	r2, [r3, #0]
	NVIC_DisableIRQ(NVMCTRL_IRQn);
	NVIC_ClearPendingIRQ(NVMCTRL_IRQn);
	NVIC_EnableIRQ(NVMCTRL_IRQn);
	return ERR_NONE;
}
     918:	2000      	movs	r0, #0
     91a:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(device && (hw == NVMCTRL));
     91c:	2000      	movs	r0, #0
     91e:	e7e4      	b.n	8ea <_flash_init+0x12>
     920:	2001      	movs	r0, #1
     922:	e7e2      	b.n	8ea <_flash_init+0x12>
     924:	41004000 	.word	0x41004000
     928:	000020ec 	.word	0x000020ec
     92c:	00000629 	.word	0x00000629
     930:	20000234 	.word	0x20000234
     934:	e000e100 	.word	0xe000e100

00000938 <_flash_get_page_size>:
 */
uint32_t _flash_get_page_size(struct _flash_device *const device)
{
	(void)device;
	return (uint32_t)NVMCTRL_PAGE_SIZE;
}
     938:	2040      	movs	r0, #64	; 0x40
     93a:	4770      	bx	lr

0000093c <NVMCTRL_Handler>:

/**
 * \internal NVM interrupt handler
 */
void NVMCTRL_Handler(void)
{
     93c:	b510      	push	{r4, lr}
	void *const hw = _nvm_dev->hw;
     93e:	4b0a      	ldr	r3, [pc, #40]	; (968 <NVMCTRL_Handler+0x2c>)
     940:	6818      	ldr	r0, [r3, #0]
     942:	6903      	ldr	r3, [r0, #16]
	return (((Nvmctrl *)hw)->INTFLAG.reg & NVMCTRL_INTFLAG_READY) >> NVMCTRL_INTFLAG_READY_Pos;
     944:	7d1a      	ldrb	r2, [r3, #20]

	if (hri_nvmctrl_get_interrupt_READY_bit(hw)) {
     946:	07d2      	lsls	r2, r2, #31
     948:	d504      	bpl.n	954 <NVMCTRL_Handler+0x18>
		if (NULL != _nvm_dev->flash_cb.ready_cb) {
     94a:	6803      	ldr	r3, [r0, #0]
     94c:	2b00      	cmp	r3, #0
     94e:	d000      	beq.n	952 <NVMCTRL_Handler+0x16>
			_nvm_dev->flash_cb.ready_cb(_nvm_dev);
     950:	4798      	blx	r3
		hri_nvmctrl_clear_interrupt_ERROR_bit(hw);
		if (NULL != _nvm_dev->flash_cb.error_cb) {
			_nvm_dev->flash_cb.error_cb(_nvm_dev);
		}
	}
}
     952:	bd10      	pop	{r4, pc}
	return (((Nvmctrl *)hw)->INTFLAG.reg & NVMCTRL_INTFLAG_ERROR) >> NVMCTRL_INTFLAG_ERROR_Pos;
     954:	7d1a      	ldrb	r2, [r3, #20]
	} else if (hri_nvmctrl_get_interrupt_ERROR_bit(hw)) {
     956:	0792      	lsls	r2, r2, #30
     958:	d5fb      	bpl.n	952 <NVMCTRL_Handler+0x16>
	((Nvmctrl *)hw)->INTFLAG.reg = NVMCTRL_INTFLAG_ERROR;
     95a:	2202      	movs	r2, #2
     95c:	751a      	strb	r2, [r3, #20]
		if (NULL != _nvm_dev->flash_cb.error_cb) {
     95e:	6843      	ldr	r3, [r0, #4]
     960:	2b00      	cmp	r3, #0
     962:	d0f6      	beq.n	952 <NVMCTRL_Handler+0x16>
			_nvm_dev->flash_cb.error_cb(_nvm_dev);
     964:	4798      	blx	r3
}
     966:	e7f4      	b.n	952 <NVMCTRL_Handler+0x16>
     968:	20000234 	.word	0x20000234

0000096c <_osc32kctrl_init_sources>:
}

static inline void hri_osc32kctrl_write_XOSC32K_reg(const void *const hw, hri_osc32kctrl_xosc32k_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->XOSC32K.reg = data;
     96c:	4a07      	ldr	r2, [pc, #28]	; (98c <_osc32kctrl_init_sources+0x20>)
     96e:	238e      	movs	r3, #142	; 0x8e
     970:	8293      	strh	r3, [r2, #20]
}

static inline void hri_osc32kctrl_write_CFDCTRL_reg(const void *const hw, hri_osc32kctrl_cfdctrl_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->CFDCTRL.reg = data;
     972:	2300      	movs	r3, #0
     974:	7593      	strb	r3, [r2, #22]
}

static inline void hri_osc32kctrl_write_EVCTRL_reg(const void *const hw, hri_osc32kctrl_evctrl_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->EVCTRL.reg = data;
     976:	75d3      	strb	r3, [r2, #23]
}

static inline hri_osc32kctrl_osculp32k_reg_t hri_osc32kctrl_read_OSCULP32K_CALIB_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Osc32kctrl *)hw)->OSCULP32K.reg;
     978:	69d3      	ldr	r3, [r2, #28]
	tmp = (tmp & OSC32KCTRL_OSCULP32K_CALIB_Msk) >> OSC32KCTRL_OSCULP32K_CALIB_Pos;
     97a:	0a1b      	lsrs	r3, r3, #8
	calib = hri_osc32kctrl_read_OSCULP32K_CALIB_bf(hw);
	hri_osc32kctrl_write_OSCULP32K_reg(hw,
#if CONF_OSC32K_CALIB_ENABLE == 1
	                                   OSC32KCTRL_OSCULP32K_CALIB(CONF_OSC32K_CALIB)
#else
	                                   OSC32KCTRL_OSCULP32K_CALIB(calib)
     97c:	021b      	lsls	r3, r3, #8
     97e:	21f8      	movs	r1, #248	; 0xf8
     980:	0149      	lsls	r1, r1, #5
     982:	400b      	ands	r3, r1
}

static inline void hri_osc32kctrl_write_OSCULP32K_reg(const void *const hw, hri_osc32kctrl_osculp32k_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->OSCULP32K.reg = data;
     984:	61d3      	str	r3, [r2, #28]
	((Osc32kctrl *)hw)->RTCCTRL.reg = data;
     986:	2301      	movs	r3, #1
     988:	6113      	str	r3, [r2, #16]
		;
#endif
#endif
	hri_osc32kctrl_write_RTCCTRL_reg(hw, OSC32KCTRL_RTCCTRL_RTCSEL(CONF_RTCCTRL));
	(void)calib;
}
     98a:	4770      	bx	lr
     98c:	40001400 	.word	0x40001400

00000990 <_oscctrl_init_sources>:
#if CONF_OSC48M_ONDEMAND == 1
	hri_oscctrl_set_OSC48MCTRL_ONDEMAND_bit(hw);
#endif
#endif
	(void)hw;
}
     990:	4770      	bx	lr
	...

00000994 <_oscctrl_init_referenced_generators>:
}

static inline void hri_oscctrl_write_DPLLRATIO_reg(const void *const hw, hri_oscctrl_dpllratio_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DPLLRATIO.reg = data;
     994:	4a19      	ldr	r2, [pc, #100]	; (9fc <_oscctrl_init_referenced_generators+0x68>)
     996:	4b1a      	ldr	r3, [pc, #104]	; (a00 <_oscctrl_init_referenced_generators+0x6c>)
     998:	621a      	str	r2, [r3, #32]
	while (((Oscctrl *)hw)->DPLLSYNCBUSY.reg & reg) {
     99a:	232c      	movs	r3, #44	; 0x2c
     99c:	4a18      	ldr	r2, [pc, #96]	; (a00 <_oscctrl_init_referenced_generators+0x6c>)
     99e:	5cd2      	ldrb	r2, [r2, r3]
     9a0:	3b1e      	subs	r3, #30
     9a2:	421a      	tst	r2, r3
     9a4:	d1f9      	bne.n	99a <_oscctrl_init_referenced_generators+0x6>
}

static inline void hri_oscctrl_write_DPLLCTRLB_reg(const void *const hw, hri_oscctrl_dpllctrlb_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DPLLCTRLB.reg = data;
     9a6:	4b16      	ldr	r3, [pc, #88]	; (a00 <_oscctrl_init_referenced_generators+0x6c>)
     9a8:	2200      	movs	r2, #0
     9aa:	625a      	str	r2, [r3, #36]	; 0x24
}

static inline void hri_oscctrl_write_DPLLPRESC_reg(const void *const hw, hri_oscctrl_dpllpresc_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DPLLPRESC.reg = data;
     9ac:	2128      	movs	r1, #40	; 0x28
     9ae:	545a      	strb	r2, [r3, r1]
	while (((Oscctrl *)hw)->DPLLSYNCBUSY.reg & reg) {
     9b0:	232c      	movs	r3, #44	; 0x2c
     9b2:	4a13      	ldr	r2, [pc, #76]	; (a00 <_oscctrl_init_referenced_generators+0x6c>)
     9b4:	5cd2      	ldrb	r2, [r2, r3]
     9b6:	3b1e      	subs	r3, #30
     9b8:	421a      	tst	r2, r3
     9ba:	d1f9      	bne.n	9b0 <_oscctrl_init_referenced_generators+0x1c>
	((Oscctrl *)hw)->DPLLCTRLA.reg = data;
     9bc:	2202      	movs	r2, #2
     9be:	4b10      	ldr	r3, [pc, #64]	; (a00 <_oscctrl_init_referenced_generators+0x6c>)
     9c0:	771a      	strb	r2, [r3, #28]
	while (((Oscctrl *)hw)->DPLLSYNCBUSY.reg & reg) {
     9c2:	232c      	movs	r3, #44	; 0x2c
     9c4:	4a0e      	ldr	r2, [pc, #56]	; (a00 <_oscctrl_init_referenced_generators+0x6c>)
     9c6:	5cd3      	ldrb	r3, [r2, r3]
     9c8:	079b      	lsls	r3, r3, #30
     9ca:	d4fa      	bmi.n	9c2 <_oscctrl_init_referenced_generators+0x2e>
	return (((Oscctrl *)hw)->DPLLSTATUS.reg & OSCCTRL_DPLLSTATUS_LOCK) >> OSCCTRL_DPLLSTATUS_LOCK_Pos;
     9cc:	2330      	movs	r3, #48	; 0x30
     9ce:	4a0c      	ldr	r2, [pc, #48]	; (a00 <_oscctrl_init_referenced_generators+0x6c>)
     9d0:	5cd3      	ldrb	r3, [r2, r3]
	                                    | (CONF_DPLL_ENABLE << OSCCTRL_DPLLCTRLA_ENABLE_Pos));
#endif

#if CONF_DPLL_CONFIG == 1
#if CONF_DPLL_ENABLE == 1
	while (!(hri_oscctrl_get_DPLLSTATUS_LOCK_bit(hw) || hri_oscctrl_get_DPLLSTATUS_CLKRDY_bit(hw)))
     9d2:	07db      	lsls	r3, r3, #31
     9d4:	d403      	bmi.n	9de <_oscctrl_init_referenced_generators+0x4a>
	return (((Oscctrl *)hw)->DPLLSTATUS.reg & OSCCTRL_DPLLSTATUS_CLKRDY) >> OSCCTRL_DPLLSTATUS_CLKRDY_Pos;
     9d6:	2330      	movs	r3, #48	; 0x30
     9d8:	5cd3      	ldrb	r3, [r2, r3]
     9da:	079b      	lsls	r3, r3, #30
     9dc:	d5f6      	bpl.n	9cc <_oscctrl_init_referenced_generators+0x38>
	((Oscctrl *)hw)->DPLLCTRLA.reg |= OSCCTRL_DPLLCTRLA_ONDEMAND;
     9de:	4a08      	ldr	r2, [pc, #32]	; (a00 <_oscctrl_init_referenced_generators+0x6c>)
     9e0:	7f13      	ldrb	r3, [r2, #28]
     9e2:	2180      	movs	r1, #128	; 0x80
     9e4:	4249      	negs	r1, r1
     9e6:	430b      	orrs	r3, r1
     9e8:	b2db      	uxtb	r3, r3
     9ea:	7713      	strb	r3, [r2, #28]
	while (((Oscctrl *)hw)->DPLLSYNCBUSY.reg & reg) {
     9ec:	232c      	movs	r3, #44	; 0x2c
     9ee:	4a04      	ldr	r2, [pc, #16]	; (a00 <_oscctrl_init_referenced_generators+0x6c>)
     9f0:	5cd2      	ldrb	r2, [r2, r3]
     9f2:	3b1e      	subs	r3, #30
     9f4:	421a      	tst	r2, r3
     9f6:	d1f9      	bne.n	9ec <_oscctrl_init_referenced_generators+0x58>
#if CONF_DPLL_ONDEMAND == 1
	hri_oscctrl_set_DPLLCTRLA_ONDEMAND_bit(hw);
#endif
#endif
	(void)hw;
}
     9f8:	4770      	bx	lr
     9fa:	46c0      	nop			; (mov r8, r8)
     9fc:	000d05b7 	.word	0x000d05b7
     a00:	40001000 	.word	0x40001000

00000a04 <_sercom_get_hardware_index>:

/**
 * \brief Retrieve ordinal number of the given sercom hardware instance
 */
static uint8_t _sercom_get_hardware_index(const void *const hw)
{
     a04:	b530      	push	{r4, r5, lr}
     a06:	b089      	sub	sp, #36	; 0x24
	Sercom *const sercom_modules[] = SERCOM_INSTS;
     a08:	4c0b      	ldr	r4, [pc, #44]	; (a38 <_sercom_get_hardware_index+0x34>)
     a0a:	466b      	mov	r3, sp
     a0c:	0022      	movs	r2, r4
     a0e:	ca32      	ldmia	r2!, {r1, r4, r5}
     a10:	c332      	stmia	r3!, {r1, r4, r5}
     a12:	ca32      	ldmia	r2!, {r1, r4, r5}
     a14:	c332      	stmia	r3!, {r1, r4, r5}
     a16:	ca12      	ldmia	r2!, {r1, r4}
     a18:	c312      	stmia	r3!, {r1, r4}
	/* Find index for SERCOM instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     a1a:	2300      	movs	r3, #0
     a1c:	2b07      	cmp	r3, #7
     a1e:	d808      	bhi.n	a32 <_sercom_get_hardware_index+0x2e>
		if ((uint32_t)hw == (uint32_t)sercom_modules[i]) {
     a20:	009a      	lsls	r2, r3, #2
     a22:	4669      	mov	r1, sp
     a24:	5852      	ldr	r2, [r2, r1]
     a26:	4282      	cmp	r2, r0
     a28:	d001      	beq.n	a2e <_sercom_get_hardware_index+0x2a>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     a2a:	3301      	adds	r3, #1
     a2c:	e7f6      	b.n	a1c <_sercom_get_hardware_index+0x18>
			return i;
     a2e:	b2d8      	uxtb	r0, r3
     a30:	e000      	b.n	a34 <_sercom_get_hardware_index+0x30>
		}
	}
	return 0;
     a32:	2000      	movs	r0, #0
}
     a34:	b009      	add	sp, #36	; 0x24
     a36:	bd30      	pop	{r4, r5, pc}
     a38:	0000210c 	.word	0x0000210c

00000a3c <_get_sercom_index>:
 * \param[in] hw The pointer to hardware instance

 * \return The ordinal number of the given sercom hardware instance
 */
static uint8_t _get_sercom_index(const void *const hw)
{
     a3c:	b510      	push	{r4, lr}
	uint8_t sercom_offset = _sercom_get_hardware_index(hw);
     a3e:	4b0c      	ldr	r3, [pc, #48]	; (a70 <_get_sercom_index+0x34>)
     a40:	4798      	blx	r3
     a42:	0002      	movs	r2, r0
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_usarts); i++) {
     a44:	2000      	movs	r0, #0
     a46:	2800      	cmp	r0, #0
     a48:	d006      	beq.n	a58 <_get_sercom_index+0x1c>
		if (_usarts[i].number == sercom_offset) {
			return i;
		}
	}

	ASSERT(false);
     a4a:	4a0a      	ldr	r2, [pc, #40]	; (a74 <_get_sercom_index+0x38>)
     a4c:	490a      	ldr	r1, [pc, #40]	; (a78 <_get_sercom_index+0x3c>)
     a4e:	2000      	movs	r0, #0
     a50:	4b0a      	ldr	r3, [pc, #40]	; (a7c <_get_sercom_index+0x40>)
     a52:	4798      	blx	r3
	return 0;
     a54:	2000      	movs	r0, #0
}
     a56:	bd10      	pop	{r4, pc}
		if (_usarts[i].number == sercom_offset) {
     a58:	0083      	lsls	r3, r0, #2
     a5a:	181b      	adds	r3, r3, r0
     a5c:	0099      	lsls	r1, r3, #2
     a5e:	4b08      	ldr	r3, [pc, #32]	; (a80 <_get_sercom_index+0x44>)
     a60:	185b      	adds	r3, r3, r1
     a62:	2120      	movs	r1, #32
     a64:	5c5b      	ldrb	r3, [r3, r1]
     a66:	429a      	cmp	r2, r3
     a68:	d0f5      	beq.n	a56 <_get_sercom_index+0x1a>
	for (i = 0; i < ARRAY_SIZE(_usarts); i++) {
     a6a:	3001      	adds	r0, #1
     a6c:	b2c0      	uxtb	r0, r0
     a6e:	e7ea      	b.n	a46 <_get_sercom_index+0xa>
     a70:	00000a05 	.word	0x00000a05
     a74:	0000023d 	.word	0x0000023d
     a78:	0000217c 	.word	0x0000217c
     a7c:	00000629 	.word	0x00000629
     a80:	0000210c 	.word	0x0000210c

00000a84 <_usart_init>:
 * \param[in] hw The pointer to hardware instance
 *
 * \return The status of initialization
 */
static int32_t _usart_init(void *const hw)
{
     a84:	b570      	push	{r4, r5, r6, lr}
     a86:	0004      	movs	r4, r0
	uint8_t i = _get_sercom_index(hw);
     a88:	4b3b      	ldr	r3, [pc, #236]	; (b78 <_usart_init+0xf4>)
     a8a:	4798      	blx	r3
	};
}

static inline bool hri_sercomusart_is_syncing(const void *const hw, hri_sercomusart_syncbusy_reg_t reg)
{
	return ((Sercom *)hw)->USART.SYNCBUSY.reg & reg;
     a8c:	69e3      	ldr	r3, [r4, #28]

	if (!hri_sercomusart_is_syncing(hw, SERCOM_USART_SYNCBUSY_SWRST)) {
     a8e:	07db      	lsls	r3, r3, #31
     a90:	d41d      	bmi.n	ace <_usart_init+0x4a>
		uint32_t mode = _usarts[i].ctrl_a & SERCOM_USART_CTRLA_MODE_Msk;
     a92:	0083      	lsls	r3, r0, #2
     a94:	181b      	adds	r3, r3, r0
     a96:	009a      	lsls	r2, r3, #2
     a98:	4b38      	ldr	r3, [pc, #224]	; (b7c <_usart_init+0xf8>)
     a9a:	189b      	adds	r3, r3, r2
     a9c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
     a9e:	231c      	movs	r3, #28
     aa0:	401a      	ands	r2, r3
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
     aa2:	69e3      	ldr	r3, [r4, #28]
     aa4:	079b      	lsls	r3, r3, #30
     aa6:	d1fc      	bne.n	aa2 <_usart_init+0x1e>
static inline hri_sercomusart_ctrla_reg_t hri_sercomusart_get_CTRLA_reg(const void *const           hw,
                                                                        hri_sercomusart_ctrla_reg_t mask)
{
	uint32_t tmp;
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST | SERCOM_USART_SYNCBUSY_ENABLE);
	tmp = ((Sercom *)hw)->USART.CTRLA.reg;
     aa8:	6823      	ldr	r3, [r4, #0]
		if (hri_sercomusart_get_CTRLA_reg(hw, SERCOM_USART_CTRLA_ENABLE)) {
     aaa:	079b      	lsls	r3, r3, #30
     aac:	d509      	bpl.n	ac2 <_usart_init+0x3e>
	((Sercom *)hw)->USART.CTRLA.reg &= ~SERCOM_USART_CTRLA_ENABLE;
     aae:	6823      	ldr	r3, [r4, #0]
     ab0:	2102      	movs	r1, #2
     ab2:	438b      	bics	r3, r1
     ab4:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
     ab6:	69e3      	ldr	r3, [r4, #28]
     ab8:	079b      	lsls	r3, r3, #30
     aba:	d1fc      	bne.n	ab6 <_usart_init+0x32>
     abc:	69e3      	ldr	r3, [r4, #28]
     abe:	079b      	lsls	r3, r3, #30
     ac0:	d4fc      	bmi.n	abc <_usart_init+0x38>
			hri_sercomusart_clear_CTRLA_ENABLE_bit(hw);
			hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_ENABLE);
		}
		hri_sercomusart_write_CTRLA_reg(hw, SERCOM_USART_CTRLA_SWRST | mode);
     ac2:	2301      	movs	r3, #1
     ac4:	4313      	orrs	r3, r2
}

static inline void hri_sercomusart_write_CTRLA_reg(const void *const hw, hri_sercomusart_ctrla_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLA.reg = data;
     ac6:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
     ac8:	69e3      	ldr	r3, [r4, #28]
     aca:	079b      	lsls	r3, r3, #30
     acc:	d1fc      	bne.n	ac8 <_usart_init+0x44>
     ace:	69e3      	ldr	r3, [r4, #28]
     ad0:	07db      	lsls	r3, r3, #31
     ad2:	d4fc      	bmi.n	ace <_usart_init+0x4a>
	}
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST);

	hri_sercomusart_write_CTRLA_reg(hw, _usarts[i].ctrl_a);
     ad4:	0083      	lsls	r3, r0, #2
     ad6:	181b      	adds	r3, r3, r0
     ad8:	009a      	lsls	r2, r3, #2
     ada:	4b28      	ldr	r3, [pc, #160]	; (b7c <_usart_init+0xf8>)
     adc:	189b      	adds	r3, r3, r2
     ade:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	((Sercom *)hw)->USART.CTRLA.reg = data;
     ae0:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
     ae2:	69e3      	ldr	r3, [r4, #28]
     ae4:	079b      	lsls	r3, r3, #30
     ae6:	d1fc      	bne.n	ae2 <_usart_init+0x5e>
	hri_sercomusart_write_CTRLB_reg(hw, _usarts[i].ctrl_b);
     ae8:	0083      	lsls	r3, r0, #2
     aea:	181b      	adds	r3, r3, r0
     aec:	009a      	lsls	r2, r3, #2
     aee:	4b23      	ldr	r3, [pc, #140]	; (b7c <_usart_init+0xf8>)
     af0:	189b      	adds	r3, r3, r2
     af2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}

static inline void hri_sercomusart_write_CTRLB_reg(const void *const hw, hri_sercomusart_ctrlb_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLB.reg = data;
     af4:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
     af6:	69e3      	ldr	r3, [r4, #28]
     af8:	075b      	lsls	r3, r3, #29
     afa:	d1fc      	bne.n	af6 <_usart_init+0x72>
	if ((_usarts[i].ctrl_a & SERCOM_USART_CTRLA_SAMPR(0x1)) || (_usarts[i].ctrl_a & SERCOM_USART_CTRLA_SAMPR(0x3))) {
     afc:	0083      	lsls	r3, r0, #2
     afe:	181b      	adds	r3, r3, r0
     b00:	009a      	lsls	r2, r3, #2
     b02:	4b1e      	ldr	r3, [pc, #120]	; (b7c <_usart_init+0xf8>)
     b04:	189b      	adds	r3, r3, r2
     b06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
     b08:	049a      	lsls	r2, r3, #18
     b0a:	d40b      	bmi.n	b24 <_usart_init+0xa0>
     b0c:	22c0      	movs	r2, #192	; 0xc0
     b0e:	01d2      	lsls	r2, r2, #7
     b10:	4213      	tst	r3, r2
     b12:	d107      	bne.n	b24 <_usart_init+0xa0>
		((Sercom *)hw)->USART.BAUD.FRAC.BAUD = _usarts[i].baud;
		((Sercom *)hw)->USART.BAUD.FRAC.FP   = _usarts[i].fractional;
	} else {
		hri_sercomusart_write_BAUD_reg(hw, _usarts[i].baud);
     b14:	0083      	lsls	r3, r0, #2
     b16:	181b      	adds	r3, r3, r0
     b18:	009a      	lsls	r2, r3, #2
     b1a:	4b18      	ldr	r3, [pc, #96]	; (b7c <_usart_init+0xf8>)
     b1c:	189b      	adds	r3, r3, r2
     b1e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
}

static inline void hri_sercomusart_write_BAUD_reg(const void *const hw, hri_sercomusart_baud_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.BAUD.reg = data;
     b20:	81a3      	strh	r3, [r4, #12]
     b22:	e019      	b.n	b58 <_usart_init+0xd4>
		((Sercom *)hw)->USART.BAUD.FRAC.BAUD = _usarts[i].baud;
     b24:	4a15      	ldr	r2, [pc, #84]	; (b7c <_usart_init+0xf8>)
     b26:	0081      	lsls	r1, r0, #2
     b28:	180d      	adds	r5, r1, r0
     b2a:	00ab      	lsls	r3, r5, #2
     b2c:	18d3      	adds	r3, r2, r3
     b2e:	8d9d      	ldrh	r5, [r3, #44]	; 0x2c
     b30:	89a3      	ldrh	r3, [r4, #12]
     b32:	04ed      	lsls	r5, r5, #19
     b34:	0ced      	lsrs	r5, r5, #19
     b36:	0b5b      	lsrs	r3, r3, #13
     b38:	035b      	lsls	r3, r3, #13
     b3a:	432b      	orrs	r3, r5
     b3c:	81a3      	strh	r3, [r4, #12]
		((Sercom *)hw)->USART.BAUD.FRAC.FP   = _usarts[i].fractional;
     b3e:	3220      	adds	r2, #32
     b40:	180b      	adds	r3, r1, r0
     b42:	0099      	lsls	r1, r3, #2
     b44:	1852      	adds	r2, r2, r1
     b46:	7b93      	ldrb	r3, [r2, #14]
     b48:	2207      	movs	r2, #7
     b4a:	401a      	ands	r2, r3
     b4c:	89a3      	ldrh	r3, [r4, #12]
     b4e:	0352      	lsls	r2, r2, #13
     b50:	04db      	lsls	r3, r3, #19
     b52:	0cdb      	lsrs	r3, r3, #19
     b54:	4313      	orrs	r3, r2
     b56:	81a3      	strh	r3, [r4, #12]
	}

	hri_sercomusart_write_RXPL_reg(hw, _usarts[i].rxpl);
     b58:	4b08      	ldr	r3, [pc, #32]	; (b7c <_usart_init+0xf8>)
     b5a:	0019      	movs	r1, r3
     b5c:	3120      	adds	r1, #32
     b5e:	0082      	lsls	r2, r0, #2
     b60:	1816      	adds	r6, r2, r0
     b62:	00b5      	lsls	r5, r6, #2
     b64:	1949      	adds	r1, r1, r5
     b66:	7bc9      	ldrb	r1, [r1, #15]
}

static inline void hri_sercomusart_write_RXPL_reg(const void *const hw, hri_sercomusart_rxpl_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.RXPL.reg = data;
     b68:	73a1      	strb	r1, [r4, #14]
	hri_sercomusart_write_DBGCTRL_reg(hw, _usarts[i].debug_ctrl);
     b6a:	195b      	adds	r3, r3, r5
     b6c:	3330      	adds	r3, #48	; 0x30
     b6e:	781a      	ldrb	r2, [r3, #0]
}

static inline void hri_sercomusart_write_DBGCTRL_reg(const void *const hw, hri_sercomusart_dbgctrl_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.DBGCTRL.reg = data;
     b70:	2330      	movs	r3, #48	; 0x30
     b72:	54e2      	strb	r2, [r4, r3]

	return ERR_NONE;
}
     b74:	2000      	movs	r0, #0
     b76:	bd70      	pop	{r4, r5, r6, pc}
     b78:	00000a3d 	.word	0x00000a3d
     b7c:	0000210c 	.word	0x0000210c

00000b80 <_usart_sync_init>:
{
     b80:	b570      	push	{r4, r5, r6, lr}
     b82:	0005      	movs	r5, r0
     b84:	000c      	movs	r4, r1
	ASSERT(device);
     b86:	1e43      	subs	r3, r0, #1
     b88:	4198      	sbcs	r0, r3
     b8a:	b2c0      	uxtb	r0, r0
     b8c:	22b4      	movs	r2, #180	; 0xb4
     b8e:	4904      	ldr	r1, [pc, #16]	; (ba0 <_usart_sync_init+0x20>)
     b90:	4b04      	ldr	r3, [pc, #16]	; (ba4 <_usart_sync_init+0x24>)
     b92:	4798      	blx	r3
	device->hw = hw;
     b94:	602c      	str	r4, [r5, #0]
	return _usart_init(hw);
     b96:	0020      	movs	r0, r4
     b98:	4b03      	ldr	r3, [pc, #12]	; (ba8 <_usart_sync_init+0x28>)
     b9a:	4798      	blx	r3
}
     b9c:	bd70      	pop	{r4, r5, r6, pc}
     b9e:	46c0      	nop			; (mov r8, r8)
     ba0:	0000217c 	.word	0x0000217c
     ba4:	00000629 	.word	0x00000629
     ba8:	00000a85 	.word	0x00000a85

00000bac <_usart_sync_enable>:
	hri_sercomusart_set_CTRLA_ENABLE_bit(device->hw);
     bac:	6802      	ldr	r2, [r0, #0]
	((Sercom *)hw)->USART.CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
     bae:	6813      	ldr	r3, [r2, #0]
     bb0:	2102      	movs	r1, #2
     bb2:	430b      	orrs	r3, r1
     bb4:	6013      	str	r3, [r2, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
     bb6:	69d3      	ldr	r3, [r2, #28]
     bb8:	079b      	lsls	r3, r3, #30
     bba:	d1fc      	bne.n	bb6 <_usart_sync_enable+0xa>
}
     bbc:	4770      	bx	lr

00000bbe <_usart_sync_write_byte>:
	hri_sercomusart_write_DATA_reg(device->hw, data);
     bbe:	6803      	ldr	r3, [r0, #0]
     bc0:	b289      	uxth	r1, r1
	((Sercom *)hw)->USART.DATA.reg = data;
     bc2:	8519      	strh	r1, [r3, #40]	; 0x28
}
     bc4:	4770      	bx	lr

00000bc6 <_usart_sync_read_byte>:
	return hri_sercomusart_read_DATA_reg(device->hw);
     bc6:	6803      	ldr	r3, [r0, #0]
	return ((Sercom *)hw)->USART.DATA.reg;
     bc8:	8d18      	ldrh	r0, [r3, #40]	; 0x28
     bca:	b2c0      	uxtb	r0, r0
}
     bcc:	4770      	bx	lr

00000bce <_usart_sync_is_ready_to_send>:
	return hri_sercomusart_get_interrupt_DRE_bit(device->hw);
     bce:	6803      	ldr	r3, [r0, #0]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) >> SERCOM_USART_INTFLAG_DRE_Pos;
     bd0:	7e18      	ldrb	r0, [r3, #24]
     bd2:	2301      	movs	r3, #1
     bd4:	4018      	ands	r0, r3
}
     bd6:	4770      	bx	lr

00000bd8 <_usart_sync_is_transmit_done>:
	return hri_sercomusart_get_interrupt_TXC_bit(device->hw);
     bd8:	6803      	ldr	r3, [r0, #0]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) >> SERCOM_USART_INTFLAG_TXC_Pos;
     bda:	7e1b      	ldrb	r3, [r3, #24]
     bdc:	085b      	lsrs	r3, r3, #1
     bde:	2001      	movs	r0, #1
     be0:	4018      	ands	r0, r3
}
     be2:	4770      	bx	lr

00000be4 <_usart_sync_is_byte_received>:
	return hri_sercomusart_get_interrupt_RXC_bit(device->hw);
     be4:	6803      	ldr	r3, [r0, #0]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) >> SERCOM_USART_INTFLAG_RXC_Pos;
     be6:	7e1b      	ldrb	r3, [r3, #24]
     be8:	089b      	lsrs	r3, r3, #2
     bea:	2001      	movs	r0, #1
     bec:	4018      	ands	r0, r3
}
     bee:	4770      	bx	lr

00000bf0 <get_flash_page_size>:
* params:
* return:
################################################
*/
int get_flash_page_size()
{
     bf0:	b510      	push	{r4, lr}
    #if BOOTLOADER_EVENT_PRINT_ENABLE
        printf("DRV: Flash Page size ask!\n\r");
    #endif
     //ASF 4 api for get the flash page size
    return flash_get_page_size(&FLASH_0);
     bf2:	4802      	ldr	r0, [pc, #8]	; (bfc <get_flash_page_size+0xc>)
     bf4:	4b02      	ldr	r3, [pc, #8]	; (c00 <get_flash_page_size+0x10>)
     bf6:	4798      	blx	r3
    
    
}
     bf8:	bd10      	pop	{r4, pc}
     bfa:	46c0      	nop			; (mov r8, r8)
     bfc:	200002ec 	.word	0x200002ec
     c00:	000003e1 	.word	0x000003e1

00000c04 <decode_can_data>:
{
     c04:	b510      	push	{r4, lr}
    switch(can.can_id){
     c06:	4b0c      	ldr	r3, [pc, #48]	; (c38 <decode_can_data+0x34>)
     c08:	681b      	ldr	r3, [r3, #0]
     c0a:	2b01      	cmp	r3, #1
     c0c:	d000      	beq.n	c10 <decode_can_data+0xc>
}
     c0e:	bd10      	pop	{r4, pc}
            can.can_id = CAN_START_FLASH_WRITE;
     c10:	4c09      	ldr	r4, [pc, #36]	; (c38 <decode_can_data+0x34>)
     c12:	6023      	str	r3, [r4, #0]
            can.can_data[0] = (uint8_t)get_flash_page_size();
     c14:	4b09      	ldr	r3, [pc, #36]	; (c3c <decode_can_data+0x38>)
     c16:	4798      	blx	r3
     c18:	b2c0      	uxtb	r0, r0
     c1a:	7220      	strb	r0, [r4, #8]
            page_size = can.can_data[0]; // update the page size
     c1c:	4b08      	ldr	r3, [pc, #32]	; (c40 <decode_can_data+0x3c>)
     c1e:	6018      	str	r0, [r3, #0]
            flash_write_info.temp_32bit_data = flash_write_info.curr_flash_write_addr;
     c20:	4a08      	ldr	r2, [pc, #32]	; (c44 <decode_can_data+0x40>)
     c22:	6813      	ldr	r3, [r2, #0]
     c24:	6293      	str	r3, [r2, #40]	; 0x28
            can.can_data[1] = (uint8_t)flash_write_info.temp_32bit_data;
     c26:	7263      	strb	r3, [r4, #9]
            can.can_data[2] = (uint8_t)(flash_write_info.temp_32bit_data >> 8);
     c28:	0a1b      	lsrs	r3, r3, #8
     c2a:	72a3      	strb	r3, [r4, #10]
            can.len = 3;
     c2c:	2303      	movs	r3, #3
     c2e:	6063      	str	r3, [r4, #4]
		can_write(&can);
     c30:	0020      	movs	r0, r4
     c32:	4b05      	ldr	r3, [pc, #20]	; (c48 <decode_can_data+0x44>)
     c34:	4798      	blx	r3
}
     c36:	e7ea      	b.n	c0e <decode_can_data+0xa>
     c38:	2000042c 	.word	0x2000042c
     c3c:	00000bf1 	.word	0x00000bf1
     c40:	20000014 	.word	0x20000014
     c44:	20000400 	.word	0x20000400
     c48:	00000cf1 	.word	0x00000cf1

00000c4c <main>:
{
     c4c:	b510      	push	{r4, lr}
	atmel_start_init();
     c4e:	4b1a      	ldr	r3, [pc, #104]	; (cb8 <main+0x6c>)
     c50:	4798      	blx	r3
    flash_write_info.curr_flash_write_addr = APP_START_BASE_ADDRESS;
     c52:	22e0      	movs	r2, #224	; 0xe0
     c54:	0212      	lsls	r2, r2, #8
     c56:	4b19      	ldr	r3, [pc, #100]	; (cbc <main+0x70>)
     c58:	601a      	str	r2, [r3, #0]
    serial_read_data.uart_frame_received = 0;
     c5a:	2200      	movs	r2, #0
     c5c:	4b18      	ldr	r3, [pc, #96]	; (cc0 <main+0x74>)
     c5e:	721a      	strb	r2, [r3, #8]
    can.can_id = -1;
     c60:	3a01      	subs	r2, #1
     c62:	4b18      	ldr	r3, [pc, #96]	; (cc4 <main+0x78>)
     c64:	601a      	str	r2, [r3, #0]
	app.state = INIT;    
     c66:	3202      	adds	r2, #2
     c68:	4b17      	ldr	r3, [pc, #92]	; (cc8 <main+0x7c>)
     c6a:	701a      	strb	r2, [r3, #0]
     c6c:	e005      	b.n	c7a <main+0x2e>
				can_init(&can);
     c6e:	4815      	ldr	r0, [pc, #84]	; (cc4 <main+0x78>)
     c70:	4b16      	ldr	r3, [pc, #88]	; (ccc <main+0x80>)
     c72:	4798      	blx	r3
				app.state = SERIAL_CAN_READ;
     c74:	2202      	movs	r2, #2
     c76:	4b14      	ldr	r3, [pc, #80]	; (cc8 <main+0x7c>)
     c78:	701a      	strb	r2, [r3, #0]
		switch(app.state){
     c7a:	4b13      	ldr	r3, [pc, #76]	; (cc8 <main+0x7c>)
     c7c:	781b      	ldrb	r3, [r3, #0]
     c7e:	2b02      	cmp	r3, #2
     c80:	d007      	beq.n	c92 <main+0x46>
     c82:	2b03      	cmp	r3, #3
     c84:	d012      	beq.n	cac <main+0x60>
     c86:	2b01      	cmp	r3, #1
     c88:	d0f1      	beq.n	c6e <main+0x22>
				app.state = SERIAL_CAN_READ; // Always listen to programmer
     c8a:	2202      	movs	r2, #2
     c8c:	4b0e      	ldr	r3, [pc, #56]	; (cc8 <main+0x7c>)
     c8e:	701a      	strb	r2, [r3, #0]
			break;
     c90:	e7f3      	b.n	c7a <main+0x2e>
				if(can_read(&can)){
     c92:	480c      	ldr	r0, [pc, #48]	; (cc4 <main+0x78>)
     c94:	4b0e      	ldr	r3, [pc, #56]	; (cd0 <main+0x84>)
     c96:	4798      	blx	r3
     c98:	2800      	cmp	r0, #0
     c9a:	d003      	beq.n	ca4 <main+0x58>
					app.state = DECODE_CAN_DATA;
     c9c:	2203      	movs	r2, #3
     c9e:	4b0a      	ldr	r3, [pc, #40]	; (cc8 <main+0x7c>)
     ca0:	701a      	strb	r2, [r3, #0]
     ca2:	e7ea      	b.n	c7a <main+0x2e>
					app.state = SERIAL_CAN_READ;
     ca4:	2202      	movs	r2, #2
     ca6:	4b08      	ldr	r3, [pc, #32]	; (cc8 <main+0x7c>)
     ca8:	701a      	strb	r2, [r3, #0]
     caa:	e7e6      	b.n	c7a <main+0x2e>
				decode_can_data();
     cac:	4b09      	ldr	r3, [pc, #36]	; (cd4 <main+0x88>)
     cae:	4798      	blx	r3
				app.state = SERIAL_CAN_READ;
     cb0:	2202      	movs	r2, #2
     cb2:	4b05      	ldr	r3, [pc, #20]	; (cc8 <main+0x7c>)
     cb4:	701a      	strb	r2, [r3, #0]
			break;
     cb6:	e7e0      	b.n	c7a <main+0x2e>
     cb8:	0000011d 	.word	0x0000011d
     cbc:	20000400 	.word	0x20000400
     cc0:	200003bc 	.word	0x200003bc
     cc4:	2000042c 	.word	0x2000042c
     cc8:	20000444 	.word	0x20000444
     ccc:	00000cd9 	.word	0x00000cd9
     cd0:	00000ead 	.word	0x00000ead
     cd4:	00000c05 	.word	0x00000c05

00000cd8 <can_init>:
uint8_t rx_buffer[MAX_INCOMMING_STRING_LENGTH] = {0};
uint8_t rx_buff_index = 0;


void can_init(const can_context_type * can)
{
     cd8:	b510      	push	{r4, lr}
       usart_sync_get_io_descriptor(&TARGET_IO, &serial_io);	// Get the descriptor
     cda:	4902      	ldr	r1, [pc, #8]	; (ce4 <can_init+0xc>)
     cdc:	4802      	ldr	r0, [pc, #8]	; (ce8 <can_init+0x10>)
     cde:	4b03      	ldr	r3, [pc, #12]	; (cec <can_init+0x14>)
     ce0:	4798      	blx	r3
}
     ce2:	bd10      	pop	{r4, pc}
     ce4:	200004c8 	.word	0x200004c8
     ce8:	20000308 	.word	0x20000308
     cec:	000005d1 	.word	0x000005d1

00000cf0 <can_write>:


void can_write(const can_context_type * can)
{
     cf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     cf2:	0005      	movs	r5, r0
		--------------------------------------
	*/
	#else 	
	
        // Serial String Format tiiildddd..dd\n | max data is the byte
        memset(uart_tx_frame_buff , 0 , 23);
     cf4:	4c64      	ldr	r4, [pc, #400]	; (e88 <can_write+0x198>)
     cf6:	2217      	movs	r2, #23
     cf8:	2100      	movs	r1, #0
     cfa:	0020      	movs	r0, r4
     cfc:	4f63      	ldr	r7, [pc, #396]	; (e8c <can_write+0x19c>)
     cfe:	47b8      	blx	r7
        memset(temp_buff , 0 , 3);
     d00:	0026      	movs	r6, r4
     d02:	3618      	adds	r6, #24
     d04:	2203      	movs	r2, #3
     d06:	2100      	movs	r1, #0
     d08:	0030      	movs	r0, r6
     d0a:	47b8      	blx	r7
        memset(temp_copy_buffer , 0 , 3);
     d0c:	0020      	movs	r0, r4
     d0e:	301c      	adds	r0, #28
     d10:	2203      	movs	r2, #3
     d12:	2100      	movs	r1, #0
     d14:	47b8      	blx	r7
        memset(temp_buff_data , 0 , 2);
     d16:	2300      	movs	r3, #0
     d18:	8423      	strh	r3, [r4, #32]


        /*First element of the string is 't' */
        uart_tx_frame_buff[0] = 't';							
     d1a:	3374      	adds	r3, #116	; 0x74
     d1c:	7023      	strb	r3, [r4, #0]
        
        /* CAN ID convert to string and concat to uart_tx_buffer */
	//itoa (can->can_id,temp_buff,16);
        sprintf(temp_buff, "%x", can->can_id);
     d1e:	782a      	ldrb	r2, [r5, #0]
     d20:	495b      	ldr	r1, [pc, #364]	; (e90 <can_write+0x1a0>)
     d22:	0030      	movs	r0, r6
     d24:	4b5b      	ldr	r3, [pc, #364]	; (e94 <can_write+0x1a4>)
     d26:	4798      	blx	r3
        // zero padding in MSb
        switch(strlen(temp_buff)){
     d28:	0030      	movs	r0, r6
     d2a:	4b5b      	ldr	r3, [pc, #364]	; (e98 <can_write+0x1a8>)
     d2c:	4798      	blx	r3
     d2e:	2802      	cmp	r0, #2
     d30:	d00c      	beq.n	d4c <can_write+0x5c>
     d32:	2803      	cmp	r0, #3
     d34:	d012      	beq.n	d5c <can_write+0x6c>
     d36:	2801      	cmp	r0, #1
     d38:	d001      	beq.n	d3e <can_write+0x4e>
{
     d3a:	2400      	movs	r4, #0
     d3c:	e022      	b.n	d84 <can_write+0x94>
            case 1: //if len is 1 the padding 0 to first 2 place
                temp_copy_buffer[0] = 0;
     d3e:	4b52      	ldr	r3, [pc, #328]	; (e88 <can_write+0x198>)
     d40:	2200      	movs	r2, #0
     d42:	771a      	strb	r2, [r3, #28]
                temp_copy_buffer[1] = 0;
     d44:	775a      	strb	r2, [r3, #29]
                temp_copy_buffer[2] = temp_buff[0];
     d46:	7e1a      	ldrb	r2, [r3, #24]
     d48:	779a      	strb	r2, [r3, #30]
            break;
     d4a:	e7f6      	b.n	d3a <can_write+0x4a>
            
            case 2: //if len is 1 the padding 0 to first 2 place
                temp_copy_buffer[0] = 0;
     d4c:	4b4e      	ldr	r3, [pc, #312]	; (e88 <can_write+0x198>)
     d4e:	2200      	movs	r2, #0
     d50:	771a      	strb	r2, [r3, #28]
                temp_copy_buffer[1] = temp_buff[0];
     d52:	7e1a      	ldrb	r2, [r3, #24]
     d54:	775a      	strb	r2, [r3, #29]
                temp_copy_buffer[2] = temp_buff[1];
     d56:	7e5a      	ldrb	r2, [r3, #25]
     d58:	779a      	strb	r2, [r3, #30]
            break;
     d5a:	e7ee      	b.n	d3a <can_write+0x4a>
            
            case 3: //if len is 1 the padding 0 to first 2 place
                temp_copy_buffer[0] = temp_buff[0];
     d5c:	4b4a      	ldr	r3, [pc, #296]	; (e88 <can_write+0x198>)
     d5e:	7e1a      	ldrb	r2, [r3, #24]
     d60:	771a      	strb	r2, [r3, #28]
                temp_copy_buffer[1] = temp_buff[1];
     d62:	7e5a      	ldrb	r2, [r3, #25]
     d64:	775a      	strb	r2, [r3, #29]
                temp_copy_buffer[2] = temp_buff[2];
     d66:	7e9a      	ldrb	r2, [r3, #26]
     d68:	779a      	strb	r2, [r3, #30]
            break;
     d6a:	e7e6      	b.n	d3a <can_write+0x4a>
            break;
        }
	int i = 0;
	for(i=0; i < 3 ; i++){		
		if((temp_copy_buffer[i] >= 'a') && (temp_copy_buffer[i] <= 'f'))
			temp_copy_buffer[i] = toupper(temp_copy_buffer[i]);
     d6c:	4b4b      	ldr	r3, [pc, #300]	; (e9c <can_write+0x1ac>)
     d6e:	4798      	blx	r3
     d70:	1980      	adds	r0, r0, r6
     d72:	7842      	ldrb	r2, [r0, #1]
     d74:	2303      	movs	r3, #3
     d76:	4013      	ands	r3, r2
     d78:	2b02      	cmp	r3, #2
     d7a:	d014      	beq.n	da6 <can_write+0xb6>
     d7c:	4b42      	ldr	r3, [pc, #264]	; (e88 <can_write+0x198>)
     d7e:	191b      	adds	r3, r3, r4
     d80:	771e      	strb	r6, [r3, #28]
	for(i=0; i < 3 ; i++){		
     d82:	3401      	adds	r4, #1
     d84:	2c02      	cmp	r4, #2
     d86:	dc10      	bgt.n	daa <can_write+0xba>
		if((temp_copy_buffer[i] >= 'a') && (temp_copy_buffer[i] <= 'f'))
     d88:	4b3f      	ldr	r3, [pc, #252]	; (e88 <can_write+0x198>)
     d8a:	191b      	adds	r3, r3, r4
     d8c:	7f1e      	ldrb	r6, [r3, #28]
     d8e:	0033      	movs	r3, r6
     d90:	3b61      	subs	r3, #97	; 0x61
     d92:	b2db      	uxtb	r3, r3
     d94:	2b05      	cmp	r3, #5
     d96:	d9e9      	bls.n	d6c <can_write+0x7c>
		else if(temp_copy_buffer[i] == 0)
     d98:	2e00      	cmp	r6, #0
     d9a:	d1f2      	bne.n	d82 <can_write+0x92>
			temp_copy_buffer[i] = 48; // ascii of 0
     d9c:	4b3a      	ldr	r3, [pc, #232]	; (e88 <can_write+0x198>)
     d9e:	191b      	adds	r3, r3, r4
     da0:	2230      	movs	r2, #48	; 0x30
     da2:	771a      	strb	r2, [r3, #28]
     da4:	e7ed      	b.n	d82 <can_write+0x92>
			temp_copy_buffer[i] = toupper(temp_copy_buffer[i]);
     da6:	3e20      	subs	r6, #32
     da8:	e7e8      	b.n	d7c <can_write+0x8c>
		else{}
	}
               				
	strcat(uart_tx_frame_buff , temp_copy_buffer); /* concat with the uart_tx_frame_buffer*/	
     daa:	4c37      	ldr	r4, [pc, #220]	; (e88 <can_write+0x198>)
     dac:	0021      	movs	r1, r4
     dae:	311c      	adds	r1, #28
     db0:	0020      	movs	r0, r4
     db2:	4b3b      	ldr	r3, [pc, #236]	; (ea0 <can_write+0x1b0>)
     db4:	4798      	blx	r3
	/*data len converted to sting and transmit */
	uart_tx_frame_buff[4] = (uint8_t)(can->len+48); /* Length cann't be greater than 4 so put it as same posion is 4th byte*/
     db6:	2341      	movs	r3, #65	; 0x41
     db8:	5ceb      	ldrb	r3, [r5, r3]
     dba:	3330      	adds	r3, #48	; 0x30
     dbc:	7123      	strb	r3, [r4, #4]
			
	/* 8 byte data conversion and concat to uart_tx_frame_buff */
        i= 0;
	for(i=0 ; i < can->len; i++){
     dbe:	2400      	movs	r4, #0
     dc0:	e01e      	b.n	e00 <can_write+0x110>
			temp_buff_data[1] = temp;
		}
				
		/*1st digit conversion of byte */
		if((temp_buff_data[0] >= 'a') && (temp_buff_data[0] <= 'f'))
			temp_buff_data[0] = toupper(temp_buff_data[0]);
     dc2:	4b36      	ldr	r3, [pc, #216]	; (e9c <can_write+0x1ac>)
     dc4:	4798      	blx	r3
     dc6:	1980      	adds	r0, r0, r6
     dc8:	7842      	ldrb	r2, [r0, #1]
     dca:	2303      	movs	r3, #3
     dcc:	4013      	ands	r3, r2
     dce:	2b02      	cmp	r3, #2
     dd0:	d003      	beq.n	dda <can_write+0xea>
     dd2:	2320      	movs	r3, #32
     dd4:	4a2c      	ldr	r2, [pc, #176]	; (e88 <can_write+0x198>)
     dd6:	54d6      	strb	r6, [r2, r3]
     dd8:	e037      	b.n	e4a <can_write+0x15a>
     dda:	3e20      	subs	r6, #32
     ddc:	e7f9      	b.n	dd2 <can_write+0xe2>
			temp_buff_data[0] = 48;
		else{}
					
		/*2nd digit conversion of byte */
		if((temp_buff_data[1] >= 'a') && (temp_buff_data[1] <= 'f'))
			temp_buff_data[1] = toupper(temp_buff_data[1]);
     dde:	4b2f      	ldr	r3, [pc, #188]	; (e9c <can_write+0x1ac>)
     de0:	4798      	blx	r3
     de2:	1980      	adds	r0, r0, r6
     de4:	7842      	ldrb	r2, [r0, #1]
     de6:	2303      	movs	r3, #3
     de8:	4013      	ands	r3, r2
     dea:	2b02      	cmp	r3, #2
     dec:	d03c      	beq.n	e68 <can_write+0x178>
     dee:	4b26      	ldr	r3, [pc, #152]	; (e88 <can_write+0x198>)
     df0:	3320      	adds	r3, #32
     df2:	705e      	strb	r6, [r3, #1]
		else if(temp_buff_data[1] == 0)
			temp_buff_data[1] = 48;
		else{}
		/* concatenate to the main sting according to LSB to MSB
		one by one after every byte convention in loop*/
		strcat(uart_tx_frame_buff , temp_buff_data);						 
     df4:	4824      	ldr	r0, [pc, #144]	; (e88 <can_write+0x198>)
     df6:	0001      	movs	r1, r0
     df8:	3120      	adds	r1, #32
     dfa:	4b29      	ldr	r3, [pc, #164]	; (ea0 <can_write+0x1b0>)
     dfc:	4798      	blx	r3
	for(i=0 ; i < can->len; i++){
     dfe:	3401      	adds	r4, #1
     e00:	2341      	movs	r3, #65	; 0x41
     e02:	5ceb      	ldrb	r3, [r5, r3]
     e04:	429c      	cmp	r4, r3
     e06:	da31      	bge.n	e6c <can_write+0x17c>
		sprintf(temp_buff_data , "%x" , can->can_data[i]);
     e08:	192e      	adds	r6, r5, r4
     e0a:	7872      	ldrb	r2, [r6, #1]
     e0c:	4920      	ldr	r1, [pc, #128]	; (e90 <can_write+0x1a0>)
     e0e:	481e      	ldr	r0, [pc, #120]	; (e88 <can_write+0x198>)
     e10:	3020      	adds	r0, #32
     e12:	4b20      	ldr	r3, [pc, #128]	; (e94 <can_write+0x1a4>)
     e14:	4798      	blx	r3
		if(can->can_data[i]<16){
     e16:	7873      	ldrb	r3, [r6, #1]
     e18:	2b0f      	cmp	r3, #15
     e1a:	d808      	bhi.n	e2e <can_write+0x13e>
			uint8_t temp = temp_buff_data[0];
     e1c:	4b1a      	ldr	r3, [pc, #104]	; (e88 <can_write+0x198>)
     e1e:	2220      	movs	r2, #32
     e20:	5c99      	ldrb	r1, [r3, r2]
			temp_buff_data[0] = temp_buff_data[1];
     e22:	0018      	movs	r0, r3
     e24:	3020      	adds	r0, #32
     e26:	7840      	ldrb	r0, [r0, #1]
     e28:	5498      	strb	r0, [r3, r2]
			temp_buff_data[1] = temp;
     e2a:	3320      	adds	r3, #32
     e2c:	7059      	strb	r1, [r3, #1]
		if((temp_buff_data[0] >= 'a') && (temp_buff_data[0] <= 'f'))
     e2e:	2320      	movs	r3, #32
     e30:	4a15      	ldr	r2, [pc, #84]	; (e88 <can_write+0x198>)
     e32:	5cd6      	ldrb	r6, [r2, r3]
     e34:	0033      	movs	r3, r6
     e36:	3b61      	subs	r3, #97	; 0x61
     e38:	b2db      	uxtb	r3, r3
     e3a:	2b05      	cmp	r3, #5
     e3c:	d9c1      	bls.n	dc2 <can_write+0xd2>
		else if(temp_buff_data[0] == 0)
     e3e:	2e00      	cmp	r6, #0
     e40:	d103      	bne.n	e4a <can_write+0x15a>
			temp_buff_data[0] = 48;
     e42:	2130      	movs	r1, #48	; 0x30
     e44:	2320      	movs	r3, #32
     e46:	4a10      	ldr	r2, [pc, #64]	; (e88 <can_write+0x198>)
     e48:	54d1      	strb	r1, [r2, r3]
		if((temp_buff_data[1] >= 'a') && (temp_buff_data[1] <= 'f'))
     e4a:	4b0f      	ldr	r3, [pc, #60]	; (e88 <can_write+0x198>)
     e4c:	3320      	adds	r3, #32
     e4e:	785e      	ldrb	r6, [r3, #1]
     e50:	0033      	movs	r3, r6
     e52:	3b61      	subs	r3, #97	; 0x61
     e54:	b2db      	uxtb	r3, r3
     e56:	2b05      	cmp	r3, #5
     e58:	d9c1      	bls.n	dde <can_write+0xee>
		else if(temp_buff_data[1] == 0)
     e5a:	2e00      	cmp	r6, #0
     e5c:	d1ca      	bne.n	df4 <can_write+0x104>
			temp_buff_data[1] = 48;
     e5e:	2230      	movs	r2, #48	; 0x30
     e60:	4b09      	ldr	r3, [pc, #36]	; (e88 <can_write+0x198>)
     e62:	3320      	adds	r3, #32
     e64:	705a      	strb	r2, [r3, #1]
     e66:	e7c5      	b.n	df4 <can_write+0x104>
			temp_buff_data[1] = toupper(temp_buff_data[1]);
     e68:	3e20      	subs	r6, #32
     e6a:	e7c0      	b.n	dee <can_write+0xfe>
	}
               
	//io_write(lv_io , temp_buff_data, 2);
	/* a \r should be padded after the bytes 5+ (i*2) */
	uart_tx_frame_buff[5+(i*2)] = '\r';											
     e6c:	0063      	lsls	r3, r4, #1
     e6e:	3305      	adds	r3, #5
     e70:	4905      	ldr	r1, [pc, #20]	; (e88 <can_write+0x198>)
     e72:	220d      	movs	r2, #13
     e74:	54ca      	strb	r2, [r1, r3]
	int serial_data_len = (6+(i*2));
     e76:	3403      	adds	r4, #3
     e78:	0064      	lsls	r4, r4, #1

        #if OUTGOING_CAN_DRIVER_PRINT
                printf("[CAN DRV] Write :%s:\n",uart_tx_frame_buff);
        #endif

	io_write(serial_io , uart_tx_frame_buff, serial_data_len); // Calculate based on the data len
     e7a:	b2a2      	uxth	r2, r4
     e7c:	4b09      	ldr	r3, [pc, #36]	; (ea4 <can_write+0x1b4>)
     e7e:	6818      	ldr	r0, [r3, #0]
     e80:	4b09      	ldr	r3, [pc, #36]	; (ea8 <can_write+0x1b8>)
     e82:	4798      	blx	r3
	
	#endif                  
}
     e84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     e86:	46c0      	nop			; (mov r8, r8)
     e88:	20000238 	.word	0x20000238
     e8c:	000011c7 	.word	0x000011c7
     e90:	00002198 	.word	0x00002198
     e94:	00001341 	.word	0x00001341
     e98:	0000139f 	.word	0x0000139f
     e9c:	00001175 	.word	0x00001175
     ea0:	00001385 	.word	0x00001385
     ea4:	200004c8 	.word	0x200004c8
     ea8:	00000409 	.word	0x00000409

00000eac <can_read>:

int can_read(can_context_type * can)
{
     eac:	b5f0      	push	{r4, r5, r6, r7, lr}
     eae:	46c6      	mov	lr, r8
     eb0:	b500      	push	{lr}
     eb2:	0006      	movs	r6, r0
		--------------------------------------
	*/
	#else 
	
	/* Read characters */
	if(usart_sync_is_rx_not_empty(&TARGET_IO)){ //
     eb4:	484b      	ldr	r0, [pc, #300]	; (fe4 <can_read+0x138>)
     eb6:	4b4c      	ldr	r3, [pc, #304]	; (fe8 <can_read+0x13c>)
     eb8:	4798      	blx	r3
     eba:	2800      	cmp	r0, #0
     ebc:	d108      	bne.n	ed0 <can_read+0x24>
				rx_buffer[rx_buff_index++] = temp_char_buff[0]; // Fill the buffer character by character
		}	
	}
	
	/*  One complete usb frame is received and process the frame */
	if(frame_received){
     ebe:	2326      	movs	r3, #38	; 0x26
     ec0:	4a4a      	ldr	r2, [pc, #296]	; (fec <can_read+0x140>)
     ec2:	5cd3      	ldrb	r3, [r2, r3]
     ec4:	2b00      	cmp	r3, #0
     ec6:	d127      	bne.n	f18 <can_read+0x6c>
		
		
	}
	#endif
	
	return 0;       
     ec8:	2000      	movs	r0, #0
     eca:	bc04      	pop	{r2}
     ecc:	4690      	mov	r8, r2
     ece:	bdf0      	pop	{r4, r5, r6, r7, pc}
		io_read(serial_io, temp_char_buff , 1);
     ed0:	4c46      	ldr	r4, [pc, #280]	; (fec <can_read+0x140>)
     ed2:	0021      	movs	r1, r4
     ed4:	3124      	adds	r1, #36	; 0x24
     ed6:	4b46      	ldr	r3, [pc, #280]	; (ff0 <can_read+0x144>)
     ed8:	6818      	ldr	r0, [r3, #0]
     eda:	2201      	movs	r2, #1
     edc:	4b45      	ldr	r3, [pc, #276]	; (ff4 <can_read+0x148>)
     ede:	4798      	blx	r3
		if(temp_char_buff[0] == 't'){	// If the character is t reset all the values and start sampling the frame
     ee0:	2324      	movs	r3, #36	; 0x24
     ee2:	5ce3      	ldrb	r3, [r4, r3]
     ee4:	2b74      	cmp	r3, #116	; 0x74
     ee6:	d00d      	beq.n	f04 <can_read+0x58>
		} else if((temp_char_buff[0] == '\n')) {	// If \r received then stop sampling character and start process the frame.
     ee8:	2b0a      	cmp	r3, #10
     eea:	d010      	beq.n	f0e <can_read+0x62>
			if(rx_buff_index < MAX_INCOMMING_STRING_LENGTH)
     eec:	2225      	movs	r2, #37	; 0x25
     eee:	493f      	ldr	r1, [pc, #252]	; (fec <can_read+0x140>)
     ef0:	5c8a      	ldrb	r2, [r1, r2]
     ef2:	2a63      	cmp	r2, #99	; 0x63
     ef4:	d8e3      	bhi.n	ebe <can_read+0x12>
				rx_buffer[rx_buff_index++] = temp_char_buff[0]; // Fill the buffer character by character
     ef6:	1c54      	adds	r4, r2, #1
     ef8:	2025      	movs	r0, #37	; 0x25
     efa:	540c      	strb	r4, [r1, r0]
     efc:	188a      	adds	r2, r1, r2
     efe:	2128      	movs	r1, #40	; 0x28
     f00:	5453      	strb	r3, [r2, r1]
     f02:	e7dc      	b.n	ebe <can_read+0x12>
			rx_buff_index = 0; // Start the string	
     f04:	2100      	movs	r1, #0
     f06:	3b4f      	subs	r3, #79	; 0x4f
     f08:	4a38      	ldr	r2, [pc, #224]	; (fec <can_read+0x140>)
     f0a:	54d1      	strb	r1, [r2, r3]
     f0c:	e7d7      	b.n	ebe <can_read+0x12>
			frame_received = 1;
     f0e:	2101      	movs	r1, #1
     f10:	331c      	adds	r3, #28
     f12:	4a36      	ldr	r2, [pc, #216]	; (fec <can_read+0x140>)
     f14:	54d1      	strb	r1, [r2, r3]
     f16:	e7d2      	b.n	ebe <can_read+0x12>
		frame_received = 0;
     f18:	2700      	movs	r7, #0
     f1a:	2326      	movs	r3, #38	; 0x26
     f1c:	54d7      	strb	r7, [r2, r3]
		memset(serial_can_data ,0 ,8);
     f1e:	4c36      	ldr	r4, [pc, #216]	; (ff8 <can_read+0x14c>)
     f20:	0020      	movs	r0, r4
     f22:	300c      	adds	r0, #12
     f24:	2208      	movs	r2, #8
     f26:	2100      	movs	r1, #0
     f28:	4d34      	ldr	r5, [pc, #208]	; (ffc <can_read+0x150>)
     f2a:	47a8      	blx	r5
		memset(serial_recv_can_id_temp ,0 ,3);
     f2c:	0020      	movs	r0, r4
     f2e:	3014      	adds	r0, #20
     f30:	2203      	movs	r2, #3
     f32:	2100      	movs	r1, #0
     f34:	47a8      	blx	r5
		memset(serial_recv_can_len ,0 ,1);
     f36:	7627      	strb	r7, [r4, #24]
		memset(can_tx_data ,0 ,8);
     f38:	0020      	movs	r0, r4
     f3a:	301c      	adds	r0, #28
     f3c:	2208      	movs	r2, #8
     f3e:	2100      	movs	r1, #0
     f40:	47a8      	blx	r5
		for(i = 0 ; i<3 ; i++){
     f42:	2300      	movs	r3, #0
     f44:	e007      	b.n	f56 <can_read+0xaa>
			serial_recv_can_id_temp[i] = rx_buffer[i];
     f46:	4a29      	ldr	r2, [pc, #164]	; (fec <can_read+0x140>)
     f48:	18d2      	adds	r2, r2, r3
     f4a:	2128      	movs	r1, #40	; 0x28
     f4c:	5c51      	ldrb	r1, [r2, r1]
     f4e:	4a2a      	ldr	r2, [pc, #168]	; (ff8 <can_read+0x14c>)
     f50:	18d2      	adds	r2, r2, r3
     f52:	7511      	strb	r1, [r2, #20]
		for(i = 0 ; i<3 ; i++){
     f54:	3301      	adds	r3, #1
     f56:	2b02      	cmp	r3, #2
     f58:	ddf5      	ble.n	f46 <can_read+0x9a>
		serial_can_tx_id = hexadecimalToDecimal(serial_recv_can_id_temp);
     f5a:	4c27      	ldr	r4, [pc, #156]	; (ff8 <can_read+0x14c>)
     f5c:	0020      	movs	r0, r4
     f5e:	3014      	adds	r0, #20
     f60:	4d27      	ldr	r5, [pc, #156]	; (1000 <can_read+0x154>)
     f62:	47a8      	blx	r5
     f64:	b280      	uxth	r0, r0
     f66:	84a0      	strh	r0, [r4, #36]	; 0x24
		can->can_id = serial_can_tx_id;
     f68:	7030      	strb	r0, [r6, #0]
		serial_recv_can_len[0] = rx_buffer[3];
     f6a:	4b20      	ldr	r3, [pc, #128]	; (fec <can_read+0x140>)
     f6c:	3328      	adds	r3, #40	; 0x28
     f6e:	78db      	ldrb	r3, [r3, #3]
     f70:	7623      	strb	r3, [r4, #24]
		serial_can_tx_len = hexadecimalToDecimal(serial_recv_can_len);
     f72:	0020      	movs	r0, r4
     f74:	3018      	adds	r0, #24
     f76:	47a8      	blx	r5
     f78:	b2c0      	uxtb	r0, r0
     f7a:	2326      	movs	r3, #38	; 0x26
     f7c:	54e0      	strb	r0, [r4, r3]
		can->len = serial_can_tx_len;
     f7e:	331b      	adds	r3, #27
     f80:	54f0      	strb	r0, [r6, r3]
		int index = 0;
     f82:	2700      	movs	r7, #0
		for(i = 4 ; (i < (4 + (serial_can_tx_len*2)) ) ; i+=2){ // One byte means 2 character in serial
     f84:	2504      	movs	r5, #4
     f86:	e013      	b.n	fb0 <can_read+0x104>
			can_tx_data[0] = rx_buffer[i];
     f88:	4b18      	ldr	r3, [pc, #96]	; (fec <can_read+0x140>)
     f8a:	2228      	movs	r2, #40	; 0x28
     f8c:	1959      	adds	r1, r3, r5
     f8e:	5c89      	ldrb	r1, [r1, r2]
     f90:	4c19      	ldr	r4, [pc, #100]	; (ff8 <can_read+0x14c>)
     f92:	7721      	strb	r1, [r4, #28]
			can_tx_data[1] = rx_buffer[i+1];
     f94:	1c69      	adds	r1, r5, #1
     f96:	185b      	adds	r3, r3, r1
     f98:	5c9b      	ldrb	r3, [r3, r2]
     f9a:	7763      	strb	r3, [r4, #29]
			serial_can_data[index++] = hexadecimalToDecimal(can_tx_data);
     f9c:	1c7b      	adds	r3, r7, #1
     f9e:	4698      	mov	r8, r3
     fa0:	0020      	movs	r0, r4
     fa2:	301c      	adds	r0, #28
     fa4:	4b16      	ldr	r3, [pc, #88]	; (1000 <can_read+0x154>)
     fa6:	4798      	blx	r3
     fa8:	19e4      	adds	r4, r4, r7
     faa:	7320      	strb	r0, [r4, #12]
		for(i = 4 ; (i < (4 + (serial_can_tx_len*2)) ) ; i+=2){ // One byte means 2 character in serial
     fac:	3502      	adds	r5, #2
			serial_can_data[index++] = hexadecimalToDecimal(can_tx_data);
     fae:	4647      	mov	r7, r8
		for(i = 4 ; (i < (4 + (serial_can_tx_len*2)) ) ; i+=2){ // One byte means 2 character in serial
     fb0:	2326      	movs	r3, #38	; 0x26
     fb2:	4a11      	ldr	r2, [pc, #68]	; (ff8 <can_read+0x14c>)
     fb4:	5cd3      	ldrb	r3, [r2, r3]
     fb6:	3302      	adds	r3, #2
     fb8:	005b      	lsls	r3, r3, #1
     fba:	429d      	cmp	r5, r3
     fbc:	dbe4      	blt.n	f88 <can_read+0xdc>
     fbe:	2300      	movs	r3, #0
     fc0:	e005      	b.n	fce <can_read+0x122>
			can->can_data[i] = serial_can_data[i];
     fc2:	4a0d      	ldr	r2, [pc, #52]	; (ff8 <can_read+0x14c>)
     fc4:	18d2      	adds	r2, r2, r3
     fc6:	7b11      	ldrb	r1, [r2, #12]
     fc8:	18f2      	adds	r2, r6, r3
     fca:	7051      	strb	r1, [r2, #1]
		for(int i= 0 ; i<8 ; i++ ){
     fcc:	3301      	adds	r3, #1
     fce:	2b07      	cmp	r3, #7
     fd0:	ddf7      	ble.n	fc2 <can_read+0x116>
		memset(rx_buffer,0,MAX_INCOMMING_STRING_LENGTH);
     fd2:	2264      	movs	r2, #100	; 0x64
     fd4:	2100      	movs	r1, #0
     fd6:	4805      	ldr	r0, [pc, #20]	; (fec <can_read+0x140>)
     fd8:	3028      	adds	r0, #40	; 0x28
     fda:	4b08      	ldr	r3, [pc, #32]	; (ffc <can_read+0x150>)
     fdc:	4798      	blx	r3
		return 1;
     fde:	2001      	movs	r0, #1
     fe0:	e773      	b.n	eca <can_read+0x1e>
     fe2:	46c0      	nop			; (mov r8, r8)
     fe4:	20000308 	.word	0x20000308
     fe8:	00000601 	.word	0x00000601
     fec:	20000238 	.word	0x20000238
     ff0:	200004c8 	.word	0x200004c8
     ff4:	00000441 	.word	0x00000441
     ff8:	200002b8 	.word	0x200002b8
     ffc:	000011c7 	.word	0x000011c7
    1000:	00001005 	.word	0x00001005

00001004 <hexadecimalToDecimal>:
#include "utility_support.h"



int hexadecimalToDecimal(char hexVal[])
{
    1004:	b570      	push	{r4, r5, r6, lr}
    1006:	0004      	movs	r4, r0
	int len = strlen(hexVal);
    1008:	4b0e      	ldr	r3, [pc, #56]	; (1044 <hexadecimalToDecimal+0x40>)
    100a:	4798      	blx	r3
	int base = 1;
	int dec_val = 0;
	int i;
	for (i=len-1; i>=0; i--)
    100c:	1e42      	subs	r2, r0, #1
	int dec_val = 0;
    100e:	2000      	movs	r0, #0
	int base = 1;
    1010:	2501      	movs	r5, #1
	for (i=len-1; i>=0; i--)
    1012:	e009      	b.n	1028 <hexadecimalToDecimal+0x24>
		if (hexVal[i]>='0' && hexVal[i]<='9')
		{
			dec_val += (hexVal[i] - 48)*base;
			base = base * 16;
		}
		else if (hexVal[i]>='A' && hexVal[i]<='F')
    1014:	0019      	movs	r1, r3
    1016:	3941      	subs	r1, #65	; 0x41
    1018:	b2c9      	uxtb	r1, r1
    101a:	2905      	cmp	r1, #5
    101c:	d803      	bhi.n	1026 <hexadecimalToDecimal+0x22>
		{
			dec_val += (hexVal[i] - 55)*base;
    101e:	3b37      	subs	r3, #55	; 0x37
    1020:	436b      	muls	r3, r5
    1022:	18c0      	adds	r0, r0, r3
			base = base*16;
    1024:	012d      	lsls	r5, r5, #4
	for (i=len-1; i>=0; i--)
    1026:	3a01      	subs	r2, #1
    1028:	2a00      	cmp	r2, #0
    102a:	db0a      	blt.n	1042 <hexadecimalToDecimal+0x3e>
		if (hexVal[i]>='0' && hexVal[i]<='9')
    102c:	5ca3      	ldrb	r3, [r4, r2]
    102e:	0019      	movs	r1, r3
    1030:	3930      	subs	r1, #48	; 0x30
    1032:	b2c9      	uxtb	r1, r1
    1034:	2909      	cmp	r1, #9
    1036:	d8ed      	bhi.n	1014 <hexadecimalToDecimal+0x10>
			dec_val += (hexVal[i] - 48)*base;
    1038:	3b30      	subs	r3, #48	; 0x30
    103a:	436b      	muls	r3, r5
    103c:	18c0      	adds	r0, r0, r3
			base = base * 16;
    103e:	012d      	lsls	r5, r5, #4
    1040:	e7f1      	b.n	1026 <hexadecimalToDecimal+0x22>
		}
	}
	
	return dec_val;
}
    1042:	bd70      	pop	{r4, r5, r6, pc}
    1044:	0000139f 	.word	0x0000139f

00001048 <_read>:
#include <stdio.h>

int __attribute__((weak)) _read(int file, char *ptr, int len); /* Remove GCC compiler warning */

int __attribute__((weak)) _read(int file, char *ptr, int len)
{
    1048:	b510      	push	{r4, lr}
    104a:	000b      	movs	r3, r1
	int n = 0;

	if (file != 0) {
    104c:	2800      	cmp	r0, #0
    104e:	d109      	bne.n	1064 <_read+0x1c>
		return -1;
	}

	n = stdio_io_read((uint8_t *)ptr, len);
    1050:	0011      	movs	r1, r2
    1052:	0018      	movs	r0, r3
    1054:	4b05      	ldr	r3, [pc, #20]	; (106c <_read+0x24>)
    1056:	4798      	blx	r3
	if (n < 0) {
    1058:	2800      	cmp	r0, #0
    105a:	db00      	blt.n	105e <_read+0x16>
		return -1;
	}

	return n;
}
    105c:	bd10      	pop	{r4, pc}
		return -1;
    105e:	2001      	movs	r0, #1
    1060:	4240      	negs	r0, r0
    1062:	e7fb      	b.n	105c <_read+0x14>
		return -1;
    1064:	2001      	movs	r0, #1
    1066:	4240      	negs	r0, r0
    1068:	e7f8      	b.n	105c <_read+0x14>
    106a:	46c0      	nop			; (mov r8, r8)
    106c:	000010c5 	.word	0x000010c5

00001070 <_write>:
#include <stdio.h>

int __attribute__((weak)) _write(int file, char *ptr, int len); /* Remove GCC compiler warning */

int __attribute__((weak)) _write(int file, char *ptr, int len)
{
    1070:	b510      	push	{r4, lr}
    1072:	000b      	movs	r3, r1
	int n = 0;

	if ((file != 1) && (file != 2) && (file != 3)) {
    1074:	3801      	subs	r0, #1
    1076:	2802      	cmp	r0, #2
    1078:	d809      	bhi.n	108e <_write+0x1e>
		return -1;
	}

	n = stdio_io_write((const uint8_t *)ptr, len);
    107a:	0011      	movs	r1, r2
    107c:	0018      	movs	r0, r3
    107e:	4b05      	ldr	r3, [pc, #20]	; (1094 <_write+0x24>)
    1080:	4798      	blx	r3
	if (n < 0) {
    1082:	2800      	cmp	r0, #0
    1084:	db00      	blt.n	1088 <_write+0x18>
		return -1;
	}

	return n;
}
    1086:	bd10      	pop	{r4, pc}
		return -1;
    1088:	2001      	movs	r0, #1
    108a:	4240      	negs	r0, r0
    108c:	e7fb      	b.n	1086 <_write+0x16>
		return -1;
    108e:	2001      	movs	r0, #1
    1090:	4240      	negs	r0, r0
    1092:	e7f8      	b.n	1086 <_write+0x16>
    1094:	000010e9 	.word	0x000010e9

00001098 <stdio_io_init>:

/** IO descriptor for STDIO access. */
static struct io_descriptor *stdio_io = NULL;

void stdio_io_init(struct io_descriptor *io)
{
    1098:	b570      	push	{r4, r5, r6, lr}
    109a:	0006      	movs	r6, r0
#if defined(__GNUC__)
	/* Specify that stdout and stdin should not be buffered. */
	setbuf(stdout, NULL);
    109c:	4d06      	ldr	r5, [pc, #24]	; (10b8 <stdio_io_init+0x20>)
    109e:	682b      	ldr	r3, [r5, #0]
    10a0:	6898      	ldr	r0, [r3, #8]
    10a2:	2100      	movs	r1, #0
    10a4:	4c05      	ldr	r4, [pc, #20]	; (10bc <stdio_io_init+0x24>)
    10a6:	47a0      	blx	r4
	setbuf(stdin, NULL);
    10a8:	682b      	ldr	r3, [r5, #0]
    10aa:	6858      	ldr	r0, [r3, #4]
    10ac:	2100      	movs	r1, #0
    10ae:	47a0      	blx	r4
	 * and AVR GCC library:
	 * - printf() emits one character at a time.
	 * - getchar() requests only 1 byte to exit.
	 */
#endif
	stdio_io = io;
    10b0:	4b03      	ldr	r3, [pc, #12]	; (10c0 <stdio_io_init+0x28>)
    10b2:	601e      	str	r6, [r3, #0]
}
    10b4:	bd70      	pop	{r4, r5, r6, pc}
    10b6:	46c0      	nop			; (mov r8, r8)
    10b8:	20000018 	.word	0x20000018
    10bc:	000011d7 	.word	0x000011d7
    10c0:	200002e0 	.word	0x200002e0

000010c4 <stdio_io_read>:
{
	stdio_io = io;
}

int32_t stdio_io_read(uint8_t *buf, const int32_t len)
{
    10c4:	b510      	push	{r4, lr}
    10c6:	0004      	movs	r4, r0
	if (stdio_io == NULL) {
    10c8:	4b05      	ldr	r3, [pc, #20]	; (10e0 <stdio_io_read+0x1c>)
    10ca:	6818      	ldr	r0, [r3, #0]
    10cc:	2800      	cmp	r0, #0
    10ce:	d004      	beq.n	10da <stdio_io_read+0x16>
		return 0;
	}
	return io_read(stdio_io, buf, len);
    10d0:	b28a      	uxth	r2, r1
    10d2:	0021      	movs	r1, r4
    10d4:	4b03      	ldr	r3, [pc, #12]	; (10e4 <stdio_io_read+0x20>)
    10d6:	4798      	blx	r3
}
    10d8:	bd10      	pop	{r4, pc}
		return 0;
    10da:	2000      	movs	r0, #0
    10dc:	e7fc      	b.n	10d8 <stdio_io_read+0x14>
    10de:	46c0      	nop			; (mov r8, r8)
    10e0:	200002e0 	.word	0x200002e0
    10e4:	00000441 	.word	0x00000441

000010e8 <stdio_io_write>:

int32_t stdio_io_write(const uint8_t *buf, const int32_t len)
{
    10e8:	b510      	push	{r4, lr}
    10ea:	0004      	movs	r4, r0
	if (stdio_io == NULL) {
    10ec:	4b05      	ldr	r3, [pc, #20]	; (1104 <stdio_io_write+0x1c>)
    10ee:	6818      	ldr	r0, [r3, #0]
    10f0:	2800      	cmp	r0, #0
    10f2:	d004      	beq.n	10fe <stdio_io_write+0x16>
		return 0;
	}
	return io_write(stdio_io, buf, len);
    10f4:	b28a      	uxth	r2, r1
    10f6:	0021      	movs	r1, r4
    10f8:	4b03      	ldr	r3, [pc, #12]	; (1108 <stdio_io_write+0x20>)
    10fa:	4798      	blx	r3
}
    10fc:	bd10      	pop	{r4, pc}
		return 0;
    10fe:	2000      	movs	r0, #0
    1100:	e7fc      	b.n	10fc <stdio_io_write+0x14>
    1102:	46c0      	nop			; (mov r8, r8)
    1104:	200002e0 	.word	0x200002e0
    1108:	00000409 	.word	0x00000409

0000110c <stdio_redirect_init>:
	/* Print welcome message */
	printf("\r\nHello ATMEL World!\r\n");
}

void stdio_redirect_init(void)
{
    110c:	b510      	push	{r4, lr}

	usart_sync_enable(&TARGET_IO);
    110e:	4c04      	ldr	r4, [pc, #16]	; (1120 <stdio_redirect_init+0x14>)
    1110:	0020      	movs	r0, r4
    1112:	4b04      	ldr	r3, [pc, #16]	; (1124 <stdio_redirect_init+0x18>)
    1114:	4798      	blx	r3
	stdio_io_init(&TARGET_IO.io);
    1116:	0020      	movs	r0, r4
    1118:	4b03      	ldr	r3, [pc, #12]	; (1128 <stdio_redirect_init+0x1c>)
    111a:	4798      	blx	r3
}
    111c:	bd10      	pop	{r4, pc}
    111e:	46c0      	nop			; (mov r8, r8)
    1120:	20000308 	.word	0x20000308
    1124:	000005a5 	.word	0x000005a5
    1128:	00001099 	.word	0x00001099

0000112c <__libc_init_array>:
    112c:	b570      	push	{r4, r5, r6, lr}
    112e:	2600      	movs	r6, #0
    1130:	4d0c      	ldr	r5, [pc, #48]	; (1164 <__libc_init_array+0x38>)
    1132:	4c0d      	ldr	r4, [pc, #52]	; (1168 <__libc_init_array+0x3c>)
    1134:	1b64      	subs	r4, r4, r5
    1136:	10a4      	asrs	r4, r4, #2
    1138:	42a6      	cmp	r6, r4
    113a:	d109      	bne.n	1150 <__libc_init_array+0x24>
    113c:	2600      	movs	r6, #0
    113e:	f001 f8ff 	bl	2340 <_init>
    1142:	4d0a      	ldr	r5, [pc, #40]	; (116c <__libc_init_array+0x40>)
    1144:	4c0a      	ldr	r4, [pc, #40]	; (1170 <__libc_init_array+0x44>)
    1146:	1b64      	subs	r4, r4, r5
    1148:	10a4      	asrs	r4, r4, #2
    114a:	42a6      	cmp	r6, r4
    114c:	d105      	bne.n	115a <__libc_init_array+0x2e>
    114e:	bd70      	pop	{r4, r5, r6, pc}
    1150:	00b3      	lsls	r3, r6, #2
    1152:	58eb      	ldr	r3, [r5, r3]
    1154:	4798      	blx	r3
    1156:	3601      	adds	r6, #1
    1158:	e7ee      	b.n	1138 <__libc_init_array+0xc>
    115a:	00b3      	lsls	r3, r6, #2
    115c:	58eb      	ldr	r3, [r5, r3]
    115e:	4798      	blx	r3
    1160:	3601      	adds	r6, #1
    1162:	e7f2      	b.n	114a <__libc_init_array+0x1e>
    1164:	0000234c 	.word	0x0000234c
    1168:	0000234c 	.word	0x0000234c
    116c:	0000234c 	.word	0x0000234c
    1170:	00002350 	.word	0x00002350

00001174 <__locale_ctype_ptr>:
    1174:	4b04      	ldr	r3, [pc, #16]	; (1188 <__locale_ctype_ptr+0x14>)
    1176:	681b      	ldr	r3, [r3, #0]
    1178:	6a1b      	ldr	r3, [r3, #32]
    117a:	2b00      	cmp	r3, #0
    117c:	d100      	bne.n	1180 <__locale_ctype_ptr+0xc>
    117e:	4b03      	ldr	r3, [pc, #12]	; (118c <__locale_ctype_ptr+0x18>)
    1180:	33ec      	adds	r3, #236	; 0xec
    1182:	6818      	ldr	r0, [r3, #0]
    1184:	4770      	bx	lr
    1186:	46c0      	nop			; (mov r8, r8)
    1188:	20000018 	.word	0x20000018
    118c:	2000007c 	.word	0x2000007c

00001190 <__ascii_mbtowc>:
    1190:	b082      	sub	sp, #8
    1192:	2900      	cmp	r1, #0
    1194:	d100      	bne.n	1198 <__ascii_mbtowc+0x8>
    1196:	a901      	add	r1, sp, #4
    1198:	1e10      	subs	r0, r2, #0
    119a:	d006      	beq.n	11aa <__ascii_mbtowc+0x1a>
    119c:	2b00      	cmp	r3, #0
    119e:	d006      	beq.n	11ae <__ascii_mbtowc+0x1e>
    11a0:	7813      	ldrb	r3, [r2, #0]
    11a2:	600b      	str	r3, [r1, #0]
    11a4:	7810      	ldrb	r0, [r2, #0]
    11a6:	1e43      	subs	r3, r0, #1
    11a8:	4198      	sbcs	r0, r3
    11aa:	b002      	add	sp, #8
    11ac:	4770      	bx	lr
    11ae:	2002      	movs	r0, #2
    11b0:	4240      	negs	r0, r0
    11b2:	e7fa      	b.n	11aa <__ascii_mbtowc+0x1a>

000011b4 <memcpy>:
    11b4:	2300      	movs	r3, #0
    11b6:	b510      	push	{r4, lr}
    11b8:	429a      	cmp	r2, r3
    11ba:	d100      	bne.n	11be <memcpy+0xa>
    11bc:	bd10      	pop	{r4, pc}
    11be:	5ccc      	ldrb	r4, [r1, r3]
    11c0:	54c4      	strb	r4, [r0, r3]
    11c2:	3301      	adds	r3, #1
    11c4:	e7f8      	b.n	11b8 <memcpy+0x4>

000011c6 <memset>:
    11c6:	0003      	movs	r3, r0
    11c8:	1882      	adds	r2, r0, r2
    11ca:	4293      	cmp	r3, r2
    11cc:	d100      	bne.n	11d0 <memset+0xa>
    11ce:	4770      	bx	lr
    11d0:	7019      	strb	r1, [r3, #0]
    11d2:	3301      	adds	r3, #1
    11d4:	e7f9      	b.n	11ca <memset+0x4>

000011d6 <setbuf>:
    11d6:	424a      	negs	r2, r1
    11d8:	414a      	adcs	r2, r1
    11da:	2380      	movs	r3, #128	; 0x80
    11dc:	b510      	push	{r4, lr}
    11de:	0052      	lsls	r2, r2, #1
    11e0:	00db      	lsls	r3, r3, #3
    11e2:	f000 f801 	bl	11e8 <setvbuf>
    11e6:	bd10      	pop	{r4, pc}

000011e8 <setvbuf>:
    11e8:	b5f0      	push	{r4, r5, r6, r7, lr}
    11ea:	001d      	movs	r5, r3
    11ec:	4b4f      	ldr	r3, [pc, #316]	; (132c <setvbuf+0x144>)
    11ee:	b085      	sub	sp, #20
    11f0:	681e      	ldr	r6, [r3, #0]
    11f2:	0004      	movs	r4, r0
    11f4:	000f      	movs	r7, r1
    11f6:	9200      	str	r2, [sp, #0]
    11f8:	2e00      	cmp	r6, #0
    11fa:	d005      	beq.n	1208 <setvbuf+0x20>
    11fc:	69b3      	ldr	r3, [r6, #24]
    11fe:	2b00      	cmp	r3, #0
    1200:	d102      	bne.n	1208 <setvbuf+0x20>
    1202:	0030      	movs	r0, r6
    1204:	f000 f9d6 	bl	15b4 <__sinit>
    1208:	4b49      	ldr	r3, [pc, #292]	; (1330 <setvbuf+0x148>)
    120a:	429c      	cmp	r4, r3
    120c:	d150      	bne.n	12b0 <setvbuf+0xc8>
    120e:	6874      	ldr	r4, [r6, #4]
    1210:	9b00      	ldr	r3, [sp, #0]
    1212:	2b02      	cmp	r3, #2
    1214:	d005      	beq.n	1222 <setvbuf+0x3a>
    1216:	2b01      	cmp	r3, #1
    1218:	d900      	bls.n	121c <setvbuf+0x34>
    121a:	e084      	b.n	1326 <setvbuf+0x13e>
    121c:	2d00      	cmp	r5, #0
    121e:	da00      	bge.n	1222 <setvbuf+0x3a>
    1220:	e081      	b.n	1326 <setvbuf+0x13e>
    1222:	0021      	movs	r1, r4
    1224:	0030      	movs	r0, r6
    1226:	f000 f957 	bl	14d8 <_fflush_r>
    122a:	6b61      	ldr	r1, [r4, #52]	; 0x34
    122c:	2900      	cmp	r1, #0
    122e:	d008      	beq.n	1242 <setvbuf+0x5a>
    1230:	0023      	movs	r3, r4
    1232:	3344      	adds	r3, #68	; 0x44
    1234:	4299      	cmp	r1, r3
    1236:	d002      	beq.n	123e <setvbuf+0x56>
    1238:	0030      	movs	r0, r6
    123a:	f000 fa83 	bl	1744 <_free_r>
    123e:	2300      	movs	r3, #0
    1240:	6363      	str	r3, [r4, #52]	; 0x34
    1242:	2300      	movs	r3, #0
    1244:	61a3      	str	r3, [r4, #24]
    1246:	6063      	str	r3, [r4, #4]
    1248:	89a3      	ldrh	r3, [r4, #12]
    124a:	061b      	lsls	r3, r3, #24
    124c:	d503      	bpl.n	1256 <setvbuf+0x6e>
    124e:	6921      	ldr	r1, [r4, #16]
    1250:	0030      	movs	r0, r6
    1252:	f000 fa77 	bl	1744 <_free_r>
    1256:	89a3      	ldrh	r3, [r4, #12]
    1258:	4a36      	ldr	r2, [pc, #216]	; (1334 <setvbuf+0x14c>)
    125a:	4013      	ands	r3, r2
    125c:	81a3      	strh	r3, [r4, #12]
    125e:	9b00      	ldr	r3, [sp, #0]
    1260:	2b02      	cmp	r3, #2
    1262:	d05a      	beq.n	131a <setvbuf+0x132>
    1264:	ab03      	add	r3, sp, #12
    1266:	aa02      	add	r2, sp, #8
    1268:	0021      	movs	r1, r4
    126a:	0030      	movs	r0, r6
    126c:	f000 fa38 	bl	16e0 <__swhatbuf_r>
    1270:	89a3      	ldrh	r3, [r4, #12]
    1272:	4318      	orrs	r0, r3
    1274:	81a0      	strh	r0, [r4, #12]
    1276:	2d00      	cmp	r5, #0
    1278:	d124      	bne.n	12c4 <setvbuf+0xdc>
    127a:	9d02      	ldr	r5, [sp, #8]
    127c:	0028      	movs	r0, r5
    127e:	f000 fa57 	bl	1730 <malloc>
    1282:	9501      	str	r5, [sp, #4]
    1284:	1e07      	subs	r7, r0, #0
    1286:	d142      	bne.n	130e <setvbuf+0x126>
    1288:	9b02      	ldr	r3, [sp, #8]
    128a:	9301      	str	r3, [sp, #4]
    128c:	42ab      	cmp	r3, r5
    128e:	d139      	bne.n	1304 <setvbuf+0x11c>
    1290:	2001      	movs	r0, #1
    1292:	4240      	negs	r0, r0
    1294:	2302      	movs	r3, #2
    1296:	89a2      	ldrh	r2, [r4, #12]
    1298:	4313      	orrs	r3, r2
    129a:	81a3      	strh	r3, [r4, #12]
    129c:	2300      	movs	r3, #0
    129e:	60a3      	str	r3, [r4, #8]
    12a0:	0023      	movs	r3, r4
    12a2:	3347      	adds	r3, #71	; 0x47
    12a4:	6023      	str	r3, [r4, #0]
    12a6:	6123      	str	r3, [r4, #16]
    12a8:	2301      	movs	r3, #1
    12aa:	6163      	str	r3, [r4, #20]
    12ac:	b005      	add	sp, #20
    12ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
    12b0:	4b21      	ldr	r3, [pc, #132]	; (1338 <setvbuf+0x150>)
    12b2:	429c      	cmp	r4, r3
    12b4:	d101      	bne.n	12ba <setvbuf+0xd2>
    12b6:	68b4      	ldr	r4, [r6, #8]
    12b8:	e7aa      	b.n	1210 <setvbuf+0x28>
    12ba:	4b20      	ldr	r3, [pc, #128]	; (133c <setvbuf+0x154>)
    12bc:	429c      	cmp	r4, r3
    12be:	d1a7      	bne.n	1210 <setvbuf+0x28>
    12c0:	68f4      	ldr	r4, [r6, #12]
    12c2:	e7a5      	b.n	1210 <setvbuf+0x28>
    12c4:	2f00      	cmp	r7, #0
    12c6:	d0d9      	beq.n	127c <setvbuf+0x94>
    12c8:	69b3      	ldr	r3, [r6, #24]
    12ca:	2b00      	cmp	r3, #0
    12cc:	d102      	bne.n	12d4 <setvbuf+0xec>
    12ce:	0030      	movs	r0, r6
    12d0:	f000 f970 	bl	15b4 <__sinit>
    12d4:	9b00      	ldr	r3, [sp, #0]
    12d6:	2b01      	cmp	r3, #1
    12d8:	d103      	bne.n	12e2 <setvbuf+0xfa>
    12da:	89a3      	ldrh	r3, [r4, #12]
    12dc:	9a00      	ldr	r2, [sp, #0]
    12de:	431a      	orrs	r2, r3
    12e0:	81a2      	strh	r2, [r4, #12]
    12e2:	2008      	movs	r0, #8
    12e4:	89a3      	ldrh	r3, [r4, #12]
    12e6:	6027      	str	r7, [r4, #0]
    12e8:	6127      	str	r7, [r4, #16]
    12ea:	6165      	str	r5, [r4, #20]
    12ec:	4018      	ands	r0, r3
    12ee:	d018      	beq.n	1322 <setvbuf+0x13a>
    12f0:	2001      	movs	r0, #1
    12f2:	4018      	ands	r0, r3
    12f4:	2300      	movs	r3, #0
    12f6:	4298      	cmp	r0, r3
    12f8:	d011      	beq.n	131e <setvbuf+0x136>
    12fa:	426d      	negs	r5, r5
    12fc:	60a3      	str	r3, [r4, #8]
    12fe:	61a5      	str	r5, [r4, #24]
    1300:	0018      	movs	r0, r3
    1302:	e7d3      	b.n	12ac <setvbuf+0xc4>
    1304:	9801      	ldr	r0, [sp, #4]
    1306:	f000 fa13 	bl	1730 <malloc>
    130a:	1e07      	subs	r7, r0, #0
    130c:	d0c0      	beq.n	1290 <setvbuf+0xa8>
    130e:	2380      	movs	r3, #128	; 0x80
    1310:	89a2      	ldrh	r2, [r4, #12]
    1312:	9d01      	ldr	r5, [sp, #4]
    1314:	4313      	orrs	r3, r2
    1316:	81a3      	strh	r3, [r4, #12]
    1318:	e7d6      	b.n	12c8 <setvbuf+0xe0>
    131a:	2000      	movs	r0, #0
    131c:	e7ba      	b.n	1294 <setvbuf+0xac>
    131e:	60a5      	str	r5, [r4, #8]
    1320:	e7c4      	b.n	12ac <setvbuf+0xc4>
    1322:	60a0      	str	r0, [r4, #8]
    1324:	e7c2      	b.n	12ac <setvbuf+0xc4>
    1326:	2001      	movs	r0, #1
    1328:	4240      	negs	r0, r0
    132a:	e7bf      	b.n	12ac <setvbuf+0xc4>
    132c:	20000018 	.word	0x20000018
    1330:	000022cc 	.word	0x000022cc
    1334:	fffff35c 	.word	0xfffff35c
    1338:	000022ec 	.word	0x000022ec
    133c:	000022ac 	.word	0x000022ac

00001340 <siprintf>:
    1340:	b40e      	push	{r1, r2, r3}
    1342:	b510      	push	{r4, lr}
    1344:	b09d      	sub	sp, #116	; 0x74
    1346:	a902      	add	r1, sp, #8
    1348:	9002      	str	r0, [sp, #8]
    134a:	6108      	str	r0, [r1, #16]
    134c:	480b      	ldr	r0, [pc, #44]	; (137c <siprintf+0x3c>)
    134e:	2482      	movs	r4, #130	; 0x82
    1350:	6088      	str	r0, [r1, #8]
    1352:	6148      	str	r0, [r1, #20]
    1354:	2001      	movs	r0, #1
    1356:	4240      	negs	r0, r0
    1358:	ab1f      	add	r3, sp, #124	; 0x7c
    135a:	81c8      	strh	r0, [r1, #14]
    135c:	4808      	ldr	r0, [pc, #32]	; (1380 <siprintf+0x40>)
    135e:	cb04      	ldmia	r3!, {r2}
    1360:	00a4      	lsls	r4, r4, #2
    1362:	6800      	ldr	r0, [r0, #0]
    1364:	9301      	str	r3, [sp, #4]
    1366:	818c      	strh	r4, [r1, #12]
    1368:	f000 faf6 	bl	1958 <_svfiprintf_r>
    136c:	2300      	movs	r3, #0
    136e:	9a02      	ldr	r2, [sp, #8]
    1370:	7013      	strb	r3, [r2, #0]
    1372:	b01d      	add	sp, #116	; 0x74
    1374:	bc10      	pop	{r4}
    1376:	bc08      	pop	{r3}
    1378:	b003      	add	sp, #12
    137a:	4718      	bx	r3
    137c:	7fffffff 	.word	0x7fffffff
    1380:	20000018 	.word	0x20000018

00001384 <strcat>:
    1384:	0002      	movs	r2, r0
    1386:	b510      	push	{r4, lr}
    1388:	7813      	ldrb	r3, [r2, #0]
    138a:	2b00      	cmp	r3, #0
    138c:	d105      	bne.n	139a <strcat+0x16>
    138e:	5ccc      	ldrb	r4, [r1, r3]
    1390:	54d4      	strb	r4, [r2, r3]
    1392:	3301      	adds	r3, #1
    1394:	2c00      	cmp	r4, #0
    1396:	d1fa      	bne.n	138e <strcat+0xa>
    1398:	bd10      	pop	{r4, pc}
    139a:	3201      	adds	r2, #1
    139c:	e7f4      	b.n	1388 <strcat+0x4>

0000139e <strlen>:
    139e:	2300      	movs	r3, #0
    13a0:	5cc2      	ldrb	r2, [r0, r3]
    13a2:	3301      	adds	r3, #1
    13a4:	2a00      	cmp	r2, #0
    13a6:	d1fb      	bne.n	13a0 <strlen+0x2>
    13a8:	1e58      	subs	r0, r3, #1
    13aa:	4770      	bx	lr

000013ac <__ascii_wctomb>:
    13ac:	1e0b      	subs	r3, r1, #0
    13ae:	d004      	beq.n	13ba <__ascii_wctomb+0xe>
    13b0:	2aff      	cmp	r2, #255	; 0xff
    13b2:	d904      	bls.n	13be <__ascii_wctomb+0x12>
    13b4:	238a      	movs	r3, #138	; 0x8a
    13b6:	6003      	str	r3, [r0, #0]
    13b8:	3b8b      	subs	r3, #139	; 0x8b
    13ba:	0018      	movs	r0, r3
    13bc:	4770      	bx	lr
    13be:	700a      	strb	r2, [r1, #0]
    13c0:	2301      	movs	r3, #1
    13c2:	e7fa      	b.n	13ba <__ascii_wctomb+0xe>

000013c4 <__sflush_r>:
    13c4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    13c6:	898a      	ldrh	r2, [r1, #12]
    13c8:	0005      	movs	r5, r0
    13ca:	000c      	movs	r4, r1
    13cc:	0713      	lsls	r3, r2, #28
    13ce:	d460      	bmi.n	1492 <__sflush_r+0xce>
    13d0:	684b      	ldr	r3, [r1, #4]
    13d2:	2b00      	cmp	r3, #0
    13d4:	dc04      	bgt.n	13e0 <__sflush_r+0x1c>
    13d6:	6c0b      	ldr	r3, [r1, #64]	; 0x40
    13d8:	2b00      	cmp	r3, #0
    13da:	dc01      	bgt.n	13e0 <__sflush_r+0x1c>
    13dc:	2000      	movs	r0, #0
    13de:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    13e0:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    13e2:	2f00      	cmp	r7, #0
    13e4:	d0fa      	beq.n	13dc <__sflush_r+0x18>
    13e6:	2300      	movs	r3, #0
    13e8:	682e      	ldr	r6, [r5, #0]
    13ea:	602b      	str	r3, [r5, #0]
    13ec:	2380      	movs	r3, #128	; 0x80
    13ee:	015b      	lsls	r3, r3, #5
    13f0:	401a      	ands	r2, r3
    13f2:	d034      	beq.n	145e <__sflush_r+0x9a>
    13f4:	6d60      	ldr	r0, [r4, #84]	; 0x54
    13f6:	89a3      	ldrh	r3, [r4, #12]
    13f8:	075b      	lsls	r3, r3, #29
    13fa:	d506      	bpl.n	140a <__sflush_r+0x46>
    13fc:	6863      	ldr	r3, [r4, #4]
    13fe:	1ac0      	subs	r0, r0, r3
    1400:	6b63      	ldr	r3, [r4, #52]	; 0x34
    1402:	2b00      	cmp	r3, #0
    1404:	d001      	beq.n	140a <__sflush_r+0x46>
    1406:	6c23      	ldr	r3, [r4, #64]	; 0x40
    1408:	1ac0      	subs	r0, r0, r3
    140a:	0002      	movs	r2, r0
    140c:	6a21      	ldr	r1, [r4, #32]
    140e:	2300      	movs	r3, #0
    1410:	0028      	movs	r0, r5
    1412:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    1414:	47b8      	blx	r7
    1416:	89a1      	ldrh	r1, [r4, #12]
    1418:	1c43      	adds	r3, r0, #1
    141a:	d106      	bne.n	142a <__sflush_r+0x66>
    141c:	682b      	ldr	r3, [r5, #0]
    141e:	2b1d      	cmp	r3, #29
    1420:	d831      	bhi.n	1486 <__sflush_r+0xc2>
    1422:	4a2c      	ldr	r2, [pc, #176]	; (14d4 <__sflush_r+0x110>)
    1424:	40da      	lsrs	r2, r3
    1426:	07d3      	lsls	r3, r2, #31
    1428:	d52d      	bpl.n	1486 <__sflush_r+0xc2>
    142a:	2300      	movs	r3, #0
    142c:	6063      	str	r3, [r4, #4]
    142e:	6923      	ldr	r3, [r4, #16]
    1430:	6023      	str	r3, [r4, #0]
    1432:	04cb      	lsls	r3, r1, #19
    1434:	d505      	bpl.n	1442 <__sflush_r+0x7e>
    1436:	1c43      	adds	r3, r0, #1
    1438:	d102      	bne.n	1440 <__sflush_r+0x7c>
    143a:	682b      	ldr	r3, [r5, #0]
    143c:	2b00      	cmp	r3, #0
    143e:	d100      	bne.n	1442 <__sflush_r+0x7e>
    1440:	6560      	str	r0, [r4, #84]	; 0x54
    1442:	6b61      	ldr	r1, [r4, #52]	; 0x34
    1444:	602e      	str	r6, [r5, #0]
    1446:	2900      	cmp	r1, #0
    1448:	d0c8      	beq.n	13dc <__sflush_r+0x18>
    144a:	0023      	movs	r3, r4
    144c:	3344      	adds	r3, #68	; 0x44
    144e:	4299      	cmp	r1, r3
    1450:	d002      	beq.n	1458 <__sflush_r+0x94>
    1452:	0028      	movs	r0, r5
    1454:	f000 f976 	bl	1744 <_free_r>
    1458:	2000      	movs	r0, #0
    145a:	6360      	str	r0, [r4, #52]	; 0x34
    145c:	e7bf      	b.n	13de <__sflush_r+0x1a>
    145e:	2301      	movs	r3, #1
    1460:	6a21      	ldr	r1, [r4, #32]
    1462:	0028      	movs	r0, r5
    1464:	47b8      	blx	r7
    1466:	1c43      	adds	r3, r0, #1
    1468:	d1c5      	bne.n	13f6 <__sflush_r+0x32>
    146a:	682b      	ldr	r3, [r5, #0]
    146c:	2b00      	cmp	r3, #0
    146e:	d0c2      	beq.n	13f6 <__sflush_r+0x32>
    1470:	2b1d      	cmp	r3, #29
    1472:	d001      	beq.n	1478 <__sflush_r+0xb4>
    1474:	2b16      	cmp	r3, #22
    1476:	d101      	bne.n	147c <__sflush_r+0xb8>
    1478:	602e      	str	r6, [r5, #0]
    147a:	e7af      	b.n	13dc <__sflush_r+0x18>
    147c:	2340      	movs	r3, #64	; 0x40
    147e:	89a2      	ldrh	r2, [r4, #12]
    1480:	4313      	orrs	r3, r2
    1482:	81a3      	strh	r3, [r4, #12]
    1484:	e7ab      	b.n	13de <__sflush_r+0x1a>
    1486:	2340      	movs	r3, #64	; 0x40
    1488:	430b      	orrs	r3, r1
    148a:	2001      	movs	r0, #1
    148c:	81a3      	strh	r3, [r4, #12]
    148e:	4240      	negs	r0, r0
    1490:	e7a5      	b.n	13de <__sflush_r+0x1a>
    1492:	690f      	ldr	r7, [r1, #16]
    1494:	2f00      	cmp	r7, #0
    1496:	d0a1      	beq.n	13dc <__sflush_r+0x18>
    1498:	680b      	ldr	r3, [r1, #0]
    149a:	600f      	str	r7, [r1, #0]
    149c:	1bdb      	subs	r3, r3, r7
    149e:	9301      	str	r3, [sp, #4]
    14a0:	2300      	movs	r3, #0
    14a2:	0792      	lsls	r2, r2, #30
    14a4:	d100      	bne.n	14a8 <__sflush_r+0xe4>
    14a6:	694b      	ldr	r3, [r1, #20]
    14a8:	60a3      	str	r3, [r4, #8]
    14aa:	9b01      	ldr	r3, [sp, #4]
    14ac:	2b00      	cmp	r3, #0
    14ae:	dc00      	bgt.n	14b2 <__sflush_r+0xee>
    14b0:	e794      	b.n	13dc <__sflush_r+0x18>
    14b2:	9b01      	ldr	r3, [sp, #4]
    14b4:	003a      	movs	r2, r7
    14b6:	6a21      	ldr	r1, [r4, #32]
    14b8:	0028      	movs	r0, r5
    14ba:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    14bc:	47b0      	blx	r6
    14be:	2800      	cmp	r0, #0
    14c0:	dc03      	bgt.n	14ca <__sflush_r+0x106>
    14c2:	2340      	movs	r3, #64	; 0x40
    14c4:	89a2      	ldrh	r2, [r4, #12]
    14c6:	4313      	orrs	r3, r2
    14c8:	e7df      	b.n	148a <__sflush_r+0xc6>
    14ca:	9b01      	ldr	r3, [sp, #4]
    14cc:	183f      	adds	r7, r7, r0
    14ce:	1a1b      	subs	r3, r3, r0
    14d0:	9301      	str	r3, [sp, #4]
    14d2:	e7ea      	b.n	14aa <__sflush_r+0xe6>
    14d4:	20400001 	.word	0x20400001

000014d8 <_fflush_r>:
    14d8:	690b      	ldr	r3, [r1, #16]
    14da:	b570      	push	{r4, r5, r6, lr}
    14dc:	0005      	movs	r5, r0
    14de:	000c      	movs	r4, r1
    14e0:	2b00      	cmp	r3, #0
    14e2:	d101      	bne.n	14e8 <_fflush_r+0x10>
    14e4:	2000      	movs	r0, #0
    14e6:	bd70      	pop	{r4, r5, r6, pc}
    14e8:	2800      	cmp	r0, #0
    14ea:	d004      	beq.n	14f6 <_fflush_r+0x1e>
    14ec:	6983      	ldr	r3, [r0, #24]
    14ee:	2b00      	cmp	r3, #0
    14f0:	d101      	bne.n	14f6 <_fflush_r+0x1e>
    14f2:	f000 f85f 	bl	15b4 <__sinit>
    14f6:	4b0b      	ldr	r3, [pc, #44]	; (1524 <_fflush_r+0x4c>)
    14f8:	429c      	cmp	r4, r3
    14fa:	d109      	bne.n	1510 <_fflush_r+0x38>
    14fc:	686c      	ldr	r4, [r5, #4]
    14fe:	220c      	movs	r2, #12
    1500:	5ea3      	ldrsh	r3, [r4, r2]
    1502:	2b00      	cmp	r3, #0
    1504:	d0ee      	beq.n	14e4 <_fflush_r+0xc>
    1506:	0021      	movs	r1, r4
    1508:	0028      	movs	r0, r5
    150a:	f7ff ff5b 	bl	13c4 <__sflush_r>
    150e:	e7ea      	b.n	14e6 <_fflush_r+0xe>
    1510:	4b05      	ldr	r3, [pc, #20]	; (1528 <_fflush_r+0x50>)
    1512:	429c      	cmp	r4, r3
    1514:	d101      	bne.n	151a <_fflush_r+0x42>
    1516:	68ac      	ldr	r4, [r5, #8]
    1518:	e7f1      	b.n	14fe <_fflush_r+0x26>
    151a:	4b04      	ldr	r3, [pc, #16]	; (152c <_fflush_r+0x54>)
    151c:	429c      	cmp	r4, r3
    151e:	d1ee      	bne.n	14fe <_fflush_r+0x26>
    1520:	68ec      	ldr	r4, [r5, #12]
    1522:	e7ec      	b.n	14fe <_fflush_r+0x26>
    1524:	000022cc 	.word	0x000022cc
    1528:	000022ec 	.word	0x000022ec
    152c:	000022ac 	.word	0x000022ac

00001530 <_cleanup_r>:
    1530:	b510      	push	{r4, lr}
    1532:	4902      	ldr	r1, [pc, #8]	; (153c <_cleanup_r+0xc>)
    1534:	f000 f8b2 	bl	169c <_fwalk_reent>
    1538:	bd10      	pop	{r4, pc}
    153a:	46c0      	nop			; (mov r8, r8)
    153c:	000014d9 	.word	0x000014d9

00001540 <std.isra.0>:
    1540:	2300      	movs	r3, #0
    1542:	b510      	push	{r4, lr}
    1544:	0004      	movs	r4, r0
    1546:	6003      	str	r3, [r0, #0]
    1548:	6043      	str	r3, [r0, #4]
    154a:	6083      	str	r3, [r0, #8]
    154c:	8181      	strh	r1, [r0, #12]
    154e:	6643      	str	r3, [r0, #100]	; 0x64
    1550:	81c2      	strh	r2, [r0, #14]
    1552:	6103      	str	r3, [r0, #16]
    1554:	6143      	str	r3, [r0, #20]
    1556:	6183      	str	r3, [r0, #24]
    1558:	0019      	movs	r1, r3
    155a:	2208      	movs	r2, #8
    155c:	305c      	adds	r0, #92	; 0x5c
    155e:	f7ff fe32 	bl	11c6 <memset>
    1562:	4b05      	ldr	r3, [pc, #20]	; (1578 <std.isra.0+0x38>)
    1564:	6224      	str	r4, [r4, #32]
    1566:	6263      	str	r3, [r4, #36]	; 0x24
    1568:	4b04      	ldr	r3, [pc, #16]	; (157c <std.isra.0+0x3c>)
    156a:	62a3      	str	r3, [r4, #40]	; 0x28
    156c:	4b04      	ldr	r3, [pc, #16]	; (1580 <std.isra.0+0x40>)
    156e:	62e3      	str	r3, [r4, #44]	; 0x2c
    1570:	4b04      	ldr	r3, [pc, #16]	; (1584 <std.isra.0+0x44>)
    1572:	6323      	str	r3, [r4, #48]	; 0x30
    1574:	bd10      	pop	{r4, pc}
    1576:	46c0      	nop			; (mov r8, r8)
    1578:	00001e95 	.word	0x00001e95
    157c:	00001ebd 	.word	0x00001ebd
    1580:	00001ef5 	.word	0x00001ef5
    1584:	00001f21 	.word	0x00001f21

00001588 <__sfmoreglue>:
    1588:	b570      	push	{r4, r5, r6, lr}
    158a:	2568      	movs	r5, #104	; 0x68
    158c:	1e4a      	subs	r2, r1, #1
    158e:	4355      	muls	r5, r2
    1590:	000e      	movs	r6, r1
    1592:	0029      	movs	r1, r5
    1594:	3174      	adds	r1, #116	; 0x74
    1596:	f000 f91f 	bl	17d8 <_malloc_r>
    159a:	1e04      	subs	r4, r0, #0
    159c:	d008      	beq.n	15b0 <__sfmoreglue+0x28>
    159e:	2100      	movs	r1, #0
    15a0:	002a      	movs	r2, r5
    15a2:	6001      	str	r1, [r0, #0]
    15a4:	6046      	str	r6, [r0, #4]
    15a6:	300c      	adds	r0, #12
    15a8:	60a0      	str	r0, [r4, #8]
    15aa:	3268      	adds	r2, #104	; 0x68
    15ac:	f7ff fe0b 	bl	11c6 <memset>
    15b0:	0020      	movs	r0, r4
    15b2:	bd70      	pop	{r4, r5, r6, pc}

000015b4 <__sinit>:
    15b4:	6983      	ldr	r3, [r0, #24]
    15b6:	b513      	push	{r0, r1, r4, lr}
    15b8:	0004      	movs	r4, r0
    15ba:	2b00      	cmp	r3, #0
    15bc:	d128      	bne.n	1610 <__sinit+0x5c>
    15be:	6483      	str	r3, [r0, #72]	; 0x48
    15c0:	64c3      	str	r3, [r0, #76]	; 0x4c
    15c2:	6503      	str	r3, [r0, #80]	; 0x50
    15c4:	4b13      	ldr	r3, [pc, #76]	; (1614 <__sinit+0x60>)
    15c6:	4a14      	ldr	r2, [pc, #80]	; (1618 <__sinit+0x64>)
    15c8:	681b      	ldr	r3, [r3, #0]
    15ca:	6282      	str	r2, [r0, #40]	; 0x28
    15cc:	9301      	str	r3, [sp, #4]
    15ce:	4298      	cmp	r0, r3
    15d0:	d101      	bne.n	15d6 <__sinit+0x22>
    15d2:	2301      	movs	r3, #1
    15d4:	6183      	str	r3, [r0, #24]
    15d6:	0020      	movs	r0, r4
    15d8:	f000 f820 	bl	161c <__sfp>
    15dc:	6060      	str	r0, [r4, #4]
    15de:	0020      	movs	r0, r4
    15e0:	f000 f81c 	bl	161c <__sfp>
    15e4:	60a0      	str	r0, [r4, #8]
    15e6:	0020      	movs	r0, r4
    15e8:	f000 f818 	bl	161c <__sfp>
    15ec:	2200      	movs	r2, #0
    15ee:	60e0      	str	r0, [r4, #12]
    15f0:	2104      	movs	r1, #4
    15f2:	6860      	ldr	r0, [r4, #4]
    15f4:	f7ff ffa4 	bl	1540 <std.isra.0>
    15f8:	2201      	movs	r2, #1
    15fa:	2109      	movs	r1, #9
    15fc:	68a0      	ldr	r0, [r4, #8]
    15fe:	f7ff ff9f 	bl	1540 <std.isra.0>
    1602:	2202      	movs	r2, #2
    1604:	2112      	movs	r1, #18
    1606:	68e0      	ldr	r0, [r4, #12]
    1608:	f7ff ff9a 	bl	1540 <std.isra.0>
    160c:	2301      	movs	r3, #1
    160e:	61a3      	str	r3, [r4, #24]
    1610:	bd13      	pop	{r0, r1, r4, pc}
    1612:	46c0      	nop			; (mov r8, r8)
    1614:	0000219c 	.word	0x0000219c
    1618:	00001531 	.word	0x00001531

0000161c <__sfp>:
    161c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    161e:	4b1e      	ldr	r3, [pc, #120]	; (1698 <__sfp+0x7c>)
    1620:	0007      	movs	r7, r0
    1622:	681e      	ldr	r6, [r3, #0]
    1624:	69b3      	ldr	r3, [r6, #24]
    1626:	2b00      	cmp	r3, #0
    1628:	d102      	bne.n	1630 <__sfp+0x14>
    162a:	0030      	movs	r0, r6
    162c:	f7ff ffc2 	bl	15b4 <__sinit>
    1630:	3648      	adds	r6, #72	; 0x48
    1632:	68b4      	ldr	r4, [r6, #8]
    1634:	6873      	ldr	r3, [r6, #4]
    1636:	3b01      	subs	r3, #1
    1638:	d504      	bpl.n	1644 <__sfp+0x28>
    163a:	6833      	ldr	r3, [r6, #0]
    163c:	2b00      	cmp	r3, #0
    163e:	d007      	beq.n	1650 <__sfp+0x34>
    1640:	6836      	ldr	r6, [r6, #0]
    1642:	e7f6      	b.n	1632 <__sfp+0x16>
    1644:	220c      	movs	r2, #12
    1646:	5ea5      	ldrsh	r5, [r4, r2]
    1648:	2d00      	cmp	r5, #0
    164a:	d00d      	beq.n	1668 <__sfp+0x4c>
    164c:	3468      	adds	r4, #104	; 0x68
    164e:	e7f2      	b.n	1636 <__sfp+0x1a>
    1650:	2104      	movs	r1, #4
    1652:	0038      	movs	r0, r7
    1654:	f7ff ff98 	bl	1588 <__sfmoreglue>
    1658:	6030      	str	r0, [r6, #0]
    165a:	2800      	cmp	r0, #0
    165c:	d1f0      	bne.n	1640 <__sfp+0x24>
    165e:	230c      	movs	r3, #12
    1660:	0004      	movs	r4, r0
    1662:	603b      	str	r3, [r7, #0]
    1664:	0020      	movs	r0, r4
    1666:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1668:	2301      	movs	r3, #1
    166a:	0020      	movs	r0, r4
    166c:	425b      	negs	r3, r3
    166e:	81e3      	strh	r3, [r4, #14]
    1670:	3302      	adds	r3, #2
    1672:	81a3      	strh	r3, [r4, #12]
    1674:	6665      	str	r5, [r4, #100]	; 0x64
    1676:	6025      	str	r5, [r4, #0]
    1678:	60a5      	str	r5, [r4, #8]
    167a:	6065      	str	r5, [r4, #4]
    167c:	6125      	str	r5, [r4, #16]
    167e:	6165      	str	r5, [r4, #20]
    1680:	61a5      	str	r5, [r4, #24]
    1682:	2208      	movs	r2, #8
    1684:	0029      	movs	r1, r5
    1686:	305c      	adds	r0, #92	; 0x5c
    1688:	f7ff fd9d 	bl	11c6 <memset>
    168c:	6365      	str	r5, [r4, #52]	; 0x34
    168e:	63a5      	str	r5, [r4, #56]	; 0x38
    1690:	64a5      	str	r5, [r4, #72]	; 0x48
    1692:	64e5      	str	r5, [r4, #76]	; 0x4c
    1694:	e7e6      	b.n	1664 <__sfp+0x48>
    1696:	46c0      	nop			; (mov r8, r8)
    1698:	0000219c 	.word	0x0000219c

0000169c <_fwalk_reent>:
    169c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    169e:	0004      	movs	r4, r0
    16a0:	0007      	movs	r7, r0
    16a2:	2600      	movs	r6, #0
    16a4:	9101      	str	r1, [sp, #4]
    16a6:	3448      	adds	r4, #72	; 0x48
    16a8:	2c00      	cmp	r4, #0
    16aa:	d101      	bne.n	16b0 <_fwalk_reent+0x14>
    16ac:	0030      	movs	r0, r6
    16ae:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    16b0:	6863      	ldr	r3, [r4, #4]
    16b2:	68a5      	ldr	r5, [r4, #8]
    16b4:	9300      	str	r3, [sp, #0]
    16b6:	9b00      	ldr	r3, [sp, #0]
    16b8:	3b01      	subs	r3, #1
    16ba:	9300      	str	r3, [sp, #0]
    16bc:	d501      	bpl.n	16c2 <_fwalk_reent+0x26>
    16be:	6824      	ldr	r4, [r4, #0]
    16c0:	e7f2      	b.n	16a8 <_fwalk_reent+0xc>
    16c2:	89ab      	ldrh	r3, [r5, #12]
    16c4:	2b01      	cmp	r3, #1
    16c6:	d908      	bls.n	16da <_fwalk_reent+0x3e>
    16c8:	220e      	movs	r2, #14
    16ca:	5eab      	ldrsh	r3, [r5, r2]
    16cc:	3301      	adds	r3, #1
    16ce:	d004      	beq.n	16da <_fwalk_reent+0x3e>
    16d0:	0029      	movs	r1, r5
    16d2:	0038      	movs	r0, r7
    16d4:	9b01      	ldr	r3, [sp, #4]
    16d6:	4798      	blx	r3
    16d8:	4306      	orrs	r6, r0
    16da:	3568      	adds	r5, #104	; 0x68
    16dc:	e7eb      	b.n	16b6 <_fwalk_reent+0x1a>
	...

000016e0 <__swhatbuf_r>:
    16e0:	b570      	push	{r4, r5, r6, lr}
    16e2:	000e      	movs	r6, r1
    16e4:	001d      	movs	r5, r3
    16e6:	230e      	movs	r3, #14
    16e8:	5ec9      	ldrsh	r1, [r1, r3]
    16ea:	b090      	sub	sp, #64	; 0x40
    16ec:	0014      	movs	r4, r2
    16ee:	2900      	cmp	r1, #0
    16f0:	da07      	bge.n	1702 <__swhatbuf_r+0x22>
    16f2:	2300      	movs	r3, #0
    16f4:	602b      	str	r3, [r5, #0]
    16f6:	89b3      	ldrh	r3, [r6, #12]
    16f8:	061b      	lsls	r3, r3, #24
    16fa:	d411      	bmi.n	1720 <__swhatbuf_r+0x40>
    16fc:	2380      	movs	r3, #128	; 0x80
    16fe:	00db      	lsls	r3, r3, #3
    1700:	e00f      	b.n	1722 <__swhatbuf_r+0x42>
    1702:	aa01      	add	r2, sp, #4
    1704:	f000 fc38 	bl	1f78 <_fstat_r>
    1708:	2800      	cmp	r0, #0
    170a:	dbf2      	blt.n	16f2 <__swhatbuf_r+0x12>
    170c:	22f0      	movs	r2, #240	; 0xf0
    170e:	9b02      	ldr	r3, [sp, #8]
    1710:	0212      	lsls	r2, r2, #8
    1712:	4013      	ands	r3, r2
    1714:	4a05      	ldr	r2, [pc, #20]	; (172c <__swhatbuf_r+0x4c>)
    1716:	189b      	adds	r3, r3, r2
    1718:	425a      	negs	r2, r3
    171a:	4153      	adcs	r3, r2
    171c:	602b      	str	r3, [r5, #0]
    171e:	e7ed      	b.n	16fc <__swhatbuf_r+0x1c>
    1720:	2340      	movs	r3, #64	; 0x40
    1722:	2000      	movs	r0, #0
    1724:	6023      	str	r3, [r4, #0]
    1726:	b010      	add	sp, #64	; 0x40
    1728:	bd70      	pop	{r4, r5, r6, pc}
    172a:	46c0      	nop			; (mov r8, r8)
    172c:	ffffe000 	.word	0xffffe000

00001730 <malloc>:
    1730:	b510      	push	{r4, lr}
    1732:	4b03      	ldr	r3, [pc, #12]	; (1740 <malloc+0x10>)
    1734:	0001      	movs	r1, r0
    1736:	6818      	ldr	r0, [r3, #0]
    1738:	f000 f84e 	bl	17d8 <_malloc_r>
    173c:	bd10      	pop	{r4, pc}
    173e:	46c0      	nop			; (mov r8, r8)
    1740:	20000018 	.word	0x20000018

00001744 <_free_r>:
    1744:	b570      	push	{r4, r5, r6, lr}
    1746:	0005      	movs	r5, r0
    1748:	2900      	cmp	r1, #0
    174a:	d010      	beq.n	176e <_free_r+0x2a>
    174c:	1f0c      	subs	r4, r1, #4
    174e:	6823      	ldr	r3, [r4, #0]
    1750:	2b00      	cmp	r3, #0
    1752:	da00      	bge.n	1756 <_free_r+0x12>
    1754:	18e4      	adds	r4, r4, r3
    1756:	0028      	movs	r0, r5
    1758:	f000 fc51 	bl	1ffe <__malloc_lock>
    175c:	4a1d      	ldr	r2, [pc, #116]	; (17d4 <_free_r+0x90>)
    175e:	6813      	ldr	r3, [r2, #0]
    1760:	2b00      	cmp	r3, #0
    1762:	d105      	bne.n	1770 <_free_r+0x2c>
    1764:	6063      	str	r3, [r4, #4]
    1766:	6014      	str	r4, [r2, #0]
    1768:	0028      	movs	r0, r5
    176a:	f000 fc49 	bl	2000 <__malloc_unlock>
    176e:	bd70      	pop	{r4, r5, r6, pc}
    1770:	42a3      	cmp	r3, r4
    1772:	d909      	bls.n	1788 <_free_r+0x44>
    1774:	6821      	ldr	r1, [r4, #0]
    1776:	1860      	adds	r0, r4, r1
    1778:	4283      	cmp	r3, r0
    177a:	d1f3      	bne.n	1764 <_free_r+0x20>
    177c:	6818      	ldr	r0, [r3, #0]
    177e:	685b      	ldr	r3, [r3, #4]
    1780:	1841      	adds	r1, r0, r1
    1782:	6021      	str	r1, [r4, #0]
    1784:	e7ee      	b.n	1764 <_free_r+0x20>
    1786:	0013      	movs	r3, r2
    1788:	685a      	ldr	r2, [r3, #4]
    178a:	2a00      	cmp	r2, #0
    178c:	d001      	beq.n	1792 <_free_r+0x4e>
    178e:	42a2      	cmp	r2, r4
    1790:	d9f9      	bls.n	1786 <_free_r+0x42>
    1792:	6819      	ldr	r1, [r3, #0]
    1794:	1858      	adds	r0, r3, r1
    1796:	42a0      	cmp	r0, r4
    1798:	d10b      	bne.n	17b2 <_free_r+0x6e>
    179a:	6820      	ldr	r0, [r4, #0]
    179c:	1809      	adds	r1, r1, r0
    179e:	1858      	adds	r0, r3, r1
    17a0:	6019      	str	r1, [r3, #0]
    17a2:	4282      	cmp	r2, r0
    17a4:	d1e0      	bne.n	1768 <_free_r+0x24>
    17a6:	6810      	ldr	r0, [r2, #0]
    17a8:	6852      	ldr	r2, [r2, #4]
    17aa:	1841      	adds	r1, r0, r1
    17ac:	6019      	str	r1, [r3, #0]
    17ae:	605a      	str	r2, [r3, #4]
    17b0:	e7da      	b.n	1768 <_free_r+0x24>
    17b2:	42a0      	cmp	r0, r4
    17b4:	d902      	bls.n	17bc <_free_r+0x78>
    17b6:	230c      	movs	r3, #12
    17b8:	602b      	str	r3, [r5, #0]
    17ba:	e7d5      	b.n	1768 <_free_r+0x24>
    17bc:	6821      	ldr	r1, [r4, #0]
    17be:	1860      	adds	r0, r4, r1
    17c0:	4282      	cmp	r2, r0
    17c2:	d103      	bne.n	17cc <_free_r+0x88>
    17c4:	6810      	ldr	r0, [r2, #0]
    17c6:	6852      	ldr	r2, [r2, #4]
    17c8:	1841      	adds	r1, r0, r1
    17ca:	6021      	str	r1, [r4, #0]
    17cc:	6062      	str	r2, [r4, #4]
    17ce:	605c      	str	r4, [r3, #4]
    17d0:	e7ca      	b.n	1768 <_free_r+0x24>
    17d2:	46c0      	nop			; (mov r8, r8)
    17d4:	200002e4 	.word	0x200002e4

000017d8 <_malloc_r>:
    17d8:	2303      	movs	r3, #3
    17da:	b570      	push	{r4, r5, r6, lr}
    17dc:	1ccd      	adds	r5, r1, #3
    17de:	439d      	bics	r5, r3
    17e0:	3508      	adds	r5, #8
    17e2:	0006      	movs	r6, r0
    17e4:	2d0c      	cmp	r5, #12
    17e6:	d21e      	bcs.n	1826 <_malloc_r+0x4e>
    17e8:	250c      	movs	r5, #12
    17ea:	42a9      	cmp	r1, r5
    17ec:	d81d      	bhi.n	182a <_malloc_r+0x52>
    17ee:	0030      	movs	r0, r6
    17f0:	f000 fc05 	bl	1ffe <__malloc_lock>
    17f4:	4a25      	ldr	r2, [pc, #148]	; (188c <_malloc_r+0xb4>)
    17f6:	6814      	ldr	r4, [r2, #0]
    17f8:	0021      	movs	r1, r4
    17fa:	2900      	cmp	r1, #0
    17fc:	d119      	bne.n	1832 <_malloc_r+0x5a>
    17fe:	4c24      	ldr	r4, [pc, #144]	; (1890 <_malloc_r+0xb8>)
    1800:	6823      	ldr	r3, [r4, #0]
    1802:	2b00      	cmp	r3, #0
    1804:	d103      	bne.n	180e <_malloc_r+0x36>
    1806:	0030      	movs	r0, r6
    1808:	f000 fb32 	bl	1e70 <_sbrk_r>
    180c:	6020      	str	r0, [r4, #0]
    180e:	0029      	movs	r1, r5
    1810:	0030      	movs	r0, r6
    1812:	f000 fb2d 	bl	1e70 <_sbrk_r>
    1816:	1c43      	adds	r3, r0, #1
    1818:	d12c      	bne.n	1874 <_malloc_r+0x9c>
    181a:	230c      	movs	r3, #12
    181c:	0030      	movs	r0, r6
    181e:	6033      	str	r3, [r6, #0]
    1820:	f000 fbee 	bl	2000 <__malloc_unlock>
    1824:	e003      	b.n	182e <_malloc_r+0x56>
    1826:	2d00      	cmp	r5, #0
    1828:	dadf      	bge.n	17ea <_malloc_r+0x12>
    182a:	230c      	movs	r3, #12
    182c:	6033      	str	r3, [r6, #0]
    182e:	2000      	movs	r0, #0
    1830:	bd70      	pop	{r4, r5, r6, pc}
    1832:	680b      	ldr	r3, [r1, #0]
    1834:	1b5b      	subs	r3, r3, r5
    1836:	d41a      	bmi.n	186e <_malloc_r+0x96>
    1838:	2b0b      	cmp	r3, #11
    183a:	d903      	bls.n	1844 <_malloc_r+0x6c>
    183c:	600b      	str	r3, [r1, #0]
    183e:	18cc      	adds	r4, r1, r3
    1840:	6025      	str	r5, [r4, #0]
    1842:	e003      	b.n	184c <_malloc_r+0x74>
    1844:	428c      	cmp	r4, r1
    1846:	d10e      	bne.n	1866 <_malloc_r+0x8e>
    1848:	6863      	ldr	r3, [r4, #4]
    184a:	6013      	str	r3, [r2, #0]
    184c:	0030      	movs	r0, r6
    184e:	f000 fbd7 	bl	2000 <__malloc_unlock>
    1852:	0020      	movs	r0, r4
    1854:	2207      	movs	r2, #7
    1856:	300b      	adds	r0, #11
    1858:	1d23      	adds	r3, r4, #4
    185a:	4390      	bics	r0, r2
    185c:	1ac3      	subs	r3, r0, r3
    185e:	d0e7      	beq.n	1830 <_malloc_r+0x58>
    1860:	425a      	negs	r2, r3
    1862:	50e2      	str	r2, [r4, r3]
    1864:	e7e4      	b.n	1830 <_malloc_r+0x58>
    1866:	684b      	ldr	r3, [r1, #4]
    1868:	6063      	str	r3, [r4, #4]
    186a:	000c      	movs	r4, r1
    186c:	e7ee      	b.n	184c <_malloc_r+0x74>
    186e:	000c      	movs	r4, r1
    1870:	6849      	ldr	r1, [r1, #4]
    1872:	e7c2      	b.n	17fa <_malloc_r+0x22>
    1874:	2303      	movs	r3, #3
    1876:	1cc4      	adds	r4, r0, #3
    1878:	439c      	bics	r4, r3
    187a:	42a0      	cmp	r0, r4
    187c:	d0e0      	beq.n	1840 <_malloc_r+0x68>
    187e:	1a21      	subs	r1, r4, r0
    1880:	0030      	movs	r0, r6
    1882:	f000 faf5 	bl	1e70 <_sbrk_r>
    1886:	1c43      	adds	r3, r0, #1
    1888:	d1da      	bne.n	1840 <_malloc_r+0x68>
    188a:	e7c6      	b.n	181a <_malloc_r+0x42>
    188c:	200002e4 	.word	0x200002e4
    1890:	200002e8 	.word	0x200002e8

00001894 <__ssputs_r>:
    1894:	b5f0      	push	{r4, r5, r6, r7, lr}
    1896:	688e      	ldr	r6, [r1, #8]
    1898:	b085      	sub	sp, #20
    189a:	0007      	movs	r7, r0
    189c:	000c      	movs	r4, r1
    189e:	9203      	str	r2, [sp, #12]
    18a0:	9301      	str	r3, [sp, #4]
    18a2:	429e      	cmp	r6, r3
    18a4:	d839      	bhi.n	191a <__ssputs_r+0x86>
    18a6:	2390      	movs	r3, #144	; 0x90
    18a8:	898a      	ldrh	r2, [r1, #12]
    18aa:	00db      	lsls	r3, r3, #3
    18ac:	421a      	tst	r2, r3
    18ae:	d034      	beq.n	191a <__ssputs_r+0x86>
    18b0:	2503      	movs	r5, #3
    18b2:	6909      	ldr	r1, [r1, #16]
    18b4:	6823      	ldr	r3, [r4, #0]
    18b6:	1a5b      	subs	r3, r3, r1
    18b8:	9302      	str	r3, [sp, #8]
    18ba:	6963      	ldr	r3, [r4, #20]
    18bc:	9802      	ldr	r0, [sp, #8]
    18be:	435d      	muls	r5, r3
    18c0:	0feb      	lsrs	r3, r5, #31
    18c2:	195d      	adds	r5, r3, r5
    18c4:	9b01      	ldr	r3, [sp, #4]
    18c6:	106d      	asrs	r5, r5, #1
    18c8:	3301      	adds	r3, #1
    18ca:	181b      	adds	r3, r3, r0
    18cc:	42ab      	cmp	r3, r5
    18ce:	d900      	bls.n	18d2 <__ssputs_r+0x3e>
    18d0:	001d      	movs	r5, r3
    18d2:	0553      	lsls	r3, r2, #21
    18d4:	d532      	bpl.n	193c <__ssputs_r+0xa8>
    18d6:	0029      	movs	r1, r5
    18d8:	0038      	movs	r0, r7
    18da:	f7ff ff7d 	bl	17d8 <_malloc_r>
    18de:	1e06      	subs	r6, r0, #0
    18e0:	d109      	bne.n	18f6 <__ssputs_r+0x62>
    18e2:	230c      	movs	r3, #12
    18e4:	603b      	str	r3, [r7, #0]
    18e6:	2340      	movs	r3, #64	; 0x40
    18e8:	2001      	movs	r0, #1
    18ea:	89a2      	ldrh	r2, [r4, #12]
    18ec:	4240      	negs	r0, r0
    18ee:	4313      	orrs	r3, r2
    18f0:	81a3      	strh	r3, [r4, #12]
    18f2:	b005      	add	sp, #20
    18f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    18f6:	9a02      	ldr	r2, [sp, #8]
    18f8:	6921      	ldr	r1, [r4, #16]
    18fa:	f7ff fc5b 	bl	11b4 <memcpy>
    18fe:	89a3      	ldrh	r3, [r4, #12]
    1900:	4a14      	ldr	r2, [pc, #80]	; (1954 <__ssputs_r+0xc0>)
    1902:	401a      	ands	r2, r3
    1904:	2380      	movs	r3, #128	; 0x80
    1906:	4313      	orrs	r3, r2
    1908:	81a3      	strh	r3, [r4, #12]
    190a:	9b02      	ldr	r3, [sp, #8]
    190c:	6126      	str	r6, [r4, #16]
    190e:	18f6      	adds	r6, r6, r3
    1910:	6026      	str	r6, [r4, #0]
    1912:	6165      	str	r5, [r4, #20]
    1914:	9e01      	ldr	r6, [sp, #4]
    1916:	1aed      	subs	r5, r5, r3
    1918:	60a5      	str	r5, [r4, #8]
    191a:	9b01      	ldr	r3, [sp, #4]
    191c:	42b3      	cmp	r3, r6
    191e:	d200      	bcs.n	1922 <__ssputs_r+0x8e>
    1920:	001e      	movs	r6, r3
    1922:	0032      	movs	r2, r6
    1924:	9903      	ldr	r1, [sp, #12]
    1926:	6820      	ldr	r0, [r4, #0]
    1928:	f000 fb57 	bl	1fda <memmove>
    192c:	68a3      	ldr	r3, [r4, #8]
    192e:	2000      	movs	r0, #0
    1930:	1b9b      	subs	r3, r3, r6
    1932:	60a3      	str	r3, [r4, #8]
    1934:	6823      	ldr	r3, [r4, #0]
    1936:	199e      	adds	r6, r3, r6
    1938:	6026      	str	r6, [r4, #0]
    193a:	e7da      	b.n	18f2 <__ssputs_r+0x5e>
    193c:	002a      	movs	r2, r5
    193e:	0038      	movs	r0, r7
    1940:	f000 fb5f 	bl	2002 <_realloc_r>
    1944:	1e06      	subs	r6, r0, #0
    1946:	d1e0      	bne.n	190a <__ssputs_r+0x76>
    1948:	6921      	ldr	r1, [r4, #16]
    194a:	0038      	movs	r0, r7
    194c:	f7ff fefa 	bl	1744 <_free_r>
    1950:	e7c7      	b.n	18e2 <__ssputs_r+0x4e>
    1952:	46c0      	nop			; (mov r8, r8)
    1954:	fffffb7f 	.word	0xfffffb7f

00001958 <_svfiprintf_r>:
    1958:	b5f0      	push	{r4, r5, r6, r7, lr}
    195a:	b09f      	sub	sp, #124	; 0x7c
    195c:	9002      	str	r0, [sp, #8]
    195e:	9305      	str	r3, [sp, #20]
    1960:	898b      	ldrh	r3, [r1, #12]
    1962:	000f      	movs	r7, r1
    1964:	0016      	movs	r6, r2
    1966:	061b      	lsls	r3, r3, #24
    1968:	d511      	bpl.n	198e <_svfiprintf_r+0x36>
    196a:	690b      	ldr	r3, [r1, #16]
    196c:	2b00      	cmp	r3, #0
    196e:	d10e      	bne.n	198e <_svfiprintf_r+0x36>
    1970:	2140      	movs	r1, #64	; 0x40
    1972:	f7ff ff31 	bl	17d8 <_malloc_r>
    1976:	6038      	str	r0, [r7, #0]
    1978:	6138      	str	r0, [r7, #16]
    197a:	2800      	cmp	r0, #0
    197c:	d105      	bne.n	198a <_svfiprintf_r+0x32>
    197e:	230c      	movs	r3, #12
    1980:	9a02      	ldr	r2, [sp, #8]
    1982:	3801      	subs	r0, #1
    1984:	6013      	str	r3, [r2, #0]
    1986:	b01f      	add	sp, #124	; 0x7c
    1988:	bdf0      	pop	{r4, r5, r6, r7, pc}
    198a:	2340      	movs	r3, #64	; 0x40
    198c:	617b      	str	r3, [r7, #20]
    198e:	2300      	movs	r3, #0
    1990:	ad06      	add	r5, sp, #24
    1992:	616b      	str	r3, [r5, #20]
    1994:	3320      	adds	r3, #32
    1996:	766b      	strb	r3, [r5, #25]
    1998:	3310      	adds	r3, #16
    199a:	76ab      	strb	r3, [r5, #26]
    199c:	0034      	movs	r4, r6
    199e:	7823      	ldrb	r3, [r4, #0]
    19a0:	2b00      	cmp	r3, #0
    19a2:	d147      	bne.n	1a34 <_svfiprintf_r+0xdc>
    19a4:	1ba3      	subs	r3, r4, r6
    19a6:	9304      	str	r3, [sp, #16]
    19a8:	d00d      	beq.n	19c6 <_svfiprintf_r+0x6e>
    19aa:	1ba3      	subs	r3, r4, r6
    19ac:	0032      	movs	r2, r6
    19ae:	0039      	movs	r1, r7
    19b0:	9802      	ldr	r0, [sp, #8]
    19b2:	f7ff ff6f 	bl	1894 <__ssputs_r>
    19b6:	1c43      	adds	r3, r0, #1
    19b8:	d100      	bne.n	19bc <_svfiprintf_r+0x64>
    19ba:	e0b5      	b.n	1b28 <_svfiprintf_r+0x1d0>
    19bc:	696a      	ldr	r2, [r5, #20]
    19be:	9b04      	ldr	r3, [sp, #16]
    19c0:	4694      	mov	ip, r2
    19c2:	4463      	add	r3, ip
    19c4:	616b      	str	r3, [r5, #20]
    19c6:	7823      	ldrb	r3, [r4, #0]
    19c8:	2b00      	cmp	r3, #0
    19ca:	d100      	bne.n	19ce <_svfiprintf_r+0x76>
    19cc:	e0ac      	b.n	1b28 <_svfiprintf_r+0x1d0>
    19ce:	2201      	movs	r2, #1
    19d0:	2300      	movs	r3, #0
    19d2:	4252      	negs	r2, r2
    19d4:	606a      	str	r2, [r5, #4]
    19d6:	a902      	add	r1, sp, #8
    19d8:	3254      	adds	r2, #84	; 0x54
    19da:	1852      	adds	r2, r2, r1
    19dc:	3401      	adds	r4, #1
    19de:	602b      	str	r3, [r5, #0]
    19e0:	60eb      	str	r3, [r5, #12]
    19e2:	60ab      	str	r3, [r5, #8]
    19e4:	7013      	strb	r3, [r2, #0]
    19e6:	65ab      	str	r3, [r5, #88]	; 0x58
    19e8:	4e58      	ldr	r6, [pc, #352]	; (1b4c <_svfiprintf_r+0x1f4>)
    19ea:	2205      	movs	r2, #5
    19ec:	7821      	ldrb	r1, [r4, #0]
    19ee:	0030      	movs	r0, r6
    19f0:	f000 fae8 	bl	1fc4 <memchr>
    19f4:	1c62      	adds	r2, r4, #1
    19f6:	2800      	cmp	r0, #0
    19f8:	d120      	bne.n	1a3c <_svfiprintf_r+0xe4>
    19fa:	6829      	ldr	r1, [r5, #0]
    19fc:	06cb      	lsls	r3, r1, #27
    19fe:	d504      	bpl.n	1a0a <_svfiprintf_r+0xb2>
    1a00:	2353      	movs	r3, #83	; 0x53
    1a02:	ae02      	add	r6, sp, #8
    1a04:	3020      	adds	r0, #32
    1a06:	199b      	adds	r3, r3, r6
    1a08:	7018      	strb	r0, [r3, #0]
    1a0a:	070b      	lsls	r3, r1, #28
    1a0c:	d504      	bpl.n	1a18 <_svfiprintf_r+0xc0>
    1a0e:	2353      	movs	r3, #83	; 0x53
    1a10:	202b      	movs	r0, #43	; 0x2b
    1a12:	ae02      	add	r6, sp, #8
    1a14:	199b      	adds	r3, r3, r6
    1a16:	7018      	strb	r0, [r3, #0]
    1a18:	7823      	ldrb	r3, [r4, #0]
    1a1a:	2b2a      	cmp	r3, #42	; 0x2a
    1a1c:	d016      	beq.n	1a4c <_svfiprintf_r+0xf4>
    1a1e:	2000      	movs	r0, #0
    1a20:	210a      	movs	r1, #10
    1a22:	9b09      	ldr	r3, [sp, #36]	; 0x24
    1a24:	7822      	ldrb	r2, [r4, #0]
    1a26:	3a30      	subs	r2, #48	; 0x30
    1a28:	2a09      	cmp	r2, #9
    1a2a:	d955      	bls.n	1ad8 <_svfiprintf_r+0x180>
    1a2c:	2800      	cmp	r0, #0
    1a2e:	d015      	beq.n	1a5c <_svfiprintf_r+0x104>
    1a30:	9309      	str	r3, [sp, #36]	; 0x24
    1a32:	e013      	b.n	1a5c <_svfiprintf_r+0x104>
    1a34:	2b25      	cmp	r3, #37	; 0x25
    1a36:	d0b5      	beq.n	19a4 <_svfiprintf_r+0x4c>
    1a38:	3401      	adds	r4, #1
    1a3a:	e7b0      	b.n	199e <_svfiprintf_r+0x46>
    1a3c:	2301      	movs	r3, #1
    1a3e:	1b80      	subs	r0, r0, r6
    1a40:	4083      	lsls	r3, r0
    1a42:	6829      	ldr	r1, [r5, #0]
    1a44:	0014      	movs	r4, r2
    1a46:	430b      	orrs	r3, r1
    1a48:	602b      	str	r3, [r5, #0]
    1a4a:	e7cd      	b.n	19e8 <_svfiprintf_r+0x90>
    1a4c:	9b05      	ldr	r3, [sp, #20]
    1a4e:	1d18      	adds	r0, r3, #4
    1a50:	681b      	ldr	r3, [r3, #0]
    1a52:	9005      	str	r0, [sp, #20]
    1a54:	2b00      	cmp	r3, #0
    1a56:	db39      	blt.n	1acc <_svfiprintf_r+0x174>
    1a58:	9309      	str	r3, [sp, #36]	; 0x24
    1a5a:	0014      	movs	r4, r2
    1a5c:	7823      	ldrb	r3, [r4, #0]
    1a5e:	2b2e      	cmp	r3, #46	; 0x2e
    1a60:	d10b      	bne.n	1a7a <_svfiprintf_r+0x122>
    1a62:	7863      	ldrb	r3, [r4, #1]
    1a64:	1c62      	adds	r2, r4, #1
    1a66:	2b2a      	cmp	r3, #42	; 0x2a
    1a68:	d13e      	bne.n	1ae8 <_svfiprintf_r+0x190>
    1a6a:	9b05      	ldr	r3, [sp, #20]
    1a6c:	3402      	adds	r4, #2
    1a6e:	1d1a      	adds	r2, r3, #4
    1a70:	681b      	ldr	r3, [r3, #0]
    1a72:	9205      	str	r2, [sp, #20]
    1a74:	2b00      	cmp	r3, #0
    1a76:	db34      	blt.n	1ae2 <_svfiprintf_r+0x18a>
    1a78:	9307      	str	r3, [sp, #28]
    1a7a:	4e35      	ldr	r6, [pc, #212]	; (1b50 <_svfiprintf_r+0x1f8>)
    1a7c:	7821      	ldrb	r1, [r4, #0]
    1a7e:	2203      	movs	r2, #3
    1a80:	0030      	movs	r0, r6
    1a82:	f000 fa9f 	bl	1fc4 <memchr>
    1a86:	2800      	cmp	r0, #0
    1a88:	d006      	beq.n	1a98 <_svfiprintf_r+0x140>
    1a8a:	2340      	movs	r3, #64	; 0x40
    1a8c:	1b80      	subs	r0, r0, r6
    1a8e:	4083      	lsls	r3, r0
    1a90:	682a      	ldr	r2, [r5, #0]
    1a92:	3401      	adds	r4, #1
    1a94:	4313      	orrs	r3, r2
    1a96:	602b      	str	r3, [r5, #0]
    1a98:	7821      	ldrb	r1, [r4, #0]
    1a9a:	2206      	movs	r2, #6
    1a9c:	482d      	ldr	r0, [pc, #180]	; (1b54 <_svfiprintf_r+0x1fc>)
    1a9e:	1c66      	adds	r6, r4, #1
    1aa0:	7629      	strb	r1, [r5, #24]
    1aa2:	f000 fa8f 	bl	1fc4 <memchr>
    1aa6:	2800      	cmp	r0, #0
    1aa8:	d046      	beq.n	1b38 <_svfiprintf_r+0x1e0>
    1aaa:	4b2b      	ldr	r3, [pc, #172]	; (1b58 <_svfiprintf_r+0x200>)
    1aac:	2b00      	cmp	r3, #0
    1aae:	d12f      	bne.n	1b10 <_svfiprintf_r+0x1b8>
    1ab0:	6829      	ldr	r1, [r5, #0]
    1ab2:	9b05      	ldr	r3, [sp, #20]
    1ab4:	2207      	movs	r2, #7
    1ab6:	05c9      	lsls	r1, r1, #23
    1ab8:	d528      	bpl.n	1b0c <_svfiprintf_r+0x1b4>
    1aba:	189b      	adds	r3, r3, r2
    1abc:	4393      	bics	r3, r2
    1abe:	3308      	adds	r3, #8
    1ac0:	9305      	str	r3, [sp, #20]
    1ac2:	696b      	ldr	r3, [r5, #20]
    1ac4:	9a03      	ldr	r2, [sp, #12]
    1ac6:	189b      	adds	r3, r3, r2
    1ac8:	616b      	str	r3, [r5, #20]
    1aca:	e767      	b.n	199c <_svfiprintf_r+0x44>
    1acc:	425b      	negs	r3, r3
    1ace:	60eb      	str	r3, [r5, #12]
    1ad0:	2302      	movs	r3, #2
    1ad2:	430b      	orrs	r3, r1
    1ad4:	602b      	str	r3, [r5, #0]
    1ad6:	e7c0      	b.n	1a5a <_svfiprintf_r+0x102>
    1ad8:	434b      	muls	r3, r1
    1ada:	3401      	adds	r4, #1
    1adc:	189b      	adds	r3, r3, r2
    1ade:	2001      	movs	r0, #1
    1ae0:	e7a0      	b.n	1a24 <_svfiprintf_r+0xcc>
    1ae2:	2301      	movs	r3, #1
    1ae4:	425b      	negs	r3, r3
    1ae6:	e7c7      	b.n	1a78 <_svfiprintf_r+0x120>
    1ae8:	2300      	movs	r3, #0
    1aea:	0014      	movs	r4, r2
    1aec:	200a      	movs	r0, #10
    1aee:	001a      	movs	r2, r3
    1af0:	606b      	str	r3, [r5, #4]
    1af2:	7821      	ldrb	r1, [r4, #0]
    1af4:	3930      	subs	r1, #48	; 0x30
    1af6:	2909      	cmp	r1, #9
    1af8:	d903      	bls.n	1b02 <_svfiprintf_r+0x1aa>
    1afa:	2b00      	cmp	r3, #0
    1afc:	d0bd      	beq.n	1a7a <_svfiprintf_r+0x122>
    1afe:	9207      	str	r2, [sp, #28]
    1b00:	e7bb      	b.n	1a7a <_svfiprintf_r+0x122>
    1b02:	4342      	muls	r2, r0
    1b04:	3401      	adds	r4, #1
    1b06:	1852      	adds	r2, r2, r1
    1b08:	2301      	movs	r3, #1
    1b0a:	e7f2      	b.n	1af2 <_svfiprintf_r+0x19a>
    1b0c:	3307      	adds	r3, #7
    1b0e:	e7d5      	b.n	1abc <_svfiprintf_r+0x164>
    1b10:	ab05      	add	r3, sp, #20
    1b12:	9300      	str	r3, [sp, #0]
    1b14:	003a      	movs	r2, r7
    1b16:	4b11      	ldr	r3, [pc, #68]	; (1b5c <_svfiprintf_r+0x204>)
    1b18:	0029      	movs	r1, r5
    1b1a:	9802      	ldr	r0, [sp, #8]
    1b1c:	e000      	b.n	1b20 <_svfiprintf_r+0x1c8>
    1b1e:	bf00      	nop
    1b20:	9003      	str	r0, [sp, #12]
    1b22:	9b03      	ldr	r3, [sp, #12]
    1b24:	3301      	adds	r3, #1
    1b26:	d1cc      	bne.n	1ac2 <_svfiprintf_r+0x16a>
    1b28:	89bb      	ldrh	r3, [r7, #12]
    1b2a:	980b      	ldr	r0, [sp, #44]	; 0x2c
    1b2c:	065b      	lsls	r3, r3, #25
    1b2e:	d400      	bmi.n	1b32 <_svfiprintf_r+0x1da>
    1b30:	e729      	b.n	1986 <_svfiprintf_r+0x2e>
    1b32:	2001      	movs	r0, #1
    1b34:	4240      	negs	r0, r0
    1b36:	e726      	b.n	1986 <_svfiprintf_r+0x2e>
    1b38:	ab05      	add	r3, sp, #20
    1b3a:	9300      	str	r3, [sp, #0]
    1b3c:	003a      	movs	r2, r7
    1b3e:	4b07      	ldr	r3, [pc, #28]	; (1b5c <_svfiprintf_r+0x204>)
    1b40:	0029      	movs	r1, r5
    1b42:	9802      	ldr	r0, [sp, #8]
    1b44:	f000 f87a 	bl	1c3c <_printf_i>
    1b48:	e7ea      	b.n	1b20 <_svfiprintf_r+0x1c8>
    1b4a:	46c0      	nop			; (mov r8, r8)
    1b4c:	0000230c 	.word	0x0000230c
    1b50:	00002312 	.word	0x00002312
    1b54:	00002316 	.word	0x00002316
    1b58:	00000000 	.word	0x00000000
    1b5c:	00001895 	.word	0x00001895

00001b60 <_printf_common>:
    1b60:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    1b62:	0015      	movs	r5, r2
    1b64:	9301      	str	r3, [sp, #4]
    1b66:	688a      	ldr	r2, [r1, #8]
    1b68:	690b      	ldr	r3, [r1, #16]
    1b6a:	9000      	str	r0, [sp, #0]
    1b6c:	000c      	movs	r4, r1
    1b6e:	4293      	cmp	r3, r2
    1b70:	da00      	bge.n	1b74 <_printf_common+0x14>
    1b72:	0013      	movs	r3, r2
    1b74:	0022      	movs	r2, r4
    1b76:	602b      	str	r3, [r5, #0]
    1b78:	3243      	adds	r2, #67	; 0x43
    1b7a:	7812      	ldrb	r2, [r2, #0]
    1b7c:	2a00      	cmp	r2, #0
    1b7e:	d001      	beq.n	1b84 <_printf_common+0x24>
    1b80:	3301      	adds	r3, #1
    1b82:	602b      	str	r3, [r5, #0]
    1b84:	6823      	ldr	r3, [r4, #0]
    1b86:	069b      	lsls	r3, r3, #26
    1b88:	d502      	bpl.n	1b90 <_printf_common+0x30>
    1b8a:	682b      	ldr	r3, [r5, #0]
    1b8c:	3302      	adds	r3, #2
    1b8e:	602b      	str	r3, [r5, #0]
    1b90:	2706      	movs	r7, #6
    1b92:	6823      	ldr	r3, [r4, #0]
    1b94:	401f      	ands	r7, r3
    1b96:	d027      	beq.n	1be8 <_printf_common+0x88>
    1b98:	0023      	movs	r3, r4
    1b9a:	3343      	adds	r3, #67	; 0x43
    1b9c:	781b      	ldrb	r3, [r3, #0]
    1b9e:	1e5a      	subs	r2, r3, #1
    1ba0:	4193      	sbcs	r3, r2
    1ba2:	6822      	ldr	r2, [r4, #0]
    1ba4:	0692      	lsls	r2, r2, #26
    1ba6:	d430      	bmi.n	1c0a <_printf_common+0xaa>
    1ba8:	0022      	movs	r2, r4
    1baa:	9901      	ldr	r1, [sp, #4]
    1bac:	3243      	adds	r2, #67	; 0x43
    1bae:	9800      	ldr	r0, [sp, #0]
    1bb0:	9e08      	ldr	r6, [sp, #32]
    1bb2:	47b0      	blx	r6
    1bb4:	1c43      	adds	r3, r0, #1
    1bb6:	d025      	beq.n	1c04 <_printf_common+0xa4>
    1bb8:	2306      	movs	r3, #6
    1bba:	6820      	ldr	r0, [r4, #0]
    1bbc:	682a      	ldr	r2, [r5, #0]
    1bbe:	68e1      	ldr	r1, [r4, #12]
    1bc0:	4003      	ands	r3, r0
    1bc2:	2500      	movs	r5, #0
    1bc4:	2b04      	cmp	r3, #4
    1bc6:	d103      	bne.n	1bd0 <_printf_common+0x70>
    1bc8:	1a8d      	subs	r5, r1, r2
    1bca:	43eb      	mvns	r3, r5
    1bcc:	17db      	asrs	r3, r3, #31
    1bce:	401d      	ands	r5, r3
    1bd0:	68a3      	ldr	r3, [r4, #8]
    1bd2:	6922      	ldr	r2, [r4, #16]
    1bd4:	4293      	cmp	r3, r2
    1bd6:	dd01      	ble.n	1bdc <_printf_common+0x7c>
    1bd8:	1a9b      	subs	r3, r3, r2
    1bda:	18ed      	adds	r5, r5, r3
    1bdc:	2700      	movs	r7, #0
    1bde:	42bd      	cmp	r5, r7
    1be0:	d120      	bne.n	1c24 <_printf_common+0xc4>
    1be2:	2000      	movs	r0, #0
    1be4:	e010      	b.n	1c08 <_printf_common+0xa8>
    1be6:	3701      	adds	r7, #1
    1be8:	68e3      	ldr	r3, [r4, #12]
    1bea:	682a      	ldr	r2, [r5, #0]
    1bec:	1a9b      	subs	r3, r3, r2
    1bee:	429f      	cmp	r7, r3
    1bf0:	dad2      	bge.n	1b98 <_printf_common+0x38>
    1bf2:	0022      	movs	r2, r4
    1bf4:	2301      	movs	r3, #1
    1bf6:	3219      	adds	r2, #25
    1bf8:	9901      	ldr	r1, [sp, #4]
    1bfa:	9800      	ldr	r0, [sp, #0]
    1bfc:	9e08      	ldr	r6, [sp, #32]
    1bfe:	47b0      	blx	r6
    1c00:	1c43      	adds	r3, r0, #1
    1c02:	d1f0      	bne.n	1be6 <_printf_common+0x86>
    1c04:	2001      	movs	r0, #1
    1c06:	4240      	negs	r0, r0
    1c08:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    1c0a:	2030      	movs	r0, #48	; 0x30
    1c0c:	18e1      	adds	r1, r4, r3
    1c0e:	3143      	adds	r1, #67	; 0x43
    1c10:	7008      	strb	r0, [r1, #0]
    1c12:	0021      	movs	r1, r4
    1c14:	1c5a      	adds	r2, r3, #1
    1c16:	3145      	adds	r1, #69	; 0x45
    1c18:	7809      	ldrb	r1, [r1, #0]
    1c1a:	18a2      	adds	r2, r4, r2
    1c1c:	3243      	adds	r2, #67	; 0x43
    1c1e:	3302      	adds	r3, #2
    1c20:	7011      	strb	r1, [r2, #0]
    1c22:	e7c1      	b.n	1ba8 <_printf_common+0x48>
    1c24:	0022      	movs	r2, r4
    1c26:	2301      	movs	r3, #1
    1c28:	321a      	adds	r2, #26
    1c2a:	9901      	ldr	r1, [sp, #4]
    1c2c:	9800      	ldr	r0, [sp, #0]
    1c2e:	9e08      	ldr	r6, [sp, #32]
    1c30:	47b0      	blx	r6
    1c32:	1c43      	adds	r3, r0, #1
    1c34:	d0e6      	beq.n	1c04 <_printf_common+0xa4>
    1c36:	3701      	adds	r7, #1
    1c38:	e7d1      	b.n	1bde <_printf_common+0x7e>
	...

00001c3c <_printf_i>:
    1c3c:	b5f0      	push	{r4, r5, r6, r7, lr}
    1c3e:	b08b      	sub	sp, #44	; 0x2c
    1c40:	9206      	str	r2, [sp, #24]
    1c42:	000a      	movs	r2, r1
    1c44:	3243      	adds	r2, #67	; 0x43
    1c46:	9307      	str	r3, [sp, #28]
    1c48:	9005      	str	r0, [sp, #20]
    1c4a:	9204      	str	r2, [sp, #16]
    1c4c:	7e0a      	ldrb	r2, [r1, #24]
    1c4e:	000c      	movs	r4, r1
    1c50:	9b10      	ldr	r3, [sp, #64]	; 0x40
    1c52:	2a6e      	cmp	r2, #110	; 0x6e
    1c54:	d100      	bne.n	1c58 <_printf_i+0x1c>
    1c56:	e08f      	b.n	1d78 <_printf_i+0x13c>
    1c58:	d817      	bhi.n	1c8a <_printf_i+0x4e>
    1c5a:	2a63      	cmp	r2, #99	; 0x63
    1c5c:	d02c      	beq.n	1cb8 <_printf_i+0x7c>
    1c5e:	d808      	bhi.n	1c72 <_printf_i+0x36>
    1c60:	2a00      	cmp	r2, #0
    1c62:	d100      	bne.n	1c66 <_printf_i+0x2a>
    1c64:	e099      	b.n	1d9a <_printf_i+0x15e>
    1c66:	2a58      	cmp	r2, #88	; 0x58
    1c68:	d054      	beq.n	1d14 <_printf_i+0xd8>
    1c6a:	0026      	movs	r6, r4
    1c6c:	3642      	adds	r6, #66	; 0x42
    1c6e:	7032      	strb	r2, [r6, #0]
    1c70:	e029      	b.n	1cc6 <_printf_i+0x8a>
    1c72:	2a64      	cmp	r2, #100	; 0x64
    1c74:	d001      	beq.n	1c7a <_printf_i+0x3e>
    1c76:	2a69      	cmp	r2, #105	; 0x69
    1c78:	d1f7      	bne.n	1c6a <_printf_i+0x2e>
    1c7a:	6821      	ldr	r1, [r4, #0]
    1c7c:	681a      	ldr	r2, [r3, #0]
    1c7e:	0608      	lsls	r0, r1, #24
    1c80:	d523      	bpl.n	1cca <_printf_i+0x8e>
    1c82:	1d11      	adds	r1, r2, #4
    1c84:	6019      	str	r1, [r3, #0]
    1c86:	6815      	ldr	r5, [r2, #0]
    1c88:	e025      	b.n	1cd6 <_printf_i+0x9a>
    1c8a:	2a73      	cmp	r2, #115	; 0x73
    1c8c:	d100      	bne.n	1c90 <_printf_i+0x54>
    1c8e:	e088      	b.n	1da2 <_printf_i+0x166>
    1c90:	d808      	bhi.n	1ca4 <_printf_i+0x68>
    1c92:	2a6f      	cmp	r2, #111	; 0x6f
    1c94:	d029      	beq.n	1cea <_printf_i+0xae>
    1c96:	2a70      	cmp	r2, #112	; 0x70
    1c98:	d1e7      	bne.n	1c6a <_printf_i+0x2e>
    1c9a:	2220      	movs	r2, #32
    1c9c:	6809      	ldr	r1, [r1, #0]
    1c9e:	430a      	orrs	r2, r1
    1ca0:	6022      	str	r2, [r4, #0]
    1ca2:	e003      	b.n	1cac <_printf_i+0x70>
    1ca4:	2a75      	cmp	r2, #117	; 0x75
    1ca6:	d020      	beq.n	1cea <_printf_i+0xae>
    1ca8:	2a78      	cmp	r2, #120	; 0x78
    1caa:	d1de      	bne.n	1c6a <_printf_i+0x2e>
    1cac:	0022      	movs	r2, r4
    1cae:	2178      	movs	r1, #120	; 0x78
    1cb0:	3245      	adds	r2, #69	; 0x45
    1cb2:	7011      	strb	r1, [r2, #0]
    1cb4:	4a6c      	ldr	r2, [pc, #432]	; (1e68 <_printf_i+0x22c>)
    1cb6:	e030      	b.n	1d1a <_printf_i+0xde>
    1cb8:	000e      	movs	r6, r1
    1cba:	681a      	ldr	r2, [r3, #0]
    1cbc:	3642      	adds	r6, #66	; 0x42
    1cbe:	1d11      	adds	r1, r2, #4
    1cc0:	6019      	str	r1, [r3, #0]
    1cc2:	6813      	ldr	r3, [r2, #0]
    1cc4:	7033      	strb	r3, [r6, #0]
    1cc6:	2301      	movs	r3, #1
    1cc8:	e079      	b.n	1dbe <_printf_i+0x182>
    1cca:	0649      	lsls	r1, r1, #25
    1ccc:	d5d9      	bpl.n	1c82 <_printf_i+0x46>
    1cce:	1d11      	adds	r1, r2, #4
    1cd0:	6019      	str	r1, [r3, #0]
    1cd2:	2300      	movs	r3, #0
    1cd4:	5ed5      	ldrsh	r5, [r2, r3]
    1cd6:	2d00      	cmp	r5, #0
    1cd8:	da03      	bge.n	1ce2 <_printf_i+0xa6>
    1cda:	232d      	movs	r3, #45	; 0x2d
    1cdc:	9a04      	ldr	r2, [sp, #16]
    1cde:	426d      	negs	r5, r5
    1ce0:	7013      	strb	r3, [r2, #0]
    1ce2:	4b62      	ldr	r3, [pc, #392]	; (1e6c <_printf_i+0x230>)
    1ce4:	270a      	movs	r7, #10
    1ce6:	9303      	str	r3, [sp, #12]
    1ce8:	e02f      	b.n	1d4a <_printf_i+0x10e>
    1cea:	6820      	ldr	r0, [r4, #0]
    1cec:	6819      	ldr	r1, [r3, #0]
    1cee:	0605      	lsls	r5, r0, #24
    1cf0:	d503      	bpl.n	1cfa <_printf_i+0xbe>
    1cf2:	1d08      	adds	r0, r1, #4
    1cf4:	6018      	str	r0, [r3, #0]
    1cf6:	680d      	ldr	r5, [r1, #0]
    1cf8:	e005      	b.n	1d06 <_printf_i+0xca>
    1cfa:	0640      	lsls	r0, r0, #25
    1cfc:	d5f9      	bpl.n	1cf2 <_printf_i+0xb6>
    1cfe:	680d      	ldr	r5, [r1, #0]
    1d00:	1d08      	adds	r0, r1, #4
    1d02:	6018      	str	r0, [r3, #0]
    1d04:	b2ad      	uxth	r5, r5
    1d06:	4b59      	ldr	r3, [pc, #356]	; (1e6c <_printf_i+0x230>)
    1d08:	2708      	movs	r7, #8
    1d0a:	9303      	str	r3, [sp, #12]
    1d0c:	2a6f      	cmp	r2, #111	; 0x6f
    1d0e:	d018      	beq.n	1d42 <_printf_i+0x106>
    1d10:	270a      	movs	r7, #10
    1d12:	e016      	b.n	1d42 <_printf_i+0x106>
    1d14:	3145      	adds	r1, #69	; 0x45
    1d16:	700a      	strb	r2, [r1, #0]
    1d18:	4a54      	ldr	r2, [pc, #336]	; (1e6c <_printf_i+0x230>)
    1d1a:	9203      	str	r2, [sp, #12]
    1d1c:	681a      	ldr	r2, [r3, #0]
    1d1e:	6821      	ldr	r1, [r4, #0]
    1d20:	1d10      	adds	r0, r2, #4
    1d22:	6018      	str	r0, [r3, #0]
    1d24:	6815      	ldr	r5, [r2, #0]
    1d26:	0608      	lsls	r0, r1, #24
    1d28:	d522      	bpl.n	1d70 <_printf_i+0x134>
    1d2a:	07cb      	lsls	r3, r1, #31
    1d2c:	d502      	bpl.n	1d34 <_printf_i+0xf8>
    1d2e:	2320      	movs	r3, #32
    1d30:	4319      	orrs	r1, r3
    1d32:	6021      	str	r1, [r4, #0]
    1d34:	2710      	movs	r7, #16
    1d36:	2d00      	cmp	r5, #0
    1d38:	d103      	bne.n	1d42 <_printf_i+0x106>
    1d3a:	2320      	movs	r3, #32
    1d3c:	6822      	ldr	r2, [r4, #0]
    1d3e:	439a      	bics	r2, r3
    1d40:	6022      	str	r2, [r4, #0]
    1d42:	0023      	movs	r3, r4
    1d44:	2200      	movs	r2, #0
    1d46:	3343      	adds	r3, #67	; 0x43
    1d48:	701a      	strb	r2, [r3, #0]
    1d4a:	6863      	ldr	r3, [r4, #4]
    1d4c:	60a3      	str	r3, [r4, #8]
    1d4e:	2b00      	cmp	r3, #0
    1d50:	db5c      	blt.n	1e0c <_printf_i+0x1d0>
    1d52:	2204      	movs	r2, #4
    1d54:	6821      	ldr	r1, [r4, #0]
    1d56:	4391      	bics	r1, r2
    1d58:	6021      	str	r1, [r4, #0]
    1d5a:	2d00      	cmp	r5, #0
    1d5c:	d158      	bne.n	1e10 <_printf_i+0x1d4>
    1d5e:	9e04      	ldr	r6, [sp, #16]
    1d60:	2b00      	cmp	r3, #0
    1d62:	d064      	beq.n	1e2e <_printf_i+0x1f2>
    1d64:	0026      	movs	r6, r4
    1d66:	9b03      	ldr	r3, [sp, #12]
    1d68:	3642      	adds	r6, #66	; 0x42
    1d6a:	781b      	ldrb	r3, [r3, #0]
    1d6c:	7033      	strb	r3, [r6, #0]
    1d6e:	e05e      	b.n	1e2e <_printf_i+0x1f2>
    1d70:	0648      	lsls	r0, r1, #25
    1d72:	d5da      	bpl.n	1d2a <_printf_i+0xee>
    1d74:	b2ad      	uxth	r5, r5
    1d76:	e7d8      	b.n	1d2a <_printf_i+0xee>
    1d78:	6809      	ldr	r1, [r1, #0]
    1d7a:	681a      	ldr	r2, [r3, #0]
    1d7c:	0608      	lsls	r0, r1, #24
    1d7e:	d505      	bpl.n	1d8c <_printf_i+0x150>
    1d80:	1d11      	adds	r1, r2, #4
    1d82:	6019      	str	r1, [r3, #0]
    1d84:	6813      	ldr	r3, [r2, #0]
    1d86:	6962      	ldr	r2, [r4, #20]
    1d88:	601a      	str	r2, [r3, #0]
    1d8a:	e006      	b.n	1d9a <_printf_i+0x15e>
    1d8c:	0649      	lsls	r1, r1, #25
    1d8e:	d5f7      	bpl.n	1d80 <_printf_i+0x144>
    1d90:	1d11      	adds	r1, r2, #4
    1d92:	6019      	str	r1, [r3, #0]
    1d94:	6813      	ldr	r3, [r2, #0]
    1d96:	8aa2      	ldrh	r2, [r4, #20]
    1d98:	801a      	strh	r2, [r3, #0]
    1d9a:	2300      	movs	r3, #0
    1d9c:	9e04      	ldr	r6, [sp, #16]
    1d9e:	6123      	str	r3, [r4, #16]
    1da0:	e054      	b.n	1e4c <_printf_i+0x210>
    1da2:	681a      	ldr	r2, [r3, #0]
    1da4:	1d11      	adds	r1, r2, #4
    1da6:	6019      	str	r1, [r3, #0]
    1da8:	6816      	ldr	r6, [r2, #0]
    1daa:	2100      	movs	r1, #0
    1dac:	6862      	ldr	r2, [r4, #4]
    1dae:	0030      	movs	r0, r6
    1db0:	f000 f908 	bl	1fc4 <memchr>
    1db4:	2800      	cmp	r0, #0
    1db6:	d001      	beq.n	1dbc <_printf_i+0x180>
    1db8:	1b80      	subs	r0, r0, r6
    1dba:	6060      	str	r0, [r4, #4]
    1dbc:	6863      	ldr	r3, [r4, #4]
    1dbe:	6123      	str	r3, [r4, #16]
    1dc0:	2300      	movs	r3, #0
    1dc2:	9a04      	ldr	r2, [sp, #16]
    1dc4:	7013      	strb	r3, [r2, #0]
    1dc6:	e041      	b.n	1e4c <_printf_i+0x210>
    1dc8:	6923      	ldr	r3, [r4, #16]
    1dca:	0032      	movs	r2, r6
    1dcc:	9906      	ldr	r1, [sp, #24]
    1dce:	9805      	ldr	r0, [sp, #20]
    1dd0:	9d07      	ldr	r5, [sp, #28]
    1dd2:	47a8      	blx	r5
    1dd4:	1c43      	adds	r3, r0, #1
    1dd6:	d043      	beq.n	1e60 <_printf_i+0x224>
    1dd8:	6823      	ldr	r3, [r4, #0]
    1dda:	2500      	movs	r5, #0
    1ddc:	079b      	lsls	r3, r3, #30
    1dde:	d40f      	bmi.n	1e00 <_printf_i+0x1c4>
    1de0:	9b09      	ldr	r3, [sp, #36]	; 0x24
    1de2:	68e0      	ldr	r0, [r4, #12]
    1de4:	4298      	cmp	r0, r3
    1de6:	da3d      	bge.n	1e64 <_printf_i+0x228>
    1de8:	0018      	movs	r0, r3
    1dea:	e03b      	b.n	1e64 <_printf_i+0x228>
    1dec:	0022      	movs	r2, r4
    1dee:	2301      	movs	r3, #1
    1df0:	3219      	adds	r2, #25
    1df2:	9906      	ldr	r1, [sp, #24]
    1df4:	9805      	ldr	r0, [sp, #20]
    1df6:	9e07      	ldr	r6, [sp, #28]
    1df8:	47b0      	blx	r6
    1dfa:	1c43      	adds	r3, r0, #1
    1dfc:	d030      	beq.n	1e60 <_printf_i+0x224>
    1dfe:	3501      	adds	r5, #1
    1e00:	68e3      	ldr	r3, [r4, #12]
    1e02:	9a09      	ldr	r2, [sp, #36]	; 0x24
    1e04:	1a9b      	subs	r3, r3, r2
    1e06:	429d      	cmp	r5, r3
    1e08:	dbf0      	blt.n	1dec <_printf_i+0x1b0>
    1e0a:	e7e9      	b.n	1de0 <_printf_i+0x1a4>
    1e0c:	2d00      	cmp	r5, #0
    1e0e:	d0a9      	beq.n	1d64 <_printf_i+0x128>
    1e10:	9e04      	ldr	r6, [sp, #16]
    1e12:	0028      	movs	r0, r5
    1e14:	0039      	movs	r1, r7
    1e16:	f7fe fd29 	bl	86c <__aeabi_uidivmod>
    1e1a:	9b03      	ldr	r3, [sp, #12]
    1e1c:	3e01      	subs	r6, #1
    1e1e:	5c5b      	ldrb	r3, [r3, r1]
    1e20:	0028      	movs	r0, r5
    1e22:	7033      	strb	r3, [r6, #0]
    1e24:	0039      	movs	r1, r7
    1e26:	f7fe fd06 	bl	836 <__aeabi_uidiv>
    1e2a:	1e05      	subs	r5, r0, #0
    1e2c:	d1f1      	bne.n	1e12 <_printf_i+0x1d6>
    1e2e:	2f08      	cmp	r7, #8
    1e30:	d109      	bne.n	1e46 <_printf_i+0x20a>
    1e32:	6823      	ldr	r3, [r4, #0]
    1e34:	07db      	lsls	r3, r3, #31
    1e36:	d506      	bpl.n	1e46 <_printf_i+0x20a>
    1e38:	6863      	ldr	r3, [r4, #4]
    1e3a:	6922      	ldr	r2, [r4, #16]
    1e3c:	4293      	cmp	r3, r2
    1e3e:	dc02      	bgt.n	1e46 <_printf_i+0x20a>
    1e40:	2330      	movs	r3, #48	; 0x30
    1e42:	3e01      	subs	r6, #1
    1e44:	7033      	strb	r3, [r6, #0]
    1e46:	9b04      	ldr	r3, [sp, #16]
    1e48:	1b9b      	subs	r3, r3, r6
    1e4a:	6123      	str	r3, [r4, #16]
    1e4c:	9b07      	ldr	r3, [sp, #28]
    1e4e:	aa09      	add	r2, sp, #36	; 0x24
    1e50:	9300      	str	r3, [sp, #0]
    1e52:	0021      	movs	r1, r4
    1e54:	9b06      	ldr	r3, [sp, #24]
    1e56:	9805      	ldr	r0, [sp, #20]
    1e58:	f7ff fe82 	bl	1b60 <_printf_common>
    1e5c:	1c43      	adds	r3, r0, #1
    1e5e:	d1b3      	bne.n	1dc8 <_printf_i+0x18c>
    1e60:	2001      	movs	r0, #1
    1e62:	4240      	negs	r0, r0
    1e64:	b00b      	add	sp, #44	; 0x2c
    1e66:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1e68:	0000232e 	.word	0x0000232e
    1e6c:	0000231d 	.word	0x0000231d

00001e70 <_sbrk_r>:
    1e70:	2300      	movs	r3, #0
    1e72:	b570      	push	{r4, r5, r6, lr}
    1e74:	4c06      	ldr	r4, [pc, #24]	; (1e90 <_sbrk_r+0x20>)
    1e76:	0005      	movs	r5, r0
    1e78:	0008      	movs	r0, r1
    1e7a:	6023      	str	r3, [r4, #0]
    1e7c:	f7fe fbd8 	bl	630 <_sbrk>
    1e80:	1c43      	adds	r3, r0, #1
    1e82:	d103      	bne.n	1e8c <_sbrk_r+0x1c>
    1e84:	6823      	ldr	r3, [r4, #0]
    1e86:	2b00      	cmp	r3, #0
    1e88:	d000      	beq.n	1e8c <_sbrk_r+0x1c>
    1e8a:	602b      	str	r3, [r5, #0]
    1e8c:	bd70      	pop	{r4, r5, r6, pc}
    1e8e:	46c0      	nop			; (mov r8, r8)
    1e90:	20000530 	.word	0x20000530

00001e94 <__sread>:
    1e94:	b570      	push	{r4, r5, r6, lr}
    1e96:	000c      	movs	r4, r1
    1e98:	250e      	movs	r5, #14
    1e9a:	5f49      	ldrsh	r1, [r1, r5]
    1e9c:	f000 f8d8 	bl	2050 <_read_r>
    1ea0:	2800      	cmp	r0, #0
    1ea2:	db03      	blt.n	1eac <__sread+0x18>
    1ea4:	6d63      	ldr	r3, [r4, #84]	; 0x54
    1ea6:	181b      	adds	r3, r3, r0
    1ea8:	6563      	str	r3, [r4, #84]	; 0x54
    1eaa:	bd70      	pop	{r4, r5, r6, pc}
    1eac:	89a3      	ldrh	r3, [r4, #12]
    1eae:	4a02      	ldr	r2, [pc, #8]	; (1eb8 <__sread+0x24>)
    1eb0:	4013      	ands	r3, r2
    1eb2:	81a3      	strh	r3, [r4, #12]
    1eb4:	e7f9      	b.n	1eaa <__sread+0x16>
    1eb6:	46c0      	nop			; (mov r8, r8)
    1eb8:	ffffefff 	.word	0xffffefff

00001ebc <__swrite>:
    1ebc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1ebe:	001f      	movs	r7, r3
    1ec0:	898b      	ldrh	r3, [r1, #12]
    1ec2:	0005      	movs	r5, r0
    1ec4:	000c      	movs	r4, r1
    1ec6:	0016      	movs	r6, r2
    1ec8:	05db      	lsls	r3, r3, #23
    1eca:	d505      	bpl.n	1ed8 <__swrite+0x1c>
    1ecc:	230e      	movs	r3, #14
    1ece:	5ec9      	ldrsh	r1, [r1, r3]
    1ed0:	2200      	movs	r2, #0
    1ed2:	2302      	movs	r3, #2
    1ed4:	f000 f862 	bl	1f9c <_lseek_r>
    1ed8:	89a3      	ldrh	r3, [r4, #12]
    1eda:	4a05      	ldr	r2, [pc, #20]	; (1ef0 <__swrite+0x34>)
    1edc:	0028      	movs	r0, r5
    1ede:	4013      	ands	r3, r2
    1ee0:	81a3      	strh	r3, [r4, #12]
    1ee2:	0032      	movs	r2, r6
    1ee4:	230e      	movs	r3, #14
    1ee6:	5ee1      	ldrsh	r1, [r4, r3]
    1ee8:	003b      	movs	r3, r7
    1eea:	f000 f81f 	bl	1f2c <_write_r>
    1eee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1ef0:	ffffefff 	.word	0xffffefff

00001ef4 <__sseek>:
    1ef4:	b570      	push	{r4, r5, r6, lr}
    1ef6:	000c      	movs	r4, r1
    1ef8:	250e      	movs	r5, #14
    1efa:	5f49      	ldrsh	r1, [r1, r5]
    1efc:	f000 f84e 	bl	1f9c <_lseek_r>
    1f00:	89a3      	ldrh	r3, [r4, #12]
    1f02:	1c42      	adds	r2, r0, #1
    1f04:	d103      	bne.n	1f0e <__sseek+0x1a>
    1f06:	4a05      	ldr	r2, [pc, #20]	; (1f1c <__sseek+0x28>)
    1f08:	4013      	ands	r3, r2
    1f0a:	81a3      	strh	r3, [r4, #12]
    1f0c:	bd70      	pop	{r4, r5, r6, pc}
    1f0e:	2280      	movs	r2, #128	; 0x80
    1f10:	0152      	lsls	r2, r2, #5
    1f12:	4313      	orrs	r3, r2
    1f14:	81a3      	strh	r3, [r4, #12]
    1f16:	6560      	str	r0, [r4, #84]	; 0x54
    1f18:	e7f8      	b.n	1f0c <__sseek+0x18>
    1f1a:	46c0      	nop			; (mov r8, r8)
    1f1c:	ffffefff 	.word	0xffffefff

00001f20 <__sclose>:
    1f20:	b510      	push	{r4, lr}
    1f22:	230e      	movs	r3, #14
    1f24:	5ec9      	ldrsh	r1, [r1, r3]
    1f26:	f000 f815 	bl	1f54 <_close_r>
    1f2a:	bd10      	pop	{r4, pc}

00001f2c <_write_r>:
    1f2c:	b570      	push	{r4, r5, r6, lr}
    1f2e:	0005      	movs	r5, r0
    1f30:	0008      	movs	r0, r1
    1f32:	0011      	movs	r1, r2
    1f34:	2200      	movs	r2, #0
    1f36:	4c06      	ldr	r4, [pc, #24]	; (1f50 <_write_r+0x24>)
    1f38:	6022      	str	r2, [r4, #0]
    1f3a:	001a      	movs	r2, r3
    1f3c:	f7ff f898 	bl	1070 <_write>
    1f40:	1c43      	adds	r3, r0, #1
    1f42:	d103      	bne.n	1f4c <_write_r+0x20>
    1f44:	6823      	ldr	r3, [r4, #0]
    1f46:	2b00      	cmp	r3, #0
    1f48:	d000      	beq.n	1f4c <_write_r+0x20>
    1f4a:	602b      	str	r3, [r5, #0]
    1f4c:	bd70      	pop	{r4, r5, r6, pc}
    1f4e:	46c0      	nop			; (mov r8, r8)
    1f50:	20000530 	.word	0x20000530

00001f54 <_close_r>:
    1f54:	2300      	movs	r3, #0
    1f56:	b570      	push	{r4, r5, r6, lr}
    1f58:	4c06      	ldr	r4, [pc, #24]	; (1f74 <_close_r+0x20>)
    1f5a:	0005      	movs	r5, r0
    1f5c:	0008      	movs	r0, r1
    1f5e:	6023      	str	r3, [r4, #0]
    1f60:	f7fe fb78 	bl	654 <_close>
    1f64:	1c43      	adds	r3, r0, #1
    1f66:	d103      	bne.n	1f70 <_close_r+0x1c>
    1f68:	6823      	ldr	r3, [r4, #0]
    1f6a:	2b00      	cmp	r3, #0
    1f6c:	d000      	beq.n	1f70 <_close_r+0x1c>
    1f6e:	602b      	str	r3, [r5, #0]
    1f70:	bd70      	pop	{r4, r5, r6, pc}
    1f72:	46c0      	nop			; (mov r8, r8)
    1f74:	20000530 	.word	0x20000530

00001f78 <_fstat_r>:
    1f78:	2300      	movs	r3, #0
    1f7a:	b570      	push	{r4, r5, r6, lr}
    1f7c:	4c06      	ldr	r4, [pc, #24]	; (1f98 <_fstat_r+0x20>)
    1f7e:	0005      	movs	r5, r0
    1f80:	0008      	movs	r0, r1
    1f82:	0011      	movs	r1, r2
    1f84:	6023      	str	r3, [r4, #0]
    1f86:	f7fe fb68 	bl	65a <_fstat>
    1f8a:	1c43      	adds	r3, r0, #1
    1f8c:	d103      	bne.n	1f96 <_fstat_r+0x1e>
    1f8e:	6823      	ldr	r3, [r4, #0]
    1f90:	2b00      	cmp	r3, #0
    1f92:	d000      	beq.n	1f96 <_fstat_r+0x1e>
    1f94:	602b      	str	r3, [r5, #0]
    1f96:	bd70      	pop	{r4, r5, r6, pc}
    1f98:	20000530 	.word	0x20000530

00001f9c <_lseek_r>:
    1f9c:	b570      	push	{r4, r5, r6, lr}
    1f9e:	0005      	movs	r5, r0
    1fa0:	0008      	movs	r0, r1
    1fa2:	0011      	movs	r1, r2
    1fa4:	2200      	movs	r2, #0
    1fa6:	4c06      	ldr	r4, [pc, #24]	; (1fc0 <_lseek_r+0x24>)
    1fa8:	6022      	str	r2, [r4, #0]
    1faa:	001a      	movs	r2, r3
    1fac:	f7fe fb5a 	bl	664 <_lseek>
    1fb0:	1c43      	adds	r3, r0, #1
    1fb2:	d103      	bne.n	1fbc <_lseek_r+0x20>
    1fb4:	6823      	ldr	r3, [r4, #0]
    1fb6:	2b00      	cmp	r3, #0
    1fb8:	d000      	beq.n	1fbc <_lseek_r+0x20>
    1fba:	602b      	str	r3, [r5, #0]
    1fbc:	bd70      	pop	{r4, r5, r6, pc}
    1fbe:	46c0      	nop			; (mov r8, r8)
    1fc0:	20000530 	.word	0x20000530

00001fc4 <memchr>:
    1fc4:	b2c9      	uxtb	r1, r1
    1fc6:	1882      	adds	r2, r0, r2
    1fc8:	4290      	cmp	r0, r2
    1fca:	d101      	bne.n	1fd0 <memchr+0xc>
    1fcc:	2000      	movs	r0, #0
    1fce:	4770      	bx	lr
    1fd0:	7803      	ldrb	r3, [r0, #0]
    1fd2:	428b      	cmp	r3, r1
    1fd4:	d0fb      	beq.n	1fce <memchr+0xa>
    1fd6:	3001      	adds	r0, #1
    1fd8:	e7f6      	b.n	1fc8 <memchr+0x4>

00001fda <memmove>:
    1fda:	b510      	push	{r4, lr}
    1fdc:	4288      	cmp	r0, r1
    1fde:	d902      	bls.n	1fe6 <memmove+0xc>
    1fe0:	188b      	adds	r3, r1, r2
    1fe2:	4298      	cmp	r0, r3
    1fe4:	d308      	bcc.n	1ff8 <memmove+0x1e>
    1fe6:	2300      	movs	r3, #0
    1fe8:	429a      	cmp	r2, r3
    1fea:	d007      	beq.n	1ffc <memmove+0x22>
    1fec:	5ccc      	ldrb	r4, [r1, r3]
    1fee:	54c4      	strb	r4, [r0, r3]
    1ff0:	3301      	adds	r3, #1
    1ff2:	e7f9      	b.n	1fe8 <memmove+0xe>
    1ff4:	5c8b      	ldrb	r3, [r1, r2]
    1ff6:	5483      	strb	r3, [r0, r2]
    1ff8:	3a01      	subs	r2, #1
    1ffa:	d2fb      	bcs.n	1ff4 <memmove+0x1a>
    1ffc:	bd10      	pop	{r4, pc}

00001ffe <__malloc_lock>:
    1ffe:	4770      	bx	lr

00002000 <__malloc_unlock>:
    2000:	4770      	bx	lr

00002002 <_realloc_r>:
    2002:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2004:	0007      	movs	r7, r0
    2006:	000d      	movs	r5, r1
    2008:	0016      	movs	r6, r2
    200a:	2900      	cmp	r1, #0
    200c:	d105      	bne.n	201a <_realloc_r+0x18>
    200e:	0011      	movs	r1, r2
    2010:	f7ff fbe2 	bl	17d8 <_malloc_r>
    2014:	0004      	movs	r4, r0
    2016:	0020      	movs	r0, r4
    2018:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    201a:	2a00      	cmp	r2, #0
    201c:	d103      	bne.n	2026 <_realloc_r+0x24>
    201e:	f7ff fb91 	bl	1744 <_free_r>
    2022:	0034      	movs	r4, r6
    2024:	e7f7      	b.n	2016 <_realloc_r+0x14>
    2026:	f000 f827 	bl	2078 <_malloc_usable_size_r>
    202a:	002c      	movs	r4, r5
    202c:	4286      	cmp	r6, r0
    202e:	d9f2      	bls.n	2016 <_realloc_r+0x14>
    2030:	0031      	movs	r1, r6
    2032:	0038      	movs	r0, r7
    2034:	f7ff fbd0 	bl	17d8 <_malloc_r>
    2038:	1e04      	subs	r4, r0, #0
    203a:	d0ec      	beq.n	2016 <_realloc_r+0x14>
    203c:	0029      	movs	r1, r5
    203e:	0032      	movs	r2, r6
    2040:	f7ff f8b8 	bl	11b4 <memcpy>
    2044:	0029      	movs	r1, r5
    2046:	0038      	movs	r0, r7
    2048:	f7ff fb7c 	bl	1744 <_free_r>
    204c:	e7e3      	b.n	2016 <_realloc_r+0x14>
	...

00002050 <_read_r>:
    2050:	b570      	push	{r4, r5, r6, lr}
    2052:	0005      	movs	r5, r0
    2054:	0008      	movs	r0, r1
    2056:	0011      	movs	r1, r2
    2058:	2200      	movs	r2, #0
    205a:	4c06      	ldr	r4, [pc, #24]	; (2074 <_read_r+0x24>)
    205c:	6022      	str	r2, [r4, #0]
    205e:	001a      	movs	r2, r3
    2060:	f7fe fff2 	bl	1048 <_read>
    2064:	1c43      	adds	r3, r0, #1
    2066:	d103      	bne.n	2070 <_read_r+0x20>
    2068:	6823      	ldr	r3, [r4, #0]
    206a:	2b00      	cmp	r3, #0
    206c:	d000      	beq.n	2070 <_read_r+0x20>
    206e:	602b      	str	r3, [r5, #0]
    2070:	bd70      	pop	{r4, r5, r6, pc}
    2072:	46c0      	nop			; (mov r8, r8)
    2074:	20000530 	.word	0x20000530

00002078 <_malloc_usable_size_r>:
    2078:	1f0b      	subs	r3, r1, #4
    207a:	681b      	ldr	r3, [r3, #0]
    207c:	1f18      	subs	r0, r3, #4
    207e:	2b00      	cmp	r3, #0
    2080:	da01      	bge.n	2086 <_malloc_usable_size_r+0xe>
    2082:	580b      	ldr	r3, [r1, r0]
    2084:	18c0      	adds	r0, r0, r3
    2086:	4770      	bx	lr
    2088:	682f2e2e 	.word	0x682f2e2e
    208c:	732f6c61 	.word	0x732f6c61
    2090:	682f6372 	.word	0x682f6372
    2094:	635f6c61 	.word	0x635f6c61
    2098:	615f6e61 	.word	0x615f6e61
    209c:	636e7973 	.word	0x636e7973
    20a0:	0000632e 	.word	0x0000632e
    20a4:	682f2e2e 	.word	0x682f2e2e
    20a8:	732f6c61 	.word	0x732f6c61
    20ac:	682f6372 	.word	0x682f6372
    20b0:	665f6c61 	.word	0x665f6c61
    20b4:	6873616c 	.word	0x6873616c
    20b8:	0000632e 	.word	0x0000632e
    20bc:	682f2e2e 	.word	0x682f2e2e
    20c0:	732f6c61 	.word	0x732f6c61
    20c4:	682f6372 	.word	0x682f6372
    20c8:	695f6c61 	.word	0x695f6c61
    20cc:	00632e6f 	.word	0x00632e6f
    20d0:	682f2e2e 	.word	0x682f2e2e
    20d4:	732f6c61 	.word	0x732f6c61
    20d8:	682f6372 	.word	0x682f6372
    20dc:	755f6c61 	.word	0x755f6c61
    20e0:	74726173 	.word	0x74726173
    20e4:	6e79735f 	.word	0x6e79735f
    20e8:	00632e63 	.word	0x00632e63
    20ec:	682f2e2e 	.word	0x682f2e2e
    20f0:	6e2f6c70 	.word	0x6e2f6c70
    20f4:	74636d76 	.word	0x74636d76
    20f8:	682f6c72 	.word	0x682f6c72
    20fc:	6e5f6c70 	.word	0x6e5f6c70
    2100:	74636d76 	.word	0x74636d76
    2104:	632e6c72 	.word	0x632e6c72
    2108:	00000000 	.word	0x00000000
    210c:	42000400 	.word	0x42000400
    2110:	42000800 	.word	0x42000800
    2114:	42000c00 	.word	0x42000c00
    2118:	42001000 	.word	0x42001000
    211c:	42001400 	.word	0x42001400
    2120:	42001800 	.word	0x42001800
    2124:	43000000 	.word	0x43000000
    2128:	43000400 	.word	0x43000400

0000212c <_usarts>:
    212c:	00000004 40310004 00030000 0000f62b     ......1@....+...
    213c:	00000000                                ....

00002140 <_i2cms>:
	...

00002158 <_i2css>:
	...

00002168 <sercomspi_regs>:
	...
    217c:	682f2e2e 732f6c70 6f637265 70682f6d     ../hpl/sercom/hp
    218c:	65735f6c 6d6f6372 0000632e 00007825     l_sercom.c..%x..

0000219c <_global_impure_ptr>:
    219c:	2000001c 4f500043 00584953 2000002e              ... C.POSIX...

000021aa <_ctype_>:
    21aa:	20202000 20202020 28282020 20282828     .         ((((( 
    21ba:	20202020 20202020 20202020 20202020                     
    21ca:	10108820 10101010 10101010 10101010      ...............
    21da:	04040410 04040404 10040404 10101010     ................
    21ea:	41411010 41414141 01010101 01010101     ..AAAAAA........
    21fa:	01010101 01010101 01010101 10101010     ................
    220a:	42421010 42424242 02020202 02020202     ..BBBBBB........
    221a:	02020202 02020202 02020202 10101010     ................
    222a:	00000020 00000000 00000000 00000000      ...............
	...

000022ac <__sf_fake_stderr>:
	...

000022cc <__sf_fake_stdin>:
	...

000022ec <__sf_fake_stdout>:
	...
    230c:	2b302d23 6c680020 6665004c 47464567     #-0+ .hlL.efgEFG
    231c:	32313000 36353433 41393837 45444342     .0123456789ABCDE
    232c:	31300046 35343332 39383736 64636261     F.0123456789abcd
    233c:	00006665                                ef..

00002340 <_init>:
    2340:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2342:	46c0      	nop			; (mov r8, r8)
    2344:	bcf8      	pop	{r3, r4, r5, r6, r7}
    2346:	bc08      	pop	{r3}
    2348:	469e      	mov	lr, r3
    234a:	4770      	bx	lr

0000234c <__init_array_start>:
    234c:	000000e5 	.word	0x000000e5

00002350 <_fini>:
    2350:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2352:	46c0      	nop			; (mov r8, r8)
    2354:	bcf8      	pop	{r3, r4, r5, r6, r7}
    2356:	bc08      	pop	{r3}
    2358:	469e      	mov	lr, r3
    235a:	4770      	bx	lr

0000235c <__fini_array_start>:
    235c:	000000bd 	.word	0x000000bd
