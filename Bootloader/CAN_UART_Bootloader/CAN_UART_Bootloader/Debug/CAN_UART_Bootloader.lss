
CAN_UART_Bootloader.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002868  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     000001e8  20000000  00002868  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000003e8  200001e8  00002a50  000201e8  2**2
                  ALLOC
  3 .stack        00002000  200005d0  00002e38  000201e8  2**0
                  ALLOC
  4 .ARM.attributes 0000002a  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00020212  2**0
                  CONTENTS, READONLY
  6 .debug_info   0002913f  00000000  00000000  0002026b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003e61  00000000  00000000  000493aa  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000e36d  00000000  00000000  0004d20b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000c68  00000000  00000000  0005b578  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000d00  00000000  00000000  0005c1e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  000237d3  00000000  00000000  0005cee0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00016653  00000000  00000000  000806b3  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000a3861  00000000  00000000  00096d06  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  000027d4  00000000  00000000  0013a568  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	d0 25 00 20 35 01 00 00 31 01 00 00 31 01 00 00     .%. 5...1...1...
	...
      2c:	31 01 00 00 00 00 00 00 00 00 00 00 31 01 00 00     1...........1...
      3c:	31 01 00 00 31 01 00 00 31 01 00 00 31 01 00 00     1...1...1...1...
      4c:	31 01 00 00 31 01 00 00 31 01 00 00 7d 0c 00 00     1...1...1...}...
      5c:	31 01 00 00 31 01 00 00 31 01 00 00 31 01 00 00     1...1...1...1...
      6c:	31 01 00 00 31 01 00 00 31 01 00 00 31 01 00 00     1...1...1...1...
      7c:	31 01 00 00 ad 08 00 00 31 01 00 00 31 01 00 00     1.......1...1...
      8c:	31 01 00 00 31 01 00 00 31 01 00 00 31 01 00 00     1...1...1...1...
      9c:	31 01 00 00 31 01 00 00 31 01 00 00 31 01 00 00     1...1...1...1...
      ac:	31 01 00 00 31 01 00 00 31 01 00 00 31 01 00 00     1...1...1...1...

000000bc <__do_global_dtors_aux>:
      bc:	b510      	push	{r4, lr}
      be:	4c06      	ldr	r4, [pc, #24]	; (d8 <__do_global_dtors_aux+0x1c>)
      c0:	7823      	ldrb	r3, [r4, #0]
      c2:	2b00      	cmp	r3, #0
      c4:	d107      	bne.n	d6 <__do_global_dtors_aux+0x1a>
      c6:	4b05      	ldr	r3, [pc, #20]	; (dc <__do_global_dtors_aux+0x20>)
      c8:	2b00      	cmp	r3, #0
      ca:	d002      	beq.n	d2 <__do_global_dtors_aux+0x16>
      cc:	4804      	ldr	r0, [pc, #16]	; (e0 <__do_global_dtors_aux+0x24>)
      ce:	e000      	b.n	d2 <__do_global_dtors_aux+0x16>
      d0:	bf00      	nop
      d2:	2301      	movs	r3, #1
      d4:	7023      	strb	r3, [r4, #0]
      d6:	bd10      	pop	{r4, pc}
      d8:	200001e8 	.word	0x200001e8
      dc:	00000000 	.word	0x00000000
      e0:	00002868 	.word	0x00002868

000000e4 <frame_dummy>:
      e4:	4b08      	ldr	r3, [pc, #32]	; (108 <frame_dummy+0x24>)
      e6:	b510      	push	{r4, lr}
      e8:	2b00      	cmp	r3, #0
      ea:	d003      	beq.n	f4 <frame_dummy+0x10>
      ec:	4907      	ldr	r1, [pc, #28]	; (10c <frame_dummy+0x28>)
      ee:	4808      	ldr	r0, [pc, #32]	; (110 <frame_dummy+0x2c>)
      f0:	e000      	b.n	f4 <frame_dummy+0x10>
      f2:	bf00      	nop
      f4:	4807      	ldr	r0, [pc, #28]	; (114 <frame_dummy+0x30>)
      f6:	6803      	ldr	r3, [r0, #0]
      f8:	2b00      	cmp	r3, #0
      fa:	d100      	bne.n	fe <frame_dummy+0x1a>
      fc:	bd10      	pop	{r4, pc}
      fe:	4b06      	ldr	r3, [pc, #24]	; (118 <frame_dummy+0x34>)
     100:	2b00      	cmp	r3, #0
     102:	d0fb      	beq.n	fc <frame_dummy+0x18>
     104:	4798      	blx	r3
     106:	e7f9      	b.n	fc <frame_dummy+0x18>
     108:	00000000 	.word	0x00000000
     10c:	200001ec 	.word	0x200001ec
     110:	00002868 	.word	0x00002868
     114:	00002868 	.word	0x00002868
     118:	00000000 	.word	0x00000000

0000011c <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
     11c:	b510      	push	{r4, lr}
	system_init();
     11e:	4b02      	ldr	r3, [pc, #8]	; (128 <atmel_start_init+0xc>)
     120:	4798      	blx	r3
	stdio_redirect_init();
     122:	4b02      	ldr	r3, [pc, #8]	; (12c <atmel_start_init+0x10>)
     124:	4798      	blx	r3
}
     126:	bd10      	pop	{r4, pc}
     128:	000002e1 	.word	0x000002e1
     12c:	00001615 	.word	0x00001615

00000130 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     130:	e7fe      	b.n	130 <Dummy_Handler>
	...

00000134 <Reset_Handler>:
{
     134:	b510      	push	{r4, lr}
        if (pSrc != pDest) {
     136:	4a10      	ldr	r2, [pc, #64]	; (178 <Reset_Handler+0x44>)
     138:	4b10      	ldr	r3, [pc, #64]	; (17c <Reset_Handler+0x48>)
     13a:	429a      	cmp	r2, r3
     13c:	d009      	beq.n	152 <Reset_Handler+0x1e>
     13e:	4b0f      	ldr	r3, [pc, #60]	; (17c <Reset_Handler+0x48>)
     140:	4a0d      	ldr	r2, [pc, #52]	; (178 <Reset_Handler+0x44>)
     142:	e003      	b.n	14c <Reset_Handler+0x18>
                        *pDest++ = *pSrc++;
     144:	6811      	ldr	r1, [r2, #0]
     146:	6019      	str	r1, [r3, #0]
     148:	3304      	adds	r3, #4
     14a:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
     14c:	490c      	ldr	r1, [pc, #48]	; (180 <Reset_Handler+0x4c>)
     14e:	428b      	cmp	r3, r1
     150:	d3f8      	bcc.n	144 <Reset_Handler+0x10>
                        *pDest++ = *pSrc++;
     152:	4b0c      	ldr	r3, [pc, #48]	; (184 <Reset_Handler+0x50>)
     154:	e002      	b.n	15c <Reset_Handler+0x28>
                *pDest++ = 0;
     156:	2200      	movs	r2, #0
     158:	601a      	str	r2, [r3, #0]
     15a:	3304      	adds	r3, #4
        for (pDest = &_szero; pDest < &_ezero;) {
     15c:	4a0a      	ldr	r2, [pc, #40]	; (188 <Reset_Handler+0x54>)
     15e:	4293      	cmp	r3, r2
     160:	d3f9      	bcc.n	156 <Reset_Handler+0x22>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     162:	4a0a      	ldr	r2, [pc, #40]	; (18c <Reset_Handler+0x58>)
     164:	21ff      	movs	r1, #255	; 0xff
     166:	4b0a      	ldr	r3, [pc, #40]	; (190 <Reset_Handler+0x5c>)
     168:	438b      	bics	r3, r1
     16a:	6093      	str	r3, [r2, #8]
        __libc_init_array();
     16c:	4b09      	ldr	r3, [pc, #36]	; (194 <Reset_Handler+0x60>)
     16e:	4798      	blx	r3
        main();
     170:	4b09      	ldr	r3, [pc, #36]	; (198 <Reset_Handler+0x64>)
     172:	4798      	blx	r3
     174:	e7fe      	b.n	174 <Reset_Handler+0x40>
     176:	46c0      	nop			; (mov r8, r8)
     178:	00002868 	.word	0x00002868
     17c:	20000000 	.word	0x20000000
     180:	200001e8 	.word	0x200001e8
     184:	200001e8 	.word	0x200001e8
     188:	200005d0 	.word	0x200005d0
     18c:	e000ed00 	.word	0xe000ed00
     190:	00000000 	.word	0x00000000
     194:	00001635 	.word	0x00001635
     198:	0000114d 	.word	0x0000114d

0000019c <FLASH_0_CLOCK_init>:
}

static inline void hri_mclk_set_AHBMASK_NVMCTRL_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_NVMCTRL;
     19c:	4a02      	ldr	r2, [pc, #8]	; (1a8 <FLASH_0_CLOCK_init+0xc>)
     19e:	6913      	ldr	r3, [r2, #16]
     1a0:	2120      	movs	r1, #32
     1a2:	430b      	orrs	r3, r1
     1a4:	6113      	str	r3, [r2, #16]

void FLASH_0_CLOCK_init(void)
{

	hri_mclk_set_AHBMASK_NVMCTRL_bit(MCLK);
}
     1a6:	4770      	bx	lr
     1a8:	40000800 	.word	0x40000800

000001ac <FLASH_0_init>:

void FLASH_0_init(void)
{
     1ac:	b510      	push	{r4, lr}
	FLASH_0_CLOCK_init();
     1ae:	4b03      	ldr	r3, [pc, #12]	; (1bc <FLASH_0_init+0x10>)
     1b0:	4798      	blx	r3
	flash_init(&FLASH_0, NVMCTRL);
     1b2:	4903      	ldr	r1, [pc, #12]	; (1c0 <FLASH_0_init+0x14>)
     1b4:	4803      	ldr	r0, [pc, #12]	; (1c4 <FLASH_0_init+0x18>)
     1b6:	4b04      	ldr	r3, [pc, #16]	; (1c8 <FLASH_0_init+0x1c>)
     1b8:	4798      	blx	r3
}
     1ba:	bd10      	pop	{r4, pc}
     1bc:	0000019d 	.word	0x0000019d
     1c0:	41004000 	.word	0x41004000
     1c4:	200002f4 	.word	0x200002f4
     1c8:	000003b5 	.word	0x000003b5

000001cc <TARGET_IO_PORT_init>:

void TARGET_IO_PORT_init(void)
{
     1cc:	b530      	push	{r4, r5, lr}
static inline void hri_port_write_PINCFG_PMUXEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                    bool value)
{
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     1ce:	2382      	movs	r3, #130	; 0x82
     1d0:	05db      	lsls	r3, r3, #23
     1d2:	22ca      	movs	r2, #202	; 0xca
     1d4:	5c99      	ldrb	r1, [r3, r2]
	tmp &= ~PORT_PINCFG_PMUXEN;
     1d6:	2501      	movs	r5, #1
     1d8:	43a9      	bics	r1, r5
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     1da:	2401      	movs	r4, #1
     1dc:	4321      	orrs	r1, r4
     1de:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     1e0:	5499      	strb	r1, [r3, r2]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     1e2:	20b5      	movs	r0, #181	; 0xb5
     1e4:	5c19      	ldrb	r1, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     1e6:	3abb      	subs	r2, #187	; 0xbb
     1e8:	4391      	bics	r1, r2
	tmp |= PORT_PMUX_PMUXE(data);
     1ea:	2203      	movs	r2, #3
     1ec:	4311      	orrs	r1, r2
     1ee:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     1f0:	5419      	strb	r1, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     1f2:	21cb      	movs	r1, #203	; 0xcb
     1f4:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PINCFG_PMUXEN;
     1f6:	43aa      	bics	r2, r5
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     1f8:	4322      	orrs	r2, r4
     1fa:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     1fc:	545a      	strb	r2, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     1fe:	5c1a      	ldrb	r2, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     200:	39bc      	subs	r1, #188	; 0xbc
     202:	400a      	ands	r2, r1
	tmp |= PORT_PMUX_PMUXO(data);
     204:	2130      	movs	r1, #48	; 0x30
     206:	430a      	orrs	r2, r1
     208:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     20a:	541a      	strb	r2, [r3, r0]

	gpio_set_pin_function(PB10, PINMUX_PB10D_SERCOM4_PAD2);

	gpio_set_pin_function(PB11, PINMUX_PB11D_SERCOM4_PAD3);
}
     20c:	bd30      	pop	{r4, r5, pc}
	...

00000210 <TARGET_IO_CLOCK_init>:
}

static inline void hri_gclk_write_PCHCTRL_reg(const void *const hw, uint8_t index, hri_gclk_pchctrl_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->PCHCTRL[index].reg = data;
     210:	4b06      	ldr	r3, [pc, #24]	; (22c <TARGET_IO_CLOCK_init+0x1c>)
     212:	2140      	movs	r1, #64	; 0x40
     214:	22dc      	movs	r2, #220	; 0xdc
     216:	5099      	str	r1, [r3, r2]
     218:	3103      	adds	r1, #3
     21a:	3a14      	subs	r2, #20
     21c:	5099      	str	r1, [r3, r2]
}

static inline void hri_mclk_set_APBCMASK_SERCOM4_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_SERCOM4;
     21e:	4a04      	ldr	r2, [pc, #16]	; (230 <TARGET_IO_CLOCK_init+0x20>)
     220:	69d3      	ldr	r3, [r2, #28]
     222:	3923      	subs	r1, #35	; 0x23
     224:	430b      	orrs	r3, r1
     226:	61d3      	str	r3, [r2, #28]
{
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM4_GCLK_ID_CORE, CONF_GCLK_SERCOM4_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM4_GCLK_ID_SLOW, CONF_GCLK_SERCOM4_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));

	hri_mclk_set_APBCMASK_SERCOM4_bit(MCLK);
}
     228:	4770      	bx	lr
     22a:	46c0      	nop			; (mov r8, r8)
     22c:	40001c00 	.word	0x40001c00
     230:	40000800 	.word	0x40000800

00000234 <TARGET_IO_init>:

void TARGET_IO_init(void)
{
     234:	b510      	push	{r4, lr}
	TARGET_IO_CLOCK_init();
     236:	4b05      	ldr	r3, [pc, #20]	; (24c <TARGET_IO_init+0x18>)
     238:	4798      	blx	r3
	usart_sync_init(&TARGET_IO, SERCOM4, (void *)NULL);
     23a:	2200      	movs	r2, #0
     23c:	4904      	ldr	r1, [pc, #16]	; (250 <TARGET_IO_init+0x1c>)
     23e:	4805      	ldr	r0, [pc, #20]	; (254 <TARGET_IO_init+0x20>)
     240:	4b05      	ldr	r3, [pc, #20]	; (258 <TARGET_IO_init+0x24>)
     242:	4798      	blx	r3
	TARGET_IO_PORT_init();
     244:	4b05      	ldr	r3, [pc, #20]	; (25c <TARGET_IO_init+0x28>)
     246:	4798      	blx	r3
}
     248:	bd10      	pop	{r4, pc}
     24a:	46c0      	nop			; (mov r8, r8)
     24c:	00000211 	.word	0x00000211
     250:	42001400 	.word	0x42001400
     254:	20000310 	.word	0x20000310
     258:	00000691 	.word	0x00000691
     25c:	000001cd 	.word	0x000001cd

00000260 <CAN_1_PORT_init>:

void CAN_1_PORT_init(void)
{
     260:	b530      	push	{r4, r5, lr}
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     262:	2382      	movs	r3, #130	; 0x82
     264:	05db      	lsls	r3, r3, #23
     266:	22cf      	movs	r2, #207	; 0xcf
     268:	5c99      	ldrb	r1, [r3, r2]
	tmp &= ~PORT_PINCFG_PMUXEN;
     26a:	2501      	movs	r5, #1
     26c:	43a9      	bics	r1, r5
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     26e:	2401      	movs	r4, #1
     270:	4321      	orrs	r1, r4
     272:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     274:	5499      	strb	r1, [r3, r2]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     276:	20b7      	movs	r0, #183	; 0xb7
     278:	5c19      	ldrb	r1, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     27a:	3ac0      	subs	r2, #192	; 0xc0
     27c:	4011      	ands	r1, r2
	tmp |= PORT_PMUX_PMUXO(data);
     27e:	2260      	movs	r2, #96	; 0x60
     280:	4311      	orrs	r1, r2
     282:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     284:	5419      	strb	r1, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     286:	21ce      	movs	r1, #206	; 0xce
     288:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PINCFG_PMUXEN;
     28a:	43aa      	bics	r2, r5
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     28c:	4322      	orrs	r2, r4
     28e:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     290:	545a      	strb	r2, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     292:	5c1a      	ldrb	r2, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     294:	39bf      	subs	r1, #191	; 0xbf
     296:	438a      	bics	r2, r1
	tmp |= PORT_PMUX_PMUXE(data);
     298:	2106      	movs	r1, #6
     29a:	430a      	orrs	r2, r1
     29c:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     29e:	541a      	strb	r2, [r3, r0]

	gpio_set_pin_function(PB15, PINMUX_PB15G_CAN1_RX);

	gpio_set_pin_function(PB14, PINMUX_PB14G_CAN1_TX);
}
     2a0:	bd30      	pop	{r4, r5, pc}
	...

000002a4 <CAN_1_init>:
 * \brief CAN initialization function
 *
 * Enables CAN peripheral, clocks and initializes CAN driver
 */
void CAN_1_init(void)
{
     2a4:	b510      	push	{r4, lr}
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_CAN1;
     2a6:	4a08      	ldr	r2, [pc, #32]	; (2c8 <CAN_1_init+0x24>)
     2a8:	6911      	ldr	r1, [r2, #16]
     2aa:	2380      	movs	r3, #128	; 0x80
     2ac:	009b      	lsls	r3, r3, #2
     2ae:	430b      	orrs	r3, r1
     2b0:	6113      	str	r3, [r2, #16]
     2b2:	2140      	movs	r1, #64	; 0x40
     2b4:	23ec      	movs	r3, #236	; 0xec
     2b6:	4a05      	ldr	r2, [pc, #20]	; (2cc <CAN_1_init+0x28>)
     2b8:	50d1      	str	r1, [r2, r3]
	hri_mclk_set_AHBMASK_CAN1_bit(MCLK);
	hri_gclk_write_PCHCTRL_reg(GCLK, CAN1_GCLK_ID, CONF_GCLK_CAN1_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
	can_async_init(&CAN_1, CAN1);
     2ba:	4905      	ldr	r1, [pc, #20]	; (2d0 <CAN_1_init+0x2c>)
     2bc:	4805      	ldr	r0, [pc, #20]	; (2d4 <CAN_1_init+0x30>)
     2be:	4b06      	ldr	r3, [pc, #24]	; (2d8 <CAN_1_init+0x34>)
     2c0:	4798      	blx	r3
	CAN_1_PORT_init();
     2c2:	4b06      	ldr	r3, [pc, #24]	; (2dc <CAN_1_init+0x38>)
     2c4:	4798      	blx	r3
}
     2c6:	bd10      	pop	{r4, pc}
     2c8:	40000800 	.word	0x40000800
     2cc:	40001c00 	.word	0x40001c00
     2d0:	42002000 	.word	0x42002000
     2d4:	2000031c 	.word	0x2000031c
     2d8:	00000329 	.word	0x00000329
     2dc:	00000261 	.word	0x00000261

000002e0 <system_init>:

void system_init(void)
{
     2e0:	b510      	push	{r4, lr}
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
	_init_chip();
     2e2:	4b04      	ldr	r3, [pc, #16]	; (2f4 <system_init+0x14>)
     2e4:	4798      	blx	r3
	init_mcu();

	FLASH_0_init();
     2e6:	4b04      	ldr	r3, [pc, #16]	; (2f8 <system_init+0x18>)
     2e8:	4798      	blx	r3

	TARGET_IO_init();
     2ea:	4b04      	ldr	r3, [pc, #16]	; (2fc <system_init+0x1c>)
     2ec:	4798      	blx	r3
	CAN_1_init();
     2ee:	4b04      	ldr	r3, [pc, #16]	; (300 <system_init+0x20>)
     2f0:	4798      	blx	r3
}
     2f2:	bd10      	pop	{r4, pc}
     2f4:	00000941 	.word	0x00000941
     2f8:	000001ad 	.word	0x000001ad
     2fc:	00000235 	.word	0x00000235
     300:	000002a5 	.word	0x000002a5

00000304 <can_tx_done>:

/**
 * \internal Callback of CAN Message Write finished
 */
static void can_tx_done(struct _can_async_device *dev)
{
     304:	b510      	push	{r4, lr}
	struct can_async_descriptor *const descr = CONTAINER_OF(dev, struct can_async_descriptor, dev);

	if (descr->cb.tx_done) {
     306:	69c3      	ldr	r3, [r0, #28]
     308:	2b00      	cmp	r3, #0
     30a:	d000      	beq.n	30e <can_tx_done+0xa>
		descr->cb.tx_done(descr);
     30c:	4798      	blx	r3
	}
}
     30e:	bd10      	pop	{r4, pc}

00000310 <can_rx_done>:

/**
 * \internal Callback of CAN Message Read finished
 */
static void can_rx_done(struct _can_async_device *dev)
{
     310:	b510      	push	{r4, lr}
	struct can_async_descriptor *const descr = CONTAINER_OF(dev, struct can_async_descriptor, dev);

	if (descr->cb.rx_done) {
     312:	6a03      	ldr	r3, [r0, #32]
     314:	2b00      	cmp	r3, #0
     316:	d000      	beq.n	31a <can_rx_done+0xa>
		descr->cb.rx_done(descr);
     318:	4798      	blx	r3
	}
}
     31a:	bd10      	pop	{r4, pc}

0000031c <can_irq_handler>:

/**
 * \internal Callback of CAN Interrupt
 */
static void can_irq_handler(struct _can_async_device *dev, enum can_async_interrupt_type type)
{
     31c:	b510      	push	{r4, lr}
	struct can_async_descriptor *const descr = CONTAINER_OF(dev, struct can_async_descriptor, dev);

	if (descr->cb.irq_handler) {
     31e:	6a43      	ldr	r3, [r0, #36]	; 0x24
     320:	2b00      	cmp	r3, #0
     322:	d000      	beq.n	326 <can_irq_handler+0xa>
		descr->cb.irq_handler(descr, type);
     324:	4798      	blx	r3
	}
}
     326:	bd10      	pop	{r4, pc}

00000328 <can_async_init>:
{
     328:	b570      	push	{r4, r5, r6, lr}
     32a:	0004      	movs	r4, r0
     32c:	000d      	movs	r5, r1
	ASSERT(descr && hw);
     32e:	2800      	cmp	r0, #0
     330:	d015      	beq.n	35e <can_async_init+0x36>
     332:	2900      	cmp	r1, #0
     334:	d011      	beq.n	35a <can_async_init+0x32>
     336:	2001      	movs	r0, #1
     338:	2241      	movs	r2, #65	; 0x41
     33a:	490a      	ldr	r1, [pc, #40]	; (364 <can_async_init+0x3c>)
     33c:	4b0a      	ldr	r3, [pc, #40]	; (368 <can_async_init+0x40>)
     33e:	4798      	blx	r3
	rc = _can_async_init(&descr->dev, hw);
     340:	0029      	movs	r1, r5
     342:	0020      	movs	r0, r4
     344:	4b09      	ldr	r3, [pc, #36]	; (36c <can_async_init+0x44>)
     346:	4798      	blx	r3
	if (rc) {
     348:	2800      	cmp	r0, #0
     34a:	d105      	bne.n	358 <can_async_init+0x30>
	descr->dev.cb.tx_done     = can_tx_done;
     34c:	4b08      	ldr	r3, [pc, #32]	; (370 <can_async_init+0x48>)
     34e:	6063      	str	r3, [r4, #4]
	descr->dev.cb.rx_done     = can_rx_done;
     350:	4b08      	ldr	r3, [pc, #32]	; (374 <can_async_init+0x4c>)
     352:	60a3      	str	r3, [r4, #8]
	descr->dev.cb.irq_handler = can_irq_handler;
     354:	4b08      	ldr	r3, [pc, #32]	; (378 <can_async_init+0x50>)
     356:	60e3      	str	r3, [r4, #12]
}
     358:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(descr && hw);
     35a:	2000      	movs	r0, #0
     35c:	e7ec      	b.n	338 <can_async_init+0x10>
     35e:	2000      	movs	r0, #0
     360:	e7ea      	b.n	338 <can_async_init+0x10>
     362:	46c0      	nop			; (mov r8, r8)
     364:	00002590 	.word	0x00002590
     368:	00000761 	.word	0x00000761
     36c:	000007a1 	.word	0x000007a1
     370:	00000305 	.word	0x00000305
     374:	00000311 	.word	0x00000311
     378:	0000031d 	.word	0x0000031d

0000037c <delay_ms>:

/**
 * \brief Perform delay in ms
 */
void delay_ms(const uint16_t ms)
{
     37c:	b510      	push	{r4, lr}
	_delay_cycles(hardware, _get_cycles_for_ms(ms));
     37e:	4b04      	ldr	r3, [pc, #16]	; (390 <delay_ms+0x14>)
     380:	681c      	ldr	r4, [r3, #0]
     382:	4b04      	ldr	r3, [pc, #16]	; (394 <delay_ms+0x18>)
     384:	4798      	blx	r3
     386:	0001      	movs	r1, r0
     388:	0020      	movs	r0, r4
     38a:	4b03      	ldr	r3, [pc, #12]	; (398 <delay_ms+0x1c>)
     38c:	4798      	blx	r3
}
     38e:	bd10      	pop	{r4, pc}
     390:	20000204 	.word	0x20000204
     394:	0000091d 	.word	0x0000091d
     398:	00000939 	.word	0x00000939

0000039c <flash_ready>:
 * \internal Ready for a new flash command
 *
 * \param[in] device The pointer to flash device structure
 */
static void flash_ready(struct _flash_device *device)
{
     39c:	b510      	push	{r4, lr}
	struct flash_descriptor *const descr = CONTAINER_OF(device, struct flash_descriptor, dev);
	if (descr->callbacks.cb_ready) {
     39e:	6943      	ldr	r3, [r0, #20]
     3a0:	2b00      	cmp	r3, #0
     3a2:	d000      	beq.n	3a6 <flash_ready+0xa>
		descr->callbacks.cb_ready(descr);
     3a4:	4798      	blx	r3
	}
}
     3a6:	bd10      	pop	{r4, pc}

000003a8 <flash_error>:
 * \internal Error occurs in flash command
 *
 * \param[in] device The pointer to flash device structure
 */
static void flash_error(struct _flash_device *device)
{
     3a8:	b510      	push	{r4, lr}
	struct flash_descriptor *const descr = CONTAINER_OF(device, struct flash_descriptor, dev);
	if (descr->callbacks.cb_error) {
     3aa:	6983      	ldr	r3, [r0, #24]
     3ac:	2b00      	cmp	r3, #0
     3ae:	d000      	beq.n	3b2 <flash_error+0xa>
		descr->callbacks.cb_error(descr);
     3b0:	4798      	blx	r3
	}
}
     3b2:	bd10      	pop	{r4, pc}

000003b4 <flash_init>:
{
     3b4:	b570      	push	{r4, r5, r6, lr}
     3b6:	0004      	movs	r4, r0
     3b8:	000d      	movs	r5, r1
	ASSERT(flash && hw);
     3ba:	2800      	cmp	r0, #0
     3bc:	d013      	beq.n	3e6 <flash_init+0x32>
     3be:	2900      	cmp	r1, #0
     3c0:	d00f      	beq.n	3e2 <flash_init+0x2e>
     3c2:	2001      	movs	r0, #1
     3c4:	2238      	movs	r2, #56	; 0x38
     3c6:	4909      	ldr	r1, [pc, #36]	; (3ec <flash_init+0x38>)
     3c8:	4b09      	ldr	r3, [pc, #36]	; (3f0 <flash_init+0x3c>)
     3ca:	4798      	blx	r3
	rc = _flash_init(&flash->dev, hw);
     3cc:	0029      	movs	r1, r5
     3ce:	0020      	movs	r0, r4
     3d0:	4b08      	ldr	r3, [pc, #32]	; (3f4 <flash_init+0x40>)
     3d2:	4798      	blx	r3
	if (rc) {
     3d4:	2800      	cmp	r0, #0
     3d6:	d103      	bne.n	3e0 <flash_init+0x2c>
	flash->dev.flash_cb.ready_cb = flash_ready;
     3d8:	4b07      	ldr	r3, [pc, #28]	; (3f8 <flash_init+0x44>)
     3da:	6023      	str	r3, [r4, #0]
	flash->dev.flash_cb.error_cb = flash_error;
     3dc:	4b07      	ldr	r3, [pc, #28]	; (3fc <flash_init+0x48>)
     3de:	6063      	str	r3, [r4, #4]
}
     3e0:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(flash && hw);
     3e2:	2000      	movs	r0, #0
     3e4:	e7ee      	b.n	3c4 <flash_init+0x10>
     3e6:	2000      	movs	r0, #0
     3e8:	e7ec      	b.n	3c4 <flash_init+0x10>
     3ea:	46c0      	nop			; (mov r8, r8)
     3ec:	000025ac 	.word	0x000025ac
     3f0:	00000761 	.word	0x00000761
     3f4:	00000ad5 	.word	0x00000ad5
     3f8:	0000039d 	.word	0x0000039d
     3fc:	000003a9 	.word	0x000003a9

00000400 <flash_read>:
{
     400:	b5f0      	push	{r4, r5, r6, r7, lr}
     402:	46c6      	mov	lr, r8
     404:	b500      	push	{lr}
     406:	0004      	movs	r4, r0
     408:	000e      	movs	r6, r1
     40a:	0015      	movs	r5, r2
     40c:	001f      	movs	r7, r3
	ASSERT(flash && buffer && length);
     40e:	2800      	cmp	r0, #0
     410:	d020      	beq.n	454 <flash_read+0x54>
     412:	2a00      	cmp	r2, #0
     414:	d020      	beq.n	458 <flash_read+0x58>
     416:	2b00      	cmp	r3, #0
     418:	d120      	bne.n	45c <flash_read+0x5c>
     41a:	2000      	movs	r0, #0
     41c:	2256      	movs	r2, #86	; 0x56
     41e:	4913      	ldr	r1, [pc, #76]	; (46c <flash_read+0x6c>)
     420:	4b13      	ldr	r3, [pc, #76]	; (470 <flash_read+0x70>)
     422:	4798      	blx	r3
	uint32_t page_size   = _flash_get_page_size(&flash->dev);
     424:	0020      	movs	r0, r4
     426:	4b13      	ldr	r3, [pc, #76]	; (474 <flash_read+0x74>)
     428:	4798      	blx	r3
     42a:	4680      	mov	r8, r0
	uint32_t total_pages = _flash_get_total_pages(&flash->dev);
     42c:	0020      	movs	r0, r4
     42e:	4b12      	ldr	r3, [pc, #72]	; (478 <flash_read+0x78>)
     430:	4798      	blx	r3
	if ((src_addr > page_size * total_pages) || (src_addr + length > page_size * total_pages)) {
     432:	4643      	mov	r3, r8
     434:	4358      	muls	r0, r3
     436:	42b0      	cmp	r0, r6
     438:	d312      	bcc.n	460 <flash_read+0x60>
     43a:	19bb      	adds	r3, r7, r6
     43c:	4298      	cmp	r0, r3
     43e:	d312      	bcc.n	466 <flash_read+0x66>
	_flash_read(&flash->dev, src_addr, buffer, length);
     440:	003b      	movs	r3, r7
     442:	002a      	movs	r2, r5
     444:	0031      	movs	r1, r6
     446:	0020      	movs	r0, r4
     448:	4c0c      	ldr	r4, [pc, #48]	; (47c <flash_read+0x7c>)
     44a:	47a0      	blx	r4
	return ERR_NONE;
     44c:	2000      	movs	r0, #0
}
     44e:	bc04      	pop	{r2}
     450:	4690      	mov	r8, r2
     452:	bdf0      	pop	{r4, r5, r6, r7, pc}
	ASSERT(flash && buffer && length);
     454:	2000      	movs	r0, #0
     456:	e7e1      	b.n	41c <flash_read+0x1c>
     458:	2000      	movs	r0, #0
     45a:	e7df      	b.n	41c <flash_read+0x1c>
     45c:	2001      	movs	r0, #1
     45e:	e7dd      	b.n	41c <flash_read+0x1c>
		return ERR_BAD_ADDRESS;
     460:	200e      	movs	r0, #14
     462:	4240      	negs	r0, r0
     464:	e7f3      	b.n	44e <flash_read+0x4e>
     466:	200e      	movs	r0, #14
     468:	4240      	negs	r0, r0
     46a:	e7f0      	b.n	44e <flash_read+0x4e>
     46c:	000025ac 	.word	0x000025ac
     470:	00000761 	.word	0x00000761
     474:	00000b35 	.word	0x00000b35
     478:	00000b39 	.word	0x00000b39
     47c:	00000b3f 	.word	0x00000b3f

00000480 <flash_write>:
{
     480:	b5f0      	push	{r4, r5, r6, r7, lr}
     482:	46c6      	mov	lr, r8
     484:	b500      	push	{lr}
     486:	0004      	movs	r4, r0
     488:	000d      	movs	r5, r1
     48a:	0016      	movs	r6, r2
     48c:	001f      	movs	r7, r3
	ASSERT(flash && buffer && length);
     48e:	2800      	cmp	r0, #0
     490:	d026      	beq.n	4e0 <flash_write+0x60>
     492:	2a00      	cmp	r2, #0
     494:	d026      	beq.n	4e4 <flash_write+0x64>
     496:	2b00      	cmp	r3, #0
     498:	d126      	bne.n	4e8 <flash_write+0x68>
     49a:	2000      	movs	r0, #0
     49c:	226a      	movs	r2, #106	; 0x6a
     49e:	4918      	ldr	r1, [pc, #96]	; (500 <flash_write+0x80>)
     4a0:	4b18      	ldr	r3, [pc, #96]	; (504 <flash_write+0x84>)
     4a2:	4798      	blx	r3
	uint32_t page_size   = _flash_get_page_size(&flash->dev);
     4a4:	0020      	movs	r0, r4
     4a6:	4b18      	ldr	r3, [pc, #96]	; (508 <flash_write+0x88>)
     4a8:	4798      	blx	r3
     4aa:	4680      	mov	r8, r0
	uint32_t total_pages = _flash_get_total_pages(&flash->dev);
     4ac:	0020      	movs	r0, r4
     4ae:	4b17      	ldr	r3, [pc, #92]	; (50c <flash_write+0x8c>)
     4b0:	4798      	blx	r3
	if ((dst_addr > page_size * total_pages) || (dst_addr + length > page_size * total_pages)) {
     4b2:	4643      	mov	r3, r8
     4b4:	4358      	muls	r0, r3
     4b6:	42a8      	cmp	r0, r5
     4b8:	d318      	bcc.n	4ec <flash_write+0x6c>
     4ba:	197b      	adds	r3, r7, r5
     4bc:	4298      	cmp	r0, r3
     4be:	d318      	bcc.n	4f2 <flash_write+0x72>
	if (_flash_is_locked(&flash->dev, dst_addr)) {
     4c0:	0029      	movs	r1, r5
     4c2:	0020      	movs	r0, r4
     4c4:	4b12      	ldr	r3, [pc, #72]	; (510 <flash_write+0x90>)
     4c6:	4798      	blx	r3
     4c8:	2800      	cmp	r0, #0
     4ca:	d115      	bne.n	4f8 <flash_write+0x78>
	_flash_write(&flash->dev, dst_addr, buffer, length);
     4cc:	003b      	movs	r3, r7
     4ce:	0032      	movs	r2, r6
     4d0:	0029      	movs	r1, r5
     4d2:	0020      	movs	r0, r4
     4d4:	4c0f      	ldr	r4, [pc, #60]	; (514 <flash_write+0x94>)
     4d6:	47a0      	blx	r4
	return ERR_NONE;
     4d8:	2000      	movs	r0, #0
}
     4da:	bc04      	pop	{r2}
     4dc:	4690      	mov	r8, r2
     4de:	bdf0      	pop	{r4, r5, r6, r7, pc}
	ASSERT(flash && buffer && length);
     4e0:	2000      	movs	r0, #0
     4e2:	e7db      	b.n	49c <flash_write+0x1c>
     4e4:	2000      	movs	r0, #0
     4e6:	e7d9      	b.n	49c <flash_write+0x1c>
     4e8:	2001      	movs	r0, #1
     4ea:	e7d7      	b.n	49c <flash_write+0x1c>
		return ERR_BAD_ADDRESS;
     4ec:	200e      	movs	r0, #14
     4ee:	4240      	negs	r0, r0
     4f0:	e7f3      	b.n	4da <flash_write+0x5a>
     4f2:	200e      	movs	r0, #14
     4f4:	4240      	negs	r0, r0
     4f6:	e7f0      	b.n	4da <flash_write+0x5a>
		return ERR_DENIED;
     4f8:	2011      	movs	r0, #17
     4fa:	4240      	negs	r0, r0
     4fc:	e7ed      	b.n	4da <flash_write+0x5a>
     4fe:	46c0      	nop			; (mov r8, r8)
     500:	000025ac 	.word	0x000025ac
     504:	00000761 	.word	0x00000761
     508:	00000b35 	.word	0x00000b35
     50c:	00000b39 	.word	0x00000b39
     510:	00000c65 	.word	0x00000c65
     514:	00000b8d 	.word	0x00000b8d

00000518 <flash_get_page_size>:
{
     518:	b510      	push	{r4, lr}
     51a:	0004      	movs	r4, r0
	ASSERT(flash);
     51c:	1e43      	subs	r3, r0, #1
     51e:	4198      	sbcs	r0, r3
     520:	b2c0      	uxtb	r0, r0
     522:	22f7      	movs	r2, #247	; 0xf7
     524:	4903      	ldr	r1, [pc, #12]	; (534 <flash_get_page_size+0x1c>)
     526:	4b04      	ldr	r3, [pc, #16]	; (538 <flash_get_page_size+0x20>)
     528:	4798      	blx	r3
	return _flash_get_page_size(&flash->dev);
     52a:	0020      	movs	r0, r4
     52c:	4b03      	ldr	r3, [pc, #12]	; (53c <flash_get_page_size+0x24>)
     52e:	4798      	blx	r3
}
     530:	bd10      	pop	{r4, pc}
     532:	46c0      	nop			; (mov r8, r8)
     534:	000025ac 	.word	0x000025ac
     538:	00000761 	.word	0x00000761
     53c:	00000b35 	.word	0x00000b35

00000540 <io_write>:

/**
 * \brief I/O write interface
 */
int32_t io_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
     540:	b570      	push	{r4, r5, r6, lr}
     542:	0004      	movs	r4, r0
     544:	000d      	movs	r5, r1
     546:	0016      	movs	r6, r2
	ASSERT(io_descr && buf);
     548:	2800      	cmp	r0, #0
     54a:	d00e      	beq.n	56a <io_write+0x2a>
     54c:	2900      	cmp	r1, #0
     54e:	d00a      	beq.n	566 <io_write+0x26>
     550:	2001      	movs	r0, #1
     552:	2234      	movs	r2, #52	; 0x34
     554:	4906      	ldr	r1, [pc, #24]	; (570 <io_write+0x30>)
     556:	4b07      	ldr	r3, [pc, #28]	; (574 <io_write+0x34>)
     558:	4798      	blx	r3
	return io_descr->write(io_descr, buf, length);
     55a:	6823      	ldr	r3, [r4, #0]
     55c:	0032      	movs	r2, r6
     55e:	0029      	movs	r1, r5
     560:	0020      	movs	r0, r4
     562:	4798      	blx	r3
}
     564:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(io_descr && buf);
     566:	2000      	movs	r0, #0
     568:	e7f3      	b.n	552 <io_write+0x12>
     56a:	2000      	movs	r0, #0
     56c:	e7f1      	b.n	552 <io_write+0x12>
     56e:	46c0      	nop			; (mov r8, r8)
     570:	000025c4 	.word	0x000025c4
     574:	00000761 	.word	0x00000761

00000578 <io_read>:

/**
 * \brief I/O read interface
 */
int32_t io_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
     578:	b570      	push	{r4, r5, r6, lr}
     57a:	0004      	movs	r4, r0
     57c:	000d      	movs	r5, r1
     57e:	0016      	movs	r6, r2
	ASSERT(io_descr && buf);
     580:	2800      	cmp	r0, #0
     582:	d00e      	beq.n	5a2 <io_read+0x2a>
     584:	2900      	cmp	r1, #0
     586:	d00a      	beq.n	59e <io_read+0x26>
     588:	2001      	movs	r0, #1
     58a:	223d      	movs	r2, #61	; 0x3d
     58c:	4906      	ldr	r1, [pc, #24]	; (5a8 <io_read+0x30>)
     58e:	4b07      	ldr	r3, [pc, #28]	; (5ac <io_read+0x34>)
     590:	4798      	blx	r3
	return io_descr->read(io_descr, buf, length);
     592:	6863      	ldr	r3, [r4, #4]
     594:	0032      	movs	r2, r6
     596:	0029      	movs	r1, r5
     598:	0020      	movs	r0, r4
     59a:	4798      	blx	r3
}
     59c:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(io_descr && buf);
     59e:	2000      	movs	r0, #0
     5a0:	e7f3      	b.n	58a <io_read+0x12>
     5a2:	2000      	movs	r0, #0
     5a4:	e7f1      	b.n	58a <io_read+0x12>
     5a6:	46c0      	nop			; (mov r8, r8)
     5a8:	000025c4 	.word	0x000025c4
     5ac:	00000761 	.word	0x00000761

000005b0 <usart_sync_write>:
 * \param[in] length The number of bytes to write
 *
 * \return The number of bytes written.
 */
static int32_t usart_sync_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
     5b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     5b2:	0005      	movs	r5, r0
     5b4:	000e      	movs	r6, r1
     5b6:	0017      	movs	r7, r2
	uint32_t                      offset = 0;
	struct usart_sync_descriptor *descr  = CONTAINER_OF(io_descr, struct usart_sync_descriptor, io);

	ASSERT(io_descr && buf && length);
     5b8:	2800      	cmp	r0, #0
     5ba:	d023      	beq.n	604 <usart_sync_write+0x54>
     5bc:	2900      	cmp	r1, #0
     5be:	d023      	beq.n	608 <usart_sync_write+0x58>
     5c0:	2a00      	cmp	r2, #0
     5c2:	d123      	bne.n	60c <usart_sync_write+0x5c>
     5c4:	2000      	movs	r0, #0
     5c6:	22f1      	movs	r2, #241	; 0xf1
     5c8:	4911      	ldr	r1, [pc, #68]	; (610 <usart_sync_write+0x60>)
     5ca:	4b12      	ldr	r3, [pc, #72]	; (614 <usart_sync_write+0x64>)
     5cc:	4798      	blx	r3
	while (!_usart_sync_is_ready_to_send(&descr->device))
     5ce:	002c      	movs	r4, r5
     5d0:	3408      	adds	r4, #8
     5d2:	0020      	movs	r0, r4
     5d4:	4b10      	ldr	r3, [pc, #64]	; (618 <usart_sync_write+0x68>)
     5d6:	4798      	blx	r3
     5d8:	2800      	cmp	r0, #0
     5da:	d0f8      	beq.n	5ce <usart_sync_write+0x1e>
     5dc:	2500      	movs	r5, #0
		;
	do {
		_usart_sync_write_byte(&descr->device, buf[offset]);
     5de:	5d71      	ldrb	r1, [r6, r5]
     5e0:	0020      	movs	r0, r4
     5e2:	4b0e      	ldr	r3, [pc, #56]	; (61c <usart_sync_write+0x6c>)
     5e4:	4798      	blx	r3
		while (!_usart_sync_is_ready_to_send(&descr->device))
     5e6:	0020      	movs	r0, r4
     5e8:	4b0b      	ldr	r3, [pc, #44]	; (618 <usart_sync_write+0x68>)
     5ea:	4798      	blx	r3
     5ec:	2800      	cmp	r0, #0
     5ee:	d0fa      	beq.n	5e6 <usart_sync_write+0x36>
			;
	} while (++offset < length);
     5f0:	3501      	adds	r5, #1
     5f2:	42bd      	cmp	r5, r7
     5f4:	d3f3      	bcc.n	5de <usart_sync_write+0x2e>
	while (!_usart_sync_is_transmit_done(&descr->device))
     5f6:	0020      	movs	r0, r4
     5f8:	4b09      	ldr	r3, [pc, #36]	; (620 <usart_sync_write+0x70>)
     5fa:	4798      	blx	r3
     5fc:	2800      	cmp	r0, #0
     5fe:	d0fa      	beq.n	5f6 <usart_sync_write+0x46>
		;
	return (int32_t)offset;
}
     600:	0028      	movs	r0, r5
     602:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	ASSERT(io_descr && buf && length);
     604:	2000      	movs	r0, #0
     606:	e7de      	b.n	5c6 <usart_sync_write+0x16>
     608:	2000      	movs	r0, #0
     60a:	e7dc      	b.n	5c6 <usart_sync_write+0x16>
     60c:	2001      	movs	r0, #1
     60e:	e7da      	b.n	5c6 <usart_sync_write+0x16>
     610:	000025d8 	.word	0x000025d8
     614:	00000761 	.word	0x00000761
     618:	00000f0f 	.word	0x00000f0f
     61c:	00000eff 	.word	0x00000eff
     620:	00000f19 	.word	0x00000f19

00000624 <usart_sync_read>:
 * \param[in] length The size of a buffer
 *
 * \return The number of bytes read.
 */
static int32_t usart_sync_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
     624:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     626:	46ce      	mov	lr, r9
     628:	4647      	mov	r7, r8
     62a:	b580      	push	{r7, lr}
     62c:	1e05      	subs	r5, r0, #0
     62e:	4688      	mov	r8, r1
     630:	4691      	mov	r9, r2
	uint32_t                      offset = 0;
	struct usart_sync_descriptor *descr  = CONTAINER_OF(io_descr, struct usart_sync_descriptor, io);

	ASSERT(io_descr && buf && length);
     632:	d01f      	beq.n	674 <usart_sync_read+0x50>
     634:	2900      	cmp	r1, #0
     636:	d01f      	beq.n	678 <usart_sync_read+0x54>
     638:	2a00      	cmp	r2, #0
     63a:	d11f      	bne.n	67c <usart_sync_read+0x58>
     63c:	2000      	movs	r0, #0
     63e:	2286      	movs	r2, #134	; 0x86
     640:	0052      	lsls	r2, r2, #1
     642:	490f      	ldr	r1, [pc, #60]	; (680 <usart_sync_read+0x5c>)
     644:	4b0f      	ldr	r3, [pc, #60]	; (684 <usart_sync_read+0x60>)
     646:	4798      	blx	r3
	uint32_t                      offset = 0;
     648:	2600      	movs	r6, #0
	do {
		while (!_usart_sync_is_byte_received(&descr->device))
     64a:	002c      	movs	r4, r5
     64c:	3408      	adds	r4, #8
     64e:	0020      	movs	r0, r4
     650:	4b0d      	ldr	r3, [pc, #52]	; (688 <usart_sync_read+0x64>)
     652:	4798      	blx	r3
     654:	2800      	cmp	r0, #0
     656:	d0f8      	beq.n	64a <usart_sync_read+0x26>
			;
		buf[offset] = _usart_sync_read_byte(&descr->device);
     658:	4643      	mov	r3, r8
     65a:	199f      	adds	r7, r3, r6
     65c:	0020      	movs	r0, r4
     65e:	4b0b      	ldr	r3, [pc, #44]	; (68c <usart_sync_read+0x68>)
     660:	4798      	blx	r3
     662:	7038      	strb	r0, [r7, #0]
	} while (++offset < length);
     664:	3601      	adds	r6, #1
     666:	454e      	cmp	r6, r9
     668:	d3ef      	bcc.n	64a <usart_sync_read+0x26>

	return (int32_t)offset;
}
     66a:	0030      	movs	r0, r6
     66c:	bc0c      	pop	{r2, r3}
     66e:	4690      	mov	r8, r2
     670:	4699      	mov	r9, r3
     672:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	ASSERT(io_descr && buf && length);
     674:	2000      	movs	r0, #0
     676:	e7e2      	b.n	63e <usart_sync_read+0x1a>
     678:	2000      	movs	r0, #0
     67a:	e7e0      	b.n	63e <usart_sync_read+0x1a>
     67c:	2001      	movs	r0, #1
     67e:	e7de      	b.n	63e <usart_sync_read+0x1a>
     680:	000025d8 	.word	0x000025d8
     684:	00000761 	.word	0x00000761
     688:	00000f25 	.word	0x00000f25
     68c:	00000f07 	.word	0x00000f07

00000690 <usart_sync_init>:
{
     690:	b570      	push	{r4, r5, r6, lr}
     692:	0004      	movs	r4, r0
     694:	000d      	movs	r5, r1
	ASSERT(descr && hw);
     696:	2800      	cmp	r0, #0
     698:	d014      	beq.n	6c4 <usart_sync_init+0x34>
     69a:	2900      	cmp	r1, #0
     69c:	d010      	beq.n	6c0 <usart_sync_init+0x30>
     69e:	2001      	movs	r0, #1
     6a0:	2234      	movs	r2, #52	; 0x34
     6a2:	4909      	ldr	r1, [pc, #36]	; (6c8 <usart_sync_init+0x38>)
     6a4:	4b09      	ldr	r3, [pc, #36]	; (6cc <usart_sync_init+0x3c>)
     6a6:	4798      	blx	r3
	init_status = _usart_sync_init(&descr->device, hw);
     6a8:	0020      	movs	r0, r4
     6aa:	3008      	adds	r0, #8
     6ac:	0029      	movs	r1, r5
     6ae:	4b08      	ldr	r3, [pc, #32]	; (6d0 <usart_sync_init+0x40>)
     6b0:	4798      	blx	r3
	if (init_status) {
     6b2:	2800      	cmp	r0, #0
     6b4:	d103      	bne.n	6be <usart_sync_init+0x2e>
	descr->io.read  = usart_sync_read;
     6b6:	4b07      	ldr	r3, [pc, #28]	; (6d4 <usart_sync_init+0x44>)
     6b8:	6063      	str	r3, [r4, #4]
	descr->io.write = usart_sync_write;
     6ba:	4b07      	ldr	r3, [pc, #28]	; (6d8 <usart_sync_init+0x48>)
     6bc:	6023      	str	r3, [r4, #0]
}
     6be:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(descr && hw);
     6c0:	2000      	movs	r0, #0
     6c2:	e7ed      	b.n	6a0 <usart_sync_init+0x10>
     6c4:	2000      	movs	r0, #0
     6c6:	e7eb      	b.n	6a0 <usart_sync_init+0x10>
     6c8:	000025d8 	.word	0x000025d8
     6cc:	00000761 	.word	0x00000761
     6d0:	00000ec1 	.word	0x00000ec1
     6d4:	00000625 	.word	0x00000625
     6d8:	000005b1 	.word	0x000005b1

000006dc <usart_sync_enable>:
{
     6dc:	b510      	push	{r4, lr}
     6de:	0004      	movs	r4, r0
	ASSERT(descr);
     6e0:	1e43      	subs	r3, r0, #1
     6e2:	4198      	sbcs	r0, r3
     6e4:	b2c0      	uxtb	r0, r0
     6e6:	2253      	movs	r2, #83	; 0x53
     6e8:	4904      	ldr	r1, [pc, #16]	; (6fc <usart_sync_enable+0x20>)
     6ea:	4b05      	ldr	r3, [pc, #20]	; (700 <usart_sync_enable+0x24>)
     6ec:	4798      	blx	r3
	_usart_sync_enable(&descr->device);
     6ee:	0020      	movs	r0, r4
     6f0:	3008      	adds	r0, #8
     6f2:	4b04      	ldr	r3, [pc, #16]	; (704 <usart_sync_enable+0x28>)
     6f4:	4798      	blx	r3
}
     6f6:	2000      	movs	r0, #0
     6f8:	bd10      	pop	{r4, pc}
     6fa:	46c0      	nop			; (mov r8, r8)
     6fc:	000025d8 	.word	0x000025d8
     700:	00000761 	.word	0x00000761
     704:	00000eed 	.word	0x00000eed

00000708 <usart_sync_get_io_descriptor>:
{
     708:	b570      	push	{r4, r5, r6, lr}
     70a:	0004      	movs	r4, r0
     70c:	000d      	movs	r5, r1
	ASSERT(descr && io);
     70e:	2800      	cmp	r0, #0
     710:	d00b      	beq.n	72a <usart_sync_get_io_descriptor+0x22>
     712:	2900      	cmp	r1, #0
     714:	d007      	beq.n	726 <usart_sync_get_io_descriptor+0x1e>
     716:	2001      	movs	r0, #1
     718:	2269      	movs	r2, #105	; 0x69
     71a:	4905      	ldr	r1, [pc, #20]	; (730 <usart_sync_get_io_descriptor+0x28>)
     71c:	4b05      	ldr	r3, [pc, #20]	; (734 <usart_sync_get_io_descriptor+0x2c>)
     71e:	4798      	blx	r3
	*io = &descr->io;
     720:	602c      	str	r4, [r5, #0]
}
     722:	2000      	movs	r0, #0
     724:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(descr && io);
     726:	2000      	movs	r0, #0
     728:	e7f6      	b.n	718 <usart_sync_get_io_descriptor+0x10>
     72a:	2000      	movs	r0, #0
     72c:	e7f4      	b.n	718 <usart_sync_get_io_descriptor+0x10>
     72e:	46c0      	nop			; (mov r8, r8)
     730:	000025d8 	.word	0x000025d8
     734:	00000761 	.word	0x00000761

00000738 <usart_sync_is_rx_not_empty>:
{
     738:	b510      	push	{r4, lr}
     73a:	0004      	movs	r4, r0
	ASSERT(descr);
     73c:	1e43      	subs	r3, r0, #1
     73e:	4198      	sbcs	r0, r3
     740:	b2c0      	uxtb	r0, r0
     742:	22d7      	movs	r2, #215	; 0xd7
     744:	4903      	ldr	r1, [pc, #12]	; (754 <usart_sync_is_rx_not_empty+0x1c>)
     746:	4b04      	ldr	r3, [pc, #16]	; (758 <usart_sync_is_rx_not_empty+0x20>)
     748:	4798      	blx	r3
	return _usart_sync_is_byte_received(&descr->device);
     74a:	0020      	movs	r0, r4
     74c:	3008      	adds	r0, #8
     74e:	4b03      	ldr	r3, [pc, #12]	; (75c <usart_sync_is_rx_not_empty+0x24>)
     750:	4798      	blx	r3
}
     752:	bd10      	pop	{r4, pc}
     754:	000025d8 	.word	0x000025d8
     758:	00000761 	.word	0x00000761
     75c:	00000f25 	.word	0x00000f25

00000760 <assert>:
/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
	if (!(condition)) {
     760:	2800      	cmp	r0, #0
     762:	d100      	bne.n	766 <assert+0x6>
		__asm("BKPT #0");
     764:	be00      	bkpt	0x0000
	}
	(void)file;
	(void)line;
}
     766:	4770      	bx	lr

00000768 <_sbrk>:

/**
 * \brief Replacement of C library of _sbrk
 */
extern caddr_t _sbrk(int incr)
{
     768:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *       prev_heap;

	if (heap == NULL) {
     76a:	4a06      	ldr	r2, [pc, #24]	; (784 <_sbrk+0x1c>)
     76c:	6812      	ldr	r2, [r2, #0]
     76e:	2a00      	cmp	r2, #0
     770:	d004      	beq.n	77c <_sbrk+0x14>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
     772:	4a04      	ldr	r2, [pc, #16]	; (784 <_sbrk+0x1c>)
     774:	6810      	ldr	r0, [r2, #0]

	heap += incr;
     776:	18c3      	adds	r3, r0, r3
     778:	6013      	str	r3, [r2, #0]

	return (caddr_t)prev_heap;
}
     77a:	4770      	bx	lr
		heap = (unsigned char *)&_end;
     77c:	4902      	ldr	r1, [pc, #8]	; (788 <_sbrk+0x20>)
     77e:	4a01      	ldr	r2, [pc, #4]	; (784 <_sbrk+0x1c>)
     780:	6011      	str	r1, [r2, #0]
     782:	e7f6      	b.n	772 <_sbrk+0xa>
     784:	20000208 	.word	0x20000208
     788:	200025d0 	.word	0x200025d0

0000078c <_close>:
 */
extern int _close(int file)
{
	(void)file;
	return -1;
}
     78c:	2001      	movs	r0, #1
     78e:	4240      	negs	r0, r0
     790:	4770      	bx	lr

00000792 <_fstat>:
 * \brief Replacement of C library of _fstat
 */
extern int _fstat(int file, struct stat *st)
{
	(void)file;
	st->st_mode = S_IFCHR;
     792:	2380      	movs	r3, #128	; 0x80
     794:	019b      	lsls	r3, r3, #6
     796:	604b      	str	r3, [r1, #4]

	return 0;
}
     798:	2000      	movs	r0, #0
     79a:	4770      	bx	lr

0000079c <_lseek>:
 */
extern int _lseek(int file, int ptr, int dir)
{
	(void)file, (void)ptr, (void)dir;
	return 0;
}
     79c:	2000      	movs	r0, #0
     79e:	4770      	bx	lr

000007a0 <_can_async_init>:

/**
 * \brief Initialize CAN.
 */
int32_t _can_async_init(struct _can_async_device *const dev, void *const hw)
{
     7a0:	b5f0      	push	{r4, r5, r6, r7, lr}
	dev->hw = hw;
     7a2:	6001      	str	r1, [r0, #0]
}

static inline void hri_can_set_CCCR_INIT_bit(const void *const hw)
{
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg |= CAN_CCCR_INIT;
     7a4:	698b      	ldr	r3, [r1, #24]
     7a6:	2201      	movs	r2, #1
     7a8:	4313      	orrs	r3, r2
     7aa:	618b      	str	r3, [r1, #24]
	hri_can_set_CCCR_INIT_bit(dev->hw);
	while (hri_can_get_CCCR_INIT_bit(dev->hw) == 0)
     7ac:	6803      	ldr	r3, [r0, #0]
}

static inline bool hri_can_get_CCCR_INIT_bit(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Can *)hw)->CCCR.reg;
     7ae:	699a      	ldr	r2, [r3, #24]
     7b0:	07d2      	lsls	r2, r2, #31
     7b2:	d5fb      	bpl.n	7ac <_can_async_init+0xc>
}

static inline void hri_can_set_CCCR_CCE_bit(const void *const hw)
{
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg |= CAN_CCCR_CCE;
     7b4:	699a      	ldr	r2, [r3, #24]
     7b6:	2402      	movs	r4, #2
     7b8:	4322      	orrs	r2, r4
     7ba:	619a      	str	r2, [r3, #24]
		hri_can_write_ILE_reg(dev->hw, CAN_ILE_EINT0);
	}
#endif

#ifdef CONF_CAN1_ENABLED
	if (hw == CAN1) {
     7bc:	4b33      	ldr	r3, [pc, #204]	; (88c <_can_async_init+0xec>)
     7be:	4299      	cmp	r1, r3
     7c0:	d00f      	beq.n	7e2 <_can_async_init+0x42>
		hri_can_write_ILE_reg(dev->hw, CAN_ILE_EINT0);
	}
#endif

	/* Disable CCE to prevent Configuration Change */
	hri_can_clear_CCCR_CCE_bit(dev->hw);
     7c2:	6802      	ldr	r2, [r0, #0]
}

static inline void hri_can_clear_CCCR_CCE_bit(const void *const hw)
{
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg &= ~CAN_CCCR_CCE;
     7c4:	6993      	ldr	r3, [r2, #24]
     7c6:	2102      	movs	r1, #2
     7c8:	438b      	bics	r3, r1
     7ca:	6193      	str	r3, [r2, #24]
	hri_can_clear_CCCR_INIT_bit(dev->hw);
     7cc:	6802      	ldr	r2, [r0, #0]
	((Can *)hw)->CCCR.reg &= ~CAN_CCCR_INIT;
     7ce:	6993      	ldr	r3, [r2, #24]
     7d0:	3901      	subs	r1, #1
     7d2:	438b      	bics	r3, r1
     7d4:	6193      	str	r3, [r2, #24]
	while (hri_can_get_CCCR_INIT_bit(dev->hw)) {
     7d6:	6803      	ldr	r3, [r0, #0]
	tmp = ((Can *)hw)->CCCR.reg;
     7d8:	699b      	ldr	r3, [r3, #24]
     7da:	07db      	lsls	r3, r3, #31
     7dc:	d4fb      	bmi.n	7d6 <_can_async_init+0x36>
	};

	return ERR_NONE;
}
     7de:	2000      	movs	r0, #0
     7e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		_can1_dev    = dev;
     7e2:	4b2b      	ldr	r3, [pc, #172]	; (890 <_can_async_init+0xf0>)
     7e4:	001a      	movs	r2, r3
     7e6:	c201      	stmia	r2!, {r0}
		dev->context = (void *)&_can1_context;
     7e8:	492a      	ldr	r1, [pc, #168]	; (894 <_can_async_init+0xf4>)
     7ea:	6181      	str	r1, [r0, #24]
		hri_can_set_CCCR_reg(dev->hw, CONF_CAN1_CCCR_REG);
     7ec:	6801      	ldr	r1, [r0, #0]
}

static inline void hri_can_set_CCCR_reg(const void *const hw, hri_can_cccr_reg_t mask)
{
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg |= mask;
     7ee:	698c      	ldr	r4, [r1, #24]
     7f0:	618c      	str	r4, [r1, #24]
		hri_can_write_MRCFG_reg(dev->hw, CONF_CAN1_MRCFG_REG);
     7f2:	6801      	ldr	r1, [r0, #0]
	((Can *)hw)->MRCFG.reg = data;
     7f4:	2400      	movs	r4, #0
     7f6:	608c      	str	r4, [r1, #8]
		hri_can_write_NBTP_reg(dev->hw, CONF_CAN1_BTP_REG);
     7f8:	6801      	ldr	r1, [r0, #0]
}

static inline void hri_can_write_NBTP_reg(const void *const hw, hri_can_nbtp_reg_t data)
{
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->NBTP.reg = data;
     7fa:	4d27      	ldr	r5, [pc, #156]	; (898 <_can_async_init+0xf8>)
     7fc:	61cd      	str	r5, [r1, #28]
		hri_can_write_DBTP_reg(dev->hw, CONF_CAN1_DBTP_REG);
     7fe:	6801      	ldr	r1, [r0, #0]
	((Can *)hw)->DBTP.reg = data;
     800:	4d26      	ldr	r5, [pc, #152]	; (89c <_can_async_init+0xfc>)
     802:	60cd      	str	r5, [r1, #12]
		hri_can_write_RXF0C_reg(dev->hw, CONF_CAN1_RXF0C_REG | CAN_RXF0C_F0SA((uint32_t)can1_rx_fifo));
     804:	4d26      	ldr	r5, [pc, #152]	; (8a0 <_can_async_init+0x100>)
     806:	042d      	lsls	r5, r5, #16
     808:	0c2d      	lsrs	r5, r5, #16
     80a:	2180      	movs	r1, #128	; 0x80
     80c:	0289      	lsls	r1, r1, #10
     80e:	430d      	orrs	r5, r1
}

static inline void hri_can_write_RXF0C_reg(const void *const hw, hri_can_rxf0c_reg_t data)
{
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->RXF0C.reg = data;
     810:	26a0      	movs	r6, #160	; 0xa0
     812:	6807      	ldr	r7, [r0, #0]
     814:	51bd      	str	r5, [r7, r6]
}

static inline void hri_can_write_RXESC_reg(const void *const hw, hri_can_rxesc_reg_t data)
{
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->RXESC.reg = data;
     816:	25bc      	movs	r5, #188	; 0xbc
     818:	6806      	ldr	r6, [r0, #0]
     81a:	5174      	str	r4, [r6, r5]
}

static inline void hri_can_write_TXESC_reg(const void *const hw, hri_can_txesc_reg_t data)
{
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->TXESC.reg = data;
     81c:	350c      	adds	r5, #12
     81e:	6806      	ldr	r6, [r0, #0]
     820:	5174      	str	r4, [r6, r5]
		hri_can_write_TXBC_reg(dev->hw, CONF_CAN1_TXBC_REG | CAN_TXBC_TBSA((uint32_t)can1_tx_fifo));
     822:	4d20      	ldr	r5, [pc, #128]	; (8a4 <_can_async_init+0x104>)
     824:	042d      	lsls	r5, r5, #16
     826:	0c2d      	lsrs	r5, r5, #16
     828:	2680      	movs	r6, #128	; 0x80
     82a:	04b6      	lsls	r6, r6, #18
     82c:	4335      	orrs	r5, r6
	((Can *)hw)->TXBC.reg = data;
     82e:	26c0      	movs	r6, #192	; 0xc0
     830:	6807      	ldr	r7, [r0, #0]
     832:	51bd      	str	r5, [r7, r6]
		hri_can_write_TXEFC_reg(dev->hw, CONF_CAN1_TXEFC_REG | CAN_TXEFC_EFSA((uint32_t)can1_tx_event_fifo));
     834:	0412      	lsls	r2, r2, #16
     836:	0c12      	lsrs	r2, r2, #16
     838:	430a      	orrs	r2, r1
}

static inline void hri_can_write_TXEFC_reg(const void *const hw, hri_can_txefc_reg_t data)
{
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->TXEFC.reg = data;
     83a:	25f0      	movs	r5, #240	; 0xf0
     83c:	6806      	ldr	r6, [r0, #0]
     83e:	5172      	str	r2, [r6, r5]
	((Can *)hw)->GFC.reg = data;
     840:	3d70      	subs	r5, #112	; 0x70
     842:	2228      	movs	r2, #40	; 0x28
     844:	6806      	ldr	r6, [r0, #0]
     846:	5172      	str	r2, [r6, r5]
		hri_can_write_SIDFC_reg(dev->hw, CONF_CAN1_SIDFC_REG | CAN_SIDFC_FLSSA((uint32_t)can1_rx_std_filter));
     848:	001a      	movs	r2, r3
     84a:	3214      	adds	r2, #20
     84c:	0412      	lsls	r2, r2, #16
     84e:	0c12      	lsrs	r2, r2, #16
     850:	430a      	orrs	r2, r1
	((Can *)hw)->SIDFC.reg = data;
     852:	2684      	movs	r6, #132	; 0x84
     854:	6807      	ldr	r7, [r0, #0]
     856:	51ba      	str	r2, [r7, r6]
		hri_can_write_XIDFC_reg(dev->hw, CONF_CAN1_XIDFC_REG | CAN_XIDFC_FLESA((uint32_t)can1_rx_ext_filter));
     858:	331c      	adds	r3, #28
     85a:	041b      	lsls	r3, r3, #16
     85c:	0c1b      	lsrs	r3, r3, #16
     85e:	430b      	orrs	r3, r1
	((Can *)hw)->XIDFC.reg = data;
     860:	2288      	movs	r2, #136	; 0x88
     862:	6801      	ldr	r1, [r0, #0]
     864:	508b      	str	r3, [r1, r2]
	((Can *)hw)->XIDAM.reg = data;
     866:	2390      	movs	r3, #144	; 0x90
     868:	6802      	ldr	r2, [r0, #0]
     86a:	50d4      	str	r4, [r2, r3]
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     86c:	4b0e      	ldr	r3, [pc, #56]	; (8a8 <_can_async_init+0x108>)
     86e:	2280      	movs	r2, #128	; 0x80
     870:	0252      	lsls	r2, r2, #9
     872:	515a      	str	r2, [r3, r5]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
     874:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
     878:	f3bf 8f6f 	isb	sy
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     87c:	21c0      	movs	r1, #192	; 0xc0
     87e:	0049      	lsls	r1, r1, #1
     880:	505a      	str	r2, [r3, r1]
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     882:	601a      	str	r2, [r3, #0]
		hri_can_write_ILE_reg(dev->hw, CAN_ILE_EINT0);
     884:	6803      	ldr	r3, [r0, #0]
	((Can *)hw)->ILE.reg = data;
     886:	2201      	movs	r2, #1
     888:	65da      	str	r2, [r3, #92]	; 0x5c
     88a:	e79a      	b.n	7c2 <_can_async_init+0x22>
     88c:	42002000 	.word	0x42002000
     890:	2000020c 	.word	0x2000020c
     894:	20000000 	.word	0x20000000
     898:	06020a07 	.word	0x06020a07
     89c:	00000a33 	.word	0x00000a33
     8a0:	20000364 	.word	0x20000364
     8a4:	20000344 	.word	0x20000344
     8a8:	e000e100 	.word	0xe000e100

000008ac <CAN1_Handler>:

/*
 * \brief CAN interrupt handler
 */
void CAN1_Handler(void)
{
     8ac:	b570      	push	{r4, r5, r6, lr}
	struct _can_async_device *dev = _can1_dev;
     8ae:	4b1a      	ldr	r3, [pc, #104]	; (918 <CAN1_Handler+0x6c>)
     8b0:	681d      	ldr	r5, [r3, #0]
	uint32_t                  ir;
	ir = hri_can_read_IR_reg(dev->hw);
     8b2:	682b      	ldr	r3, [r5, #0]
	return ((Can *)hw)->IR.reg;
     8b4:	6d1c      	ldr	r4, [r3, #80]	; 0x50

	if (ir & CAN_IR_RF0N) {
     8b6:	07e3      	lsls	r3, r4, #31
     8b8:	d414      	bmi.n	8e4 <CAN1_Handler+0x38>
		dev->cb.rx_done(dev);
	}

	if (ir & CAN_IR_TC) {
     8ba:	05a3      	lsls	r3, r4, #22
     8bc:	d416      	bmi.n	8ec <CAN1_Handler+0x40>
		dev->cb.tx_done(dev);
	}

	if (ir & CAN_IR_BO) {
     8be:	01a3      	lsls	r3, r4, #6
     8c0:	d418      	bmi.n	8f4 <CAN1_Handler+0x48>
		dev->cb.irq_handler(dev, CAN_IRQ_BO);
	}

	if (ir & CAN_IR_EW) {
     8c2:	01e3      	lsls	r3, r4, #7
     8c4:	d41b      	bmi.n	8fe <CAN1_Handler+0x52>
		dev->cb.irq_handler(dev, CAN_IRQ_EW);
	}

	if (ir & CAN_IR_EP) {
     8c6:	0223      	lsls	r3, r4, #8
     8c8:	d507      	bpl.n	8da <CAN1_Handler+0x2e>
		dev->cb.irq_handler(dev, hri_can_get_PSR_EP_bit(dev->hw) ? CAN_IRQ_EP : CAN_IRQ_EA);
     8ca:	68eb      	ldr	r3, [r5, #12]
     8cc:	682a      	ldr	r2, [r5, #0]
	return (((Can *)hw)->PSR.reg & CAN_PSR_EP) >> CAN_PSR_EP_Pos;
     8ce:	6c52      	ldr	r2, [r2, #68]	; 0x44
     8d0:	0692      	lsls	r2, r2, #26
     8d2:	d519      	bpl.n	908 <CAN1_Handler+0x5c>
     8d4:	2102      	movs	r1, #2
     8d6:	0028      	movs	r0, r5
     8d8:	4798      	blx	r3
	}

	if (ir & CAN_IR_RF0L) {
     8da:	0723      	lsls	r3, r4, #28
     8dc:	d416      	bmi.n	90c <CAN1_Handler+0x60>
		dev->cb.irq_handler(dev, CAN_IRQ_DO);
	}

	hri_can_write_IR_reg(dev->hw, ir);
     8de:	682b      	ldr	r3, [r5, #0]
	((Can *)hw)->IR.reg = data;
     8e0:	651c      	str	r4, [r3, #80]	; 0x50
}
     8e2:	bd70      	pop	{r4, r5, r6, pc}
		dev->cb.rx_done(dev);
     8e4:	0028      	movs	r0, r5
     8e6:	68ab      	ldr	r3, [r5, #8]
     8e8:	4798      	blx	r3
     8ea:	e7e6      	b.n	8ba <CAN1_Handler+0xe>
		dev->cb.tx_done(dev);
     8ec:	0028      	movs	r0, r5
     8ee:	686b      	ldr	r3, [r5, #4]
     8f0:	4798      	blx	r3
     8f2:	e7e4      	b.n	8be <CAN1_Handler+0x12>
		dev->cb.irq_handler(dev, CAN_IRQ_BO);
     8f4:	2103      	movs	r1, #3
     8f6:	0028      	movs	r0, r5
     8f8:	68eb      	ldr	r3, [r5, #12]
     8fa:	4798      	blx	r3
     8fc:	e7e1      	b.n	8c2 <CAN1_Handler+0x16>
		dev->cb.irq_handler(dev, CAN_IRQ_EW);
     8fe:	2100      	movs	r1, #0
     900:	0028      	movs	r0, r5
     902:	68eb      	ldr	r3, [r5, #12]
     904:	4798      	blx	r3
     906:	e7de      	b.n	8c6 <CAN1_Handler+0x1a>
		dev->cb.irq_handler(dev, hri_can_get_PSR_EP_bit(dev->hw) ? CAN_IRQ_EP : CAN_IRQ_EA);
     908:	2101      	movs	r1, #1
     90a:	e7e4      	b.n	8d6 <CAN1_Handler+0x2a>
		dev->cb.irq_handler(dev, CAN_IRQ_DO);
     90c:	2104      	movs	r1, #4
     90e:	0028      	movs	r0, r5
     910:	68eb      	ldr	r3, [r5, #12]
     912:	4798      	blx	r3
     914:	e7e3      	b.n	8de <CAN1_Handler+0x32>
     916:	46c0      	nop			; (mov r8, r8)
     918:	2000020c 	.word	0x2000020c

0000091c <_get_cycles_for_ms>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
uint32_t _get_cycles_for_ms(const uint16_t ms)
{
     91c:	b510      	push	{r4, lr}
		return (ms * (freq / 100000) + 2) / 3 * 100;
     91e:	0103      	lsls	r3, r0, #4
     920:	1a1b      	subs	r3, r3, r0
     922:	015b      	lsls	r3, r3, #5
     924:	1a18      	subs	r0, r3, r0
     926:	3002      	adds	r0, #2
     928:	2103      	movs	r1, #3
     92a:	4b02      	ldr	r3, [pc, #8]	; (934 <_get_cycles_for_ms+0x18>)
     92c:	4798      	blx	r3
     92e:	2364      	movs	r3, #100	; 0x64
     930:	4358      	muls	r0, r3
	return _get_cycles_for_ms_internal(ms, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
}
     932:	bd10      	pop	{r4, pc}
     934:	00000993 	.word	0x00000993

00000938 <_delay_cycles>:
{
#ifndef _UNIT_TEST_
	(void)hw;
	(void)cycles;
#if defined __GNUC__
	__asm(".syntax unified\n"
     938:	3901      	subs	r1, #1
     93a:	d8fd      	bhi.n	938 <_delay_cycles>
	__asm("__delay:\n"
	      "subs r1, r1, #1\n"
	      "bhi __delay\n");
#endif
#endif
}
     93c:	4770      	bx	lr
	...

00000940 <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
     940:	b510      	push	{r4, lr}
}

static inline void hri_nvmctrl_set_CTRLB_RWS_bf(const void *const hw, hri_nvmctrl_ctrlb_reg_t mask)
{
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLB.reg |= NVMCTRL_CTRLB_RWS(mask);
     942:	4a09      	ldr	r2, [pc, #36]	; (968 <_init_chip+0x28>)
     944:	6853      	ldr	r3, [r2, #4]
     946:	2104      	movs	r1, #4
     948:	430b      	orrs	r3, r1
     94a:	6053      	str	r3, [r2, #4]
	hri_nvmctrl_set_CTRLB_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);

	_osc32kctrl_init_sources();
     94c:	4b07      	ldr	r3, [pc, #28]	; (96c <_init_chip+0x2c>)
     94e:	4798      	blx	r3
	_oscctrl_init_sources();
     950:	4b07      	ldr	r3, [pc, #28]	; (970 <_init_chip+0x30>)
     952:	4798      	blx	r3
	_mclk_init();
     954:	4b07      	ldr	r3, [pc, #28]	; (974 <_init_chip+0x34>)
     956:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
#endif
	_oscctrl_init_referenced_generators();
     958:	4b07      	ldr	r3, [pc, #28]	; (978 <_init_chip+0x38>)
     95a:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
     95c:	20ff      	movs	r0, #255	; 0xff
     95e:	4b07      	ldr	r3, [pc, #28]	; (97c <_init_chip+0x3c>)
     960:	4798      	blx	r3

	_div_init();
     962:	4b07      	ldr	r3, [pc, #28]	; (980 <_init_chip+0x40>)
     964:	4798      	blx	r3
#endif

#if (CONF_PORT_EVCTRL_PORT_0 | CONF_PORT_EVCTRL_PORT_1 | CONF_PORT_EVCTRL_PORT_2 | CONF_PORT_EVCTRL_PORT_3)
	_port_event_init();
#endif
}
     966:	bd10      	pop	{r4, pc}
     968:	41004000 	.word	0x41004000
     96c:	00000cad 	.word	0x00000cad
     970:	00000cd1 	.word	0x00000cd1
     974:	00000a29 	.word	0x00000a29
     978:	00000cd5 	.word	0x00000cd5
     97c:	00000a05 	.word	0x00000a05
     980:	00000985 	.word	0x00000985

00000984 <_div_init>:

static inline void hri_divas_write_CTRLA_DLZ_bit(const void *const hw, bool value)
{
	uint8_t tmp;
	DIVAS_CRITICAL_SECTION_ENTER();
	tmp = ((Divas *)hw)->CTRLA.reg;
     984:	2290      	movs	r2, #144	; 0x90
     986:	05d2      	lsls	r2, r2, #23
     988:	7813      	ldrb	r3, [r2, #0]
	tmp &= ~DIVAS_CTRLA_DLZ;
     98a:	2102      	movs	r1, #2
     98c:	438b      	bics	r3, r1
	tmp |= value << DIVAS_CTRLA_DLZ_Pos;
	((Divas *)hw)->CTRLA.reg = tmp;
     98e:	7013      	strb	r3, [r2, #0]
 * \brief Initialize hardware for division operation
 */
void _div_init(void)
{
	hri_divas_write_CTRLA_DLZ_bit(DIVAS, CONF_DIVAS_DLZ);
}
     990:	4770      	bx	lr

00000992 <__aeabi_uidiv>:

/**
 * \brief Do unsigned division
 */
uint32_t __aeabi_uidiv(uint32_t numerator, uint32_t denominator)
{
     992:	b510      	push	{r4, lr}
     994:	b082      	sub	sp, #8
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
     996:	f3ef 8310 	mrs	r3, PRIMASK
	uint32_t res;
	_DIVAS_CRITICAL_ENTER();
     99a:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
     99c:	b672      	cpsid	i
	DIVAS->CTRLA.bit.SIGNED = s;
     99e:	2390      	movs	r3, #144	; 0x90
     9a0:	05db      	lsls	r3, r3, #23
     9a2:	781a      	ldrb	r2, [r3, #0]
     9a4:	2401      	movs	r4, #1
     9a6:	43a2      	bics	r2, r4
     9a8:	701a      	strb	r2, [r3, #0]
	DIVAS->DIVIDEND.reg     = n;
     9aa:	6098      	str	r0, [r3, #8]
	DIVAS->DIVISOR.reg      = d;
     9ac:	60d9      	str	r1, [r3, #12]
	while (DIVAS->STATUS.bit.BUSY) {
     9ae:	2390      	movs	r3, #144	; 0x90
     9b0:	05db      	lsls	r3, r3, #23
     9b2:	791b      	ldrb	r3, [r3, #4]
     9b4:	07db      	lsls	r3, r3, #31
     9b6:	d4fa      	bmi.n	9ae <__aeabi_uidiv+0x1c>
	_divas_div(0, numerator, denominator);
	res = _divas_result32();
     9b8:	2390      	movs	r3, #144	; 0x90
     9ba:	05db      	lsls	r3, r3, #23
     9bc:	6918      	ldr	r0, [r3, #16]
	_DIVAS_CRITICAL_LEAVE();
     9be:	9b01      	ldr	r3, [sp, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
     9c0:	f383 8810 	msr	PRIMASK, r3
	return res;
}
     9c4:	b002      	add	sp, #8
     9c6:	bd10      	pop	{r4, pc}

000009c8 <__aeabi_uidivmod>:

/**
 * \brief Do unsigned division, return result and remainder
 */
uint64_t __aeabi_uidivmod(unsigned numerator, unsigned denominator)
{
     9c8:	b510      	push	{r4, lr}
     9ca:	b082      	sub	sp, #8
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
     9cc:	f3ef 8310 	mrs	r3, PRIMASK
	uint64_t res;
	_DIVAS_CRITICAL_ENTER();
     9d0:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
     9d2:	b672      	cpsid	i
	DIVAS->CTRLA.bit.SIGNED = s;
     9d4:	2390      	movs	r3, #144	; 0x90
     9d6:	05db      	lsls	r3, r3, #23
     9d8:	781a      	ldrb	r2, [r3, #0]
     9da:	2401      	movs	r4, #1
     9dc:	43a2      	bics	r2, r4
     9de:	701a      	strb	r2, [r3, #0]
	DIVAS->DIVIDEND.reg     = n;
     9e0:	6098      	str	r0, [r3, #8]
	DIVAS->DIVISOR.reg      = d;
     9e2:	60d9      	str	r1, [r3, #12]
	while (DIVAS->STATUS.bit.BUSY) {
     9e4:	2390      	movs	r3, #144	; 0x90
     9e6:	05db      	lsls	r3, r3, #23
     9e8:	791b      	ldrb	r3, [r3, #4]
     9ea:	07db      	lsls	r3, r3, #31
     9ec:	d4fa      	bmi.n	9e4 <__aeabi_uidivmod+0x1c>
	_divas_div(0, numerator, denominator);
	res = _divas_result64();
     9ee:	4b04      	ldr	r3, [pc, #16]	; (a00 <__aeabi_uidivmod+0x38>)
     9f0:	6818      	ldr	r0, [r3, #0]
     9f2:	6859      	ldr	r1, [r3, #4]
	_DIVAS_CRITICAL_LEAVE();
     9f4:	9b01      	ldr	r3, [sp, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
     9f6:	f383 8810 	msr	PRIMASK, r3
	return res;
}
     9fa:	b002      	add	sp, #8
     9fc:	bd10      	pop	{r4, pc}
     9fe:	46c0      	nop			; (mov r8, r8)
     a00:	48000010 	.word	0x48000010

00000a04 <_gclk_init_generators_by_fref>:

void _gclk_init_generators_by_fref(uint32_t bm)
{

#if CONF_GCLK_GENERATOR_0_CONFIG == 1
	if (bm & (1ul << 0)) {
     a04:	07c3      	lsls	r3, r0, #31
     a06:	d507      	bpl.n	a18 <_gclk_init_generators_by_fref+0x14>
	((Gclk *)hw)->GENCTRL[index].reg = data;
     a08:	4a04      	ldr	r2, [pc, #16]	; (a1c <_gclk_init_generators_by_fref+0x18>)
     a0a:	4b05      	ldr	r3, [pc, #20]	; (a20 <_gclk_init_generators_by_fref+0x1c>)
     a0c:	621a      	str	r2, [r3, #32]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
     a0e:	4b04      	ldr	r3, [pc, #16]	; (a20 <_gclk_init_generators_by_fref+0x1c>)
     a10:	685a      	ldr	r2, [r3, #4]
     a12:	4b04      	ldr	r3, [pc, #16]	; (a24 <_gclk_init_generators_by_fref+0x20>)
     a14:	421a      	tst	r2, r3
     a16:	d1fa      	bne.n	a0e <_gclk_init_generators_by_fref+0xa>
		        | (CONF_GCLK_GEN_8_DIVSEL << GCLK_GENCTRL_DIVSEL_Pos) | (CONF_GCLK_GEN_8_OE << GCLK_GENCTRL_OE_Pos)
		        | (CONF_GCLK_GEN_8_OOV << GCLK_GENCTRL_OOV_Pos) | (CONF_GCLK_GEN_8_IDC << GCLK_GENCTRL_IDC_Pos)
		        | (CONF_GCLK_GENERATOR_8_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_8_SOURCE);
	}
#endif
}
     a18:	4770      	bx	lr
     a1a:	46c0      	nop			; (mov r8, r8)
     a1c:	00010107 	.word	0x00010107
     a20:	40001c00 	.word	0x40001c00
     a24:	000007fd 	.word	0x000007fd

00000a28 <_mclk_init>:
	((Mclk *)hw)->CPUDIV.reg = data;
     a28:	2201      	movs	r2, #1
     a2a:	4b01      	ldr	r3, [pc, #4]	; (a30 <_mclk_init+0x8>)
     a2c:	711a      	strb	r2, [r3, #4]
 */
void _mclk_init(void)
{
	void *hw = (void *)MCLK;
	hri_mclk_write_CPUDIV_reg(hw, MCLK_CPUDIV_CPUDIV(CONF_MCLK_CPUDIV));
}
     a2e:	4770      	bx	lr
     a30:	40000800 	.word	0x40000800

00000a34 <_flash_erase_row>:
	return (((Nvmctrl *)hw)->INTFLAG.reg & NVMCTRL_INTFLAG_READY) >> NVMCTRL_INTFLAG_READY_Pos;
     a34:	7d03      	ldrb	r3, [r0, #20]
 * \param[in]  hw            The pointer to hardware instance
 * \param[in]  dst_addr      Destination page address to erase
 */
static void _flash_erase_row(void *const hw, const uint32_t dst_addr, uint32_t nvmctrl_cmd)
{
	while (!hri_nvmctrl_get_interrupt_READY_bit(hw)) {
     a36:	07db      	lsls	r3, r3, #31
     a38:	d5fc      	bpl.n	a34 <_flash_erase_row>
}

static inline void hri_nvmctrl_clear_STATUS_reg(const void *const hw, hri_nvmctrl_status_reg_t mask)
{
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->STATUS.reg = mask;
     a3a:	2320      	movs	r3, #32
     a3c:	33ff      	adds	r3, #255	; 0xff
     a3e:	8303      	strh	r3, [r0, #24]

	/* Clear flags */
	hri_nvmctrl_clear_STATUS_reg(hw, NVMCTRL_STATUS_MASK);

	/* Set address and command */
	hri_nvmctrl_write_ADDR_reg(hw, dst_addr / 2);
     a40:	0849      	lsrs	r1, r1, #1
	((Nvmctrl *)hw)->ADDR.reg = data;
     a42:	61c1      	str	r1, [r0, #28]
	hri_nvmctrl_write_CTRLA_reg(hw, nvmctrl_cmd | NVMCTRL_CTRLA_CMDEX_KEY);
     a44:	4b02      	ldr	r3, [pc, #8]	; (a50 <_flash_erase_row+0x1c>)
     a46:	431a      	orrs	r2, r3
     a48:	b292      	uxth	r2, r2
	((Nvmctrl *)hw)->CTRLA.reg = data;
     a4a:	8002      	strh	r2, [r0, #0]
}
     a4c:	4770      	bx	lr
     a4e:	46c0      	nop			; (mov r8, r8)
     a50:	ffffa500 	.word	0xffffa500

00000a54 <_flash_program>:
 *                           write is stored
 * \param[in] size           The size of data to write to a page
 */
static void _flash_program(void *const hw, const uint32_t dst_addr, const uint8_t *buffer, const uint16_t size,
                           uint32_t nvmctrl_cmd)
{
     a54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     a56:	0004      	movs	r4, r0
     a58:	000f      	movs	r7, r1
     a5a:	0016      	movs	r6, r2
     a5c:	001d      	movs	r5, r3
	ASSERT(!(dst_addr % 2));
     a5e:	2001      	movs	r0, #1
     a60:	4008      	ands	r0, r1
     a62:	4243      	negs	r3, r0
     a64:	4158      	adcs	r0, r3
     a66:	b2c0      	uxtb	r0, r0
     a68:	22c5      	movs	r2, #197	; 0xc5
     a6a:	0052      	lsls	r2, r2, #1
     a6c:	4915      	ldr	r1, [pc, #84]	; (ac4 <_flash_program+0x70>)
     a6e:	4b16      	ldr	r3, [pc, #88]	; (ac8 <_flash_program+0x74>)
     a70:	4798      	blx	r3

	uint32_t nvm_address = dst_addr / 2;
     a72:	0879      	lsrs	r1, r7, #1
	return (((Nvmctrl *)hw)->INTFLAG.reg & NVMCTRL_INTFLAG_READY) >> NVMCTRL_INTFLAG_READY_Pos;
     a74:	7d23      	ldrb	r3, [r4, #20]
	uint16_t i, data;

	while (!hri_nvmctrl_get_interrupt_READY_bit(hw)) {
     a76:	07db      	lsls	r3, r3, #31
     a78:	d5fc      	bpl.n	a74 <_flash_program+0x20>
	((Nvmctrl *)hw)->CTRLA.reg = data;
     a7a:	4b14      	ldr	r3, [pc, #80]	; (acc <_flash_program+0x78>)
     a7c:	8023      	strh	r3, [r4, #0]
	return (((Nvmctrl *)hw)->INTFLAG.reg & NVMCTRL_INTFLAG_READY) >> NVMCTRL_INTFLAG_READY_Pos;
     a7e:	7d23      	ldrb	r3, [r4, #20]
		/* Wait until this module isn't busy */
	}

	hri_nvmctrl_write_CTRLA_reg(hw, NVMCTRL_CTRLA_CMD_PBC | NVMCTRL_CTRLA_CMDEX_KEY);

	while (!hri_nvmctrl_get_interrupt_READY_bit(hw)) {
     a80:	07db      	lsls	r3, r3, #31
     a82:	d5fc      	bpl.n	a7e <_flash_program+0x2a>
	((Nvmctrl *)hw)->STATUS.reg = mask;
     a84:	2320      	movs	r3, #32
     a86:	33ff      	adds	r3, #255	; 0xff
     a88:	8323      	strh	r3, [r4, #24]
	uint32_t nvm_address = dst_addr / 2;
     a8a:	000a      	movs	r2, r1
	}

	/* Clear flags */
	hri_nvmctrl_clear_STATUS_reg(hw, NVMCTRL_STATUS_MASK);

	for (i = 0; i < size; i += 2) {
     a8c:	2300      	movs	r3, #0
     a8e:	e004      	b.n	a9a <_flash_program+0x46>
		data = buffer[i];
		if (i < NVMCTRL_PAGE_SIZE - 1) {
			data |= (buffer[i + 1] << 8);
		}
		NVM_MEMORY[nvm_address++] = data;
     a90:	0057      	lsls	r7, r2, #1
     a92:	8038      	strh	r0, [r7, #0]
	for (i = 0; i < size; i += 2) {
     a94:	3302      	adds	r3, #2
     a96:	b29b      	uxth	r3, r3
		NVM_MEMORY[nvm_address++] = data;
     a98:	3201      	adds	r2, #1
	for (i = 0; i < size; i += 2) {
     a9a:	42ab      	cmp	r3, r5
     a9c:	d208      	bcs.n	ab0 <_flash_program+0x5c>
		data = buffer[i];
     a9e:	5cf7      	ldrb	r7, [r6, r3]
     aa0:	b2b8      	uxth	r0, r7
		if (i < NVMCTRL_PAGE_SIZE - 1) {
     aa2:	2b3e      	cmp	r3, #62	; 0x3e
     aa4:	d8f4      	bhi.n	a90 <_flash_program+0x3c>
			data |= (buffer[i + 1] << 8);
     aa6:	18f0      	adds	r0, r6, r3
     aa8:	7840      	ldrb	r0, [r0, #1]
     aaa:	0200      	lsls	r0, r0, #8
     aac:	4338      	orrs	r0, r7
     aae:	e7ef      	b.n	a90 <_flash_program+0x3c>
	return (((Nvmctrl *)hw)->INTFLAG.reg & NVMCTRL_INTFLAG_READY) >> NVMCTRL_INTFLAG_READY_Pos;
     ab0:	7d23      	ldrb	r3, [r4, #20]
	}

	while (!hri_nvmctrl_get_interrupt_READY_bit(hw)) {
     ab2:	07db      	lsls	r3, r3, #31
     ab4:	d5fc      	bpl.n	ab0 <_flash_program+0x5c>
	((Nvmctrl *)hw)->ADDR.reg = data;
     ab6:	61e1      	str	r1, [r4, #28]
		/* Wait until this module isn't busy */
	}

	hri_nvmctrl_write_ADDR_reg(hw, dst_addr / 2);
	hri_nvmctrl_write_CTRLA_reg(hw, nvmctrl_cmd | NVMCTRL_CTRLA_CMDEX_KEY);
     ab8:	4b05      	ldr	r3, [pc, #20]	; (ad0 <_flash_program+0x7c>)
     aba:	9a06      	ldr	r2, [sp, #24]
     abc:	4313      	orrs	r3, r2
     abe:	b29b      	uxth	r3, r3
	((Nvmctrl *)hw)->CTRLA.reg = data;
     ac0:	8023      	strh	r3, [r4, #0]
}
     ac2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     ac4:	000025f4 	.word	0x000025f4
     ac8:	00000761 	.word	0x00000761
     acc:	ffffa544 	.word	0xffffa544
     ad0:	ffffa500 	.word	0xffffa500

00000ad4 <_flash_init>:
{
     ad4:	b570      	push	{r4, r5, r6, lr}
     ad6:	0005      	movs	r5, r0
     ad8:	000c      	movs	r4, r1
	ASSERT(device && (hw == NVMCTRL));
     ada:	2800      	cmp	r0, #0
     adc:	d01c      	beq.n	b18 <_flash_init+0x44>
     ade:	4b10      	ldr	r3, [pc, #64]	; (b20 <_flash_init+0x4c>)
     ae0:	4299      	cmp	r1, r3
     ae2:	d01b      	beq.n	b1c <_flash_init+0x48>
     ae4:	2000      	movs	r0, #0
     ae6:	2246      	movs	r2, #70	; 0x46
     ae8:	490e      	ldr	r1, [pc, #56]	; (b24 <_flash_init+0x50>)
     aea:	4b0f      	ldr	r3, [pc, #60]	; (b28 <_flash_init+0x54>)
     aec:	4798      	blx	r3
	device->hw = hw;
     aee:	612c      	str	r4, [r5, #16]
	tmp = ((Nvmctrl *)hw)->CTRLB.reg;
     af0:	6862      	ldr	r2, [r4, #4]
	tmp &= mask;
     af2:	239e      	movs	r3, #158	; 0x9e
     af4:	4013      	ands	r3, r2
	((Nvmctrl *)hw)->CTRLB.reg = data;
     af6:	6063      	str	r3, [r4, #4]
	_nvm_dev = device;
     af8:	4b0c      	ldr	r3, [pc, #48]	; (b2c <_flash_init+0x58>)
     afa:	601d      	str	r5, [r3, #0]
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     afc:	4b0c      	ldr	r3, [pc, #48]	; (b30 <_flash_init+0x5c>)
     afe:	2240      	movs	r2, #64	; 0x40
     b00:	2180      	movs	r1, #128	; 0x80
     b02:	505a      	str	r2, [r3, r1]
  __ASM volatile ("dsb 0xF":::"memory");
     b04:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
     b08:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     b0c:	3101      	adds	r1, #1
     b0e:	31ff      	adds	r1, #255	; 0xff
     b10:	505a      	str	r2, [r3, r1]
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     b12:	601a      	str	r2, [r3, #0]
}
     b14:	2000      	movs	r0, #0
     b16:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(device && (hw == NVMCTRL));
     b18:	2000      	movs	r0, #0
     b1a:	e7e4      	b.n	ae6 <_flash_init+0x12>
     b1c:	2001      	movs	r0, #1
     b1e:	e7e2      	b.n	ae6 <_flash_init+0x12>
     b20:	41004000 	.word	0x41004000
     b24:	000025f4 	.word	0x000025f4
     b28:	00000761 	.word	0x00000761
     b2c:	20000238 	.word	0x20000238
     b30:	e000e100 	.word	0xe000e100

00000b34 <_flash_get_page_size>:
}
     b34:	2040      	movs	r0, #64	; 0x40
     b36:	4770      	bx	lr

00000b38 <_flash_get_total_pages>:
}
     b38:	2080      	movs	r0, #128	; 0x80
     b3a:	0140      	lsls	r0, r0, #5
     b3c:	4770      	bx	lr

00000b3e <_flash_read>:
{
     b3e:	b570      	push	{r4, r5, r6, lr}
	uint32_t nvm_address = src_addr / 2;
     b40:	084c      	lsrs	r4, r1, #1
	while (!hri_nvmctrl_get_interrupt_READY_bit(device->hw)) {
     b42:	6905      	ldr	r5, [r0, #16]
	return (((Nvmctrl *)hw)->INTFLAG.reg & NVMCTRL_INTFLAG_READY) >> NVMCTRL_INTFLAG_READY_Pos;
     b44:	7d2e      	ldrb	r6, [r5, #20]
     b46:	07f6      	lsls	r6, r6, #31
     b48:	d5fb      	bpl.n	b42 <_flash_read+0x4>
	((Nvmctrl *)hw)->STATUS.reg = mask;
     b4a:	2020      	movs	r0, #32
     b4c:	30ff      	adds	r0, #255	; 0xff
     b4e:	8328      	strh	r0, [r5, #24]
	if (src_addr % 2) {
     b50:	07c8      	lsls	r0, r1, #31
     b52:	d507      	bpl.n	b64 <_flash_read+0x26>
		data      = NVM_MEMORY[nvm_address++];
     b54:	3401      	adds	r4, #1
     b56:	2001      	movs	r0, #1
     b58:	4381      	bics	r1, r0
     b5a:	8809      	ldrh	r1, [r1, #0]
		buffer[0] = data >> 8;
     b5c:	0a09      	lsrs	r1, r1, #8
     b5e:	7011      	strb	r1, [r2, #0]
		i         = 1;
     b60:	2101      	movs	r1, #1
     b62:	e003      	b.n	b6c <_flash_read+0x2e>
		i = 0;
     b64:	2100      	movs	r1, #0
     b66:	e001      	b.n	b6c <_flash_read+0x2e>
		i += 2;
     b68:	3102      	adds	r1, #2
		data      = NVM_MEMORY[nvm_address++];
     b6a:	002c      	movs	r4, r5
	while (i < length) {
     b6c:	4299      	cmp	r1, r3
     b6e:	d20b      	bcs.n	b88 <_flash_read+0x4a>
		data      = NVM_MEMORY[nvm_address++];
     b70:	1c65      	adds	r5, r4, #1
     b72:	0064      	lsls	r4, r4, #1
     b74:	8820      	ldrh	r0, [r4, #0]
     b76:	b280      	uxth	r0, r0
		buffer[i] = (data & 0xFF);
     b78:	5450      	strb	r0, [r2, r1]
		if (i < (length - 1)) {
     b7a:	1e5c      	subs	r4, r3, #1
     b7c:	42a1      	cmp	r1, r4
     b7e:	d2f3      	bcs.n	b68 <_flash_read+0x2a>
			buffer[i + 1] = (data >> 8);
     b80:	1c4c      	adds	r4, r1, #1
     b82:	0a00      	lsrs	r0, r0, #8
     b84:	5510      	strb	r0, [r2, r4]
     b86:	e7ef      	b.n	b68 <_flash_read+0x2a>
}
     b88:	bd70      	pop	{r4, r5, r6, pc}
	...

00000b8c <_flash_write>:
{
     b8c:	b5f0      	push	{r4, r5, r6, r7, lr}
     b8e:	46de      	mov	lr, fp
     b90:	4657      	mov	r7, sl
     b92:	464e      	mov	r6, r9
     b94:	4645      	mov	r5, r8
     b96:	b5e0      	push	{r5, r6, r7, lr}
     b98:	b0c5      	sub	sp, #276	; 0x114
     b9a:	4681      	mov	r9, r0
     b9c:	0016      	movs	r6, r2
     b9e:	001d      	movs	r5, r3
	uint32_t wr_start_addr = dst_addr;
     ba0:	000c      	movs	r4, r1
     ba2:	e048      	b.n	c36 <_flash_write+0xaa>
			_flash_read(device, row_start_addr + i * NVMCTRL_PAGE_SIZE, tmp_buffer[i], NVMCTRL_PAGE_SIZE);
     ba4:	4653      	mov	r3, sl
     ba6:	0199      	lsls	r1, r3, #6
     ba8:	ab04      	add	r3, sp, #16
     baa:	185a      	adds	r2, r3, r1
     bac:	4441      	add	r1, r8
     bae:	2340      	movs	r3, #64	; 0x40
     bb0:	4648      	mov	r0, r9
     bb2:	4f29      	ldr	r7, [pc, #164]	; (c58 <_flash_write+0xcc>)
     bb4:	47b8      	blx	r7
		for (i = 0; i < NVMCTRL_ROW_PAGES; i++) {
     bb6:	2301      	movs	r3, #1
     bb8:	469c      	mov	ip, r3
     bba:	44e2      	add	sl, ip
     bbc:	4653      	mov	r3, sl
     bbe:	2b03      	cmp	r3, #3
     bc0:	d9f0      	bls.n	ba4 <_flash_write+0x18>
		j = (wr_start_addr - row_start_addr) / NVMCTRL_PAGE_SIZE;
     bc2:	4643      	mov	r3, r8
     bc4:	1ae3      	subs	r3, r4, r3
     bc6:	0999      	lsrs	r1, r3, #6
		k = wr_start_addr - row_start_addr - j * NVMCTRL_PAGE_SIZE;
     bc8:	223f      	movs	r2, #63	; 0x3f
     bca:	4013      	ands	r3, r2
		while ((wr_start_addr <= row_end_addr) && (length > 0)) {
     bcc:	e002      	b.n	bd4 <_flash_write+0x48>
			wr_start_addr++;
     bce:	3401      	adds	r4, #1
			buffer++;
     bd0:	3601      	adds	r6, #1
			length--;
     bd2:	3d01      	subs	r5, #1
		while ((wr_start_addr <= row_end_addr) && (length > 0)) {
     bd4:	9a03      	ldr	r2, [sp, #12]
     bd6:	4294      	cmp	r4, r2
     bd8:	d80d      	bhi.n	bf6 <_flash_write+0x6a>
     bda:	2d00      	cmp	r5, #0
     bdc:	d00b      	beq.n	bf6 <_flash_write+0x6a>
			tmp_buffer[j][k] = *buffer;
     bde:	7830      	ldrb	r0, [r6, #0]
     be0:	018a      	lsls	r2, r1, #6
     be2:	af04      	add	r7, sp, #16
     be4:	46bc      	mov	ip, r7
     be6:	4462      	add	r2, ip
     be8:	54d0      	strb	r0, [r2, r3]
			k                = (k + 1) % NVMCTRL_PAGE_SIZE;
     bea:	3301      	adds	r3, #1
     bec:	223f      	movs	r2, #63	; 0x3f
     bee:	4013      	ands	r3, r2
			if (0 == k) {
     bf0:	d1ed      	bne.n	bce <_flash_write+0x42>
				j++;
     bf2:	3101      	adds	r1, #1
     bf4:	e7eb      	b.n	bce <_flash_write+0x42>
		_flash_erase_row(device->hw, row_start_addr, NVMCTRL_CTRLA_CMD_ER);
     bf6:	2202      	movs	r2, #2
     bf8:	4641      	mov	r1, r8
     bfa:	464b      	mov	r3, r9
     bfc:	6918      	ldr	r0, [r3, #16]
     bfe:	4b17      	ldr	r3, [pc, #92]	; (c5c <_flash_write+0xd0>)
     c00:	4798      	blx	r3
		for (i = 0; i < NVMCTRL_ROW_PAGES; i++) {
     c02:	2300      	movs	r3, #0
     c04:	469a      	mov	sl, r3
     c06:	e00e      	b.n	c26 <_flash_write+0x9a>
			               row_start_addr + i * NVMCTRL_PAGE_SIZE,
     c08:	4653      	mov	r3, sl
     c0a:	0199      	lsls	r1, r3, #6
			               tmp_buffer[i],
     c0c:	ab04      	add	r3, sp, #16
     c0e:	185a      	adds	r2, r3, r1
			_flash_program(device->hw,
     c10:	4441      	add	r1, r8
     c12:	2304      	movs	r3, #4
     c14:	9300      	str	r3, [sp, #0]
     c16:	333c      	adds	r3, #60	; 0x3c
     c18:	4648      	mov	r0, r9
     c1a:	6900      	ldr	r0, [r0, #16]
     c1c:	4f10      	ldr	r7, [pc, #64]	; (c60 <_flash_write+0xd4>)
     c1e:	47b8      	blx	r7
		for (i = 0; i < NVMCTRL_ROW_PAGES; i++) {
     c20:	2301      	movs	r3, #1
     c22:	469c      	mov	ip, r3
     c24:	44e2      	add	sl, ip
     c26:	4653      	mov	r3, sl
     c28:	2b03      	cmp	r3, #3
     c2a:	d9ed      	bls.n	c08 <_flash_write+0x7c>
	} while (row_end_addr < (wr_start_addr + length - 1));
     c2c:	192b      	adds	r3, r5, r4
     c2e:	3b01      	subs	r3, #1
     c30:	9a03      	ldr	r2, [sp, #12]
     c32:	429a      	cmp	r2, r3
     c34:	d209      	bcs.n	c4a <_flash_write+0xbe>
		row_start_addr = wr_start_addr & ~((NVMCTRL_PAGE_SIZE * NVMCTRL_ROW_PAGES) - 1);
     c36:	23ff      	movs	r3, #255	; 0xff
     c38:	0022      	movs	r2, r4
     c3a:	439a      	bics	r2, r3
     c3c:	4690      	mov	r8, r2
		row_end_addr   = row_start_addr + NVMCTRL_ROW_PAGES * NVMCTRL_PAGE_SIZE - 1;
     c3e:	0017      	movs	r7, r2
     c40:	37ff      	adds	r7, #255	; 0xff
     c42:	9703      	str	r7, [sp, #12]
		for (i = 0; i < NVMCTRL_ROW_PAGES; i++) {
     c44:	2300      	movs	r3, #0
     c46:	469a      	mov	sl, r3
     c48:	e7b8      	b.n	bbc <_flash_write+0x30>
}
     c4a:	b045      	add	sp, #276	; 0x114
     c4c:	bc3c      	pop	{r2, r3, r4, r5}
     c4e:	4690      	mov	r8, r2
     c50:	4699      	mov	r9, r3
     c52:	46a2      	mov	sl, r4
     c54:	46ab      	mov	fp, r5
     c56:	bdf0      	pop	{r4, r5, r6, r7, pc}
     c58:	00000b3f 	.word	0x00000b3f
     c5c:	00000a35 	.word	0x00000a35
     c60:	00000a55 	.word	0x00000a55

00000c64 <_flash_is_locked>:
	region_id = dst_addr / (NVMCTRL_FLASH_SIZE / 16);
     c64:	0b89      	lsrs	r1, r1, #14
	return !(hri_nvmctrl_get_LOCK_reg(device->hw, 1 << region_id));
     c66:	6902      	ldr	r2, [r0, #16]
     c68:	0409      	lsls	r1, r1, #16
     c6a:	0c09      	lsrs	r1, r1, #16
     c6c:	2301      	movs	r3, #1
     c6e:	408b      	lsls	r3, r1
	tmp = ((Nvmctrl *)hw)->LOCK.reg;
     c70:	8c10      	ldrh	r0, [r2, #32]
	tmp &= mask;
     c72:	4018      	ands	r0, r3
     c74:	4243      	negs	r3, r0
     c76:	4158      	adcs	r0, r3
     c78:	b2c0      	uxtb	r0, r0
}
     c7a:	4770      	bx	lr

00000c7c <NVMCTRL_Handler>:

/**
 * \internal NVM interrupt handler
 */
void NVMCTRL_Handler(void)
{
     c7c:	b510      	push	{r4, lr}
	void *const hw = _nvm_dev->hw;
     c7e:	4b0a      	ldr	r3, [pc, #40]	; (ca8 <NVMCTRL_Handler+0x2c>)
     c80:	6818      	ldr	r0, [r3, #0]
     c82:	6903      	ldr	r3, [r0, #16]
	return (((Nvmctrl *)hw)->INTFLAG.reg & NVMCTRL_INTFLAG_READY) >> NVMCTRL_INTFLAG_READY_Pos;
     c84:	7d1a      	ldrb	r2, [r3, #20]

	if (hri_nvmctrl_get_interrupt_READY_bit(hw)) {
     c86:	07d2      	lsls	r2, r2, #31
     c88:	d504      	bpl.n	c94 <NVMCTRL_Handler+0x18>
		if (NULL != _nvm_dev->flash_cb.ready_cb) {
     c8a:	6803      	ldr	r3, [r0, #0]
     c8c:	2b00      	cmp	r3, #0
     c8e:	d000      	beq.n	c92 <NVMCTRL_Handler+0x16>
			_nvm_dev->flash_cb.ready_cb(_nvm_dev);
     c90:	4798      	blx	r3
		hri_nvmctrl_clear_interrupt_ERROR_bit(hw);
		if (NULL != _nvm_dev->flash_cb.error_cb) {
			_nvm_dev->flash_cb.error_cb(_nvm_dev);
		}
	}
}
     c92:	bd10      	pop	{r4, pc}
	return (((Nvmctrl *)hw)->INTFLAG.reg & NVMCTRL_INTFLAG_ERROR) >> NVMCTRL_INTFLAG_ERROR_Pos;
     c94:	7d1a      	ldrb	r2, [r3, #20]
	} else if (hri_nvmctrl_get_interrupt_ERROR_bit(hw)) {
     c96:	0792      	lsls	r2, r2, #30
     c98:	d5fb      	bpl.n	c92 <NVMCTRL_Handler+0x16>
	((Nvmctrl *)hw)->INTFLAG.reg = NVMCTRL_INTFLAG_ERROR;
     c9a:	2202      	movs	r2, #2
     c9c:	751a      	strb	r2, [r3, #20]
		if (NULL != _nvm_dev->flash_cb.error_cb) {
     c9e:	6843      	ldr	r3, [r0, #4]
     ca0:	2b00      	cmp	r3, #0
     ca2:	d0f6      	beq.n	c92 <NVMCTRL_Handler+0x16>
			_nvm_dev->flash_cb.error_cb(_nvm_dev);
     ca4:	4798      	blx	r3
}
     ca6:	e7f4      	b.n	c92 <NVMCTRL_Handler+0x16>
     ca8:	20000238 	.word	0x20000238

00000cac <_osc32kctrl_init_sources>:
}

static inline void hri_osc32kctrl_write_XOSC32K_reg(const void *const hw, hri_osc32kctrl_xosc32k_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->XOSC32K.reg = data;
     cac:	4a07      	ldr	r2, [pc, #28]	; (ccc <_osc32kctrl_init_sources+0x20>)
     cae:	238e      	movs	r3, #142	; 0x8e
     cb0:	8293      	strh	r3, [r2, #20]
}

static inline void hri_osc32kctrl_write_CFDCTRL_reg(const void *const hw, hri_osc32kctrl_cfdctrl_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->CFDCTRL.reg = data;
     cb2:	2300      	movs	r3, #0
     cb4:	7593      	strb	r3, [r2, #22]
}

static inline void hri_osc32kctrl_write_EVCTRL_reg(const void *const hw, hri_osc32kctrl_evctrl_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->EVCTRL.reg = data;
     cb6:	75d3      	strb	r3, [r2, #23]
}

static inline hri_osc32kctrl_osculp32k_reg_t hri_osc32kctrl_read_OSCULP32K_CALIB_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Osc32kctrl *)hw)->OSCULP32K.reg;
     cb8:	69d3      	ldr	r3, [r2, #28]
	tmp = (tmp & OSC32KCTRL_OSCULP32K_CALIB_Msk) >> OSC32KCTRL_OSCULP32K_CALIB_Pos;
     cba:	0a1b      	lsrs	r3, r3, #8
	calib = hri_osc32kctrl_read_OSCULP32K_CALIB_bf(hw);
	hri_osc32kctrl_write_OSCULP32K_reg(hw,
#if CONF_OSC32K_CALIB_ENABLE == 1
	                                   OSC32KCTRL_OSCULP32K_CALIB(CONF_OSC32K_CALIB)
#else
	                                   OSC32KCTRL_OSCULP32K_CALIB(calib)
     cbc:	021b      	lsls	r3, r3, #8
     cbe:	21f8      	movs	r1, #248	; 0xf8
     cc0:	0149      	lsls	r1, r1, #5
     cc2:	400b      	ands	r3, r1
}

static inline void hri_osc32kctrl_write_OSCULP32K_reg(const void *const hw, hri_osc32kctrl_osculp32k_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->OSCULP32K.reg = data;
     cc4:	61d3      	str	r3, [r2, #28]
	((Osc32kctrl *)hw)->RTCCTRL.reg = data;
     cc6:	2301      	movs	r3, #1
     cc8:	6113      	str	r3, [r2, #16]
		;
#endif
#endif
	hri_osc32kctrl_write_RTCCTRL_reg(hw, OSC32KCTRL_RTCCTRL_RTCSEL(CONF_RTCCTRL));
	(void)calib;
}
     cca:	4770      	bx	lr
     ccc:	40001400 	.word	0x40001400

00000cd0 <_oscctrl_init_sources>:
#if CONF_OSC48M_ONDEMAND == 1
	hri_oscctrl_set_OSC48MCTRL_ONDEMAND_bit(hw);
#endif
#endif
	(void)hw;
}
     cd0:	4770      	bx	lr
	...

00000cd4 <_oscctrl_init_referenced_generators>:
}

static inline void hri_oscctrl_write_DPLLRATIO_reg(const void *const hw, hri_oscctrl_dpllratio_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DPLLRATIO.reg = data;
     cd4:	4a19      	ldr	r2, [pc, #100]	; (d3c <_oscctrl_init_referenced_generators+0x68>)
     cd6:	4b1a      	ldr	r3, [pc, #104]	; (d40 <_oscctrl_init_referenced_generators+0x6c>)
     cd8:	621a      	str	r2, [r3, #32]
	while (((Oscctrl *)hw)->DPLLSYNCBUSY.reg & reg) {
     cda:	232c      	movs	r3, #44	; 0x2c
     cdc:	4a18      	ldr	r2, [pc, #96]	; (d40 <_oscctrl_init_referenced_generators+0x6c>)
     cde:	5cd2      	ldrb	r2, [r2, r3]
     ce0:	3b1e      	subs	r3, #30
     ce2:	421a      	tst	r2, r3
     ce4:	d1f9      	bne.n	cda <_oscctrl_init_referenced_generators+0x6>
}

static inline void hri_oscctrl_write_DPLLCTRLB_reg(const void *const hw, hri_oscctrl_dpllctrlb_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DPLLCTRLB.reg = data;
     ce6:	4b16      	ldr	r3, [pc, #88]	; (d40 <_oscctrl_init_referenced_generators+0x6c>)
     ce8:	2200      	movs	r2, #0
     cea:	625a      	str	r2, [r3, #36]	; 0x24
}

static inline void hri_oscctrl_write_DPLLPRESC_reg(const void *const hw, hri_oscctrl_dpllpresc_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DPLLPRESC.reg = data;
     cec:	2128      	movs	r1, #40	; 0x28
     cee:	545a      	strb	r2, [r3, r1]
	while (((Oscctrl *)hw)->DPLLSYNCBUSY.reg & reg) {
     cf0:	232c      	movs	r3, #44	; 0x2c
     cf2:	4a13      	ldr	r2, [pc, #76]	; (d40 <_oscctrl_init_referenced_generators+0x6c>)
     cf4:	5cd2      	ldrb	r2, [r2, r3]
     cf6:	3b1e      	subs	r3, #30
     cf8:	421a      	tst	r2, r3
     cfa:	d1f9      	bne.n	cf0 <_oscctrl_init_referenced_generators+0x1c>
	((Oscctrl *)hw)->DPLLCTRLA.reg = data;
     cfc:	2202      	movs	r2, #2
     cfe:	4b10      	ldr	r3, [pc, #64]	; (d40 <_oscctrl_init_referenced_generators+0x6c>)
     d00:	771a      	strb	r2, [r3, #28]
	while (((Oscctrl *)hw)->DPLLSYNCBUSY.reg & reg) {
     d02:	232c      	movs	r3, #44	; 0x2c
     d04:	4a0e      	ldr	r2, [pc, #56]	; (d40 <_oscctrl_init_referenced_generators+0x6c>)
     d06:	5cd3      	ldrb	r3, [r2, r3]
     d08:	079b      	lsls	r3, r3, #30
     d0a:	d4fa      	bmi.n	d02 <_oscctrl_init_referenced_generators+0x2e>
	return (((Oscctrl *)hw)->DPLLSTATUS.reg & OSCCTRL_DPLLSTATUS_LOCK) >> OSCCTRL_DPLLSTATUS_LOCK_Pos;
     d0c:	2330      	movs	r3, #48	; 0x30
     d0e:	4a0c      	ldr	r2, [pc, #48]	; (d40 <_oscctrl_init_referenced_generators+0x6c>)
     d10:	5cd3      	ldrb	r3, [r2, r3]
	                                    | (CONF_DPLL_ENABLE << OSCCTRL_DPLLCTRLA_ENABLE_Pos));
#endif

#if CONF_DPLL_CONFIG == 1
#if CONF_DPLL_ENABLE == 1
	while (!(hri_oscctrl_get_DPLLSTATUS_LOCK_bit(hw) || hri_oscctrl_get_DPLLSTATUS_CLKRDY_bit(hw)))
     d12:	07db      	lsls	r3, r3, #31
     d14:	d403      	bmi.n	d1e <_oscctrl_init_referenced_generators+0x4a>
	return (((Oscctrl *)hw)->DPLLSTATUS.reg & OSCCTRL_DPLLSTATUS_CLKRDY) >> OSCCTRL_DPLLSTATUS_CLKRDY_Pos;
     d16:	2330      	movs	r3, #48	; 0x30
     d18:	5cd3      	ldrb	r3, [r2, r3]
     d1a:	079b      	lsls	r3, r3, #30
     d1c:	d5f6      	bpl.n	d0c <_oscctrl_init_referenced_generators+0x38>
	((Oscctrl *)hw)->DPLLCTRLA.reg |= OSCCTRL_DPLLCTRLA_ONDEMAND;
     d1e:	4a08      	ldr	r2, [pc, #32]	; (d40 <_oscctrl_init_referenced_generators+0x6c>)
     d20:	7f13      	ldrb	r3, [r2, #28]
     d22:	2180      	movs	r1, #128	; 0x80
     d24:	4249      	negs	r1, r1
     d26:	430b      	orrs	r3, r1
     d28:	b2db      	uxtb	r3, r3
     d2a:	7713      	strb	r3, [r2, #28]
	while (((Oscctrl *)hw)->DPLLSYNCBUSY.reg & reg) {
     d2c:	232c      	movs	r3, #44	; 0x2c
     d2e:	4a04      	ldr	r2, [pc, #16]	; (d40 <_oscctrl_init_referenced_generators+0x6c>)
     d30:	5cd2      	ldrb	r2, [r2, r3]
     d32:	3b1e      	subs	r3, #30
     d34:	421a      	tst	r2, r3
     d36:	d1f9      	bne.n	d2c <_oscctrl_init_referenced_generators+0x58>
#if CONF_DPLL_ONDEMAND == 1
	hri_oscctrl_set_DPLLCTRLA_ONDEMAND_bit(hw);
#endif
#endif
	(void)hw;
}
     d38:	4770      	bx	lr
     d3a:	46c0      	nop			; (mov r8, r8)
     d3c:	000d05b7 	.word	0x000d05b7
     d40:	40001000 	.word	0x40001000

00000d44 <_sercom_get_hardware_index>:

/**
 * \brief Retrieve ordinal number of the given sercom hardware instance
 */
static uint8_t _sercom_get_hardware_index(const void *const hw)
{
     d44:	b530      	push	{r4, r5, lr}
     d46:	b089      	sub	sp, #36	; 0x24
	Sercom *const sercom_modules[] = SERCOM_INSTS;
     d48:	4c0b      	ldr	r4, [pc, #44]	; (d78 <_sercom_get_hardware_index+0x34>)
     d4a:	466b      	mov	r3, sp
     d4c:	0022      	movs	r2, r4
     d4e:	ca32      	ldmia	r2!, {r1, r4, r5}
     d50:	c332      	stmia	r3!, {r1, r4, r5}
     d52:	ca32      	ldmia	r2!, {r1, r4, r5}
     d54:	c332      	stmia	r3!, {r1, r4, r5}
     d56:	ca12      	ldmia	r2!, {r1, r4}
     d58:	c312      	stmia	r3!, {r1, r4}
	/* Find index for SERCOM instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     d5a:	2300      	movs	r3, #0
     d5c:	2b07      	cmp	r3, #7
     d5e:	d808      	bhi.n	d72 <_sercom_get_hardware_index+0x2e>
		if ((uint32_t)hw == (uint32_t)sercom_modules[i]) {
     d60:	009a      	lsls	r2, r3, #2
     d62:	4669      	mov	r1, sp
     d64:	5852      	ldr	r2, [r2, r1]
     d66:	4282      	cmp	r2, r0
     d68:	d001      	beq.n	d6e <_sercom_get_hardware_index+0x2a>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     d6a:	3301      	adds	r3, #1
     d6c:	e7f6      	b.n	d5c <_sercom_get_hardware_index+0x18>
			return i;
     d6e:	b2d8      	uxtb	r0, r3
     d70:	e000      	b.n	d74 <_sercom_get_hardware_index+0x30>
		}
	}
	return 0;
     d72:	2000      	movs	r0, #0
}
     d74:	b009      	add	sp, #36	; 0x24
     d76:	bd30      	pop	{r4, r5, pc}
     d78:	00002614 	.word	0x00002614

00000d7c <_get_sercom_index>:
 * \param[in] hw The pointer to hardware instance

 * \return The ordinal number of the given sercom hardware instance
 */
static uint8_t _get_sercom_index(const void *const hw)
{
     d7c:	b510      	push	{r4, lr}
	uint8_t sercom_offset = _sercom_get_hardware_index(hw);
     d7e:	4b0c      	ldr	r3, [pc, #48]	; (db0 <_get_sercom_index+0x34>)
     d80:	4798      	blx	r3
     d82:	0002      	movs	r2, r0
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_usarts); i++) {
     d84:	2000      	movs	r0, #0
     d86:	2800      	cmp	r0, #0
     d88:	d006      	beq.n	d98 <_get_sercom_index+0x1c>
		if (_usarts[i].number == sercom_offset) {
			return i;
		}
	}

	ASSERT(false);
     d8a:	4a0a      	ldr	r2, [pc, #40]	; (db4 <_get_sercom_index+0x38>)
     d8c:	490a      	ldr	r1, [pc, #40]	; (db8 <_get_sercom_index+0x3c>)
     d8e:	2000      	movs	r0, #0
     d90:	4b0a      	ldr	r3, [pc, #40]	; (dbc <_get_sercom_index+0x40>)
     d92:	4798      	blx	r3
	return 0;
     d94:	2000      	movs	r0, #0
}
     d96:	bd10      	pop	{r4, pc}
		if (_usarts[i].number == sercom_offset) {
     d98:	0083      	lsls	r3, r0, #2
     d9a:	181b      	adds	r3, r3, r0
     d9c:	0099      	lsls	r1, r3, #2
     d9e:	4b08      	ldr	r3, [pc, #32]	; (dc0 <_get_sercom_index+0x44>)
     da0:	185b      	adds	r3, r3, r1
     da2:	2120      	movs	r1, #32
     da4:	5c5b      	ldrb	r3, [r3, r1]
     da6:	429a      	cmp	r2, r3
     da8:	d0f5      	beq.n	d96 <_get_sercom_index+0x1a>
	for (i = 0; i < ARRAY_SIZE(_usarts); i++) {
     daa:	3001      	adds	r0, #1
     dac:	b2c0      	uxtb	r0, r0
     dae:	e7ea      	b.n	d86 <_get_sercom_index+0xa>
     db0:	00000d45 	.word	0x00000d45
     db4:	0000023d 	.word	0x0000023d
     db8:	00002684 	.word	0x00002684
     dbc:	00000761 	.word	0x00000761
     dc0:	00002614 	.word	0x00002614

00000dc4 <_usart_init>:
 * \param[in] hw The pointer to hardware instance
 *
 * \return The status of initialization
 */
static int32_t _usart_init(void *const hw)
{
     dc4:	b570      	push	{r4, r5, r6, lr}
     dc6:	0004      	movs	r4, r0
	uint8_t i = _get_sercom_index(hw);
     dc8:	4b3b      	ldr	r3, [pc, #236]	; (eb8 <_usart_init+0xf4>)
     dca:	4798      	blx	r3
	};
}

static inline bool hri_sercomusart_is_syncing(const void *const hw, hri_sercomusart_syncbusy_reg_t reg)
{
	return ((Sercom *)hw)->USART.SYNCBUSY.reg & reg;
     dcc:	69e3      	ldr	r3, [r4, #28]

	if (!hri_sercomusart_is_syncing(hw, SERCOM_USART_SYNCBUSY_SWRST)) {
     dce:	07db      	lsls	r3, r3, #31
     dd0:	d41d      	bmi.n	e0e <_usart_init+0x4a>
		uint32_t mode = _usarts[i].ctrl_a & SERCOM_USART_CTRLA_MODE_Msk;
     dd2:	0083      	lsls	r3, r0, #2
     dd4:	181b      	adds	r3, r3, r0
     dd6:	009a      	lsls	r2, r3, #2
     dd8:	4b38      	ldr	r3, [pc, #224]	; (ebc <_usart_init+0xf8>)
     dda:	189b      	adds	r3, r3, r2
     ddc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
     dde:	231c      	movs	r3, #28
     de0:	401a      	ands	r2, r3
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
     de2:	69e3      	ldr	r3, [r4, #28]
     de4:	079b      	lsls	r3, r3, #30
     de6:	d1fc      	bne.n	de2 <_usart_init+0x1e>
static inline hri_sercomusart_ctrla_reg_t hri_sercomusart_get_CTRLA_reg(const void *const           hw,
                                                                        hri_sercomusart_ctrla_reg_t mask)
{
	uint32_t tmp;
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST | SERCOM_USART_SYNCBUSY_ENABLE);
	tmp = ((Sercom *)hw)->USART.CTRLA.reg;
     de8:	6823      	ldr	r3, [r4, #0]
		if (hri_sercomusart_get_CTRLA_reg(hw, SERCOM_USART_CTRLA_ENABLE)) {
     dea:	079b      	lsls	r3, r3, #30
     dec:	d509      	bpl.n	e02 <_usart_init+0x3e>
	((Sercom *)hw)->USART.CTRLA.reg &= ~SERCOM_USART_CTRLA_ENABLE;
     dee:	6823      	ldr	r3, [r4, #0]
     df0:	2102      	movs	r1, #2
     df2:	438b      	bics	r3, r1
     df4:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
     df6:	69e3      	ldr	r3, [r4, #28]
     df8:	079b      	lsls	r3, r3, #30
     dfa:	d1fc      	bne.n	df6 <_usart_init+0x32>
     dfc:	69e3      	ldr	r3, [r4, #28]
     dfe:	079b      	lsls	r3, r3, #30
     e00:	d4fc      	bmi.n	dfc <_usart_init+0x38>
			hri_sercomusart_clear_CTRLA_ENABLE_bit(hw);
			hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_ENABLE);
		}
		hri_sercomusart_write_CTRLA_reg(hw, SERCOM_USART_CTRLA_SWRST | mode);
     e02:	2301      	movs	r3, #1
     e04:	4313      	orrs	r3, r2
}

static inline void hri_sercomusart_write_CTRLA_reg(const void *const hw, hri_sercomusart_ctrla_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLA.reg = data;
     e06:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
     e08:	69e3      	ldr	r3, [r4, #28]
     e0a:	079b      	lsls	r3, r3, #30
     e0c:	d1fc      	bne.n	e08 <_usart_init+0x44>
     e0e:	69e3      	ldr	r3, [r4, #28]
     e10:	07db      	lsls	r3, r3, #31
     e12:	d4fc      	bmi.n	e0e <_usart_init+0x4a>
	}
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST);

	hri_sercomusart_write_CTRLA_reg(hw, _usarts[i].ctrl_a);
     e14:	0083      	lsls	r3, r0, #2
     e16:	181b      	adds	r3, r3, r0
     e18:	009a      	lsls	r2, r3, #2
     e1a:	4b28      	ldr	r3, [pc, #160]	; (ebc <_usart_init+0xf8>)
     e1c:	189b      	adds	r3, r3, r2
     e1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	((Sercom *)hw)->USART.CTRLA.reg = data;
     e20:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
     e22:	69e3      	ldr	r3, [r4, #28]
     e24:	079b      	lsls	r3, r3, #30
     e26:	d1fc      	bne.n	e22 <_usart_init+0x5e>
	hri_sercomusart_write_CTRLB_reg(hw, _usarts[i].ctrl_b);
     e28:	0083      	lsls	r3, r0, #2
     e2a:	181b      	adds	r3, r3, r0
     e2c:	009a      	lsls	r2, r3, #2
     e2e:	4b23      	ldr	r3, [pc, #140]	; (ebc <_usart_init+0xf8>)
     e30:	189b      	adds	r3, r3, r2
     e32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}

static inline void hri_sercomusart_write_CTRLB_reg(const void *const hw, hri_sercomusart_ctrlb_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLB.reg = data;
     e34:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
     e36:	69e3      	ldr	r3, [r4, #28]
     e38:	075b      	lsls	r3, r3, #29
     e3a:	d1fc      	bne.n	e36 <_usart_init+0x72>
	if ((_usarts[i].ctrl_a & SERCOM_USART_CTRLA_SAMPR(0x1)) || (_usarts[i].ctrl_a & SERCOM_USART_CTRLA_SAMPR(0x3))) {
     e3c:	0083      	lsls	r3, r0, #2
     e3e:	181b      	adds	r3, r3, r0
     e40:	009a      	lsls	r2, r3, #2
     e42:	4b1e      	ldr	r3, [pc, #120]	; (ebc <_usart_init+0xf8>)
     e44:	189b      	adds	r3, r3, r2
     e46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
     e48:	049a      	lsls	r2, r3, #18
     e4a:	d40b      	bmi.n	e64 <_usart_init+0xa0>
     e4c:	22c0      	movs	r2, #192	; 0xc0
     e4e:	01d2      	lsls	r2, r2, #7
     e50:	4213      	tst	r3, r2
     e52:	d107      	bne.n	e64 <_usart_init+0xa0>
		((Sercom *)hw)->USART.BAUD.FRAC.BAUD = _usarts[i].baud;
		((Sercom *)hw)->USART.BAUD.FRAC.FP   = _usarts[i].fractional;
	} else {
		hri_sercomusart_write_BAUD_reg(hw, _usarts[i].baud);
     e54:	0083      	lsls	r3, r0, #2
     e56:	181b      	adds	r3, r3, r0
     e58:	009a      	lsls	r2, r3, #2
     e5a:	4b18      	ldr	r3, [pc, #96]	; (ebc <_usart_init+0xf8>)
     e5c:	189b      	adds	r3, r3, r2
     e5e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
}

static inline void hri_sercomusart_write_BAUD_reg(const void *const hw, hri_sercomusart_baud_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.BAUD.reg = data;
     e60:	81a3      	strh	r3, [r4, #12]
     e62:	e019      	b.n	e98 <_usart_init+0xd4>
		((Sercom *)hw)->USART.BAUD.FRAC.BAUD = _usarts[i].baud;
     e64:	4a15      	ldr	r2, [pc, #84]	; (ebc <_usart_init+0xf8>)
     e66:	0081      	lsls	r1, r0, #2
     e68:	180d      	adds	r5, r1, r0
     e6a:	00ab      	lsls	r3, r5, #2
     e6c:	18d3      	adds	r3, r2, r3
     e6e:	8d9d      	ldrh	r5, [r3, #44]	; 0x2c
     e70:	89a3      	ldrh	r3, [r4, #12]
     e72:	04ed      	lsls	r5, r5, #19
     e74:	0ced      	lsrs	r5, r5, #19
     e76:	0b5b      	lsrs	r3, r3, #13
     e78:	035b      	lsls	r3, r3, #13
     e7a:	432b      	orrs	r3, r5
     e7c:	81a3      	strh	r3, [r4, #12]
		((Sercom *)hw)->USART.BAUD.FRAC.FP   = _usarts[i].fractional;
     e7e:	3220      	adds	r2, #32
     e80:	180b      	adds	r3, r1, r0
     e82:	0099      	lsls	r1, r3, #2
     e84:	1852      	adds	r2, r2, r1
     e86:	7b93      	ldrb	r3, [r2, #14]
     e88:	2207      	movs	r2, #7
     e8a:	401a      	ands	r2, r3
     e8c:	89a3      	ldrh	r3, [r4, #12]
     e8e:	0352      	lsls	r2, r2, #13
     e90:	04db      	lsls	r3, r3, #19
     e92:	0cdb      	lsrs	r3, r3, #19
     e94:	4313      	orrs	r3, r2
     e96:	81a3      	strh	r3, [r4, #12]
	}

	hri_sercomusart_write_RXPL_reg(hw, _usarts[i].rxpl);
     e98:	4b08      	ldr	r3, [pc, #32]	; (ebc <_usart_init+0xf8>)
     e9a:	0019      	movs	r1, r3
     e9c:	3120      	adds	r1, #32
     e9e:	0082      	lsls	r2, r0, #2
     ea0:	1816      	adds	r6, r2, r0
     ea2:	00b5      	lsls	r5, r6, #2
     ea4:	1949      	adds	r1, r1, r5
     ea6:	7bc9      	ldrb	r1, [r1, #15]
}

static inline void hri_sercomusart_write_RXPL_reg(const void *const hw, hri_sercomusart_rxpl_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.RXPL.reg = data;
     ea8:	73a1      	strb	r1, [r4, #14]
	hri_sercomusart_write_DBGCTRL_reg(hw, _usarts[i].debug_ctrl);
     eaa:	195b      	adds	r3, r3, r5
     eac:	3330      	adds	r3, #48	; 0x30
     eae:	781a      	ldrb	r2, [r3, #0]
}

static inline void hri_sercomusart_write_DBGCTRL_reg(const void *const hw, hri_sercomusart_dbgctrl_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.DBGCTRL.reg = data;
     eb0:	2330      	movs	r3, #48	; 0x30
     eb2:	54e2      	strb	r2, [r4, r3]

	return ERR_NONE;
}
     eb4:	2000      	movs	r0, #0
     eb6:	bd70      	pop	{r4, r5, r6, pc}
     eb8:	00000d7d 	.word	0x00000d7d
     ebc:	00002614 	.word	0x00002614

00000ec0 <_usart_sync_init>:
{
     ec0:	b570      	push	{r4, r5, r6, lr}
     ec2:	0005      	movs	r5, r0
     ec4:	000c      	movs	r4, r1
	ASSERT(device);
     ec6:	1e43      	subs	r3, r0, #1
     ec8:	4198      	sbcs	r0, r3
     eca:	b2c0      	uxtb	r0, r0
     ecc:	22b4      	movs	r2, #180	; 0xb4
     ece:	4904      	ldr	r1, [pc, #16]	; (ee0 <_usart_sync_init+0x20>)
     ed0:	4b04      	ldr	r3, [pc, #16]	; (ee4 <_usart_sync_init+0x24>)
     ed2:	4798      	blx	r3
	device->hw = hw;
     ed4:	602c      	str	r4, [r5, #0]
	return _usart_init(hw);
     ed6:	0020      	movs	r0, r4
     ed8:	4b03      	ldr	r3, [pc, #12]	; (ee8 <_usart_sync_init+0x28>)
     eda:	4798      	blx	r3
}
     edc:	bd70      	pop	{r4, r5, r6, pc}
     ede:	46c0      	nop			; (mov r8, r8)
     ee0:	00002684 	.word	0x00002684
     ee4:	00000761 	.word	0x00000761
     ee8:	00000dc5 	.word	0x00000dc5

00000eec <_usart_sync_enable>:
	hri_sercomusart_set_CTRLA_ENABLE_bit(device->hw);
     eec:	6802      	ldr	r2, [r0, #0]
	((Sercom *)hw)->USART.CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
     eee:	6813      	ldr	r3, [r2, #0]
     ef0:	2102      	movs	r1, #2
     ef2:	430b      	orrs	r3, r1
     ef4:	6013      	str	r3, [r2, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
     ef6:	69d3      	ldr	r3, [r2, #28]
     ef8:	079b      	lsls	r3, r3, #30
     efa:	d1fc      	bne.n	ef6 <_usart_sync_enable+0xa>
}
     efc:	4770      	bx	lr

00000efe <_usart_sync_write_byte>:
	hri_sercomusart_write_DATA_reg(device->hw, data);
     efe:	6803      	ldr	r3, [r0, #0]
     f00:	b289      	uxth	r1, r1
	((Sercom *)hw)->USART.DATA.reg = data;
     f02:	8519      	strh	r1, [r3, #40]	; 0x28
}
     f04:	4770      	bx	lr

00000f06 <_usart_sync_read_byte>:
	return hri_sercomusart_read_DATA_reg(device->hw);
     f06:	6803      	ldr	r3, [r0, #0]
	return ((Sercom *)hw)->USART.DATA.reg;
     f08:	8d18      	ldrh	r0, [r3, #40]	; 0x28
     f0a:	b2c0      	uxtb	r0, r0
}
     f0c:	4770      	bx	lr

00000f0e <_usart_sync_is_ready_to_send>:
	return hri_sercomusart_get_interrupt_DRE_bit(device->hw);
     f0e:	6803      	ldr	r3, [r0, #0]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) >> SERCOM_USART_INTFLAG_DRE_Pos;
     f10:	7e18      	ldrb	r0, [r3, #24]
     f12:	2301      	movs	r3, #1
     f14:	4018      	ands	r0, r3
}
     f16:	4770      	bx	lr

00000f18 <_usart_sync_is_transmit_done>:
	return hri_sercomusart_get_interrupt_TXC_bit(device->hw);
     f18:	6803      	ldr	r3, [r0, #0]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) >> SERCOM_USART_INTFLAG_TXC_Pos;
     f1a:	7e1b      	ldrb	r3, [r3, #24]
     f1c:	085b      	lsrs	r3, r3, #1
     f1e:	2001      	movs	r0, #1
     f20:	4018      	ands	r0, r3
}
     f22:	4770      	bx	lr

00000f24 <_usart_sync_is_byte_received>:
	return hri_sercomusart_get_interrupt_RXC_bit(device->hw);
     f24:	6803      	ldr	r3, [r0, #0]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) >> SERCOM_USART_INTFLAG_RXC_Pos;
     f26:	7e1b      	ldrb	r3, [r3, #24]
     f28:	089b      	lsrs	r3, r3, #2
     f2a:	2001      	movs	r0, #1
     f2c:	4018      	ands	r0, r3
}
     f2e:	4770      	bx	lr

00000f30 <write_array_data_to_flash>:
* params:
* return:
################################################
*/
void write_array_data_to_flash(uint8_t * data , int page_size , uint32_t abs_adress)
{
     f30:	b510      	push	{r4, lr}
     f32:	000b      	movs	r3, r1
     f34:	0011      	movs	r1, r2
    //ASF 4 api for write data
    flash_write(&FLASH_0, abs_adress, data, page_size);
     f36:	0002      	movs	r2, r0
     f38:	4801      	ldr	r0, [pc, #4]	; (f40 <write_array_data_to_flash+0x10>)
     f3a:	4c02      	ldr	r4, [pc, #8]	; (f44 <write_array_data_to_flash+0x14>)
     f3c:	47a0      	blx	r4
    
    #if BOOTLOADER_EVENT_PRINT_ENABLE
        printf("DRV: Flash Write [hex] -> %x\n\r",*abs_adress);
    #endif
}
     f3e:	bd10      	pop	{r4, pc}
     f40:	200002f4 	.word	0x200002f4
     f44:	00000481 	.word	0x00000481

00000f48 <get_flash_page_size>:
* params:
* return:
################################################
*/
int get_flash_page_size()
{
     f48:	b510      	push	{r4, lr}
    #if BOOTLOADER_EVENT_PRINT_ENABLE
        printf("DRV: Flash Page size ask!\n\r");
    #endif
     //ASF 4 api for get the flash page size
    return flash_get_page_size(&FLASH_0);
     f4a:	4802      	ldr	r0, [pc, #8]	; (f54 <get_flash_page_size+0xc>)
     f4c:	4b02      	ldr	r3, [pc, #8]	; (f58 <get_flash_page_size+0x10>)
     f4e:	4798      	blx	r3
    
    
}
     f50:	bd10      	pop	{r4, pc}
     f52:	46c0      	nop			; (mov r8, r8)
     f54:	200002f4 	.word	0x200002f4
     f58:	00000519 	.word	0x00000519

00000f5c <check_flash_data_array>:
* params:
* return:
################################################
*/
int check_flash_data_array(uint8_t * data , int * length , int * abs_adress)
{
     f5c:	b570      	push	{r4, r5, r6, lr}
     f5e:	b0a0      	sub	sp, #128	; 0x80
     f60:	0005      	movs	r5, r0
     f62:	000c      	movs	r4, r1
    
    
    uint8_t temp_data[MAX_FLASH_PAGE_SIZE_IN_BYTE];
    flash_read(&FLASH_0, *abs_adress, temp_data, *length);
     f64:	6811      	ldr	r1, [r2, #0]
     f66:	6823      	ldr	r3, [r4, #0]
     f68:	466a      	mov	r2, sp
     f6a:	4809      	ldr	r0, [pc, #36]	; (f90 <check_flash_data_array+0x34>)
     f6c:	4e09      	ldr	r6, [pc, #36]	; (f94 <check_flash_data_array+0x38>)
     f6e:	47b0      	blx	r6
    int i;
    for(i=0;i< *length;i++){
     f70:	2300      	movs	r3, #0
     f72:	6822      	ldr	r2, [r4, #0]
     f74:	4293      	cmp	r3, r2
     f76:	da06      	bge.n	f86 <check_flash_data_array+0x2a>
        if(temp_data[i] != data[i]){
     f78:	466a      	mov	r2, sp
     f7a:	5cd1      	ldrb	r1, [r2, r3]
     f7c:	5cea      	ldrb	r2, [r5, r3]
     f7e:	4291      	cmp	r1, r2
     f80:	d104      	bne.n	f8c <check_flash_data_array+0x30>
    for(i=0;i< *length;i++){
     f82:	3301      	adds	r3, #1
     f84:	e7f5      	b.n	f72 <check_flash_data_array+0x16>
        }
    }
    #if BOOTLOADER_EVENT_PRINT_ENABLE
        printf("DRV: Flash write check! success");
    #endif
    return 1;
     f86:	2001      	movs	r0, #1
    
}
     f88:	b020      	add	sp, #128	; 0x80
     f8a:	bd70      	pop	{r4, r5, r6, pc}
            return 0;
     f8c:	2000      	movs	r0, #0
     f8e:	e7fb      	b.n	f88 <check_flash_data_array+0x2c>
     f90:	200002f4 	.word	0x200002f4
     f94:	00000401 	.word	0x00000401

00000f98 <decode_can_data>:
{
     f98:	b570      	push	{r4, r5, r6, lr}
	switch(can.can_id){
     f9a:	4b61      	ldr	r3, [pc, #388]	; (1120 <decode_can_data+0x188>)
     f9c:	681b      	ldr	r3, [r3, #0]
     f9e:	2b03      	cmp	r3, #3
     fa0:	d058      	beq.n	1054 <decode_can_data+0xbc>
     fa2:	d93b      	bls.n	101c <decode_can_data+0x84>
     fa4:	2b09      	cmp	r3, #9
     fa6:	d100      	bne.n	faa <decode_can_data+0x12>
     fa8:	e095      	b.n	10d6 <decode_can_data+0x13e>
     faa:	2b0a      	cmp	r3, #10
     fac:	d000      	beq.n	fb0 <decode_can_data+0x18>
     fae:	e0b2      	b.n	1116 <decode_can_data+0x17e>
		if(can.can_data[0]){ // write page and give ack
     fb0:	4b5b      	ldr	r3, [pc, #364]	; (1120 <decode_can_data+0x188>)
     fb2:	791b      	ldrb	r3, [r3, #4]
     fb4:	2b00      	cmp	r3, #0
     fb6:	d100      	bne.n	fba <decode_can_data+0x22>
     fb8:	e081      	b.n	10be <decode_can_data+0x126>
			uint32_t temp_address = flash_write_info.curr_flash_write_addr;
     fba:	4c5a      	ldr	r4, [pc, #360]	; (1124 <decode_can_data+0x18c>)
			int byte_size = flash_write_info.flash_wr_buffer_index;
     fbc:	2684      	movs	r6, #132	; 0x84
			write_array_data_to_flash(flash_write_info.flash_wr_buffer , byte_size , temp_address);
     fbe:	1d25      	adds	r5, r4, #4
     fc0:	6822      	ldr	r2, [r4, #0]
     fc2:	59a1      	ldr	r1, [r4, r6]
     fc4:	0028      	movs	r0, r5
     fc6:	4b58      	ldr	r3, [pc, #352]	; (1128 <decode_can_data+0x190>)
     fc8:	4798      	blx	r3
			int ret =  check_flash_data_array(flash_write_info.flash_wr_buffer , &flash_write_info.flash_wr_buffer_index , &flash_write_info.curr_flash_write_addr);
     fca:	0021      	movs	r1, r4
     fcc:	3184      	adds	r1, #132	; 0x84
     fce:	0022      	movs	r2, r4
     fd0:	0028      	movs	r0, r5
     fd2:	4b56      	ldr	r3, [pc, #344]	; (112c <decode_can_data+0x194>)
     fd4:	4798      	blx	r3
			can.can_id = CAN_SEND_PAGE_COMPLETE;
     fd6:	4b52      	ldr	r3, [pc, #328]	; (1120 <decode_can_data+0x188>)
     fd8:	220a      	movs	r2, #10
     fda:	601a      	str	r2, [r3, #0]
			can.can_data[0] = ret;
     fdc:	7118      	strb	r0, [r3, #4]
			can.can_data[1] = flash_write_info.flash_wr_buffer_index; // number of byte written
     fde:	5da2      	ldrb	r2, [r4, r6]
     fe0:	715a      	strb	r2, [r3, #5]
			flash_write_info.temp_32bit_data = flash_write_info.curr_flash_write_addr;
     fe2:	6822      	ldr	r2, [r4, #0]
     fe4:	218c      	movs	r1, #140	; 0x8c
     fe6:	5062      	str	r2, [r4, r1]
			can.can_data[2] = (uint8_t)flash_write_info.temp_32bit_data;
     fe8:	719a      	strb	r2, [r3, #6]
			can.can_data[3] = (uint8_t)(flash_write_info.temp_32bit_data >> 8);
     fea:	0a12      	lsrs	r2, r2, #8
     fec:	71da      	strb	r2, [r3, #7]
			can.len = 4;
     fee:	2204      	movs	r2, #4
     ff0:	645a      	str	r2, [r3, #68]	; 0x44
			can_write(&can);
     ff2:	0018      	movs	r0, r3
     ff4:	4b4e      	ldr	r3, [pc, #312]	; (1130 <decode_can_data+0x198>)
     ff6:	4798      	blx	r3
			flash_write_info.curr_flash_write_addr += flash_write_info.flash_wr_buffer_index;
     ff8:	6823      	ldr	r3, [r4, #0]
     ffa:	59a2      	ldr	r2, [r4, r6]
     ffc:	4694      	mov	ip, r2
     ffe:	4463      	add	r3, ip
    1000:	6023      	str	r3, [r4, #0]
			memset(flash_write_info.flash_wr_buffer , 0 , 128);
    1002:	2280      	movs	r2, #128	; 0x80
    1004:	2100      	movs	r1, #0
    1006:	0028      	movs	r0, r5
    1008:	4b4a      	ldr	r3, [pc, #296]	; (1134 <decode_can_data+0x19c>)
    100a:	4798      	blx	r3
			flash_write_info.flash_wr_buffer_index = 0;
    100c:	2300      	movs	r3, #0
    100e:	51a3      	str	r3, [r4, r6]
			flash_write_info.page_byte_seq = 0;
    1010:	2288      	movs	r2, #136	; 0x88
    1012:	50a3      	str	r3, [r4, r2]
			app.state = SERIAL_CAN_READ;
    1014:	3a86      	subs	r2, #134	; 0x86
    1016:	4b48      	ldr	r3, [pc, #288]	; (1138 <decode_can_data+0x1a0>)
    1018:	701a      	strb	r2, [r3, #0]
    101a:	e01a      	b.n	1052 <decode_can_data+0xba>
	switch(can.can_id){
    101c:	2b01      	cmp	r3, #1
    101e:	d000      	beq.n	1022 <decode_can_data+0x8a>
    1020:	e079      	b.n	1116 <decode_can_data+0x17e>
		can.can_id = CAN_START_FLASH_WRITE;
    1022:	4c3f      	ldr	r4, [pc, #252]	; (1120 <decode_can_data+0x188>)
    1024:	2301      	movs	r3, #1
    1026:	6023      	str	r3, [r4, #0]
		can.can_data[0] = (uint8_t)get_flash_page_size();
    1028:	4b44      	ldr	r3, [pc, #272]	; (113c <decode_can_data+0x1a4>)
    102a:	4798      	blx	r3
    102c:	b2c0      	uxtb	r0, r0
    102e:	7120      	strb	r0, [r4, #4]
		page_size = can.can_data[0]; // update the page size
    1030:	4b43      	ldr	r3, [pc, #268]	; (1140 <decode_can_data+0x1a8>)
    1032:	6018      	str	r0, [r3, #0]
		flash_write_info.temp_32bit_data = flash_write_info.curr_flash_write_addr;
    1034:	4a3b      	ldr	r2, [pc, #236]	; (1124 <decode_can_data+0x18c>)
    1036:	6813      	ldr	r3, [r2, #0]
    1038:	218c      	movs	r1, #140	; 0x8c
    103a:	5053      	str	r3, [r2, r1]
		can.can_data[1] = (uint8_t)flash_write_info.temp_32bit_data;
    103c:	7163      	strb	r3, [r4, #5]
		can.can_data[2] = (uint8_t)(flash_write_info.temp_32bit_data >> 8);
    103e:	0a1b      	lsrs	r3, r3, #8
    1040:	71a3      	strb	r3, [r4, #6]
		can.len = 3;
    1042:	2303      	movs	r3, #3
    1044:	6463      	str	r3, [r4, #68]	; 0x44
		can_write(&can);
    1046:	0020      	movs	r0, r4
    1048:	4b39      	ldr	r3, [pc, #228]	; (1130 <decode_can_data+0x198>)
    104a:	4798      	blx	r3
		app.state = SERIAL_CAN_READ;
    104c:	2202      	movs	r2, #2
    104e:	4b3a      	ldr	r3, [pc, #232]	; (1138 <decode_can_data+0x1a0>)
    1050:	701a      	strb	r2, [r3, #0]
}
    1052:	bd70      	pop	{r4, r5, r6, pc}
		if(flash_write_info.page_byte_seq == can.can_data[0]){ // if the expected seq matched
    1054:	2388      	movs	r3, #136	; 0x88
    1056:	4a33      	ldr	r2, [pc, #204]	; (1124 <decode_can_data+0x18c>)
    1058:	58d6      	ldr	r6, [r2, r3]
    105a:	4b31      	ldr	r3, [pc, #196]	; (1120 <decode_can_data+0x188>)
    105c:	791b      	ldrb	r3, [r3, #4]
    105e:	429e      	cmp	r6, r3
    1060:	d121      	bne.n	10a6 <decode_can_data+0x10e>
    1062:	2002      	movs	r0, #2
    1064:	2100      	movs	r1, #0
    1066:	e00b      	b.n	1080 <decode_can_data+0xe8>
				flash_write_info.flash_wr_buffer[flash_write_info.flash_wr_buffer_index++] = can.can_data[j];
    1068:	4b2e      	ldr	r3, [pc, #184]	; (1124 <decode_can_data+0x18c>)
    106a:	2284      	movs	r2, #132	; 0x84
    106c:	589c      	ldr	r4, [r3, r2]
    106e:	1c65      	adds	r5, r4, #1
    1070:	509d      	str	r5, [r3, r2]
    1072:	4a2b      	ldr	r2, [pc, #172]	; (1120 <decode_can_data+0x188>)
    1074:	1812      	adds	r2, r2, r0
    1076:	7912      	ldrb	r2, [r2, #4]
    1078:	191b      	adds	r3, r3, r4
    107a:	711a      	strb	r2, [r3, #4]
			for(int i = 0 , j = 2; (i < can.can_data[1]) ; i++, j++){
    107c:	3101      	adds	r1, #1
    107e:	3001      	adds	r0, #1
    1080:	4b27      	ldr	r3, [pc, #156]	; (1120 <decode_can_data+0x188>)
    1082:	795b      	ldrb	r3, [r3, #5]
    1084:	4299      	cmp	r1, r3
    1086:	dbef      	blt.n	1068 <decode_can_data+0xd0>
			flash_write_info.page_byte_seq++; // Increment the sequence
    1088:	3601      	adds	r6, #1
    108a:	2388      	movs	r3, #136	; 0x88
    108c:	4a25      	ldr	r2, [pc, #148]	; (1124 <decode_can_data+0x18c>)
    108e:	50d6      	str	r6, [r2, r3]
			can.can_id = CAN_SEND_FLASH_DATA;
    1090:	4823      	ldr	r0, [pc, #140]	; (1120 <decode_can_data+0x188>)
    1092:	3b85      	subs	r3, #133	; 0x85
    1094:	6003      	str	r3, [r0, #0]
			can.len = 1;
    1096:	3b02      	subs	r3, #2
    1098:	6443      	str	r3, [r0, #68]	; 0x44
			can_write(&can);
    109a:	4b25      	ldr	r3, [pc, #148]	; (1130 <decode_can_data+0x198>)
    109c:	4798      	blx	r3
			app.state = SERIAL_CAN_READ;
    109e:	2202      	movs	r2, #2
    10a0:	4b25      	ldr	r3, [pc, #148]	; (1138 <decode_can_data+0x1a0>)
    10a2:	701a      	strb	r2, [r3, #0]
    10a4:	e7d5      	b.n	1052 <decode_can_data+0xba>
			can.can_id = CAN_SENT_FLASH_WRITE_ERROR;
    10a6:	481e      	ldr	r0, [pc, #120]	; (1120 <decode_can_data+0x188>)
    10a8:	230d      	movs	r3, #13
    10aa:	6003      	str	r3, [r0, #0]
			can.can_data[0] = 0;
    10ac:	2400      	movs	r4, #0
    10ae:	7104      	strb	r4, [r0, #4]
			can.len = 1;
    10b0:	3b0c      	subs	r3, #12
    10b2:	6443      	str	r3, [r0, #68]	; 0x44
			can_write(&can);
    10b4:	4b1e      	ldr	r3, [pc, #120]	; (1130 <decode_can_data+0x198>)
    10b6:	4798      	blx	r3
			app.state = ERROR;
    10b8:	4b1f      	ldr	r3, [pc, #124]	; (1138 <decode_can_data+0x1a0>)
    10ba:	701c      	strb	r4, [r3, #0]
    10bc:	e7c9      	b.n	1052 <decode_can_data+0xba>
			can.can_id = CAN_SENT_FLASH_WRITE_ERROR;
    10be:	4818      	ldr	r0, [pc, #96]	; (1120 <decode_can_data+0x188>)
    10c0:	230d      	movs	r3, #13
    10c2:	6003      	str	r3, [r0, #0]
			can.can_data[0] = 0;
    10c4:	2400      	movs	r4, #0
    10c6:	7104      	strb	r4, [r0, #4]
			can.len = 1;
    10c8:	3b0c      	subs	r3, #12
    10ca:	6443      	str	r3, [r0, #68]	; 0x44
			can_write(&can);
    10cc:	4b18      	ldr	r3, [pc, #96]	; (1130 <decode_can_data+0x198>)
    10ce:	4798      	blx	r3
			app.state = ERROR;
    10d0:	4b19      	ldr	r3, [pc, #100]	; (1138 <decode_can_data+0x1a0>)
    10d2:	701c      	strb	r4, [r3, #0]
    10d4:	e7bd      	b.n	1052 <decode_can_data+0xba>
		if(can.can_data[0]){
    10d6:	4b12      	ldr	r3, [pc, #72]	; (1120 <decode_can_data+0x188>)
    10d8:	791b      	ldrb	r3, [r3, #4]
    10da:	2b00      	cmp	r3, #0
    10dc:	d00f      	beq.n	10fe <decode_can_data+0x166>
			can.can_id = CAN_SEND_JUMP_TO_APP;
    10de:	4810      	ldr	r0, [pc, #64]	; (1120 <decode_can_data+0x188>)
    10e0:	2309      	movs	r3, #9
    10e2:	6003      	str	r3, [r0, #0]
			can.can_data[0] = 1;
    10e4:	3b08      	subs	r3, #8
    10e6:	7103      	strb	r3, [r0, #4]
			can.len = 1;
    10e8:	6443      	str	r3, [r0, #68]	; 0x44
			can_write(&can);
    10ea:	4b11      	ldr	r3, [pc, #68]	; (1130 <decode_can_data+0x198>)
    10ec:	4798      	blx	r3
			delay_ms(500);
    10ee:	20fa      	movs	r0, #250	; 0xfa
    10f0:	0040      	lsls	r0, r0, #1
    10f2:	4b14      	ldr	r3, [pc, #80]	; (1144 <decode_can_data+0x1ac>)
    10f4:	4798      	blx	r3
			void (* app_call)(void) = (void*)(*(volatile uint32_t *)(APP_START_BASE_ADDRESS+4));
    10f6:	4b14      	ldr	r3, [pc, #80]	; (1148 <decode_can_data+0x1b0>)
    10f8:	681b      	ldr	r3, [r3, #0]
			app_call();	
    10fa:	4798      	blx	r3
    10fc:	e7a9      	b.n	1052 <decode_can_data+0xba>
			can.can_id = CAN_SENT_FLASH_WRITE_ERROR;
    10fe:	4808      	ldr	r0, [pc, #32]	; (1120 <decode_can_data+0x188>)
    1100:	230d      	movs	r3, #13
    1102:	6003      	str	r3, [r0, #0]
			can.can_data[0] = 0;
    1104:	2400      	movs	r4, #0
    1106:	7104      	strb	r4, [r0, #4]
			can.len = 1;
    1108:	3b0c      	subs	r3, #12
    110a:	6443      	str	r3, [r0, #68]	; 0x44
			can_write(&can);
    110c:	4b08      	ldr	r3, [pc, #32]	; (1130 <decode_can_data+0x198>)
    110e:	4798      	blx	r3
			app.state = ERROR;
    1110:	4b09      	ldr	r3, [pc, #36]	; (1138 <decode_can_data+0x1a0>)
    1112:	701c      	strb	r4, [r3, #0]
    1114:	e79d      	b.n	1052 <decode_can_data+0xba>
		app.state = SERIAL_CAN_READ; // default will be read can commands
    1116:	2202      	movs	r2, #2
    1118:	4b07      	ldr	r3, [pc, #28]	; (1138 <decode_can_data+0x1a0>)
    111a:	701a      	strb	r2, [r3, #0]
}
    111c:	e799      	b.n	1052 <decode_can_data+0xba>
    111e:	46c0      	nop			; (mov r8, r8)
    1120:	20000494 	.word	0x20000494
    1124:	20000404 	.word	0x20000404
    1128:	00000f31 	.word	0x00000f31
    112c:	00000f5d 	.word	0x00000f5d
    1130:	00001201 	.word	0x00001201
    1134:	000016cf 	.word	0x000016cf
    1138:	200004e0 	.word	0x200004e0
    113c:	00000f49 	.word	0x00000f49
    1140:	20000014 	.word	0x20000014
    1144:	0000037d 	.word	0x0000037d
    1148:	0000e004 	.word	0x0000e004

0000114c <main>:
{
    114c:	b510      	push	{r4, lr}
	atmel_start_init();
    114e:	4b1e      	ldr	r3, [pc, #120]	; (11c8 <main+0x7c>)
    1150:	4798      	blx	r3
    flash_write_info.curr_flash_write_addr = APP_START_BASE_ADDRESS;
    1152:	4b1e      	ldr	r3, [pc, #120]	; (11cc <main+0x80>)
    1154:	22e0      	movs	r2, #224	; 0xe0
    1156:	0212      	lsls	r2, r2, #8
    1158:	601a      	str	r2, [r3, #0]
    serial_read_data.uart_frame_received = 0;
    115a:	2200      	movs	r2, #0
    115c:	491c      	ldr	r1, [pc, #112]	; (11d0 <main+0x84>)
    115e:	720a      	strb	r2, [r1, #8]
    can.can_id = -1;
    1160:	2001      	movs	r0, #1
    1162:	4240      	negs	r0, r0
    1164:	491b      	ldr	r1, [pc, #108]	; (11d4 <main+0x88>)
    1166:	6008      	str	r0, [r1, #0]
	flash_write_info.flash_wr_buffer_index = 0; // reset after every page write
    1168:	2184      	movs	r1, #132	; 0x84
    116a:	505a      	str	r2, [r3, r1]
	flash_write_info.page_byte_seq = 0;
    116c:	3104      	adds	r1, #4
    116e:	505a      	str	r2, [r3, r1]
	app.state = INIT;    
    1170:	3201      	adds	r2, #1
    1172:	4b19      	ldr	r3, [pc, #100]	; (11d8 <main+0x8c>)
    1174:	701a      	strb	r2, [r3, #0]
    1176:	e005      	b.n	1184 <main+0x38>
				can_init(&can);
    1178:	4816      	ldr	r0, [pc, #88]	; (11d4 <main+0x88>)
    117a:	4b18      	ldr	r3, [pc, #96]	; (11dc <main+0x90>)
    117c:	4798      	blx	r3
				app.state = SERIAL_CAN_READ;
    117e:	2202      	movs	r2, #2
    1180:	4b15      	ldr	r3, [pc, #84]	; (11d8 <main+0x8c>)
    1182:	701a      	strb	r2, [r3, #0]
		switch(app.state){
    1184:	4b14      	ldr	r3, [pc, #80]	; (11d8 <main+0x8c>)
    1186:	781b      	ldrb	r3, [r3, #0]
    1188:	2b01      	cmp	r3, #1
    118a:	d0f5      	beq.n	1178 <main+0x2c>
    118c:	2b00      	cmp	r3, #0
    118e:	d017      	beq.n	11c0 <main+0x74>
    1190:	2b02      	cmp	r3, #2
    1192:	d005      	beq.n	11a0 <main+0x54>
    1194:	2b03      	cmp	r3, #3
    1196:	d010      	beq.n	11ba <main+0x6e>
				app.state = SERIAL_CAN_READ; // Always listen to programmer
    1198:	2202      	movs	r2, #2
    119a:	4b0f      	ldr	r3, [pc, #60]	; (11d8 <main+0x8c>)
    119c:	701a      	strb	r2, [r3, #0]
			break;
    119e:	e7f1      	b.n	1184 <main+0x38>
				if(can_read(&can)){
    11a0:	480c      	ldr	r0, [pc, #48]	; (11d4 <main+0x88>)
    11a2:	4b0f      	ldr	r3, [pc, #60]	; (11e0 <main+0x94>)
    11a4:	4798      	blx	r3
    11a6:	2800      	cmp	r0, #0
    11a8:	d003      	beq.n	11b2 <main+0x66>
					app.state = DECODE_CAN_DATA;
    11aa:	2203      	movs	r2, #3
    11ac:	4b0a      	ldr	r3, [pc, #40]	; (11d8 <main+0x8c>)
    11ae:	701a      	strb	r2, [r3, #0]
    11b0:	e7e8      	b.n	1184 <main+0x38>
					app.state = SERIAL_CAN_READ;
    11b2:	2202      	movs	r2, #2
    11b4:	4b08      	ldr	r3, [pc, #32]	; (11d8 <main+0x8c>)
    11b6:	701a      	strb	r2, [r3, #0]
    11b8:	e7e4      	b.n	1184 <main+0x38>
				decode_can_data();
    11ba:	4b0a      	ldr	r3, [pc, #40]	; (11e4 <main+0x98>)
    11bc:	4798      	blx	r3
			break;
    11be:	e7e1      	b.n	1184 <main+0x38>
				app.state = SERIAL_CAN_READ;
    11c0:	2202      	movs	r2, #2
    11c2:	4b05      	ldr	r3, [pc, #20]	; (11d8 <main+0x8c>)
    11c4:	701a      	strb	r2, [r3, #0]
			break;			
    11c6:	e7dd      	b.n	1184 <main+0x38>
    11c8:	0000011d 	.word	0x0000011d
    11cc:	20000404 	.word	0x20000404
    11d0:	200003c0 	.word	0x200003c0
    11d4:	20000494 	.word	0x20000494
    11d8:	200004e0 	.word	0x200004e0
    11dc:	000011e9 	.word	0x000011e9
    11e0:	000013b9 	.word	0x000013b9
    11e4:	00000f99 	.word	0x00000f99

000011e8 <can_init>:
uint8_t rx_buffer[MAX_INCOMMING_STRING_LENGTH] = {0};
uint8_t rx_buff_index = 0;


void can_init(const can_context_type * can)
{
    11e8:	b510      	push	{r4, lr}
       usart_sync_get_io_descriptor(&TARGET_IO, &serial_io);	// Get the descriptor
    11ea:	4902      	ldr	r1, [pc, #8]	; (11f4 <can_init+0xc>)
    11ec:	4802      	ldr	r0, [pc, #8]	; (11f8 <can_init+0x10>)
    11ee:	4b03      	ldr	r3, [pc, #12]	; (11fc <can_init+0x14>)
    11f0:	4798      	blx	r3
}
    11f2:	bd10      	pop	{r4, pc}
    11f4:	20000564 	.word	0x20000564
    11f8:	20000310 	.word	0x20000310
    11fc:	00000709 	.word	0x00000709

00001200 <can_write>:


void can_write(can_context_type * can)
{
    1200:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1202:	0005      	movs	r5, r0
		--------------------------------------
	*/
	#else 	
	
        // Serial String Format tiiildddd..dd\n | max data is the byte
        memset(uart_tx_frame_buff , 0 , 23);
    1204:	4c63      	ldr	r4, [pc, #396]	; (1394 <can_write+0x194>)
    1206:	2217      	movs	r2, #23
    1208:	2100      	movs	r1, #0
    120a:	0020      	movs	r0, r4
    120c:	4f62      	ldr	r7, [pc, #392]	; (1398 <can_write+0x198>)
    120e:	47b8      	blx	r7
        memset(temp_buff , 0 , 3);
    1210:	0026      	movs	r6, r4
    1212:	3618      	adds	r6, #24
    1214:	2203      	movs	r2, #3
    1216:	2100      	movs	r1, #0
    1218:	0030      	movs	r0, r6
    121a:	47b8      	blx	r7
        memset(temp_copy_buffer , 0 , 3);
    121c:	0020      	movs	r0, r4
    121e:	301c      	adds	r0, #28
    1220:	2203      	movs	r2, #3
    1222:	2100      	movs	r1, #0
    1224:	47b8      	blx	r7
        memset(temp_buff_data , 0 , 2);
    1226:	2300      	movs	r3, #0
    1228:	8423      	strh	r3, [r4, #32]
	
        /*First element of the string is 't' */
        uart_tx_frame_buff[0] = 't';							
    122a:	3374      	adds	r3, #116	; 0x74
    122c:	7023      	strb	r3, [r4, #0]
        
        /* CAN ID convert to string and concat to uart_tx_buffer */
	//itoa (can->can_id,temp_buff,16);
        sprintf(temp_buff, "%x", can->can_id);
    122e:	682a      	ldr	r2, [r5, #0]
    1230:	495a      	ldr	r1, [pc, #360]	; (139c <can_write+0x19c>)
    1232:	0030      	movs	r0, r6
    1234:	4b5a      	ldr	r3, [pc, #360]	; (13a0 <can_write+0x1a0>)
    1236:	4798      	blx	r3

        // zero padding in MSb
        switch(strlen(temp_buff)){
    1238:	0030      	movs	r0, r6
    123a:	4b5a      	ldr	r3, [pc, #360]	; (13a4 <can_write+0x1a4>)
    123c:	4798      	blx	r3
    123e:	2802      	cmp	r0, #2
    1240:	d00c      	beq.n	125c <can_write+0x5c>
    1242:	2803      	cmp	r0, #3
    1244:	d012      	beq.n	126c <can_write+0x6c>
    1246:	2801      	cmp	r0, #1
    1248:	d001      	beq.n	124e <can_write+0x4e>
{
    124a:	2400      	movs	r4, #0
    124c:	e022      	b.n	1294 <can_write+0x94>
		case 1: //if len is 1 the padding 0 to first 2 place
			temp_copy_buffer[0] = 0;
    124e:	4b51      	ldr	r3, [pc, #324]	; (1394 <can_write+0x194>)
    1250:	2200      	movs	r2, #0
    1252:	771a      	strb	r2, [r3, #28]
			temp_copy_buffer[1] = 0;
    1254:	775a      	strb	r2, [r3, #29]
			temp_copy_buffer[2] = temp_buff[0];
    1256:	7e1a      	ldrb	r2, [r3, #24]
    1258:	779a      	strb	r2, [r3, #30]
		break;
    125a:	e7f6      	b.n	124a <can_write+0x4a>
            
		case 2: //if len is 1 the padding 0 to first 2 place
			temp_copy_buffer[0] = 0;
    125c:	4b4d      	ldr	r3, [pc, #308]	; (1394 <can_write+0x194>)
    125e:	2200      	movs	r2, #0
    1260:	771a      	strb	r2, [r3, #28]
			temp_copy_buffer[1] = temp_buff[0];
    1262:	7e1a      	ldrb	r2, [r3, #24]
    1264:	775a      	strb	r2, [r3, #29]
			temp_copy_buffer[2] = temp_buff[1];
    1266:	7e5a      	ldrb	r2, [r3, #25]
    1268:	779a      	strb	r2, [r3, #30]
		break;
    126a:	e7ee      	b.n	124a <can_write+0x4a>
            
		case 3: //if len is 1 the padding 0 to first 2 place
			temp_copy_buffer[0] = temp_buff[0];
    126c:	4b49      	ldr	r3, [pc, #292]	; (1394 <can_write+0x194>)
    126e:	7e1a      	ldrb	r2, [r3, #24]
    1270:	771a      	strb	r2, [r3, #28]
			temp_copy_buffer[1] = temp_buff[1];
    1272:	7e5a      	ldrb	r2, [r3, #25]
    1274:	775a      	strb	r2, [r3, #29]
			temp_copy_buffer[2] = temp_buff[2];
    1276:	7e9a      	ldrb	r2, [r3, #26]
    1278:	779a      	strb	r2, [r3, #30]
		break;
    127a:	e7e6      	b.n	124a <can_write+0x4a>
		break;
	}
	int i = 0;
	for(i=0; i < 3 ; i++){		
		if((temp_copy_buffer[i] >= 'a') && (temp_copy_buffer[i] <= 'f'))
			temp_copy_buffer[i] = toupper(temp_copy_buffer[i]);
    127c:	4b4a      	ldr	r3, [pc, #296]	; (13a8 <can_write+0x1a8>)
    127e:	4798      	blx	r3
    1280:	1980      	adds	r0, r0, r6
    1282:	7842      	ldrb	r2, [r0, #1]
    1284:	2303      	movs	r3, #3
    1286:	4013      	ands	r3, r2
    1288:	2b02      	cmp	r3, #2
    128a:	d014      	beq.n	12b6 <can_write+0xb6>
    128c:	4b41      	ldr	r3, [pc, #260]	; (1394 <can_write+0x194>)
    128e:	191b      	adds	r3, r3, r4
    1290:	771e      	strb	r6, [r3, #28]
	for(i=0; i < 3 ; i++){		
    1292:	3401      	adds	r4, #1
    1294:	2c02      	cmp	r4, #2
    1296:	dc10      	bgt.n	12ba <can_write+0xba>
		if((temp_copy_buffer[i] >= 'a') && (temp_copy_buffer[i] <= 'f'))
    1298:	4b3e      	ldr	r3, [pc, #248]	; (1394 <can_write+0x194>)
    129a:	191b      	adds	r3, r3, r4
    129c:	7f1e      	ldrb	r6, [r3, #28]
    129e:	0033      	movs	r3, r6
    12a0:	3b61      	subs	r3, #97	; 0x61
    12a2:	b2db      	uxtb	r3, r3
    12a4:	2b05      	cmp	r3, #5
    12a6:	d9e9      	bls.n	127c <can_write+0x7c>
		else if(temp_copy_buffer[i] == 0)
    12a8:	2e00      	cmp	r6, #0
    12aa:	d1f2      	bne.n	1292 <can_write+0x92>
			temp_copy_buffer[i] = 48; // ascii of 0
    12ac:	4b39      	ldr	r3, [pc, #228]	; (1394 <can_write+0x194>)
    12ae:	191b      	adds	r3, r3, r4
    12b0:	2230      	movs	r2, #48	; 0x30
    12b2:	771a      	strb	r2, [r3, #28]
    12b4:	e7ed      	b.n	1292 <can_write+0x92>
			temp_copy_buffer[i] = toupper(temp_copy_buffer[i]);
    12b6:	3e20      	subs	r6, #32
    12b8:	e7e8      	b.n	128c <can_write+0x8c>
        
	#if OUTGOING_CAN_DRIVER_PRINT
	printf("[CAN DRV] WR Seg ID [%d] :%s:\n", can->can_id, temp_copy_buffer);
	#endif
	       				
	strcat(uart_tx_frame_buff , temp_copy_buffer); /* concat with the uart_tx_frame_buffer*/	
    12ba:	4c36      	ldr	r4, [pc, #216]	; (1394 <can_write+0x194>)
    12bc:	0021      	movs	r1, r4
    12be:	311c      	adds	r1, #28
    12c0:	0020      	movs	r0, r4
    12c2:	4b3a      	ldr	r3, [pc, #232]	; (13ac <can_write+0x1ac>)
    12c4:	4798      	blx	r3
	/*data len converted to sting and transmit */
	uart_tx_frame_buff[4] = (uint8_t)(can->len+48); /* Length cann't be greater than 4 so put it as same posion is 4th byte*/
    12c6:	6c6b      	ldr	r3, [r5, #68]	; 0x44
    12c8:	3330      	adds	r3, #48	; 0x30
    12ca:	7123      	strb	r3, [r4, #4]
	#if OUTGOING_CAN_DRIVER_PRINT
	printf("[CAN DRV] WR Seg data: ");
	#endif		
	/* 8 byte data conversion and concat to uart_tx_frame_buff */
        i= 0;
	for(i=0 ; i < can->len; i++){
    12cc:	2400      	movs	r4, #0
    12ce:	e01e      	b.n	130e <can_write+0x10e>
			temp_buff_data[1] = temp;
		}
				
		/*1st digit conversion of byte */
		if((temp_buff_data[0] >= 'a') && (temp_buff_data[0] <= 'f'))
			temp_buff_data[0] = toupper(temp_buff_data[0]);
    12d0:	4b35      	ldr	r3, [pc, #212]	; (13a8 <can_write+0x1a8>)
    12d2:	4798      	blx	r3
    12d4:	1980      	adds	r0, r0, r6
    12d6:	7842      	ldrb	r2, [r0, #1]
    12d8:	2303      	movs	r3, #3
    12da:	4013      	ands	r3, r2
    12dc:	2b02      	cmp	r3, #2
    12de:	d003      	beq.n	12e8 <can_write+0xe8>
    12e0:	2320      	movs	r3, #32
    12e2:	4a2c      	ldr	r2, [pc, #176]	; (1394 <can_write+0x194>)
    12e4:	54d6      	strb	r6, [r2, r3]
    12e6:	e036      	b.n	1356 <can_write+0x156>
    12e8:	3e20      	subs	r6, #32
    12ea:	e7f9      	b.n	12e0 <can_write+0xe0>
			temp_buff_data[0] = 48;
		else{}
					
		/*2nd digit conversion of byte */
		if((temp_buff_data[1] >= 'a') && (temp_buff_data[1] <= 'f'))
			temp_buff_data[1] = toupper(temp_buff_data[1]);
    12ec:	4b2e      	ldr	r3, [pc, #184]	; (13a8 <can_write+0x1a8>)
    12ee:	4798      	blx	r3
    12f0:	1980      	adds	r0, r0, r6
    12f2:	7842      	ldrb	r2, [r0, #1]
    12f4:	2303      	movs	r3, #3
    12f6:	4013      	ands	r3, r2
    12f8:	2b02      	cmp	r3, #2
    12fa:	d03b      	beq.n	1374 <can_write+0x174>
    12fc:	4b25      	ldr	r3, [pc, #148]	; (1394 <can_write+0x194>)
    12fe:	3320      	adds	r3, #32
    1300:	705e      	strb	r6, [r3, #1]
		#if OUTGOING_CAN_DRIVER_PRINT
		printf("-[%d]:%s:-",can->can_data[i], temp_buff_data);
		#endif	
		/* concatenate to the main sting according to LSB to MSB
		one by one after every byte convention in loop*/
		strcat(uart_tx_frame_buff , temp_buff_data);						 
    1302:	4824      	ldr	r0, [pc, #144]	; (1394 <can_write+0x194>)
    1304:	0001      	movs	r1, r0
    1306:	3120      	adds	r1, #32
    1308:	4b28      	ldr	r3, [pc, #160]	; (13ac <can_write+0x1ac>)
    130a:	4798      	blx	r3
	for(i=0 ; i < can->len; i++){
    130c:	3401      	adds	r4, #1
    130e:	6c6b      	ldr	r3, [r5, #68]	; 0x44
    1310:	42a3      	cmp	r3, r4
    1312:	d931      	bls.n	1378 <can_write+0x178>
		sprintf(temp_buff_data , "%x" , can->can_data[i]);
    1314:	192e      	adds	r6, r5, r4
    1316:	7932      	ldrb	r2, [r6, #4]
    1318:	4920      	ldr	r1, [pc, #128]	; (139c <can_write+0x19c>)
    131a:	481e      	ldr	r0, [pc, #120]	; (1394 <can_write+0x194>)
    131c:	3020      	adds	r0, #32
    131e:	4b20      	ldr	r3, [pc, #128]	; (13a0 <can_write+0x1a0>)
    1320:	4798      	blx	r3
		if(can->can_data[i]<16){
    1322:	7933      	ldrb	r3, [r6, #4]
    1324:	2b0f      	cmp	r3, #15
    1326:	d808      	bhi.n	133a <can_write+0x13a>
			uint8_t temp = temp_buff_data[0];
    1328:	4b1a      	ldr	r3, [pc, #104]	; (1394 <can_write+0x194>)
    132a:	2220      	movs	r2, #32
    132c:	5c99      	ldrb	r1, [r3, r2]
			temp_buff_data[0] = temp_buff_data[1];
    132e:	0018      	movs	r0, r3
    1330:	3020      	adds	r0, #32
    1332:	7840      	ldrb	r0, [r0, #1]
    1334:	5498      	strb	r0, [r3, r2]
			temp_buff_data[1] = temp;
    1336:	3320      	adds	r3, #32
    1338:	7059      	strb	r1, [r3, #1]
		if((temp_buff_data[0] >= 'a') && (temp_buff_data[0] <= 'f'))
    133a:	2320      	movs	r3, #32
    133c:	4a15      	ldr	r2, [pc, #84]	; (1394 <can_write+0x194>)
    133e:	5cd6      	ldrb	r6, [r2, r3]
    1340:	0033      	movs	r3, r6
    1342:	3b61      	subs	r3, #97	; 0x61
    1344:	b2db      	uxtb	r3, r3
    1346:	2b05      	cmp	r3, #5
    1348:	d9c2      	bls.n	12d0 <can_write+0xd0>
		else if(temp_buff_data[0] == 0)
    134a:	2e00      	cmp	r6, #0
    134c:	d103      	bne.n	1356 <can_write+0x156>
			temp_buff_data[0] = 48;
    134e:	2130      	movs	r1, #48	; 0x30
    1350:	2320      	movs	r3, #32
    1352:	4a10      	ldr	r2, [pc, #64]	; (1394 <can_write+0x194>)
    1354:	54d1      	strb	r1, [r2, r3]
		if((temp_buff_data[1] >= 'a') && (temp_buff_data[1] <= 'f'))
    1356:	4b0f      	ldr	r3, [pc, #60]	; (1394 <can_write+0x194>)
    1358:	3320      	adds	r3, #32
    135a:	785e      	ldrb	r6, [r3, #1]
    135c:	0033      	movs	r3, r6
    135e:	3b61      	subs	r3, #97	; 0x61
    1360:	b2db      	uxtb	r3, r3
    1362:	2b05      	cmp	r3, #5
    1364:	d9c2      	bls.n	12ec <can_write+0xec>
		else if(temp_buff_data[1] == 0)
    1366:	2e00      	cmp	r6, #0
    1368:	d1cb      	bne.n	1302 <can_write+0x102>
			temp_buff_data[1] = 48;
    136a:	2230      	movs	r2, #48	; 0x30
    136c:	4b09      	ldr	r3, [pc, #36]	; (1394 <can_write+0x194>)
    136e:	3320      	adds	r3, #32
    1370:	705a      	strb	r2, [r3, #1]
    1372:	e7c6      	b.n	1302 <can_write+0x102>
			temp_buff_data[1] = toupper(temp_buff_data[1]);
    1374:	3e20      	subs	r6, #32
    1376:	e7c1      	b.n	12fc <can_write+0xfc>
        printf("\n");
        #endif 
	       
	//io_write(lv_io , temp_buff_data, 2);
	/* a \r should be padded after the bytes 5+ (i*2) */
	uart_tx_frame_buff[5+(i*2)] = '\n';											
    1378:	0063      	lsls	r3, r4, #1
    137a:	3305      	adds	r3, #5
    137c:	4905      	ldr	r1, [pc, #20]	; (1394 <can_write+0x194>)
    137e:	220a      	movs	r2, #10
    1380:	54ca      	strb	r2, [r1, r3]
	int serial_data_len = (6+(i*2));
    1382:	3403      	adds	r4, #3
    1384:	0064      	lsls	r4, r4, #1

        #if OUTGOING_CAN_DRIVER_PRINT
                printf("[CAN DRV] WR Write :%s:\n",uart_tx_frame_buff);
        #endif

	io_write(serial_io , uart_tx_frame_buff, serial_data_len); // Calculate based on the data len
    1386:	b2a2      	uxth	r2, r4
    1388:	4b09      	ldr	r3, [pc, #36]	; (13b0 <can_write+0x1b0>)
    138a:	6818      	ldr	r0, [r3, #0]
    138c:	4b09      	ldr	r3, [pc, #36]	; (13b4 <can_write+0x1b4>)
    138e:	4798      	blx	r3
	
	#endif                  
}
    1390:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1392:	46c0      	nop			; (mov r8, r8)
    1394:	2000023c 	.word	0x2000023c
    1398:	000016cf 	.word	0x000016cf
    139c:	000026a0 	.word	0x000026a0
    13a0:	00001849 	.word	0x00001849
    13a4:	000018a7 	.word	0x000018a7
    13a8:	0000167d 	.word	0x0000167d
    13ac:	0000188d 	.word	0x0000188d
    13b0:	20000564 	.word	0x20000564
    13b4:	00000541 	.word	0x00000541

000013b8 <can_read>:

int can_read(can_context_type * can)
{
    13b8:	b5f0      	push	{r4, r5, r6, r7, lr}
    13ba:	46c6      	mov	lr, r8
    13bc:	b500      	push	{lr}
    13be:	0006      	movs	r6, r0
		--------------------------------------
	*/
	#else 
	
	/* Read characters */
	if(usart_sync_is_rx_not_empty(&TARGET_IO)){ //
    13c0:	484a      	ldr	r0, [pc, #296]	; (14ec <can_read+0x134>)
    13c2:	4b4b      	ldr	r3, [pc, #300]	; (14f0 <can_read+0x138>)
    13c4:	4798      	blx	r3
    13c6:	2800      	cmp	r0, #0
    13c8:	d108      	bne.n	13dc <can_read+0x24>
				rx_buffer[rx_buff_index++] = temp_char_buff[0]; // Fill the buffer character by character
		}	
	}
	
	/*  One complete usb frame is received and process the frame */
	if(frame_received){
    13ca:	2326      	movs	r3, #38	; 0x26
    13cc:	4a49      	ldr	r2, [pc, #292]	; (14f4 <can_read+0x13c>)
    13ce:	5cd3      	ldrb	r3, [r2, r3]
    13d0:	2b00      	cmp	r3, #0
    13d2:	d127      	bne.n	1424 <can_read+0x6c>
		
		
	}
	#endif
	
	return 0;       
    13d4:	2000      	movs	r0, #0
    13d6:	bc04      	pop	{r2}
    13d8:	4690      	mov	r8, r2
    13da:	bdf0      	pop	{r4, r5, r6, r7, pc}
		io_read(serial_io, temp_char_buff , 1);
    13dc:	4c45      	ldr	r4, [pc, #276]	; (14f4 <can_read+0x13c>)
    13de:	0021      	movs	r1, r4
    13e0:	3124      	adds	r1, #36	; 0x24
    13e2:	4b45      	ldr	r3, [pc, #276]	; (14f8 <can_read+0x140>)
    13e4:	6818      	ldr	r0, [r3, #0]
    13e6:	2201      	movs	r2, #1
    13e8:	4b44      	ldr	r3, [pc, #272]	; (14fc <can_read+0x144>)
    13ea:	4798      	blx	r3
		if(temp_char_buff[0] == 't'){	// If the character is t reset all the values and start sampling the frame
    13ec:	2324      	movs	r3, #36	; 0x24
    13ee:	5ce3      	ldrb	r3, [r4, r3]
    13f0:	2b74      	cmp	r3, #116	; 0x74
    13f2:	d00d      	beq.n	1410 <can_read+0x58>
		} else if((temp_char_buff[0] == '\n')) {	// If \r received then stop sampling character and start process the frame.
    13f4:	2b0a      	cmp	r3, #10
    13f6:	d010      	beq.n	141a <can_read+0x62>
			if(rx_buff_index < MAX_INCOMMING_STRING_LENGTH)
    13f8:	2225      	movs	r2, #37	; 0x25
    13fa:	493e      	ldr	r1, [pc, #248]	; (14f4 <can_read+0x13c>)
    13fc:	5c8a      	ldrb	r2, [r1, r2]
    13fe:	2a63      	cmp	r2, #99	; 0x63
    1400:	d8e3      	bhi.n	13ca <can_read+0x12>
				rx_buffer[rx_buff_index++] = temp_char_buff[0]; // Fill the buffer character by character
    1402:	1c54      	adds	r4, r2, #1
    1404:	2025      	movs	r0, #37	; 0x25
    1406:	540c      	strb	r4, [r1, r0]
    1408:	188a      	adds	r2, r1, r2
    140a:	2128      	movs	r1, #40	; 0x28
    140c:	5453      	strb	r3, [r2, r1]
    140e:	e7dc      	b.n	13ca <can_read+0x12>
			rx_buff_index = 0; // Start the string	
    1410:	2100      	movs	r1, #0
    1412:	3b4f      	subs	r3, #79	; 0x4f
    1414:	4a37      	ldr	r2, [pc, #220]	; (14f4 <can_read+0x13c>)
    1416:	54d1      	strb	r1, [r2, r3]
    1418:	e7d7      	b.n	13ca <can_read+0x12>
			frame_received = 1;
    141a:	2101      	movs	r1, #1
    141c:	331c      	adds	r3, #28
    141e:	4a35      	ldr	r2, [pc, #212]	; (14f4 <can_read+0x13c>)
    1420:	54d1      	strb	r1, [r2, r3]
    1422:	e7d2      	b.n	13ca <can_read+0x12>
		frame_received = 0;
    1424:	2700      	movs	r7, #0
    1426:	2326      	movs	r3, #38	; 0x26
    1428:	54d7      	strb	r7, [r2, r3]
		memset(serial_can_data ,0 ,8);
    142a:	4c35      	ldr	r4, [pc, #212]	; (1500 <can_read+0x148>)
    142c:	0020      	movs	r0, r4
    142e:	300c      	adds	r0, #12
    1430:	2208      	movs	r2, #8
    1432:	2100      	movs	r1, #0
    1434:	4d33      	ldr	r5, [pc, #204]	; (1504 <can_read+0x14c>)
    1436:	47a8      	blx	r5
		memset(serial_recv_can_id_temp ,0 ,3);
    1438:	0020      	movs	r0, r4
    143a:	3014      	adds	r0, #20
    143c:	2203      	movs	r2, #3
    143e:	2100      	movs	r1, #0
    1440:	47a8      	blx	r5
		memset(serial_recv_can_len ,0 ,1);
    1442:	7627      	strb	r7, [r4, #24]
		memset(can_tx_data ,0 ,8);
    1444:	0020      	movs	r0, r4
    1446:	301c      	adds	r0, #28
    1448:	2208      	movs	r2, #8
    144a:	2100      	movs	r1, #0
    144c:	47a8      	blx	r5
		for(i = 0 ; i<3 ; i++){
    144e:	2300      	movs	r3, #0
    1450:	e007      	b.n	1462 <can_read+0xaa>
			serial_recv_can_id_temp[i] = rx_buffer[i];
    1452:	4a28      	ldr	r2, [pc, #160]	; (14f4 <can_read+0x13c>)
    1454:	18d2      	adds	r2, r2, r3
    1456:	2128      	movs	r1, #40	; 0x28
    1458:	5c51      	ldrb	r1, [r2, r1]
    145a:	4a29      	ldr	r2, [pc, #164]	; (1500 <can_read+0x148>)
    145c:	18d2      	adds	r2, r2, r3
    145e:	7511      	strb	r1, [r2, #20]
		for(i = 0 ; i<3 ; i++){
    1460:	3301      	adds	r3, #1
    1462:	2b02      	cmp	r3, #2
    1464:	ddf5      	ble.n	1452 <can_read+0x9a>
		serial_can_tx_id = hexadecimalToDecimal(serial_recv_can_id_temp);
    1466:	4c26      	ldr	r4, [pc, #152]	; (1500 <can_read+0x148>)
    1468:	0020      	movs	r0, r4
    146a:	3014      	adds	r0, #20
    146c:	4d26      	ldr	r5, [pc, #152]	; (1508 <can_read+0x150>)
    146e:	47a8      	blx	r5
    1470:	6260      	str	r0, [r4, #36]	; 0x24
		can->can_id = serial_can_tx_id;
    1472:	6030      	str	r0, [r6, #0]
		serial_recv_can_len[0] = rx_buffer[3];
    1474:	4b1f      	ldr	r3, [pc, #124]	; (14f4 <can_read+0x13c>)
    1476:	3328      	adds	r3, #40	; 0x28
    1478:	78db      	ldrb	r3, [r3, #3]
    147a:	7623      	strb	r3, [r4, #24]
		serial_can_tx_len = hexadecimalToDecimal(serial_recv_can_len);
    147c:	0020      	movs	r0, r4
    147e:	3018      	adds	r0, #24
    1480:	47a8      	blx	r5
    1482:	b2c0      	uxtb	r0, r0
    1484:	2328      	movs	r3, #40	; 0x28
    1486:	54e0      	strb	r0, [r4, r3]
		can->len = serial_can_tx_len;
    1488:	6470      	str	r0, [r6, #68]	; 0x44
		int index = 0;
    148a:	2700      	movs	r7, #0
		for(i = 4 ; (i < (4 + (serial_can_tx_len*2)) ) ; i+=2){ // One byte means 2 character in serial
    148c:	2504      	movs	r5, #4
    148e:	e013      	b.n	14b8 <can_read+0x100>
			can_tx_data[0] = rx_buffer[i];
    1490:	4b18      	ldr	r3, [pc, #96]	; (14f4 <can_read+0x13c>)
    1492:	2228      	movs	r2, #40	; 0x28
    1494:	1959      	adds	r1, r3, r5
    1496:	5c89      	ldrb	r1, [r1, r2]
    1498:	4c19      	ldr	r4, [pc, #100]	; (1500 <can_read+0x148>)
    149a:	7721      	strb	r1, [r4, #28]
			can_tx_data[1] = rx_buffer[i+1];
    149c:	1c69      	adds	r1, r5, #1
    149e:	185b      	adds	r3, r3, r1
    14a0:	5c9b      	ldrb	r3, [r3, r2]
    14a2:	7763      	strb	r3, [r4, #29]
			serial_can_data[index++] = hexadecimalToDecimal(can_tx_data);
    14a4:	1c7b      	adds	r3, r7, #1
    14a6:	4698      	mov	r8, r3
    14a8:	0020      	movs	r0, r4
    14aa:	301c      	adds	r0, #28
    14ac:	4b16      	ldr	r3, [pc, #88]	; (1508 <can_read+0x150>)
    14ae:	4798      	blx	r3
    14b0:	19e4      	adds	r4, r4, r7
    14b2:	7320      	strb	r0, [r4, #12]
		for(i = 4 ; (i < (4 + (serial_can_tx_len*2)) ) ; i+=2){ // One byte means 2 character in serial
    14b4:	3502      	adds	r5, #2
			serial_can_data[index++] = hexadecimalToDecimal(can_tx_data);
    14b6:	4647      	mov	r7, r8
		for(i = 4 ; (i < (4 + (serial_can_tx_len*2)) ) ; i+=2){ // One byte means 2 character in serial
    14b8:	2328      	movs	r3, #40	; 0x28
    14ba:	4a11      	ldr	r2, [pc, #68]	; (1500 <can_read+0x148>)
    14bc:	5cd3      	ldrb	r3, [r2, r3]
    14be:	3302      	adds	r3, #2
    14c0:	005b      	lsls	r3, r3, #1
    14c2:	429d      	cmp	r5, r3
    14c4:	dbe4      	blt.n	1490 <can_read+0xd8>
    14c6:	2300      	movs	r3, #0
    14c8:	e005      	b.n	14d6 <can_read+0x11e>
			can->can_data[i] = serial_can_data[i];
    14ca:	4a0d      	ldr	r2, [pc, #52]	; (1500 <can_read+0x148>)
    14cc:	18d2      	adds	r2, r2, r3
    14ce:	7b11      	ldrb	r1, [r2, #12]
    14d0:	18f2      	adds	r2, r6, r3
    14d2:	7111      	strb	r1, [r2, #4]
		for(int i= 0 ; i<8 ; i++ ){
    14d4:	3301      	adds	r3, #1
    14d6:	2b07      	cmp	r3, #7
    14d8:	ddf7      	ble.n	14ca <can_read+0x112>
		memset(rx_buffer,0,MAX_INCOMMING_STRING_LENGTH);
    14da:	2264      	movs	r2, #100	; 0x64
    14dc:	2100      	movs	r1, #0
    14de:	4805      	ldr	r0, [pc, #20]	; (14f4 <can_read+0x13c>)
    14e0:	3028      	adds	r0, #40	; 0x28
    14e2:	4b08      	ldr	r3, [pc, #32]	; (1504 <can_read+0x14c>)
    14e4:	4798      	blx	r3
		return 1;
    14e6:	2001      	movs	r0, #1
    14e8:	e775      	b.n	13d6 <can_read+0x1e>
    14ea:	46c0      	nop			; (mov r8, r8)
    14ec:	20000310 	.word	0x20000310
    14f0:	00000739 	.word	0x00000739
    14f4:	2000023c 	.word	0x2000023c
    14f8:	20000564 	.word	0x20000564
    14fc:	00000579 	.word	0x00000579
    1500:	200002bc 	.word	0x200002bc
    1504:	000016cf 	.word	0x000016cf
    1508:	0000150d 	.word	0x0000150d

0000150c <hexadecimalToDecimal>:
#include "utility_support.h"



int hexadecimalToDecimal(char hexVal[])
{
    150c:	b570      	push	{r4, r5, r6, lr}
    150e:	0004      	movs	r4, r0
	int len = strlen(hexVal);
    1510:	4b0e      	ldr	r3, [pc, #56]	; (154c <hexadecimalToDecimal+0x40>)
    1512:	4798      	blx	r3
	int base = 1;
	int dec_val = 0;
	int i;
	for (i=len-1; i>=0; i--)
    1514:	1e42      	subs	r2, r0, #1
	int dec_val = 0;
    1516:	2000      	movs	r0, #0
	int base = 1;
    1518:	2501      	movs	r5, #1
	for (i=len-1; i>=0; i--)
    151a:	e009      	b.n	1530 <hexadecimalToDecimal+0x24>
		if (hexVal[i]>='0' && hexVal[i]<='9')
		{
			dec_val += (hexVal[i] - 48)*base;
			base = base * 16;
		}
		else if (hexVal[i]>='A' && hexVal[i]<='F')
    151c:	0019      	movs	r1, r3
    151e:	3941      	subs	r1, #65	; 0x41
    1520:	b2c9      	uxtb	r1, r1
    1522:	2905      	cmp	r1, #5
    1524:	d803      	bhi.n	152e <hexadecimalToDecimal+0x22>
		{
			dec_val += (hexVal[i] - 55)*base;
    1526:	3b37      	subs	r3, #55	; 0x37
    1528:	436b      	muls	r3, r5
    152a:	18c0      	adds	r0, r0, r3
			base = base*16;
    152c:	012d      	lsls	r5, r5, #4
	for (i=len-1; i>=0; i--)
    152e:	3a01      	subs	r2, #1
    1530:	2a00      	cmp	r2, #0
    1532:	db0a      	blt.n	154a <hexadecimalToDecimal+0x3e>
		if (hexVal[i]>='0' && hexVal[i]<='9')
    1534:	5ca3      	ldrb	r3, [r4, r2]
    1536:	0019      	movs	r1, r3
    1538:	3930      	subs	r1, #48	; 0x30
    153a:	b2c9      	uxtb	r1, r1
    153c:	2909      	cmp	r1, #9
    153e:	d8ed      	bhi.n	151c <hexadecimalToDecimal+0x10>
			dec_val += (hexVal[i] - 48)*base;
    1540:	3b30      	subs	r3, #48	; 0x30
    1542:	436b      	muls	r3, r5
    1544:	18c0      	adds	r0, r0, r3
			base = base * 16;
    1546:	012d      	lsls	r5, r5, #4
    1548:	e7f1      	b.n	152e <hexadecimalToDecimal+0x22>
		}
	}
	
	return dec_val;
}
    154a:	bd70      	pop	{r4, r5, r6, pc}
    154c:	000018a7 	.word	0x000018a7

00001550 <_read>:
#include <stdio.h>

int __attribute__((weak)) _read(int file, char *ptr, int len); /* Remove GCC compiler warning */

int __attribute__((weak)) _read(int file, char *ptr, int len)
{
    1550:	b510      	push	{r4, lr}
    1552:	000b      	movs	r3, r1
	int n = 0;

	if (file != 0) {
    1554:	2800      	cmp	r0, #0
    1556:	d109      	bne.n	156c <_read+0x1c>
		return -1;
	}

	n = stdio_io_read((uint8_t *)ptr, len);
    1558:	0011      	movs	r1, r2
    155a:	0018      	movs	r0, r3
    155c:	4b05      	ldr	r3, [pc, #20]	; (1574 <_read+0x24>)
    155e:	4798      	blx	r3
	if (n < 0) {
    1560:	2800      	cmp	r0, #0
    1562:	db00      	blt.n	1566 <_read+0x16>
		return -1;
	}

	return n;
}
    1564:	bd10      	pop	{r4, pc}
		return -1;
    1566:	2001      	movs	r0, #1
    1568:	4240      	negs	r0, r0
    156a:	e7fb      	b.n	1564 <_read+0x14>
		return -1;
    156c:	2001      	movs	r0, #1
    156e:	4240      	negs	r0, r0
    1570:	e7f8      	b.n	1564 <_read+0x14>
    1572:	46c0      	nop			; (mov r8, r8)
    1574:	000015cd 	.word	0x000015cd

00001578 <_write>:
#include <stdio.h>

int __attribute__((weak)) _write(int file, char *ptr, int len); /* Remove GCC compiler warning */

int __attribute__((weak)) _write(int file, char *ptr, int len)
{
    1578:	b510      	push	{r4, lr}
    157a:	000b      	movs	r3, r1
	int n = 0;

	if ((file != 1) && (file != 2) && (file != 3)) {
    157c:	3801      	subs	r0, #1
    157e:	2802      	cmp	r0, #2
    1580:	d809      	bhi.n	1596 <_write+0x1e>
		return -1;
	}

	n = stdio_io_write((const uint8_t *)ptr, len);
    1582:	0011      	movs	r1, r2
    1584:	0018      	movs	r0, r3
    1586:	4b05      	ldr	r3, [pc, #20]	; (159c <_write+0x24>)
    1588:	4798      	blx	r3
	if (n < 0) {
    158a:	2800      	cmp	r0, #0
    158c:	db00      	blt.n	1590 <_write+0x18>
		return -1;
	}

	return n;
}
    158e:	bd10      	pop	{r4, pc}
		return -1;
    1590:	2001      	movs	r0, #1
    1592:	4240      	negs	r0, r0
    1594:	e7fb      	b.n	158e <_write+0x16>
		return -1;
    1596:	2001      	movs	r0, #1
    1598:	4240      	negs	r0, r0
    159a:	e7f8      	b.n	158e <_write+0x16>
    159c:	000015f1 	.word	0x000015f1

000015a0 <stdio_io_init>:

/** IO descriptor for STDIO access. */
static struct io_descriptor *stdio_io = NULL;

void stdio_io_init(struct io_descriptor *io)
{
    15a0:	b570      	push	{r4, r5, r6, lr}
    15a2:	0006      	movs	r6, r0
#if defined(__GNUC__)
	/* Specify that stdout and stdin should not be buffered. */
	setbuf(stdout, NULL);
    15a4:	4d06      	ldr	r5, [pc, #24]	; (15c0 <stdio_io_init+0x20>)
    15a6:	682b      	ldr	r3, [r5, #0]
    15a8:	6898      	ldr	r0, [r3, #8]
    15aa:	2100      	movs	r1, #0
    15ac:	4c05      	ldr	r4, [pc, #20]	; (15c4 <stdio_io_init+0x24>)
    15ae:	47a0      	blx	r4
	setbuf(stdin, NULL);
    15b0:	682b      	ldr	r3, [r5, #0]
    15b2:	6858      	ldr	r0, [r3, #4]
    15b4:	2100      	movs	r1, #0
    15b6:	47a0      	blx	r4
	 * and AVR GCC library:
	 * - printf() emits one character at a time.
	 * - getchar() requests only 1 byte to exit.
	 */
#endif
	stdio_io = io;
    15b8:	4b03      	ldr	r3, [pc, #12]	; (15c8 <stdio_io_init+0x28>)
    15ba:	601e      	str	r6, [r3, #0]
}
    15bc:	bd70      	pop	{r4, r5, r6, pc}
    15be:	46c0      	nop			; (mov r8, r8)
    15c0:	20000018 	.word	0x20000018
    15c4:	000016df 	.word	0x000016df
    15c8:	200002e8 	.word	0x200002e8

000015cc <stdio_io_read>:
{
	stdio_io = io;
}

int32_t stdio_io_read(uint8_t *buf, const int32_t len)
{
    15cc:	b510      	push	{r4, lr}
    15ce:	0004      	movs	r4, r0
	if (stdio_io == NULL) {
    15d0:	4b05      	ldr	r3, [pc, #20]	; (15e8 <stdio_io_read+0x1c>)
    15d2:	6818      	ldr	r0, [r3, #0]
    15d4:	2800      	cmp	r0, #0
    15d6:	d004      	beq.n	15e2 <stdio_io_read+0x16>
		return 0;
	}
	return io_read(stdio_io, buf, len);
    15d8:	b28a      	uxth	r2, r1
    15da:	0021      	movs	r1, r4
    15dc:	4b03      	ldr	r3, [pc, #12]	; (15ec <stdio_io_read+0x20>)
    15de:	4798      	blx	r3
}
    15e0:	bd10      	pop	{r4, pc}
		return 0;
    15e2:	2000      	movs	r0, #0
    15e4:	e7fc      	b.n	15e0 <stdio_io_read+0x14>
    15e6:	46c0      	nop			; (mov r8, r8)
    15e8:	200002e8 	.word	0x200002e8
    15ec:	00000579 	.word	0x00000579

000015f0 <stdio_io_write>:

int32_t stdio_io_write(const uint8_t *buf, const int32_t len)
{
    15f0:	b510      	push	{r4, lr}
    15f2:	0004      	movs	r4, r0
	if (stdio_io == NULL) {
    15f4:	4b05      	ldr	r3, [pc, #20]	; (160c <stdio_io_write+0x1c>)
    15f6:	6818      	ldr	r0, [r3, #0]
    15f8:	2800      	cmp	r0, #0
    15fa:	d004      	beq.n	1606 <stdio_io_write+0x16>
		return 0;
	}
	return io_write(stdio_io, buf, len);
    15fc:	b28a      	uxth	r2, r1
    15fe:	0021      	movs	r1, r4
    1600:	4b03      	ldr	r3, [pc, #12]	; (1610 <stdio_io_write+0x20>)
    1602:	4798      	blx	r3
}
    1604:	bd10      	pop	{r4, pc}
		return 0;
    1606:	2000      	movs	r0, #0
    1608:	e7fc      	b.n	1604 <stdio_io_write+0x14>
    160a:	46c0      	nop			; (mov r8, r8)
    160c:	200002e8 	.word	0x200002e8
    1610:	00000541 	.word	0x00000541

00001614 <stdio_redirect_init>:
	/* Print welcome message */
	printf("\r\nHello ATMEL World!\r\n");
}

void stdio_redirect_init(void)
{
    1614:	b510      	push	{r4, lr}

	usart_sync_enable(&TARGET_IO);
    1616:	4c04      	ldr	r4, [pc, #16]	; (1628 <stdio_redirect_init+0x14>)
    1618:	0020      	movs	r0, r4
    161a:	4b04      	ldr	r3, [pc, #16]	; (162c <stdio_redirect_init+0x18>)
    161c:	4798      	blx	r3
	stdio_io_init(&TARGET_IO.io);
    161e:	0020      	movs	r0, r4
    1620:	4b03      	ldr	r3, [pc, #12]	; (1630 <stdio_redirect_init+0x1c>)
    1622:	4798      	blx	r3
}
    1624:	bd10      	pop	{r4, pc}
    1626:	46c0      	nop			; (mov r8, r8)
    1628:	20000310 	.word	0x20000310
    162c:	000006dd 	.word	0x000006dd
    1630:	000015a1 	.word	0x000015a1

00001634 <__libc_init_array>:
    1634:	b570      	push	{r4, r5, r6, lr}
    1636:	2600      	movs	r6, #0
    1638:	4d0c      	ldr	r5, [pc, #48]	; (166c <__libc_init_array+0x38>)
    163a:	4c0d      	ldr	r4, [pc, #52]	; (1670 <__libc_init_array+0x3c>)
    163c:	1b64      	subs	r4, r4, r5
    163e:	10a4      	asrs	r4, r4, #2
    1640:	42a6      	cmp	r6, r4
    1642:	d109      	bne.n	1658 <__libc_init_array+0x24>
    1644:	2600      	movs	r6, #0
    1646:	f001 f8ff 	bl	2848 <_init>
    164a:	4d0a      	ldr	r5, [pc, #40]	; (1674 <__libc_init_array+0x40>)
    164c:	4c0a      	ldr	r4, [pc, #40]	; (1678 <__libc_init_array+0x44>)
    164e:	1b64      	subs	r4, r4, r5
    1650:	10a4      	asrs	r4, r4, #2
    1652:	42a6      	cmp	r6, r4
    1654:	d105      	bne.n	1662 <__libc_init_array+0x2e>
    1656:	bd70      	pop	{r4, r5, r6, pc}
    1658:	00b3      	lsls	r3, r6, #2
    165a:	58eb      	ldr	r3, [r5, r3]
    165c:	4798      	blx	r3
    165e:	3601      	adds	r6, #1
    1660:	e7ee      	b.n	1640 <__libc_init_array+0xc>
    1662:	00b3      	lsls	r3, r6, #2
    1664:	58eb      	ldr	r3, [r5, r3]
    1666:	4798      	blx	r3
    1668:	3601      	adds	r6, #1
    166a:	e7f2      	b.n	1652 <__libc_init_array+0x1e>
    166c:	00002854 	.word	0x00002854
    1670:	00002854 	.word	0x00002854
    1674:	00002854 	.word	0x00002854
    1678:	00002858 	.word	0x00002858

0000167c <__locale_ctype_ptr>:
    167c:	4b04      	ldr	r3, [pc, #16]	; (1690 <__locale_ctype_ptr+0x14>)
    167e:	681b      	ldr	r3, [r3, #0]
    1680:	6a1b      	ldr	r3, [r3, #32]
    1682:	2b00      	cmp	r3, #0
    1684:	d100      	bne.n	1688 <__locale_ctype_ptr+0xc>
    1686:	4b03      	ldr	r3, [pc, #12]	; (1694 <__locale_ctype_ptr+0x18>)
    1688:	33ec      	adds	r3, #236	; 0xec
    168a:	6818      	ldr	r0, [r3, #0]
    168c:	4770      	bx	lr
    168e:	46c0      	nop			; (mov r8, r8)
    1690:	20000018 	.word	0x20000018
    1694:	2000007c 	.word	0x2000007c

00001698 <__ascii_mbtowc>:
    1698:	b082      	sub	sp, #8
    169a:	2900      	cmp	r1, #0
    169c:	d100      	bne.n	16a0 <__ascii_mbtowc+0x8>
    169e:	a901      	add	r1, sp, #4
    16a0:	1e10      	subs	r0, r2, #0
    16a2:	d006      	beq.n	16b2 <__ascii_mbtowc+0x1a>
    16a4:	2b00      	cmp	r3, #0
    16a6:	d006      	beq.n	16b6 <__ascii_mbtowc+0x1e>
    16a8:	7813      	ldrb	r3, [r2, #0]
    16aa:	600b      	str	r3, [r1, #0]
    16ac:	7810      	ldrb	r0, [r2, #0]
    16ae:	1e43      	subs	r3, r0, #1
    16b0:	4198      	sbcs	r0, r3
    16b2:	b002      	add	sp, #8
    16b4:	4770      	bx	lr
    16b6:	2002      	movs	r0, #2
    16b8:	4240      	negs	r0, r0
    16ba:	e7fa      	b.n	16b2 <__ascii_mbtowc+0x1a>

000016bc <memcpy>:
    16bc:	2300      	movs	r3, #0
    16be:	b510      	push	{r4, lr}
    16c0:	429a      	cmp	r2, r3
    16c2:	d100      	bne.n	16c6 <memcpy+0xa>
    16c4:	bd10      	pop	{r4, pc}
    16c6:	5ccc      	ldrb	r4, [r1, r3]
    16c8:	54c4      	strb	r4, [r0, r3]
    16ca:	3301      	adds	r3, #1
    16cc:	e7f8      	b.n	16c0 <memcpy+0x4>

000016ce <memset>:
    16ce:	0003      	movs	r3, r0
    16d0:	1882      	adds	r2, r0, r2
    16d2:	4293      	cmp	r3, r2
    16d4:	d100      	bne.n	16d8 <memset+0xa>
    16d6:	4770      	bx	lr
    16d8:	7019      	strb	r1, [r3, #0]
    16da:	3301      	adds	r3, #1
    16dc:	e7f9      	b.n	16d2 <memset+0x4>

000016de <setbuf>:
    16de:	424a      	negs	r2, r1
    16e0:	414a      	adcs	r2, r1
    16e2:	2380      	movs	r3, #128	; 0x80
    16e4:	b510      	push	{r4, lr}
    16e6:	0052      	lsls	r2, r2, #1
    16e8:	00db      	lsls	r3, r3, #3
    16ea:	f000 f801 	bl	16f0 <setvbuf>
    16ee:	bd10      	pop	{r4, pc}

000016f0 <setvbuf>:
    16f0:	b5f0      	push	{r4, r5, r6, r7, lr}
    16f2:	001d      	movs	r5, r3
    16f4:	4b4f      	ldr	r3, [pc, #316]	; (1834 <setvbuf+0x144>)
    16f6:	b085      	sub	sp, #20
    16f8:	681e      	ldr	r6, [r3, #0]
    16fa:	0004      	movs	r4, r0
    16fc:	000f      	movs	r7, r1
    16fe:	9200      	str	r2, [sp, #0]
    1700:	2e00      	cmp	r6, #0
    1702:	d005      	beq.n	1710 <setvbuf+0x20>
    1704:	69b3      	ldr	r3, [r6, #24]
    1706:	2b00      	cmp	r3, #0
    1708:	d102      	bne.n	1710 <setvbuf+0x20>
    170a:	0030      	movs	r0, r6
    170c:	f000 f9d6 	bl	1abc <__sinit>
    1710:	4b49      	ldr	r3, [pc, #292]	; (1838 <setvbuf+0x148>)
    1712:	429c      	cmp	r4, r3
    1714:	d150      	bne.n	17b8 <setvbuf+0xc8>
    1716:	6874      	ldr	r4, [r6, #4]
    1718:	9b00      	ldr	r3, [sp, #0]
    171a:	2b02      	cmp	r3, #2
    171c:	d005      	beq.n	172a <setvbuf+0x3a>
    171e:	2b01      	cmp	r3, #1
    1720:	d900      	bls.n	1724 <setvbuf+0x34>
    1722:	e084      	b.n	182e <setvbuf+0x13e>
    1724:	2d00      	cmp	r5, #0
    1726:	da00      	bge.n	172a <setvbuf+0x3a>
    1728:	e081      	b.n	182e <setvbuf+0x13e>
    172a:	0021      	movs	r1, r4
    172c:	0030      	movs	r0, r6
    172e:	f000 f957 	bl	19e0 <_fflush_r>
    1732:	6b61      	ldr	r1, [r4, #52]	; 0x34
    1734:	2900      	cmp	r1, #0
    1736:	d008      	beq.n	174a <setvbuf+0x5a>
    1738:	0023      	movs	r3, r4
    173a:	3344      	adds	r3, #68	; 0x44
    173c:	4299      	cmp	r1, r3
    173e:	d002      	beq.n	1746 <setvbuf+0x56>
    1740:	0030      	movs	r0, r6
    1742:	f000 fa83 	bl	1c4c <_free_r>
    1746:	2300      	movs	r3, #0
    1748:	6363      	str	r3, [r4, #52]	; 0x34
    174a:	2300      	movs	r3, #0
    174c:	61a3      	str	r3, [r4, #24]
    174e:	6063      	str	r3, [r4, #4]
    1750:	89a3      	ldrh	r3, [r4, #12]
    1752:	061b      	lsls	r3, r3, #24
    1754:	d503      	bpl.n	175e <setvbuf+0x6e>
    1756:	6921      	ldr	r1, [r4, #16]
    1758:	0030      	movs	r0, r6
    175a:	f000 fa77 	bl	1c4c <_free_r>
    175e:	89a3      	ldrh	r3, [r4, #12]
    1760:	4a36      	ldr	r2, [pc, #216]	; (183c <setvbuf+0x14c>)
    1762:	4013      	ands	r3, r2
    1764:	81a3      	strh	r3, [r4, #12]
    1766:	9b00      	ldr	r3, [sp, #0]
    1768:	2b02      	cmp	r3, #2
    176a:	d05a      	beq.n	1822 <setvbuf+0x132>
    176c:	ab03      	add	r3, sp, #12
    176e:	aa02      	add	r2, sp, #8
    1770:	0021      	movs	r1, r4
    1772:	0030      	movs	r0, r6
    1774:	f000 fa38 	bl	1be8 <__swhatbuf_r>
    1778:	89a3      	ldrh	r3, [r4, #12]
    177a:	4318      	orrs	r0, r3
    177c:	81a0      	strh	r0, [r4, #12]
    177e:	2d00      	cmp	r5, #0
    1780:	d124      	bne.n	17cc <setvbuf+0xdc>
    1782:	9d02      	ldr	r5, [sp, #8]
    1784:	0028      	movs	r0, r5
    1786:	f000 fa57 	bl	1c38 <malloc>
    178a:	9501      	str	r5, [sp, #4]
    178c:	1e07      	subs	r7, r0, #0
    178e:	d142      	bne.n	1816 <setvbuf+0x126>
    1790:	9b02      	ldr	r3, [sp, #8]
    1792:	9301      	str	r3, [sp, #4]
    1794:	42ab      	cmp	r3, r5
    1796:	d139      	bne.n	180c <setvbuf+0x11c>
    1798:	2001      	movs	r0, #1
    179a:	4240      	negs	r0, r0
    179c:	2302      	movs	r3, #2
    179e:	89a2      	ldrh	r2, [r4, #12]
    17a0:	4313      	orrs	r3, r2
    17a2:	81a3      	strh	r3, [r4, #12]
    17a4:	2300      	movs	r3, #0
    17a6:	60a3      	str	r3, [r4, #8]
    17a8:	0023      	movs	r3, r4
    17aa:	3347      	adds	r3, #71	; 0x47
    17ac:	6023      	str	r3, [r4, #0]
    17ae:	6123      	str	r3, [r4, #16]
    17b0:	2301      	movs	r3, #1
    17b2:	6163      	str	r3, [r4, #20]
    17b4:	b005      	add	sp, #20
    17b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    17b8:	4b21      	ldr	r3, [pc, #132]	; (1840 <setvbuf+0x150>)
    17ba:	429c      	cmp	r4, r3
    17bc:	d101      	bne.n	17c2 <setvbuf+0xd2>
    17be:	68b4      	ldr	r4, [r6, #8]
    17c0:	e7aa      	b.n	1718 <setvbuf+0x28>
    17c2:	4b20      	ldr	r3, [pc, #128]	; (1844 <setvbuf+0x154>)
    17c4:	429c      	cmp	r4, r3
    17c6:	d1a7      	bne.n	1718 <setvbuf+0x28>
    17c8:	68f4      	ldr	r4, [r6, #12]
    17ca:	e7a5      	b.n	1718 <setvbuf+0x28>
    17cc:	2f00      	cmp	r7, #0
    17ce:	d0d9      	beq.n	1784 <setvbuf+0x94>
    17d0:	69b3      	ldr	r3, [r6, #24]
    17d2:	2b00      	cmp	r3, #0
    17d4:	d102      	bne.n	17dc <setvbuf+0xec>
    17d6:	0030      	movs	r0, r6
    17d8:	f000 f970 	bl	1abc <__sinit>
    17dc:	9b00      	ldr	r3, [sp, #0]
    17de:	2b01      	cmp	r3, #1
    17e0:	d103      	bne.n	17ea <setvbuf+0xfa>
    17e2:	89a3      	ldrh	r3, [r4, #12]
    17e4:	9a00      	ldr	r2, [sp, #0]
    17e6:	431a      	orrs	r2, r3
    17e8:	81a2      	strh	r2, [r4, #12]
    17ea:	2008      	movs	r0, #8
    17ec:	89a3      	ldrh	r3, [r4, #12]
    17ee:	6027      	str	r7, [r4, #0]
    17f0:	6127      	str	r7, [r4, #16]
    17f2:	6165      	str	r5, [r4, #20]
    17f4:	4018      	ands	r0, r3
    17f6:	d018      	beq.n	182a <setvbuf+0x13a>
    17f8:	2001      	movs	r0, #1
    17fa:	4018      	ands	r0, r3
    17fc:	2300      	movs	r3, #0
    17fe:	4298      	cmp	r0, r3
    1800:	d011      	beq.n	1826 <setvbuf+0x136>
    1802:	426d      	negs	r5, r5
    1804:	60a3      	str	r3, [r4, #8]
    1806:	61a5      	str	r5, [r4, #24]
    1808:	0018      	movs	r0, r3
    180a:	e7d3      	b.n	17b4 <setvbuf+0xc4>
    180c:	9801      	ldr	r0, [sp, #4]
    180e:	f000 fa13 	bl	1c38 <malloc>
    1812:	1e07      	subs	r7, r0, #0
    1814:	d0c0      	beq.n	1798 <setvbuf+0xa8>
    1816:	2380      	movs	r3, #128	; 0x80
    1818:	89a2      	ldrh	r2, [r4, #12]
    181a:	9d01      	ldr	r5, [sp, #4]
    181c:	4313      	orrs	r3, r2
    181e:	81a3      	strh	r3, [r4, #12]
    1820:	e7d6      	b.n	17d0 <setvbuf+0xe0>
    1822:	2000      	movs	r0, #0
    1824:	e7ba      	b.n	179c <setvbuf+0xac>
    1826:	60a5      	str	r5, [r4, #8]
    1828:	e7c4      	b.n	17b4 <setvbuf+0xc4>
    182a:	60a0      	str	r0, [r4, #8]
    182c:	e7c2      	b.n	17b4 <setvbuf+0xc4>
    182e:	2001      	movs	r0, #1
    1830:	4240      	negs	r0, r0
    1832:	e7bf      	b.n	17b4 <setvbuf+0xc4>
    1834:	20000018 	.word	0x20000018
    1838:	000027d4 	.word	0x000027d4
    183c:	fffff35c 	.word	0xfffff35c
    1840:	000027f4 	.word	0x000027f4
    1844:	000027b4 	.word	0x000027b4

00001848 <siprintf>:
    1848:	b40e      	push	{r1, r2, r3}
    184a:	b510      	push	{r4, lr}
    184c:	b09d      	sub	sp, #116	; 0x74
    184e:	a902      	add	r1, sp, #8
    1850:	9002      	str	r0, [sp, #8]
    1852:	6108      	str	r0, [r1, #16]
    1854:	480b      	ldr	r0, [pc, #44]	; (1884 <siprintf+0x3c>)
    1856:	2482      	movs	r4, #130	; 0x82
    1858:	6088      	str	r0, [r1, #8]
    185a:	6148      	str	r0, [r1, #20]
    185c:	2001      	movs	r0, #1
    185e:	4240      	negs	r0, r0
    1860:	ab1f      	add	r3, sp, #124	; 0x7c
    1862:	81c8      	strh	r0, [r1, #14]
    1864:	4808      	ldr	r0, [pc, #32]	; (1888 <siprintf+0x40>)
    1866:	cb04      	ldmia	r3!, {r2}
    1868:	00a4      	lsls	r4, r4, #2
    186a:	6800      	ldr	r0, [r0, #0]
    186c:	9301      	str	r3, [sp, #4]
    186e:	818c      	strh	r4, [r1, #12]
    1870:	f000 faf6 	bl	1e60 <_svfiprintf_r>
    1874:	2300      	movs	r3, #0
    1876:	9a02      	ldr	r2, [sp, #8]
    1878:	7013      	strb	r3, [r2, #0]
    187a:	b01d      	add	sp, #116	; 0x74
    187c:	bc10      	pop	{r4}
    187e:	bc08      	pop	{r3}
    1880:	b003      	add	sp, #12
    1882:	4718      	bx	r3
    1884:	7fffffff 	.word	0x7fffffff
    1888:	20000018 	.word	0x20000018

0000188c <strcat>:
    188c:	0002      	movs	r2, r0
    188e:	b510      	push	{r4, lr}
    1890:	7813      	ldrb	r3, [r2, #0]
    1892:	2b00      	cmp	r3, #0
    1894:	d105      	bne.n	18a2 <strcat+0x16>
    1896:	5ccc      	ldrb	r4, [r1, r3]
    1898:	54d4      	strb	r4, [r2, r3]
    189a:	3301      	adds	r3, #1
    189c:	2c00      	cmp	r4, #0
    189e:	d1fa      	bne.n	1896 <strcat+0xa>
    18a0:	bd10      	pop	{r4, pc}
    18a2:	3201      	adds	r2, #1
    18a4:	e7f4      	b.n	1890 <strcat+0x4>

000018a6 <strlen>:
    18a6:	2300      	movs	r3, #0
    18a8:	5cc2      	ldrb	r2, [r0, r3]
    18aa:	3301      	adds	r3, #1
    18ac:	2a00      	cmp	r2, #0
    18ae:	d1fb      	bne.n	18a8 <strlen+0x2>
    18b0:	1e58      	subs	r0, r3, #1
    18b2:	4770      	bx	lr

000018b4 <__ascii_wctomb>:
    18b4:	1e0b      	subs	r3, r1, #0
    18b6:	d004      	beq.n	18c2 <__ascii_wctomb+0xe>
    18b8:	2aff      	cmp	r2, #255	; 0xff
    18ba:	d904      	bls.n	18c6 <__ascii_wctomb+0x12>
    18bc:	238a      	movs	r3, #138	; 0x8a
    18be:	6003      	str	r3, [r0, #0]
    18c0:	3b8b      	subs	r3, #139	; 0x8b
    18c2:	0018      	movs	r0, r3
    18c4:	4770      	bx	lr
    18c6:	700a      	strb	r2, [r1, #0]
    18c8:	2301      	movs	r3, #1
    18ca:	e7fa      	b.n	18c2 <__ascii_wctomb+0xe>

000018cc <__sflush_r>:
    18cc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    18ce:	898a      	ldrh	r2, [r1, #12]
    18d0:	0005      	movs	r5, r0
    18d2:	000c      	movs	r4, r1
    18d4:	0713      	lsls	r3, r2, #28
    18d6:	d460      	bmi.n	199a <__sflush_r+0xce>
    18d8:	684b      	ldr	r3, [r1, #4]
    18da:	2b00      	cmp	r3, #0
    18dc:	dc04      	bgt.n	18e8 <__sflush_r+0x1c>
    18de:	6c0b      	ldr	r3, [r1, #64]	; 0x40
    18e0:	2b00      	cmp	r3, #0
    18e2:	dc01      	bgt.n	18e8 <__sflush_r+0x1c>
    18e4:	2000      	movs	r0, #0
    18e6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    18e8:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    18ea:	2f00      	cmp	r7, #0
    18ec:	d0fa      	beq.n	18e4 <__sflush_r+0x18>
    18ee:	2300      	movs	r3, #0
    18f0:	682e      	ldr	r6, [r5, #0]
    18f2:	602b      	str	r3, [r5, #0]
    18f4:	2380      	movs	r3, #128	; 0x80
    18f6:	015b      	lsls	r3, r3, #5
    18f8:	401a      	ands	r2, r3
    18fa:	d034      	beq.n	1966 <__sflush_r+0x9a>
    18fc:	6d60      	ldr	r0, [r4, #84]	; 0x54
    18fe:	89a3      	ldrh	r3, [r4, #12]
    1900:	075b      	lsls	r3, r3, #29
    1902:	d506      	bpl.n	1912 <__sflush_r+0x46>
    1904:	6863      	ldr	r3, [r4, #4]
    1906:	1ac0      	subs	r0, r0, r3
    1908:	6b63      	ldr	r3, [r4, #52]	; 0x34
    190a:	2b00      	cmp	r3, #0
    190c:	d001      	beq.n	1912 <__sflush_r+0x46>
    190e:	6c23      	ldr	r3, [r4, #64]	; 0x40
    1910:	1ac0      	subs	r0, r0, r3
    1912:	0002      	movs	r2, r0
    1914:	6a21      	ldr	r1, [r4, #32]
    1916:	2300      	movs	r3, #0
    1918:	0028      	movs	r0, r5
    191a:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    191c:	47b8      	blx	r7
    191e:	89a1      	ldrh	r1, [r4, #12]
    1920:	1c43      	adds	r3, r0, #1
    1922:	d106      	bne.n	1932 <__sflush_r+0x66>
    1924:	682b      	ldr	r3, [r5, #0]
    1926:	2b1d      	cmp	r3, #29
    1928:	d831      	bhi.n	198e <__sflush_r+0xc2>
    192a:	4a2c      	ldr	r2, [pc, #176]	; (19dc <__sflush_r+0x110>)
    192c:	40da      	lsrs	r2, r3
    192e:	07d3      	lsls	r3, r2, #31
    1930:	d52d      	bpl.n	198e <__sflush_r+0xc2>
    1932:	2300      	movs	r3, #0
    1934:	6063      	str	r3, [r4, #4]
    1936:	6923      	ldr	r3, [r4, #16]
    1938:	6023      	str	r3, [r4, #0]
    193a:	04cb      	lsls	r3, r1, #19
    193c:	d505      	bpl.n	194a <__sflush_r+0x7e>
    193e:	1c43      	adds	r3, r0, #1
    1940:	d102      	bne.n	1948 <__sflush_r+0x7c>
    1942:	682b      	ldr	r3, [r5, #0]
    1944:	2b00      	cmp	r3, #0
    1946:	d100      	bne.n	194a <__sflush_r+0x7e>
    1948:	6560      	str	r0, [r4, #84]	; 0x54
    194a:	6b61      	ldr	r1, [r4, #52]	; 0x34
    194c:	602e      	str	r6, [r5, #0]
    194e:	2900      	cmp	r1, #0
    1950:	d0c8      	beq.n	18e4 <__sflush_r+0x18>
    1952:	0023      	movs	r3, r4
    1954:	3344      	adds	r3, #68	; 0x44
    1956:	4299      	cmp	r1, r3
    1958:	d002      	beq.n	1960 <__sflush_r+0x94>
    195a:	0028      	movs	r0, r5
    195c:	f000 f976 	bl	1c4c <_free_r>
    1960:	2000      	movs	r0, #0
    1962:	6360      	str	r0, [r4, #52]	; 0x34
    1964:	e7bf      	b.n	18e6 <__sflush_r+0x1a>
    1966:	2301      	movs	r3, #1
    1968:	6a21      	ldr	r1, [r4, #32]
    196a:	0028      	movs	r0, r5
    196c:	47b8      	blx	r7
    196e:	1c43      	adds	r3, r0, #1
    1970:	d1c5      	bne.n	18fe <__sflush_r+0x32>
    1972:	682b      	ldr	r3, [r5, #0]
    1974:	2b00      	cmp	r3, #0
    1976:	d0c2      	beq.n	18fe <__sflush_r+0x32>
    1978:	2b1d      	cmp	r3, #29
    197a:	d001      	beq.n	1980 <__sflush_r+0xb4>
    197c:	2b16      	cmp	r3, #22
    197e:	d101      	bne.n	1984 <__sflush_r+0xb8>
    1980:	602e      	str	r6, [r5, #0]
    1982:	e7af      	b.n	18e4 <__sflush_r+0x18>
    1984:	2340      	movs	r3, #64	; 0x40
    1986:	89a2      	ldrh	r2, [r4, #12]
    1988:	4313      	orrs	r3, r2
    198a:	81a3      	strh	r3, [r4, #12]
    198c:	e7ab      	b.n	18e6 <__sflush_r+0x1a>
    198e:	2340      	movs	r3, #64	; 0x40
    1990:	430b      	orrs	r3, r1
    1992:	2001      	movs	r0, #1
    1994:	81a3      	strh	r3, [r4, #12]
    1996:	4240      	negs	r0, r0
    1998:	e7a5      	b.n	18e6 <__sflush_r+0x1a>
    199a:	690f      	ldr	r7, [r1, #16]
    199c:	2f00      	cmp	r7, #0
    199e:	d0a1      	beq.n	18e4 <__sflush_r+0x18>
    19a0:	680b      	ldr	r3, [r1, #0]
    19a2:	600f      	str	r7, [r1, #0]
    19a4:	1bdb      	subs	r3, r3, r7
    19a6:	9301      	str	r3, [sp, #4]
    19a8:	2300      	movs	r3, #0
    19aa:	0792      	lsls	r2, r2, #30
    19ac:	d100      	bne.n	19b0 <__sflush_r+0xe4>
    19ae:	694b      	ldr	r3, [r1, #20]
    19b0:	60a3      	str	r3, [r4, #8]
    19b2:	9b01      	ldr	r3, [sp, #4]
    19b4:	2b00      	cmp	r3, #0
    19b6:	dc00      	bgt.n	19ba <__sflush_r+0xee>
    19b8:	e794      	b.n	18e4 <__sflush_r+0x18>
    19ba:	9b01      	ldr	r3, [sp, #4]
    19bc:	003a      	movs	r2, r7
    19be:	6a21      	ldr	r1, [r4, #32]
    19c0:	0028      	movs	r0, r5
    19c2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    19c4:	47b0      	blx	r6
    19c6:	2800      	cmp	r0, #0
    19c8:	dc03      	bgt.n	19d2 <__sflush_r+0x106>
    19ca:	2340      	movs	r3, #64	; 0x40
    19cc:	89a2      	ldrh	r2, [r4, #12]
    19ce:	4313      	orrs	r3, r2
    19d0:	e7df      	b.n	1992 <__sflush_r+0xc6>
    19d2:	9b01      	ldr	r3, [sp, #4]
    19d4:	183f      	adds	r7, r7, r0
    19d6:	1a1b      	subs	r3, r3, r0
    19d8:	9301      	str	r3, [sp, #4]
    19da:	e7ea      	b.n	19b2 <__sflush_r+0xe6>
    19dc:	20400001 	.word	0x20400001

000019e0 <_fflush_r>:
    19e0:	690b      	ldr	r3, [r1, #16]
    19e2:	b570      	push	{r4, r5, r6, lr}
    19e4:	0005      	movs	r5, r0
    19e6:	000c      	movs	r4, r1
    19e8:	2b00      	cmp	r3, #0
    19ea:	d101      	bne.n	19f0 <_fflush_r+0x10>
    19ec:	2000      	movs	r0, #0
    19ee:	bd70      	pop	{r4, r5, r6, pc}
    19f0:	2800      	cmp	r0, #0
    19f2:	d004      	beq.n	19fe <_fflush_r+0x1e>
    19f4:	6983      	ldr	r3, [r0, #24]
    19f6:	2b00      	cmp	r3, #0
    19f8:	d101      	bne.n	19fe <_fflush_r+0x1e>
    19fa:	f000 f85f 	bl	1abc <__sinit>
    19fe:	4b0b      	ldr	r3, [pc, #44]	; (1a2c <_fflush_r+0x4c>)
    1a00:	429c      	cmp	r4, r3
    1a02:	d109      	bne.n	1a18 <_fflush_r+0x38>
    1a04:	686c      	ldr	r4, [r5, #4]
    1a06:	220c      	movs	r2, #12
    1a08:	5ea3      	ldrsh	r3, [r4, r2]
    1a0a:	2b00      	cmp	r3, #0
    1a0c:	d0ee      	beq.n	19ec <_fflush_r+0xc>
    1a0e:	0021      	movs	r1, r4
    1a10:	0028      	movs	r0, r5
    1a12:	f7ff ff5b 	bl	18cc <__sflush_r>
    1a16:	e7ea      	b.n	19ee <_fflush_r+0xe>
    1a18:	4b05      	ldr	r3, [pc, #20]	; (1a30 <_fflush_r+0x50>)
    1a1a:	429c      	cmp	r4, r3
    1a1c:	d101      	bne.n	1a22 <_fflush_r+0x42>
    1a1e:	68ac      	ldr	r4, [r5, #8]
    1a20:	e7f1      	b.n	1a06 <_fflush_r+0x26>
    1a22:	4b04      	ldr	r3, [pc, #16]	; (1a34 <_fflush_r+0x54>)
    1a24:	429c      	cmp	r4, r3
    1a26:	d1ee      	bne.n	1a06 <_fflush_r+0x26>
    1a28:	68ec      	ldr	r4, [r5, #12]
    1a2a:	e7ec      	b.n	1a06 <_fflush_r+0x26>
    1a2c:	000027d4 	.word	0x000027d4
    1a30:	000027f4 	.word	0x000027f4
    1a34:	000027b4 	.word	0x000027b4

00001a38 <_cleanup_r>:
    1a38:	b510      	push	{r4, lr}
    1a3a:	4902      	ldr	r1, [pc, #8]	; (1a44 <_cleanup_r+0xc>)
    1a3c:	f000 f8b2 	bl	1ba4 <_fwalk_reent>
    1a40:	bd10      	pop	{r4, pc}
    1a42:	46c0      	nop			; (mov r8, r8)
    1a44:	000019e1 	.word	0x000019e1

00001a48 <std.isra.0>:
    1a48:	2300      	movs	r3, #0
    1a4a:	b510      	push	{r4, lr}
    1a4c:	0004      	movs	r4, r0
    1a4e:	6003      	str	r3, [r0, #0]
    1a50:	6043      	str	r3, [r0, #4]
    1a52:	6083      	str	r3, [r0, #8]
    1a54:	8181      	strh	r1, [r0, #12]
    1a56:	6643      	str	r3, [r0, #100]	; 0x64
    1a58:	81c2      	strh	r2, [r0, #14]
    1a5a:	6103      	str	r3, [r0, #16]
    1a5c:	6143      	str	r3, [r0, #20]
    1a5e:	6183      	str	r3, [r0, #24]
    1a60:	0019      	movs	r1, r3
    1a62:	2208      	movs	r2, #8
    1a64:	305c      	adds	r0, #92	; 0x5c
    1a66:	f7ff fe32 	bl	16ce <memset>
    1a6a:	4b05      	ldr	r3, [pc, #20]	; (1a80 <std.isra.0+0x38>)
    1a6c:	6224      	str	r4, [r4, #32]
    1a6e:	6263      	str	r3, [r4, #36]	; 0x24
    1a70:	4b04      	ldr	r3, [pc, #16]	; (1a84 <std.isra.0+0x3c>)
    1a72:	62a3      	str	r3, [r4, #40]	; 0x28
    1a74:	4b04      	ldr	r3, [pc, #16]	; (1a88 <std.isra.0+0x40>)
    1a76:	62e3      	str	r3, [r4, #44]	; 0x2c
    1a78:	4b04      	ldr	r3, [pc, #16]	; (1a8c <std.isra.0+0x44>)
    1a7a:	6323      	str	r3, [r4, #48]	; 0x30
    1a7c:	bd10      	pop	{r4, pc}
    1a7e:	46c0      	nop			; (mov r8, r8)
    1a80:	0000239d 	.word	0x0000239d
    1a84:	000023c5 	.word	0x000023c5
    1a88:	000023fd 	.word	0x000023fd
    1a8c:	00002429 	.word	0x00002429

00001a90 <__sfmoreglue>:
    1a90:	b570      	push	{r4, r5, r6, lr}
    1a92:	2568      	movs	r5, #104	; 0x68
    1a94:	1e4a      	subs	r2, r1, #1
    1a96:	4355      	muls	r5, r2
    1a98:	000e      	movs	r6, r1
    1a9a:	0029      	movs	r1, r5
    1a9c:	3174      	adds	r1, #116	; 0x74
    1a9e:	f000 f91f 	bl	1ce0 <_malloc_r>
    1aa2:	1e04      	subs	r4, r0, #0
    1aa4:	d008      	beq.n	1ab8 <__sfmoreglue+0x28>
    1aa6:	2100      	movs	r1, #0
    1aa8:	002a      	movs	r2, r5
    1aaa:	6001      	str	r1, [r0, #0]
    1aac:	6046      	str	r6, [r0, #4]
    1aae:	300c      	adds	r0, #12
    1ab0:	60a0      	str	r0, [r4, #8]
    1ab2:	3268      	adds	r2, #104	; 0x68
    1ab4:	f7ff fe0b 	bl	16ce <memset>
    1ab8:	0020      	movs	r0, r4
    1aba:	bd70      	pop	{r4, r5, r6, pc}

00001abc <__sinit>:
    1abc:	6983      	ldr	r3, [r0, #24]
    1abe:	b513      	push	{r0, r1, r4, lr}
    1ac0:	0004      	movs	r4, r0
    1ac2:	2b00      	cmp	r3, #0
    1ac4:	d128      	bne.n	1b18 <__sinit+0x5c>
    1ac6:	6483      	str	r3, [r0, #72]	; 0x48
    1ac8:	64c3      	str	r3, [r0, #76]	; 0x4c
    1aca:	6503      	str	r3, [r0, #80]	; 0x50
    1acc:	4b13      	ldr	r3, [pc, #76]	; (1b1c <__sinit+0x60>)
    1ace:	4a14      	ldr	r2, [pc, #80]	; (1b20 <__sinit+0x64>)
    1ad0:	681b      	ldr	r3, [r3, #0]
    1ad2:	6282      	str	r2, [r0, #40]	; 0x28
    1ad4:	9301      	str	r3, [sp, #4]
    1ad6:	4298      	cmp	r0, r3
    1ad8:	d101      	bne.n	1ade <__sinit+0x22>
    1ada:	2301      	movs	r3, #1
    1adc:	6183      	str	r3, [r0, #24]
    1ade:	0020      	movs	r0, r4
    1ae0:	f000 f820 	bl	1b24 <__sfp>
    1ae4:	6060      	str	r0, [r4, #4]
    1ae6:	0020      	movs	r0, r4
    1ae8:	f000 f81c 	bl	1b24 <__sfp>
    1aec:	60a0      	str	r0, [r4, #8]
    1aee:	0020      	movs	r0, r4
    1af0:	f000 f818 	bl	1b24 <__sfp>
    1af4:	2200      	movs	r2, #0
    1af6:	60e0      	str	r0, [r4, #12]
    1af8:	2104      	movs	r1, #4
    1afa:	6860      	ldr	r0, [r4, #4]
    1afc:	f7ff ffa4 	bl	1a48 <std.isra.0>
    1b00:	2201      	movs	r2, #1
    1b02:	2109      	movs	r1, #9
    1b04:	68a0      	ldr	r0, [r4, #8]
    1b06:	f7ff ff9f 	bl	1a48 <std.isra.0>
    1b0a:	2202      	movs	r2, #2
    1b0c:	2112      	movs	r1, #18
    1b0e:	68e0      	ldr	r0, [r4, #12]
    1b10:	f7ff ff9a 	bl	1a48 <std.isra.0>
    1b14:	2301      	movs	r3, #1
    1b16:	61a3      	str	r3, [r4, #24]
    1b18:	bd13      	pop	{r0, r1, r4, pc}
    1b1a:	46c0      	nop			; (mov r8, r8)
    1b1c:	000026a4 	.word	0x000026a4
    1b20:	00001a39 	.word	0x00001a39

00001b24 <__sfp>:
    1b24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1b26:	4b1e      	ldr	r3, [pc, #120]	; (1ba0 <__sfp+0x7c>)
    1b28:	0007      	movs	r7, r0
    1b2a:	681e      	ldr	r6, [r3, #0]
    1b2c:	69b3      	ldr	r3, [r6, #24]
    1b2e:	2b00      	cmp	r3, #0
    1b30:	d102      	bne.n	1b38 <__sfp+0x14>
    1b32:	0030      	movs	r0, r6
    1b34:	f7ff ffc2 	bl	1abc <__sinit>
    1b38:	3648      	adds	r6, #72	; 0x48
    1b3a:	68b4      	ldr	r4, [r6, #8]
    1b3c:	6873      	ldr	r3, [r6, #4]
    1b3e:	3b01      	subs	r3, #1
    1b40:	d504      	bpl.n	1b4c <__sfp+0x28>
    1b42:	6833      	ldr	r3, [r6, #0]
    1b44:	2b00      	cmp	r3, #0
    1b46:	d007      	beq.n	1b58 <__sfp+0x34>
    1b48:	6836      	ldr	r6, [r6, #0]
    1b4a:	e7f6      	b.n	1b3a <__sfp+0x16>
    1b4c:	220c      	movs	r2, #12
    1b4e:	5ea5      	ldrsh	r5, [r4, r2]
    1b50:	2d00      	cmp	r5, #0
    1b52:	d00d      	beq.n	1b70 <__sfp+0x4c>
    1b54:	3468      	adds	r4, #104	; 0x68
    1b56:	e7f2      	b.n	1b3e <__sfp+0x1a>
    1b58:	2104      	movs	r1, #4
    1b5a:	0038      	movs	r0, r7
    1b5c:	f7ff ff98 	bl	1a90 <__sfmoreglue>
    1b60:	6030      	str	r0, [r6, #0]
    1b62:	2800      	cmp	r0, #0
    1b64:	d1f0      	bne.n	1b48 <__sfp+0x24>
    1b66:	230c      	movs	r3, #12
    1b68:	0004      	movs	r4, r0
    1b6a:	603b      	str	r3, [r7, #0]
    1b6c:	0020      	movs	r0, r4
    1b6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1b70:	2301      	movs	r3, #1
    1b72:	0020      	movs	r0, r4
    1b74:	425b      	negs	r3, r3
    1b76:	81e3      	strh	r3, [r4, #14]
    1b78:	3302      	adds	r3, #2
    1b7a:	81a3      	strh	r3, [r4, #12]
    1b7c:	6665      	str	r5, [r4, #100]	; 0x64
    1b7e:	6025      	str	r5, [r4, #0]
    1b80:	60a5      	str	r5, [r4, #8]
    1b82:	6065      	str	r5, [r4, #4]
    1b84:	6125      	str	r5, [r4, #16]
    1b86:	6165      	str	r5, [r4, #20]
    1b88:	61a5      	str	r5, [r4, #24]
    1b8a:	2208      	movs	r2, #8
    1b8c:	0029      	movs	r1, r5
    1b8e:	305c      	adds	r0, #92	; 0x5c
    1b90:	f7ff fd9d 	bl	16ce <memset>
    1b94:	6365      	str	r5, [r4, #52]	; 0x34
    1b96:	63a5      	str	r5, [r4, #56]	; 0x38
    1b98:	64a5      	str	r5, [r4, #72]	; 0x48
    1b9a:	64e5      	str	r5, [r4, #76]	; 0x4c
    1b9c:	e7e6      	b.n	1b6c <__sfp+0x48>
    1b9e:	46c0      	nop			; (mov r8, r8)
    1ba0:	000026a4 	.word	0x000026a4

00001ba4 <_fwalk_reent>:
    1ba4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    1ba6:	0004      	movs	r4, r0
    1ba8:	0007      	movs	r7, r0
    1baa:	2600      	movs	r6, #0
    1bac:	9101      	str	r1, [sp, #4]
    1bae:	3448      	adds	r4, #72	; 0x48
    1bb0:	2c00      	cmp	r4, #0
    1bb2:	d101      	bne.n	1bb8 <_fwalk_reent+0x14>
    1bb4:	0030      	movs	r0, r6
    1bb6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    1bb8:	6863      	ldr	r3, [r4, #4]
    1bba:	68a5      	ldr	r5, [r4, #8]
    1bbc:	9300      	str	r3, [sp, #0]
    1bbe:	9b00      	ldr	r3, [sp, #0]
    1bc0:	3b01      	subs	r3, #1
    1bc2:	9300      	str	r3, [sp, #0]
    1bc4:	d501      	bpl.n	1bca <_fwalk_reent+0x26>
    1bc6:	6824      	ldr	r4, [r4, #0]
    1bc8:	e7f2      	b.n	1bb0 <_fwalk_reent+0xc>
    1bca:	89ab      	ldrh	r3, [r5, #12]
    1bcc:	2b01      	cmp	r3, #1
    1bce:	d908      	bls.n	1be2 <_fwalk_reent+0x3e>
    1bd0:	220e      	movs	r2, #14
    1bd2:	5eab      	ldrsh	r3, [r5, r2]
    1bd4:	3301      	adds	r3, #1
    1bd6:	d004      	beq.n	1be2 <_fwalk_reent+0x3e>
    1bd8:	0029      	movs	r1, r5
    1bda:	0038      	movs	r0, r7
    1bdc:	9b01      	ldr	r3, [sp, #4]
    1bde:	4798      	blx	r3
    1be0:	4306      	orrs	r6, r0
    1be2:	3568      	adds	r5, #104	; 0x68
    1be4:	e7eb      	b.n	1bbe <_fwalk_reent+0x1a>
	...

00001be8 <__swhatbuf_r>:
    1be8:	b570      	push	{r4, r5, r6, lr}
    1bea:	000e      	movs	r6, r1
    1bec:	001d      	movs	r5, r3
    1bee:	230e      	movs	r3, #14
    1bf0:	5ec9      	ldrsh	r1, [r1, r3]
    1bf2:	b090      	sub	sp, #64	; 0x40
    1bf4:	0014      	movs	r4, r2
    1bf6:	2900      	cmp	r1, #0
    1bf8:	da07      	bge.n	1c0a <__swhatbuf_r+0x22>
    1bfa:	2300      	movs	r3, #0
    1bfc:	602b      	str	r3, [r5, #0]
    1bfe:	89b3      	ldrh	r3, [r6, #12]
    1c00:	061b      	lsls	r3, r3, #24
    1c02:	d411      	bmi.n	1c28 <__swhatbuf_r+0x40>
    1c04:	2380      	movs	r3, #128	; 0x80
    1c06:	00db      	lsls	r3, r3, #3
    1c08:	e00f      	b.n	1c2a <__swhatbuf_r+0x42>
    1c0a:	aa01      	add	r2, sp, #4
    1c0c:	f000 fc38 	bl	2480 <_fstat_r>
    1c10:	2800      	cmp	r0, #0
    1c12:	dbf2      	blt.n	1bfa <__swhatbuf_r+0x12>
    1c14:	22f0      	movs	r2, #240	; 0xf0
    1c16:	9b02      	ldr	r3, [sp, #8]
    1c18:	0212      	lsls	r2, r2, #8
    1c1a:	4013      	ands	r3, r2
    1c1c:	4a05      	ldr	r2, [pc, #20]	; (1c34 <__swhatbuf_r+0x4c>)
    1c1e:	189b      	adds	r3, r3, r2
    1c20:	425a      	negs	r2, r3
    1c22:	4153      	adcs	r3, r2
    1c24:	602b      	str	r3, [r5, #0]
    1c26:	e7ed      	b.n	1c04 <__swhatbuf_r+0x1c>
    1c28:	2340      	movs	r3, #64	; 0x40
    1c2a:	2000      	movs	r0, #0
    1c2c:	6023      	str	r3, [r4, #0]
    1c2e:	b010      	add	sp, #64	; 0x40
    1c30:	bd70      	pop	{r4, r5, r6, pc}
    1c32:	46c0      	nop			; (mov r8, r8)
    1c34:	ffffe000 	.word	0xffffe000

00001c38 <malloc>:
    1c38:	b510      	push	{r4, lr}
    1c3a:	4b03      	ldr	r3, [pc, #12]	; (1c48 <malloc+0x10>)
    1c3c:	0001      	movs	r1, r0
    1c3e:	6818      	ldr	r0, [r3, #0]
    1c40:	f000 f84e 	bl	1ce0 <_malloc_r>
    1c44:	bd10      	pop	{r4, pc}
    1c46:	46c0      	nop			; (mov r8, r8)
    1c48:	20000018 	.word	0x20000018

00001c4c <_free_r>:
    1c4c:	b570      	push	{r4, r5, r6, lr}
    1c4e:	0005      	movs	r5, r0
    1c50:	2900      	cmp	r1, #0
    1c52:	d010      	beq.n	1c76 <_free_r+0x2a>
    1c54:	1f0c      	subs	r4, r1, #4
    1c56:	6823      	ldr	r3, [r4, #0]
    1c58:	2b00      	cmp	r3, #0
    1c5a:	da00      	bge.n	1c5e <_free_r+0x12>
    1c5c:	18e4      	adds	r4, r4, r3
    1c5e:	0028      	movs	r0, r5
    1c60:	f000 fc51 	bl	2506 <__malloc_lock>
    1c64:	4a1d      	ldr	r2, [pc, #116]	; (1cdc <_free_r+0x90>)
    1c66:	6813      	ldr	r3, [r2, #0]
    1c68:	2b00      	cmp	r3, #0
    1c6a:	d105      	bne.n	1c78 <_free_r+0x2c>
    1c6c:	6063      	str	r3, [r4, #4]
    1c6e:	6014      	str	r4, [r2, #0]
    1c70:	0028      	movs	r0, r5
    1c72:	f000 fc49 	bl	2508 <__malloc_unlock>
    1c76:	bd70      	pop	{r4, r5, r6, pc}
    1c78:	42a3      	cmp	r3, r4
    1c7a:	d909      	bls.n	1c90 <_free_r+0x44>
    1c7c:	6821      	ldr	r1, [r4, #0]
    1c7e:	1860      	adds	r0, r4, r1
    1c80:	4283      	cmp	r3, r0
    1c82:	d1f3      	bne.n	1c6c <_free_r+0x20>
    1c84:	6818      	ldr	r0, [r3, #0]
    1c86:	685b      	ldr	r3, [r3, #4]
    1c88:	1841      	adds	r1, r0, r1
    1c8a:	6021      	str	r1, [r4, #0]
    1c8c:	e7ee      	b.n	1c6c <_free_r+0x20>
    1c8e:	0013      	movs	r3, r2
    1c90:	685a      	ldr	r2, [r3, #4]
    1c92:	2a00      	cmp	r2, #0
    1c94:	d001      	beq.n	1c9a <_free_r+0x4e>
    1c96:	42a2      	cmp	r2, r4
    1c98:	d9f9      	bls.n	1c8e <_free_r+0x42>
    1c9a:	6819      	ldr	r1, [r3, #0]
    1c9c:	1858      	adds	r0, r3, r1
    1c9e:	42a0      	cmp	r0, r4
    1ca0:	d10b      	bne.n	1cba <_free_r+0x6e>
    1ca2:	6820      	ldr	r0, [r4, #0]
    1ca4:	1809      	adds	r1, r1, r0
    1ca6:	1858      	adds	r0, r3, r1
    1ca8:	6019      	str	r1, [r3, #0]
    1caa:	4282      	cmp	r2, r0
    1cac:	d1e0      	bne.n	1c70 <_free_r+0x24>
    1cae:	6810      	ldr	r0, [r2, #0]
    1cb0:	6852      	ldr	r2, [r2, #4]
    1cb2:	1841      	adds	r1, r0, r1
    1cb4:	6019      	str	r1, [r3, #0]
    1cb6:	605a      	str	r2, [r3, #4]
    1cb8:	e7da      	b.n	1c70 <_free_r+0x24>
    1cba:	42a0      	cmp	r0, r4
    1cbc:	d902      	bls.n	1cc4 <_free_r+0x78>
    1cbe:	230c      	movs	r3, #12
    1cc0:	602b      	str	r3, [r5, #0]
    1cc2:	e7d5      	b.n	1c70 <_free_r+0x24>
    1cc4:	6821      	ldr	r1, [r4, #0]
    1cc6:	1860      	adds	r0, r4, r1
    1cc8:	4282      	cmp	r2, r0
    1cca:	d103      	bne.n	1cd4 <_free_r+0x88>
    1ccc:	6810      	ldr	r0, [r2, #0]
    1cce:	6852      	ldr	r2, [r2, #4]
    1cd0:	1841      	adds	r1, r0, r1
    1cd2:	6021      	str	r1, [r4, #0]
    1cd4:	6062      	str	r2, [r4, #4]
    1cd6:	605c      	str	r4, [r3, #4]
    1cd8:	e7ca      	b.n	1c70 <_free_r+0x24>
    1cda:	46c0      	nop			; (mov r8, r8)
    1cdc:	200002ec 	.word	0x200002ec

00001ce0 <_malloc_r>:
    1ce0:	2303      	movs	r3, #3
    1ce2:	b570      	push	{r4, r5, r6, lr}
    1ce4:	1ccd      	adds	r5, r1, #3
    1ce6:	439d      	bics	r5, r3
    1ce8:	3508      	adds	r5, #8
    1cea:	0006      	movs	r6, r0
    1cec:	2d0c      	cmp	r5, #12
    1cee:	d21e      	bcs.n	1d2e <_malloc_r+0x4e>
    1cf0:	250c      	movs	r5, #12
    1cf2:	42a9      	cmp	r1, r5
    1cf4:	d81d      	bhi.n	1d32 <_malloc_r+0x52>
    1cf6:	0030      	movs	r0, r6
    1cf8:	f000 fc05 	bl	2506 <__malloc_lock>
    1cfc:	4a25      	ldr	r2, [pc, #148]	; (1d94 <_malloc_r+0xb4>)
    1cfe:	6814      	ldr	r4, [r2, #0]
    1d00:	0021      	movs	r1, r4
    1d02:	2900      	cmp	r1, #0
    1d04:	d119      	bne.n	1d3a <_malloc_r+0x5a>
    1d06:	4c24      	ldr	r4, [pc, #144]	; (1d98 <_malloc_r+0xb8>)
    1d08:	6823      	ldr	r3, [r4, #0]
    1d0a:	2b00      	cmp	r3, #0
    1d0c:	d103      	bne.n	1d16 <_malloc_r+0x36>
    1d0e:	0030      	movs	r0, r6
    1d10:	f000 fb32 	bl	2378 <_sbrk_r>
    1d14:	6020      	str	r0, [r4, #0]
    1d16:	0029      	movs	r1, r5
    1d18:	0030      	movs	r0, r6
    1d1a:	f000 fb2d 	bl	2378 <_sbrk_r>
    1d1e:	1c43      	adds	r3, r0, #1
    1d20:	d12c      	bne.n	1d7c <_malloc_r+0x9c>
    1d22:	230c      	movs	r3, #12
    1d24:	0030      	movs	r0, r6
    1d26:	6033      	str	r3, [r6, #0]
    1d28:	f000 fbee 	bl	2508 <__malloc_unlock>
    1d2c:	e003      	b.n	1d36 <_malloc_r+0x56>
    1d2e:	2d00      	cmp	r5, #0
    1d30:	dadf      	bge.n	1cf2 <_malloc_r+0x12>
    1d32:	230c      	movs	r3, #12
    1d34:	6033      	str	r3, [r6, #0]
    1d36:	2000      	movs	r0, #0
    1d38:	bd70      	pop	{r4, r5, r6, pc}
    1d3a:	680b      	ldr	r3, [r1, #0]
    1d3c:	1b5b      	subs	r3, r3, r5
    1d3e:	d41a      	bmi.n	1d76 <_malloc_r+0x96>
    1d40:	2b0b      	cmp	r3, #11
    1d42:	d903      	bls.n	1d4c <_malloc_r+0x6c>
    1d44:	600b      	str	r3, [r1, #0]
    1d46:	18cc      	adds	r4, r1, r3
    1d48:	6025      	str	r5, [r4, #0]
    1d4a:	e003      	b.n	1d54 <_malloc_r+0x74>
    1d4c:	428c      	cmp	r4, r1
    1d4e:	d10e      	bne.n	1d6e <_malloc_r+0x8e>
    1d50:	6863      	ldr	r3, [r4, #4]
    1d52:	6013      	str	r3, [r2, #0]
    1d54:	0030      	movs	r0, r6
    1d56:	f000 fbd7 	bl	2508 <__malloc_unlock>
    1d5a:	0020      	movs	r0, r4
    1d5c:	2207      	movs	r2, #7
    1d5e:	300b      	adds	r0, #11
    1d60:	1d23      	adds	r3, r4, #4
    1d62:	4390      	bics	r0, r2
    1d64:	1ac3      	subs	r3, r0, r3
    1d66:	d0e7      	beq.n	1d38 <_malloc_r+0x58>
    1d68:	425a      	negs	r2, r3
    1d6a:	50e2      	str	r2, [r4, r3]
    1d6c:	e7e4      	b.n	1d38 <_malloc_r+0x58>
    1d6e:	684b      	ldr	r3, [r1, #4]
    1d70:	6063      	str	r3, [r4, #4]
    1d72:	000c      	movs	r4, r1
    1d74:	e7ee      	b.n	1d54 <_malloc_r+0x74>
    1d76:	000c      	movs	r4, r1
    1d78:	6849      	ldr	r1, [r1, #4]
    1d7a:	e7c2      	b.n	1d02 <_malloc_r+0x22>
    1d7c:	2303      	movs	r3, #3
    1d7e:	1cc4      	adds	r4, r0, #3
    1d80:	439c      	bics	r4, r3
    1d82:	42a0      	cmp	r0, r4
    1d84:	d0e0      	beq.n	1d48 <_malloc_r+0x68>
    1d86:	1a21      	subs	r1, r4, r0
    1d88:	0030      	movs	r0, r6
    1d8a:	f000 faf5 	bl	2378 <_sbrk_r>
    1d8e:	1c43      	adds	r3, r0, #1
    1d90:	d1da      	bne.n	1d48 <_malloc_r+0x68>
    1d92:	e7c6      	b.n	1d22 <_malloc_r+0x42>
    1d94:	200002ec 	.word	0x200002ec
    1d98:	200002f0 	.word	0x200002f0

00001d9c <__ssputs_r>:
    1d9c:	b5f0      	push	{r4, r5, r6, r7, lr}
    1d9e:	688e      	ldr	r6, [r1, #8]
    1da0:	b085      	sub	sp, #20
    1da2:	0007      	movs	r7, r0
    1da4:	000c      	movs	r4, r1
    1da6:	9203      	str	r2, [sp, #12]
    1da8:	9301      	str	r3, [sp, #4]
    1daa:	429e      	cmp	r6, r3
    1dac:	d839      	bhi.n	1e22 <__ssputs_r+0x86>
    1dae:	2390      	movs	r3, #144	; 0x90
    1db0:	898a      	ldrh	r2, [r1, #12]
    1db2:	00db      	lsls	r3, r3, #3
    1db4:	421a      	tst	r2, r3
    1db6:	d034      	beq.n	1e22 <__ssputs_r+0x86>
    1db8:	2503      	movs	r5, #3
    1dba:	6909      	ldr	r1, [r1, #16]
    1dbc:	6823      	ldr	r3, [r4, #0]
    1dbe:	1a5b      	subs	r3, r3, r1
    1dc0:	9302      	str	r3, [sp, #8]
    1dc2:	6963      	ldr	r3, [r4, #20]
    1dc4:	9802      	ldr	r0, [sp, #8]
    1dc6:	435d      	muls	r5, r3
    1dc8:	0feb      	lsrs	r3, r5, #31
    1dca:	195d      	adds	r5, r3, r5
    1dcc:	9b01      	ldr	r3, [sp, #4]
    1dce:	106d      	asrs	r5, r5, #1
    1dd0:	3301      	adds	r3, #1
    1dd2:	181b      	adds	r3, r3, r0
    1dd4:	42ab      	cmp	r3, r5
    1dd6:	d900      	bls.n	1dda <__ssputs_r+0x3e>
    1dd8:	001d      	movs	r5, r3
    1dda:	0553      	lsls	r3, r2, #21
    1ddc:	d532      	bpl.n	1e44 <__ssputs_r+0xa8>
    1dde:	0029      	movs	r1, r5
    1de0:	0038      	movs	r0, r7
    1de2:	f7ff ff7d 	bl	1ce0 <_malloc_r>
    1de6:	1e06      	subs	r6, r0, #0
    1de8:	d109      	bne.n	1dfe <__ssputs_r+0x62>
    1dea:	230c      	movs	r3, #12
    1dec:	603b      	str	r3, [r7, #0]
    1dee:	2340      	movs	r3, #64	; 0x40
    1df0:	2001      	movs	r0, #1
    1df2:	89a2      	ldrh	r2, [r4, #12]
    1df4:	4240      	negs	r0, r0
    1df6:	4313      	orrs	r3, r2
    1df8:	81a3      	strh	r3, [r4, #12]
    1dfa:	b005      	add	sp, #20
    1dfc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1dfe:	9a02      	ldr	r2, [sp, #8]
    1e00:	6921      	ldr	r1, [r4, #16]
    1e02:	f7ff fc5b 	bl	16bc <memcpy>
    1e06:	89a3      	ldrh	r3, [r4, #12]
    1e08:	4a14      	ldr	r2, [pc, #80]	; (1e5c <__ssputs_r+0xc0>)
    1e0a:	401a      	ands	r2, r3
    1e0c:	2380      	movs	r3, #128	; 0x80
    1e0e:	4313      	orrs	r3, r2
    1e10:	81a3      	strh	r3, [r4, #12]
    1e12:	9b02      	ldr	r3, [sp, #8]
    1e14:	6126      	str	r6, [r4, #16]
    1e16:	18f6      	adds	r6, r6, r3
    1e18:	6026      	str	r6, [r4, #0]
    1e1a:	6165      	str	r5, [r4, #20]
    1e1c:	9e01      	ldr	r6, [sp, #4]
    1e1e:	1aed      	subs	r5, r5, r3
    1e20:	60a5      	str	r5, [r4, #8]
    1e22:	9b01      	ldr	r3, [sp, #4]
    1e24:	42b3      	cmp	r3, r6
    1e26:	d200      	bcs.n	1e2a <__ssputs_r+0x8e>
    1e28:	001e      	movs	r6, r3
    1e2a:	0032      	movs	r2, r6
    1e2c:	9903      	ldr	r1, [sp, #12]
    1e2e:	6820      	ldr	r0, [r4, #0]
    1e30:	f000 fb57 	bl	24e2 <memmove>
    1e34:	68a3      	ldr	r3, [r4, #8]
    1e36:	2000      	movs	r0, #0
    1e38:	1b9b      	subs	r3, r3, r6
    1e3a:	60a3      	str	r3, [r4, #8]
    1e3c:	6823      	ldr	r3, [r4, #0]
    1e3e:	199e      	adds	r6, r3, r6
    1e40:	6026      	str	r6, [r4, #0]
    1e42:	e7da      	b.n	1dfa <__ssputs_r+0x5e>
    1e44:	002a      	movs	r2, r5
    1e46:	0038      	movs	r0, r7
    1e48:	f000 fb5f 	bl	250a <_realloc_r>
    1e4c:	1e06      	subs	r6, r0, #0
    1e4e:	d1e0      	bne.n	1e12 <__ssputs_r+0x76>
    1e50:	6921      	ldr	r1, [r4, #16]
    1e52:	0038      	movs	r0, r7
    1e54:	f7ff fefa 	bl	1c4c <_free_r>
    1e58:	e7c7      	b.n	1dea <__ssputs_r+0x4e>
    1e5a:	46c0      	nop			; (mov r8, r8)
    1e5c:	fffffb7f 	.word	0xfffffb7f

00001e60 <_svfiprintf_r>:
    1e60:	b5f0      	push	{r4, r5, r6, r7, lr}
    1e62:	b09f      	sub	sp, #124	; 0x7c
    1e64:	9002      	str	r0, [sp, #8]
    1e66:	9305      	str	r3, [sp, #20]
    1e68:	898b      	ldrh	r3, [r1, #12]
    1e6a:	000f      	movs	r7, r1
    1e6c:	0016      	movs	r6, r2
    1e6e:	061b      	lsls	r3, r3, #24
    1e70:	d511      	bpl.n	1e96 <_svfiprintf_r+0x36>
    1e72:	690b      	ldr	r3, [r1, #16]
    1e74:	2b00      	cmp	r3, #0
    1e76:	d10e      	bne.n	1e96 <_svfiprintf_r+0x36>
    1e78:	2140      	movs	r1, #64	; 0x40
    1e7a:	f7ff ff31 	bl	1ce0 <_malloc_r>
    1e7e:	6038      	str	r0, [r7, #0]
    1e80:	6138      	str	r0, [r7, #16]
    1e82:	2800      	cmp	r0, #0
    1e84:	d105      	bne.n	1e92 <_svfiprintf_r+0x32>
    1e86:	230c      	movs	r3, #12
    1e88:	9a02      	ldr	r2, [sp, #8]
    1e8a:	3801      	subs	r0, #1
    1e8c:	6013      	str	r3, [r2, #0]
    1e8e:	b01f      	add	sp, #124	; 0x7c
    1e90:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1e92:	2340      	movs	r3, #64	; 0x40
    1e94:	617b      	str	r3, [r7, #20]
    1e96:	2300      	movs	r3, #0
    1e98:	ad06      	add	r5, sp, #24
    1e9a:	616b      	str	r3, [r5, #20]
    1e9c:	3320      	adds	r3, #32
    1e9e:	766b      	strb	r3, [r5, #25]
    1ea0:	3310      	adds	r3, #16
    1ea2:	76ab      	strb	r3, [r5, #26]
    1ea4:	0034      	movs	r4, r6
    1ea6:	7823      	ldrb	r3, [r4, #0]
    1ea8:	2b00      	cmp	r3, #0
    1eaa:	d147      	bne.n	1f3c <_svfiprintf_r+0xdc>
    1eac:	1ba3      	subs	r3, r4, r6
    1eae:	9304      	str	r3, [sp, #16]
    1eb0:	d00d      	beq.n	1ece <_svfiprintf_r+0x6e>
    1eb2:	1ba3      	subs	r3, r4, r6
    1eb4:	0032      	movs	r2, r6
    1eb6:	0039      	movs	r1, r7
    1eb8:	9802      	ldr	r0, [sp, #8]
    1eba:	f7ff ff6f 	bl	1d9c <__ssputs_r>
    1ebe:	1c43      	adds	r3, r0, #1
    1ec0:	d100      	bne.n	1ec4 <_svfiprintf_r+0x64>
    1ec2:	e0b5      	b.n	2030 <STACK_SIZE+0x30>
    1ec4:	696a      	ldr	r2, [r5, #20]
    1ec6:	9b04      	ldr	r3, [sp, #16]
    1ec8:	4694      	mov	ip, r2
    1eca:	4463      	add	r3, ip
    1ecc:	616b      	str	r3, [r5, #20]
    1ece:	7823      	ldrb	r3, [r4, #0]
    1ed0:	2b00      	cmp	r3, #0
    1ed2:	d100      	bne.n	1ed6 <_svfiprintf_r+0x76>
    1ed4:	e0ac      	b.n	2030 <STACK_SIZE+0x30>
    1ed6:	2201      	movs	r2, #1
    1ed8:	2300      	movs	r3, #0
    1eda:	4252      	negs	r2, r2
    1edc:	606a      	str	r2, [r5, #4]
    1ede:	a902      	add	r1, sp, #8
    1ee0:	3254      	adds	r2, #84	; 0x54
    1ee2:	1852      	adds	r2, r2, r1
    1ee4:	3401      	adds	r4, #1
    1ee6:	602b      	str	r3, [r5, #0]
    1ee8:	60eb      	str	r3, [r5, #12]
    1eea:	60ab      	str	r3, [r5, #8]
    1eec:	7013      	strb	r3, [r2, #0]
    1eee:	65ab      	str	r3, [r5, #88]	; 0x58
    1ef0:	4e58      	ldr	r6, [pc, #352]	; (2054 <STACK_SIZE+0x54>)
    1ef2:	2205      	movs	r2, #5
    1ef4:	7821      	ldrb	r1, [r4, #0]
    1ef6:	0030      	movs	r0, r6
    1ef8:	f000 fae8 	bl	24cc <memchr>
    1efc:	1c62      	adds	r2, r4, #1
    1efe:	2800      	cmp	r0, #0
    1f00:	d120      	bne.n	1f44 <_svfiprintf_r+0xe4>
    1f02:	6829      	ldr	r1, [r5, #0]
    1f04:	06cb      	lsls	r3, r1, #27
    1f06:	d504      	bpl.n	1f12 <_svfiprintf_r+0xb2>
    1f08:	2353      	movs	r3, #83	; 0x53
    1f0a:	ae02      	add	r6, sp, #8
    1f0c:	3020      	adds	r0, #32
    1f0e:	199b      	adds	r3, r3, r6
    1f10:	7018      	strb	r0, [r3, #0]
    1f12:	070b      	lsls	r3, r1, #28
    1f14:	d504      	bpl.n	1f20 <_svfiprintf_r+0xc0>
    1f16:	2353      	movs	r3, #83	; 0x53
    1f18:	202b      	movs	r0, #43	; 0x2b
    1f1a:	ae02      	add	r6, sp, #8
    1f1c:	199b      	adds	r3, r3, r6
    1f1e:	7018      	strb	r0, [r3, #0]
    1f20:	7823      	ldrb	r3, [r4, #0]
    1f22:	2b2a      	cmp	r3, #42	; 0x2a
    1f24:	d016      	beq.n	1f54 <_svfiprintf_r+0xf4>
    1f26:	2000      	movs	r0, #0
    1f28:	210a      	movs	r1, #10
    1f2a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    1f2c:	7822      	ldrb	r2, [r4, #0]
    1f2e:	3a30      	subs	r2, #48	; 0x30
    1f30:	2a09      	cmp	r2, #9
    1f32:	d955      	bls.n	1fe0 <_svfiprintf_r+0x180>
    1f34:	2800      	cmp	r0, #0
    1f36:	d015      	beq.n	1f64 <_svfiprintf_r+0x104>
    1f38:	9309      	str	r3, [sp, #36]	; 0x24
    1f3a:	e013      	b.n	1f64 <_svfiprintf_r+0x104>
    1f3c:	2b25      	cmp	r3, #37	; 0x25
    1f3e:	d0b5      	beq.n	1eac <_svfiprintf_r+0x4c>
    1f40:	3401      	adds	r4, #1
    1f42:	e7b0      	b.n	1ea6 <_svfiprintf_r+0x46>
    1f44:	2301      	movs	r3, #1
    1f46:	1b80      	subs	r0, r0, r6
    1f48:	4083      	lsls	r3, r0
    1f4a:	6829      	ldr	r1, [r5, #0]
    1f4c:	0014      	movs	r4, r2
    1f4e:	430b      	orrs	r3, r1
    1f50:	602b      	str	r3, [r5, #0]
    1f52:	e7cd      	b.n	1ef0 <_svfiprintf_r+0x90>
    1f54:	9b05      	ldr	r3, [sp, #20]
    1f56:	1d18      	adds	r0, r3, #4
    1f58:	681b      	ldr	r3, [r3, #0]
    1f5a:	9005      	str	r0, [sp, #20]
    1f5c:	2b00      	cmp	r3, #0
    1f5e:	db39      	blt.n	1fd4 <_svfiprintf_r+0x174>
    1f60:	9309      	str	r3, [sp, #36]	; 0x24
    1f62:	0014      	movs	r4, r2
    1f64:	7823      	ldrb	r3, [r4, #0]
    1f66:	2b2e      	cmp	r3, #46	; 0x2e
    1f68:	d10b      	bne.n	1f82 <_svfiprintf_r+0x122>
    1f6a:	7863      	ldrb	r3, [r4, #1]
    1f6c:	1c62      	adds	r2, r4, #1
    1f6e:	2b2a      	cmp	r3, #42	; 0x2a
    1f70:	d13e      	bne.n	1ff0 <_svfiprintf_r+0x190>
    1f72:	9b05      	ldr	r3, [sp, #20]
    1f74:	3402      	adds	r4, #2
    1f76:	1d1a      	adds	r2, r3, #4
    1f78:	681b      	ldr	r3, [r3, #0]
    1f7a:	9205      	str	r2, [sp, #20]
    1f7c:	2b00      	cmp	r3, #0
    1f7e:	db34      	blt.n	1fea <_svfiprintf_r+0x18a>
    1f80:	9307      	str	r3, [sp, #28]
    1f82:	4e35      	ldr	r6, [pc, #212]	; (2058 <STACK_SIZE+0x58>)
    1f84:	7821      	ldrb	r1, [r4, #0]
    1f86:	2203      	movs	r2, #3
    1f88:	0030      	movs	r0, r6
    1f8a:	f000 fa9f 	bl	24cc <memchr>
    1f8e:	2800      	cmp	r0, #0
    1f90:	d006      	beq.n	1fa0 <_svfiprintf_r+0x140>
    1f92:	2340      	movs	r3, #64	; 0x40
    1f94:	1b80      	subs	r0, r0, r6
    1f96:	4083      	lsls	r3, r0
    1f98:	682a      	ldr	r2, [r5, #0]
    1f9a:	3401      	adds	r4, #1
    1f9c:	4313      	orrs	r3, r2
    1f9e:	602b      	str	r3, [r5, #0]
    1fa0:	7821      	ldrb	r1, [r4, #0]
    1fa2:	2206      	movs	r2, #6
    1fa4:	482d      	ldr	r0, [pc, #180]	; (205c <STACK_SIZE+0x5c>)
    1fa6:	1c66      	adds	r6, r4, #1
    1fa8:	7629      	strb	r1, [r5, #24]
    1faa:	f000 fa8f 	bl	24cc <memchr>
    1fae:	2800      	cmp	r0, #0
    1fb0:	d046      	beq.n	2040 <STACK_SIZE+0x40>
    1fb2:	4b2b      	ldr	r3, [pc, #172]	; (2060 <STACK_SIZE+0x60>)
    1fb4:	2b00      	cmp	r3, #0
    1fb6:	d12f      	bne.n	2018 <STACK_SIZE+0x18>
    1fb8:	6829      	ldr	r1, [r5, #0]
    1fba:	9b05      	ldr	r3, [sp, #20]
    1fbc:	2207      	movs	r2, #7
    1fbe:	05c9      	lsls	r1, r1, #23
    1fc0:	d528      	bpl.n	2014 <STACK_SIZE+0x14>
    1fc2:	189b      	adds	r3, r3, r2
    1fc4:	4393      	bics	r3, r2
    1fc6:	3308      	adds	r3, #8
    1fc8:	9305      	str	r3, [sp, #20]
    1fca:	696b      	ldr	r3, [r5, #20]
    1fcc:	9a03      	ldr	r2, [sp, #12]
    1fce:	189b      	adds	r3, r3, r2
    1fd0:	616b      	str	r3, [r5, #20]
    1fd2:	e767      	b.n	1ea4 <_svfiprintf_r+0x44>
    1fd4:	425b      	negs	r3, r3
    1fd6:	60eb      	str	r3, [r5, #12]
    1fd8:	2302      	movs	r3, #2
    1fda:	430b      	orrs	r3, r1
    1fdc:	602b      	str	r3, [r5, #0]
    1fde:	e7c0      	b.n	1f62 <_svfiprintf_r+0x102>
    1fe0:	434b      	muls	r3, r1
    1fe2:	3401      	adds	r4, #1
    1fe4:	189b      	adds	r3, r3, r2
    1fe6:	2001      	movs	r0, #1
    1fe8:	e7a0      	b.n	1f2c <_svfiprintf_r+0xcc>
    1fea:	2301      	movs	r3, #1
    1fec:	425b      	negs	r3, r3
    1fee:	e7c7      	b.n	1f80 <_svfiprintf_r+0x120>
    1ff0:	2300      	movs	r3, #0
    1ff2:	0014      	movs	r4, r2
    1ff4:	200a      	movs	r0, #10
    1ff6:	001a      	movs	r2, r3
    1ff8:	606b      	str	r3, [r5, #4]
    1ffa:	7821      	ldrb	r1, [r4, #0]
    1ffc:	3930      	subs	r1, #48	; 0x30
    1ffe:	2909      	cmp	r1, #9
    2000:	d903      	bls.n	200a <STACK_SIZE+0xa>
    2002:	2b00      	cmp	r3, #0
    2004:	d0bd      	beq.n	1f82 <_svfiprintf_r+0x122>
    2006:	9207      	str	r2, [sp, #28]
    2008:	e7bb      	b.n	1f82 <_svfiprintf_r+0x122>
    200a:	4342      	muls	r2, r0
    200c:	3401      	adds	r4, #1
    200e:	1852      	adds	r2, r2, r1
    2010:	2301      	movs	r3, #1
    2012:	e7f2      	b.n	1ffa <_svfiprintf_r+0x19a>
    2014:	3307      	adds	r3, #7
    2016:	e7d5      	b.n	1fc4 <_svfiprintf_r+0x164>
    2018:	ab05      	add	r3, sp, #20
    201a:	9300      	str	r3, [sp, #0]
    201c:	003a      	movs	r2, r7
    201e:	4b11      	ldr	r3, [pc, #68]	; (2064 <STACK_SIZE+0x64>)
    2020:	0029      	movs	r1, r5
    2022:	9802      	ldr	r0, [sp, #8]
    2024:	e000      	b.n	2028 <STACK_SIZE+0x28>
    2026:	bf00      	nop
    2028:	9003      	str	r0, [sp, #12]
    202a:	9b03      	ldr	r3, [sp, #12]
    202c:	3301      	adds	r3, #1
    202e:	d1cc      	bne.n	1fca <_svfiprintf_r+0x16a>
    2030:	89bb      	ldrh	r3, [r7, #12]
    2032:	980b      	ldr	r0, [sp, #44]	; 0x2c
    2034:	065b      	lsls	r3, r3, #25
    2036:	d400      	bmi.n	203a <STACK_SIZE+0x3a>
    2038:	e729      	b.n	1e8e <_svfiprintf_r+0x2e>
    203a:	2001      	movs	r0, #1
    203c:	4240      	negs	r0, r0
    203e:	e726      	b.n	1e8e <_svfiprintf_r+0x2e>
    2040:	ab05      	add	r3, sp, #20
    2042:	9300      	str	r3, [sp, #0]
    2044:	003a      	movs	r2, r7
    2046:	4b07      	ldr	r3, [pc, #28]	; (2064 <STACK_SIZE+0x64>)
    2048:	0029      	movs	r1, r5
    204a:	9802      	ldr	r0, [sp, #8]
    204c:	f000 f87a 	bl	2144 <_printf_i>
    2050:	e7ea      	b.n	2028 <STACK_SIZE+0x28>
    2052:	46c0      	nop			; (mov r8, r8)
    2054:	00002814 	.word	0x00002814
    2058:	0000281a 	.word	0x0000281a
    205c:	0000281e 	.word	0x0000281e
    2060:	00000000 	.word	0x00000000
    2064:	00001d9d 	.word	0x00001d9d

00002068 <_printf_common>:
    2068:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    206a:	0015      	movs	r5, r2
    206c:	9301      	str	r3, [sp, #4]
    206e:	688a      	ldr	r2, [r1, #8]
    2070:	690b      	ldr	r3, [r1, #16]
    2072:	9000      	str	r0, [sp, #0]
    2074:	000c      	movs	r4, r1
    2076:	4293      	cmp	r3, r2
    2078:	da00      	bge.n	207c <_printf_common+0x14>
    207a:	0013      	movs	r3, r2
    207c:	0022      	movs	r2, r4
    207e:	602b      	str	r3, [r5, #0]
    2080:	3243      	adds	r2, #67	; 0x43
    2082:	7812      	ldrb	r2, [r2, #0]
    2084:	2a00      	cmp	r2, #0
    2086:	d001      	beq.n	208c <_printf_common+0x24>
    2088:	3301      	adds	r3, #1
    208a:	602b      	str	r3, [r5, #0]
    208c:	6823      	ldr	r3, [r4, #0]
    208e:	069b      	lsls	r3, r3, #26
    2090:	d502      	bpl.n	2098 <_printf_common+0x30>
    2092:	682b      	ldr	r3, [r5, #0]
    2094:	3302      	adds	r3, #2
    2096:	602b      	str	r3, [r5, #0]
    2098:	2706      	movs	r7, #6
    209a:	6823      	ldr	r3, [r4, #0]
    209c:	401f      	ands	r7, r3
    209e:	d027      	beq.n	20f0 <_printf_common+0x88>
    20a0:	0023      	movs	r3, r4
    20a2:	3343      	adds	r3, #67	; 0x43
    20a4:	781b      	ldrb	r3, [r3, #0]
    20a6:	1e5a      	subs	r2, r3, #1
    20a8:	4193      	sbcs	r3, r2
    20aa:	6822      	ldr	r2, [r4, #0]
    20ac:	0692      	lsls	r2, r2, #26
    20ae:	d430      	bmi.n	2112 <_printf_common+0xaa>
    20b0:	0022      	movs	r2, r4
    20b2:	9901      	ldr	r1, [sp, #4]
    20b4:	3243      	adds	r2, #67	; 0x43
    20b6:	9800      	ldr	r0, [sp, #0]
    20b8:	9e08      	ldr	r6, [sp, #32]
    20ba:	47b0      	blx	r6
    20bc:	1c43      	adds	r3, r0, #1
    20be:	d025      	beq.n	210c <_printf_common+0xa4>
    20c0:	2306      	movs	r3, #6
    20c2:	6820      	ldr	r0, [r4, #0]
    20c4:	682a      	ldr	r2, [r5, #0]
    20c6:	68e1      	ldr	r1, [r4, #12]
    20c8:	4003      	ands	r3, r0
    20ca:	2500      	movs	r5, #0
    20cc:	2b04      	cmp	r3, #4
    20ce:	d103      	bne.n	20d8 <_printf_common+0x70>
    20d0:	1a8d      	subs	r5, r1, r2
    20d2:	43eb      	mvns	r3, r5
    20d4:	17db      	asrs	r3, r3, #31
    20d6:	401d      	ands	r5, r3
    20d8:	68a3      	ldr	r3, [r4, #8]
    20da:	6922      	ldr	r2, [r4, #16]
    20dc:	4293      	cmp	r3, r2
    20de:	dd01      	ble.n	20e4 <_printf_common+0x7c>
    20e0:	1a9b      	subs	r3, r3, r2
    20e2:	18ed      	adds	r5, r5, r3
    20e4:	2700      	movs	r7, #0
    20e6:	42bd      	cmp	r5, r7
    20e8:	d120      	bne.n	212c <_printf_common+0xc4>
    20ea:	2000      	movs	r0, #0
    20ec:	e010      	b.n	2110 <_printf_common+0xa8>
    20ee:	3701      	adds	r7, #1
    20f0:	68e3      	ldr	r3, [r4, #12]
    20f2:	682a      	ldr	r2, [r5, #0]
    20f4:	1a9b      	subs	r3, r3, r2
    20f6:	429f      	cmp	r7, r3
    20f8:	dad2      	bge.n	20a0 <_printf_common+0x38>
    20fa:	0022      	movs	r2, r4
    20fc:	2301      	movs	r3, #1
    20fe:	3219      	adds	r2, #25
    2100:	9901      	ldr	r1, [sp, #4]
    2102:	9800      	ldr	r0, [sp, #0]
    2104:	9e08      	ldr	r6, [sp, #32]
    2106:	47b0      	blx	r6
    2108:	1c43      	adds	r3, r0, #1
    210a:	d1f0      	bne.n	20ee <_printf_common+0x86>
    210c:	2001      	movs	r0, #1
    210e:	4240      	negs	r0, r0
    2110:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    2112:	2030      	movs	r0, #48	; 0x30
    2114:	18e1      	adds	r1, r4, r3
    2116:	3143      	adds	r1, #67	; 0x43
    2118:	7008      	strb	r0, [r1, #0]
    211a:	0021      	movs	r1, r4
    211c:	1c5a      	adds	r2, r3, #1
    211e:	3145      	adds	r1, #69	; 0x45
    2120:	7809      	ldrb	r1, [r1, #0]
    2122:	18a2      	adds	r2, r4, r2
    2124:	3243      	adds	r2, #67	; 0x43
    2126:	3302      	adds	r3, #2
    2128:	7011      	strb	r1, [r2, #0]
    212a:	e7c1      	b.n	20b0 <_printf_common+0x48>
    212c:	0022      	movs	r2, r4
    212e:	2301      	movs	r3, #1
    2130:	321a      	adds	r2, #26
    2132:	9901      	ldr	r1, [sp, #4]
    2134:	9800      	ldr	r0, [sp, #0]
    2136:	9e08      	ldr	r6, [sp, #32]
    2138:	47b0      	blx	r6
    213a:	1c43      	adds	r3, r0, #1
    213c:	d0e6      	beq.n	210c <_printf_common+0xa4>
    213e:	3701      	adds	r7, #1
    2140:	e7d1      	b.n	20e6 <_printf_common+0x7e>
	...

00002144 <_printf_i>:
    2144:	b5f0      	push	{r4, r5, r6, r7, lr}
    2146:	b08b      	sub	sp, #44	; 0x2c
    2148:	9206      	str	r2, [sp, #24]
    214a:	000a      	movs	r2, r1
    214c:	3243      	adds	r2, #67	; 0x43
    214e:	9307      	str	r3, [sp, #28]
    2150:	9005      	str	r0, [sp, #20]
    2152:	9204      	str	r2, [sp, #16]
    2154:	7e0a      	ldrb	r2, [r1, #24]
    2156:	000c      	movs	r4, r1
    2158:	9b10      	ldr	r3, [sp, #64]	; 0x40
    215a:	2a6e      	cmp	r2, #110	; 0x6e
    215c:	d100      	bne.n	2160 <_printf_i+0x1c>
    215e:	e08f      	b.n	2280 <_printf_i+0x13c>
    2160:	d817      	bhi.n	2192 <_printf_i+0x4e>
    2162:	2a63      	cmp	r2, #99	; 0x63
    2164:	d02c      	beq.n	21c0 <_printf_i+0x7c>
    2166:	d808      	bhi.n	217a <_printf_i+0x36>
    2168:	2a00      	cmp	r2, #0
    216a:	d100      	bne.n	216e <_printf_i+0x2a>
    216c:	e099      	b.n	22a2 <_printf_i+0x15e>
    216e:	2a58      	cmp	r2, #88	; 0x58
    2170:	d054      	beq.n	221c <_printf_i+0xd8>
    2172:	0026      	movs	r6, r4
    2174:	3642      	adds	r6, #66	; 0x42
    2176:	7032      	strb	r2, [r6, #0]
    2178:	e029      	b.n	21ce <_printf_i+0x8a>
    217a:	2a64      	cmp	r2, #100	; 0x64
    217c:	d001      	beq.n	2182 <_printf_i+0x3e>
    217e:	2a69      	cmp	r2, #105	; 0x69
    2180:	d1f7      	bne.n	2172 <_printf_i+0x2e>
    2182:	6821      	ldr	r1, [r4, #0]
    2184:	681a      	ldr	r2, [r3, #0]
    2186:	0608      	lsls	r0, r1, #24
    2188:	d523      	bpl.n	21d2 <_printf_i+0x8e>
    218a:	1d11      	adds	r1, r2, #4
    218c:	6019      	str	r1, [r3, #0]
    218e:	6815      	ldr	r5, [r2, #0]
    2190:	e025      	b.n	21de <_printf_i+0x9a>
    2192:	2a73      	cmp	r2, #115	; 0x73
    2194:	d100      	bne.n	2198 <_printf_i+0x54>
    2196:	e088      	b.n	22aa <_printf_i+0x166>
    2198:	d808      	bhi.n	21ac <_printf_i+0x68>
    219a:	2a6f      	cmp	r2, #111	; 0x6f
    219c:	d029      	beq.n	21f2 <_printf_i+0xae>
    219e:	2a70      	cmp	r2, #112	; 0x70
    21a0:	d1e7      	bne.n	2172 <_printf_i+0x2e>
    21a2:	2220      	movs	r2, #32
    21a4:	6809      	ldr	r1, [r1, #0]
    21a6:	430a      	orrs	r2, r1
    21a8:	6022      	str	r2, [r4, #0]
    21aa:	e003      	b.n	21b4 <_printf_i+0x70>
    21ac:	2a75      	cmp	r2, #117	; 0x75
    21ae:	d020      	beq.n	21f2 <_printf_i+0xae>
    21b0:	2a78      	cmp	r2, #120	; 0x78
    21b2:	d1de      	bne.n	2172 <_printf_i+0x2e>
    21b4:	0022      	movs	r2, r4
    21b6:	2178      	movs	r1, #120	; 0x78
    21b8:	3245      	adds	r2, #69	; 0x45
    21ba:	7011      	strb	r1, [r2, #0]
    21bc:	4a6c      	ldr	r2, [pc, #432]	; (2370 <_printf_i+0x22c>)
    21be:	e030      	b.n	2222 <_printf_i+0xde>
    21c0:	000e      	movs	r6, r1
    21c2:	681a      	ldr	r2, [r3, #0]
    21c4:	3642      	adds	r6, #66	; 0x42
    21c6:	1d11      	adds	r1, r2, #4
    21c8:	6019      	str	r1, [r3, #0]
    21ca:	6813      	ldr	r3, [r2, #0]
    21cc:	7033      	strb	r3, [r6, #0]
    21ce:	2301      	movs	r3, #1
    21d0:	e079      	b.n	22c6 <_printf_i+0x182>
    21d2:	0649      	lsls	r1, r1, #25
    21d4:	d5d9      	bpl.n	218a <_printf_i+0x46>
    21d6:	1d11      	adds	r1, r2, #4
    21d8:	6019      	str	r1, [r3, #0]
    21da:	2300      	movs	r3, #0
    21dc:	5ed5      	ldrsh	r5, [r2, r3]
    21de:	2d00      	cmp	r5, #0
    21e0:	da03      	bge.n	21ea <_printf_i+0xa6>
    21e2:	232d      	movs	r3, #45	; 0x2d
    21e4:	9a04      	ldr	r2, [sp, #16]
    21e6:	426d      	negs	r5, r5
    21e8:	7013      	strb	r3, [r2, #0]
    21ea:	4b62      	ldr	r3, [pc, #392]	; (2374 <_printf_i+0x230>)
    21ec:	270a      	movs	r7, #10
    21ee:	9303      	str	r3, [sp, #12]
    21f0:	e02f      	b.n	2252 <_printf_i+0x10e>
    21f2:	6820      	ldr	r0, [r4, #0]
    21f4:	6819      	ldr	r1, [r3, #0]
    21f6:	0605      	lsls	r5, r0, #24
    21f8:	d503      	bpl.n	2202 <_printf_i+0xbe>
    21fa:	1d08      	adds	r0, r1, #4
    21fc:	6018      	str	r0, [r3, #0]
    21fe:	680d      	ldr	r5, [r1, #0]
    2200:	e005      	b.n	220e <_printf_i+0xca>
    2202:	0640      	lsls	r0, r0, #25
    2204:	d5f9      	bpl.n	21fa <_printf_i+0xb6>
    2206:	680d      	ldr	r5, [r1, #0]
    2208:	1d08      	adds	r0, r1, #4
    220a:	6018      	str	r0, [r3, #0]
    220c:	b2ad      	uxth	r5, r5
    220e:	4b59      	ldr	r3, [pc, #356]	; (2374 <_printf_i+0x230>)
    2210:	2708      	movs	r7, #8
    2212:	9303      	str	r3, [sp, #12]
    2214:	2a6f      	cmp	r2, #111	; 0x6f
    2216:	d018      	beq.n	224a <_printf_i+0x106>
    2218:	270a      	movs	r7, #10
    221a:	e016      	b.n	224a <_printf_i+0x106>
    221c:	3145      	adds	r1, #69	; 0x45
    221e:	700a      	strb	r2, [r1, #0]
    2220:	4a54      	ldr	r2, [pc, #336]	; (2374 <_printf_i+0x230>)
    2222:	9203      	str	r2, [sp, #12]
    2224:	681a      	ldr	r2, [r3, #0]
    2226:	6821      	ldr	r1, [r4, #0]
    2228:	1d10      	adds	r0, r2, #4
    222a:	6018      	str	r0, [r3, #0]
    222c:	6815      	ldr	r5, [r2, #0]
    222e:	0608      	lsls	r0, r1, #24
    2230:	d522      	bpl.n	2278 <_printf_i+0x134>
    2232:	07cb      	lsls	r3, r1, #31
    2234:	d502      	bpl.n	223c <_printf_i+0xf8>
    2236:	2320      	movs	r3, #32
    2238:	4319      	orrs	r1, r3
    223a:	6021      	str	r1, [r4, #0]
    223c:	2710      	movs	r7, #16
    223e:	2d00      	cmp	r5, #0
    2240:	d103      	bne.n	224a <_printf_i+0x106>
    2242:	2320      	movs	r3, #32
    2244:	6822      	ldr	r2, [r4, #0]
    2246:	439a      	bics	r2, r3
    2248:	6022      	str	r2, [r4, #0]
    224a:	0023      	movs	r3, r4
    224c:	2200      	movs	r2, #0
    224e:	3343      	adds	r3, #67	; 0x43
    2250:	701a      	strb	r2, [r3, #0]
    2252:	6863      	ldr	r3, [r4, #4]
    2254:	60a3      	str	r3, [r4, #8]
    2256:	2b00      	cmp	r3, #0
    2258:	db5c      	blt.n	2314 <_printf_i+0x1d0>
    225a:	2204      	movs	r2, #4
    225c:	6821      	ldr	r1, [r4, #0]
    225e:	4391      	bics	r1, r2
    2260:	6021      	str	r1, [r4, #0]
    2262:	2d00      	cmp	r5, #0
    2264:	d158      	bne.n	2318 <_printf_i+0x1d4>
    2266:	9e04      	ldr	r6, [sp, #16]
    2268:	2b00      	cmp	r3, #0
    226a:	d064      	beq.n	2336 <_printf_i+0x1f2>
    226c:	0026      	movs	r6, r4
    226e:	9b03      	ldr	r3, [sp, #12]
    2270:	3642      	adds	r6, #66	; 0x42
    2272:	781b      	ldrb	r3, [r3, #0]
    2274:	7033      	strb	r3, [r6, #0]
    2276:	e05e      	b.n	2336 <_printf_i+0x1f2>
    2278:	0648      	lsls	r0, r1, #25
    227a:	d5da      	bpl.n	2232 <_printf_i+0xee>
    227c:	b2ad      	uxth	r5, r5
    227e:	e7d8      	b.n	2232 <_printf_i+0xee>
    2280:	6809      	ldr	r1, [r1, #0]
    2282:	681a      	ldr	r2, [r3, #0]
    2284:	0608      	lsls	r0, r1, #24
    2286:	d505      	bpl.n	2294 <_printf_i+0x150>
    2288:	1d11      	adds	r1, r2, #4
    228a:	6019      	str	r1, [r3, #0]
    228c:	6813      	ldr	r3, [r2, #0]
    228e:	6962      	ldr	r2, [r4, #20]
    2290:	601a      	str	r2, [r3, #0]
    2292:	e006      	b.n	22a2 <_printf_i+0x15e>
    2294:	0649      	lsls	r1, r1, #25
    2296:	d5f7      	bpl.n	2288 <_printf_i+0x144>
    2298:	1d11      	adds	r1, r2, #4
    229a:	6019      	str	r1, [r3, #0]
    229c:	6813      	ldr	r3, [r2, #0]
    229e:	8aa2      	ldrh	r2, [r4, #20]
    22a0:	801a      	strh	r2, [r3, #0]
    22a2:	2300      	movs	r3, #0
    22a4:	9e04      	ldr	r6, [sp, #16]
    22a6:	6123      	str	r3, [r4, #16]
    22a8:	e054      	b.n	2354 <_printf_i+0x210>
    22aa:	681a      	ldr	r2, [r3, #0]
    22ac:	1d11      	adds	r1, r2, #4
    22ae:	6019      	str	r1, [r3, #0]
    22b0:	6816      	ldr	r6, [r2, #0]
    22b2:	2100      	movs	r1, #0
    22b4:	6862      	ldr	r2, [r4, #4]
    22b6:	0030      	movs	r0, r6
    22b8:	f000 f908 	bl	24cc <memchr>
    22bc:	2800      	cmp	r0, #0
    22be:	d001      	beq.n	22c4 <_printf_i+0x180>
    22c0:	1b80      	subs	r0, r0, r6
    22c2:	6060      	str	r0, [r4, #4]
    22c4:	6863      	ldr	r3, [r4, #4]
    22c6:	6123      	str	r3, [r4, #16]
    22c8:	2300      	movs	r3, #0
    22ca:	9a04      	ldr	r2, [sp, #16]
    22cc:	7013      	strb	r3, [r2, #0]
    22ce:	e041      	b.n	2354 <_printf_i+0x210>
    22d0:	6923      	ldr	r3, [r4, #16]
    22d2:	0032      	movs	r2, r6
    22d4:	9906      	ldr	r1, [sp, #24]
    22d6:	9805      	ldr	r0, [sp, #20]
    22d8:	9d07      	ldr	r5, [sp, #28]
    22da:	47a8      	blx	r5
    22dc:	1c43      	adds	r3, r0, #1
    22de:	d043      	beq.n	2368 <_printf_i+0x224>
    22e0:	6823      	ldr	r3, [r4, #0]
    22e2:	2500      	movs	r5, #0
    22e4:	079b      	lsls	r3, r3, #30
    22e6:	d40f      	bmi.n	2308 <_printf_i+0x1c4>
    22e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
    22ea:	68e0      	ldr	r0, [r4, #12]
    22ec:	4298      	cmp	r0, r3
    22ee:	da3d      	bge.n	236c <_printf_i+0x228>
    22f0:	0018      	movs	r0, r3
    22f2:	e03b      	b.n	236c <_printf_i+0x228>
    22f4:	0022      	movs	r2, r4
    22f6:	2301      	movs	r3, #1
    22f8:	3219      	adds	r2, #25
    22fa:	9906      	ldr	r1, [sp, #24]
    22fc:	9805      	ldr	r0, [sp, #20]
    22fe:	9e07      	ldr	r6, [sp, #28]
    2300:	47b0      	blx	r6
    2302:	1c43      	adds	r3, r0, #1
    2304:	d030      	beq.n	2368 <_printf_i+0x224>
    2306:	3501      	adds	r5, #1
    2308:	68e3      	ldr	r3, [r4, #12]
    230a:	9a09      	ldr	r2, [sp, #36]	; 0x24
    230c:	1a9b      	subs	r3, r3, r2
    230e:	429d      	cmp	r5, r3
    2310:	dbf0      	blt.n	22f4 <_printf_i+0x1b0>
    2312:	e7e9      	b.n	22e8 <_printf_i+0x1a4>
    2314:	2d00      	cmp	r5, #0
    2316:	d0a9      	beq.n	226c <_printf_i+0x128>
    2318:	9e04      	ldr	r6, [sp, #16]
    231a:	0028      	movs	r0, r5
    231c:	0039      	movs	r1, r7
    231e:	f7fe fb53 	bl	9c8 <__aeabi_uidivmod>
    2322:	9b03      	ldr	r3, [sp, #12]
    2324:	3e01      	subs	r6, #1
    2326:	5c5b      	ldrb	r3, [r3, r1]
    2328:	0028      	movs	r0, r5
    232a:	7033      	strb	r3, [r6, #0]
    232c:	0039      	movs	r1, r7
    232e:	f7fe fb30 	bl	992 <__aeabi_uidiv>
    2332:	1e05      	subs	r5, r0, #0
    2334:	d1f1      	bne.n	231a <_printf_i+0x1d6>
    2336:	2f08      	cmp	r7, #8
    2338:	d109      	bne.n	234e <_printf_i+0x20a>
    233a:	6823      	ldr	r3, [r4, #0]
    233c:	07db      	lsls	r3, r3, #31
    233e:	d506      	bpl.n	234e <_printf_i+0x20a>
    2340:	6863      	ldr	r3, [r4, #4]
    2342:	6922      	ldr	r2, [r4, #16]
    2344:	4293      	cmp	r3, r2
    2346:	dc02      	bgt.n	234e <_printf_i+0x20a>
    2348:	2330      	movs	r3, #48	; 0x30
    234a:	3e01      	subs	r6, #1
    234c:	7033      	strb	r3, [r6, #0]
    234e:	9b04      	ldr	r3, [sp, #16]
    2350:	1b9b      	subs	r3, r3, r6
    2352:	6123      	str	r3, [r4, #16]
    2354:	9b07      	ldr	r3, [sp, #28]
    2356:	aa09      	add	r2, sp, #36	; 0x24
    2358:	9300      	str	r3, [sp, #0]
    235a:	0021      	movs	r1, r4
    235c:	9b06      	ldr	r3, [sp, #24]
    235e:	9805      	ldr	r0, [sp, #20]
    2360:	f7ff fe82 	bl	2068 <_printf_common>
    2364:	1c43      	adds	r3, r0, #1
    2366:	d1b3      	bne.n	22d0 <_printf_i+0x18c>
    2368:	2001      	movs	r0, #1
    236a:	4240      	negs	r0, r0
    236c:	b00b      	add	sp, #44	; 0x2c
    236e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2370:	00002836 	.word	0x00002836
    2374:	00002825 	.word	0x00002825

00002378 <_sbrk_r>:
    2378:	2300      	movs	r3, #0
    237a:	b570      	push	{r4, r5, r6, lr}
    237c:	4c06      	ldr	r4, [pc, #24]	; (2398 <_sbrk_r+0x20>)
    237e:	0005      	movs	r5, r0
    2380:	0008      	movs	r0, r1
    2382:	6023      	str	r3, [r4, #0]
    2384:	f7fe f9f0 	bl	768 <_sbrk>
    2388:	1c43      	adds	r3, r0, #1
    238a:	d103      	bne.n	2394 <_sbrk_r+0x1c>
    238c:	6823      	ldr	r3, [r4, #0]
    238e:	2b00      	cmp	r3, #0
    2390:	d000      	beq.n	2394 <_sbrk_r+0x1c>
    2392:	602b      	str	r3, [r5, #0]
    2394:	bd70      	pop	{r4, r5, r6, pc}
    2396:	46c0      	nop			; (mov r8, r8)
    2398:	200005cc 	.word	0x200005cc

0000239c <__sread>:
    239c:	b570      	push	{r4, r5, r6, lr}
    239e:	000c      	movs	r4, r1
    23a0:	250e      	movs	r5, #14
    23a2:	5f49      	ldrsh	r1, [r1, r5]
    23a4:	f000 f8d8 	bl	2558 <_read_r>
    23a8:	2800      	cmp	r0, #0
    23aa:	db03      	blt.n	23b4 <__sread+0x18>
    23ac:	6d63      	ldr	r3, [r4, #84]	; 0x54
    23ae:	181b      	adds	r3, r3, r0
    23b0:	6563      	str	r3, [r4, #84]	; 0x54
    23b2:	bd70      	pop	{r4, r5, r6, pc}
    23b4:	89a3      	ldrh	r3, [r4, #12]
    23b6:	4a02      	ldr	r2, [pc, #8]	; (23c0 <__sread+0x24>)
    23b8:	4013      	ands	r3, r2
    23ba:	81a3      	strh	r3, [r4, #12]
    23bc:	e7f9      	b.n	23b2 <__sread+0x16>
    23be:	46c0      	nop			; (mov r8, r8)
    23c0:	ffffefff 	.word	0xffffefff

000023c4 <__swrite>:
    23c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    23c6:	001f      	movs	r7, r3
    23c8:	898b      	ldrh	r3, [r1, #12]
    23ca:	0005      	movs	r5, r0
    23cc:	000c      	movs	r4, r1
    23ce:	0016      	movs	r6, r2
    23d0:	05db      	lsls	r3, r3, #23
    23d2:	d505      	bpl.n	23e0 <__swrite+0x1c>
    23d4:	230e      	movs	r3, #14
    23d6:	5ec9      	ldrsh	r1, [r1, r3]
    23d8:	2200      	movs	r2, #0
    23da:	2302      	movs	r3, #2
    23dc:	f000 f862 	bl	24a4 <_lseek_r>
    23e0:	89a3      	ldrh	r3, [r4, #12]
    23e2:	4a05      	ldr	r2, [pc, #20]	; (23f8 <__swrite+0x34>)
    23e4:	0028      	movs	r0, r5
    23e6:	4013      	ands	r3, r2
    23e8:	81a3      	strh	r3, [r4, #12]
    23ea:	0032      	movs	r2, r6
    23ec:	230e      	movs	r3, #14
    23ee:	5ee1      	ldrsh	r1, [r4, r3]
    23f0:	003b      	movs	r3, r7
    23f2:	f000 f81f 	bl	2434 <_write_r>
    23f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    23f8:	ffffefff 	.word	0xffffefff

000023fc <__sseek>:
    23fc:	b570      	push	{r4, r5, r6, lr}
    23fe:	000c      	movs	r4, r1
    2400:	250e      	movs	r5, #14
    2402:	5f49      	ldrsh	r1, [r1, r5]
    2404:	f000 f84e 	bl	24a4 <_lseek_r>
    2408:	89a3      	ldrh	r3, [r4, #12]
    240a:	1c42      	adds	r2, r0, #1
    240c:	d103      	bne.n	2416 <__sseek+0x1a>
    240e:	4a05      	ldr	r2, [pc, #20]	; (2424 <__sseek+0x28>)
    2410:	4013      	ands	r3, r2
    2412:	81a3      	strh	r3, [r4, #12]
    2414:	bd70      	pop	{r4, r5, r6, pc}
    2416:	2280      	movs	r2, #128	; 0x80
    2418:	0152      	lsls	r2, r2, #5
    241a:	4313      	orrs	r3, r2
    241c:	81a3      	strh	r3, [r4, #12]
    241e:	6560      	str	r0, [r4, #84]	; 0x54
    2420:	e7f8      	b.n	2414 <__sseek+0x18>
    2422:	46c0      	nop			; (mov r8, r8)
    2424:	ffffefff 	.word	0xffffefff

00002428 <__sclose>:
    2428:	b510      	push	{r4, lr}
    242a:	230e      	movs	r3, #14
    242c:	5ec9      	ldrsh	r1, [r1, r3]
    242e:	f000 f815 	bl	245c <_close_r>
    2432:	bd10      	pop	{r4, pc}

00002434 <_write_r>:
    2434:	b570      	push	{r4, r5, r6, lr}
    2436:	0005      	movs	r5, r0
    2438:	0008      	movs	r0, r1
    243a:	0011      	movs	r1, r2
    243c:	2200      	movs	r2, #0
    243e:	4c06      	ldr	r4, [pc, #24]	; (2458 <_write_r+0x24>)
    2440:	6022      	str	r2, [r4, #0]
    2442:	001a      	movs	r2, r3
    2444:	f7ff f898 	bl	1578 <_write>
    2448:	1c43      	adds	r3, r0, #1
    244a:	d103      	bne.n	2454 <_write_r+0x20>
    244c:	6823      	ldr	r3, [r4, #0]
    244e:	2b00      	cmp	r3, #0
    2450:	d000      	beq.n	2454 <_write_r+0x20>
    2452:	602b      	str	r3, [r5, #0]
    2454:	bd70      	pop	{r4, r5, r6, pc}
    2456:	46c0      	nop			; (mov r8, r8)
    2458:	200005cc 	.word	0x200005cc

0000245c <_close_r>:
    245c:	2300      	movs	r3, #0
    245e:	b570      	push	{r4, r5, r6, lr}
    2460:	4c06      	ldr	r4, [pc, #24]	; (247c <_close_r+0x20>)
    2462:	0005      	movs	r5, r0
    2464:	0008      	movs	r0, r1
    2466:	6023      	str	r3, [r4, #0]
    2468:	f7fe f990 	bl	78c <_close>
    246c:	1c43      	adds	r3, r0, #1
    246e:	d103      	bne.n	2478 <_close_r+0x1c>
    2470:	6823      	ldr	r3, [r4, #0]
    2472:	2b00      	cmp	r3, #0
    2474:	d000      	beq.n	2478 <_close_r+0x1c>
    2476:	602b      	str	r3, [r5, #0]
    2478:	bd70      	pop	{r4, r5, r6, pc}
    247a:	46c0      	nop			; (mov r8, r8)
    247c:	200005cc 	.word	0x200005cc

00002480 <_fstat_r>:
    2480:	2300      	movs	r3, #0
    2482:	b570      	push	{r4, r5, r6, lr}
    2484:	4c06      	ldr	r4, [pc, #24]	; (24a0 <_fstat_r+0x20>)
    2486:	0005      	movs	r5, r0
    2488:	0008      	movs	r0, r1
    248a:	0011      	movs	r1, r2
    248c:	6023      	str	r3, [r4, #0]
    248e:	f7fe f980 	bl	792 <_fstat>
    2492:	1c43      	adds	r3, r0, #1
    2494:	d103      	bne.n	249e <_fstat_r+0x1e>
    2496:	6823      	ldr	r3, [r4, #0]
    2498:	2b00      	cmp	r3, #0
    249a:	d000      	beq.n	249e <_fstat_r+0x1e>
    249c:	602b      	str	r3, [r5, #0]
    249e:	bd70      	pop	{r4, r5, r6, pc}
    24a0:	200005cc 	.word	0x200005cc

000024a4 <_lseek_r>:
    24a4:	b570      	push	{r4, r5, r6, lr}
    24a6:	0005      	movs	r5, r0
    24a8:	0008      	movs	r0, r1
    24aa:	0011      	movs	r1, r2
    24ac:	2200      	movs	r2, #0
    24ae:	4c06      	ldr	r4, [pc, #24]	; (24c8 <_lseek_r+0x24>)
    24b0:	6022      	str	r2, [r4, #0]
    24b2:	001a      	movs	r2, r3
    24b4:	f7fe f972 	bl	79c <_lseek>
    24b8:	1c43      	adds	r3, r0, #1
    24ba:	d103      	bne.n	24c4 <_lseek_r+0x20>
    24bc:	6823      	ldr	r3, [r4, #0]
    24be:	2b00      	cmp	r3, #0
    24c0:	d000      	beq.n	24c4 <_lseek_r+0x20>
    24c2:	602b      	str	r3, [r5, #0]
    24c4:	bd70      	pop	{r4, r5, r6, pc}
    24c6:	46c0      	nop			; (mov r8, r8)
    24c8:	200005cc 	.word	0x200005cc

000024cc <memchr>:
    24cc:	b2c9      	uxtb	r1, r1
    24ce:	1882      	adds	r2, r0, r2
    24d0:	4290      	cmp	r0, r2
    24d2:	d101      	bne.n	24d8 <memchr+0xc>
    24d4:	2000      	movs	r0, #0
    24d6:	4770      	bx	lr
    24d8:	7803      	ldrb	r3, [r0, #0]
    24da:	428b      	cmp	r3, r1
    24dc:	d0fb      	beq.n	24d6 <memchr+0xa>
    24de:	3001      	adds	r0, #1
    24e0:	e7f6      	b.n	24d0 <memchr+0x4>

000024e2 <memmove>:
    24e2:	b510      	push	{r4, lr}
    24e4:	4288      	cmp	r0, r1
    24e6:	d902      	bls.n	24ee <memmove+0xc>
    24e8:	188b      	adds	r3, r1, r2
    24ea:	4298      	cmp	r0, r3
    24ec:	d308      	bcc.n	2500 <memmove+0x1e>
    24ee:	2300      	movs	r3, #0
    24f0:	429a      	cmp	r2, r3
    24f2:	d007      	beq.n	2504 <memmove+0x22>
    24f4:	5ccc      	ldrb	r4, [r1, r3]
    24f6:	54c4      	strb	r4, [r0, r3]
    24f8:	3301      	adds	r3, #1
    24fa:	e7f9      	b.n	24f0 <memmove+0xe>
    24fc:	5c8b      	ldrb	r3, [r1, r2]
    24fe:	5483      	strb	r3, [r0, r2]
    2500:	3a01      	subs	r2, #1
    2502:	d2fb      	bcs.n	24fc <memmove+0x1a>
    2504:	bd10      	pop	{r4, pc}

00002506 <__malloc_lock>:
    2506:	4770      	bx	lr

00002508 <__malloc_unlock>:
    2508:	4770      	bx	lr

0000250a <_realloc_r>:
    250a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    250c:	0007      	movs	r7, r0
    250e:	000d      	movs	r5, r1
    2510:	0016      	movs	r6, r2
    2512:	2900      	cmp	r1, #0
    2514:	d105      	bne.n	2522 <_realloc_r+0x18>
    2516:	0011      	movs	r1, r2
    2518:	f7ff fbe2 	bl	1ce0 <_malloc_r>
    251c:	0004      	movs	r4, r0
    251e:	0020      	movs	r0, r4
    2520:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2522:	2a00      	cmp	r2, #0
    2524:	d103      	bne.n	252e <_realloc_r+0x24>
    2526:	f7ff fb91 	bl	1c4c <_free_r>
    252a:	0034      	movs	r4, r6
    252c:	e7f7      	b.n	251e <_realloc_r+0x14>
    252e:	f000 f827 	bl	2580 <_malloc_usable_size_r>
    2532:	002c      	movs	r4, r5
    2534:	4286      	cmp	r6, r0
    2536:	d9f2      	bls.n	251e <_realloc_r+0x14>
    2538:	0031      	movs	r1, r6
    253a:	0038      	movs	r0, r7
    253c:	f7ff fbd0 	bl	1ce0 <_malloc_r>
    2540:	1e04      	subs	r4, r0, #0
    2542:	d0ec      	beq.n	251e <_realloc_r+0x14>
    2544:	0029      	movs	r1, r5
    2546:	0032      	movs	r2, r6
    2548:	f7ff f8b8 	bl	16bc <memcpy>
    254c:	0029      	movs	r1, r5
    254e:	0038      	movs	r0, r7
    2550:	f7ff fb7c 	bl	1c4c <_free_r>
    2554:	e7e3      	b.n	251e <_realloc_r+0x14>
	...

00002558 <_read_r>:
    2558:	b570      	push	{r4, r5, r6, lr}
    255a:	0005      	movs	r5, r0
    255c:	0008      	movs	r0, r1
    255e:	0011      	movs	r1, r2
    2560:	2200      	movs	r2, #0
    2562:	4c06      	ldr	r4, [pc, #24]	; (257c <_read_r+0x24>)
    2564:	6022      	str	r2, [r4, #0]
    2566:	001a      	movs	r2, r3
    2568:	f7fe fff2 	bl	1550 <_read>
    256c:	1c43      	adds	r3, r0, #1
    256e:	d103      	bne.n	2578 <_read_r+0x20>
    2570:	6823      	ldr	r3, [r4, #0]
    2572:	2b00      	cmp	r3, #0
    2574:	d000      	beq.n	2578 <_read_r+0x20>
    2576:	602b      	str	r3, [r5, #0]
    2578:	bd70      	pop	{r4, r5, r6, pc}
    257a:	46c0      	nop			; (mov r8, r8)
    257c:	200005cc 	.word	0x200005cc

00002580 <_malloc_usable_size_r>:
    2580:	1f0b      	subs	r3, r1, #4
    2582:	681b      	ldr	r3, [r3, #0]
    2584:	1f18      	subs	r0, r3, #4
    2586:	2b00      	cmp	r3, #0
    2588:	da01      	bge.n	258e <_malloc_usable_size_r+0xe>
    258a:	580b      	ldr	r3, [r1, r0]
    258c:	18c0      	adds	r0, r0, r3
    258e:	4770      	bx	lr
    2590:	682f2e2e 	.word	0x682f2e2e
    2594:	732f6c61 	.word	0x732f6c61
    2598:	682f6372 	.word	0x682f6372
    259c:	635f6c61 	.word	0x635f6c61
    25a0:	615f6e61 	.word	0x615f6e61
    25a4:	636e7973 	.word	0x636e7973
    25a8:	0000632e 	.word	0x0000632e
    25ac:	682f2e2e 	.word	0x682f2e2e
    25b0:	732f6c61 	.word	0x732f6c61
    25b4:	682f6372 	.word	0x682f6372
    25b8:	665f6c61 	.word	0x665f6c61
    25bc:	6873616c 	.word	0x6873616c
    25c0:	0000632e 	.word	0x0000632e
    25c4:	682f2e2e 	.word	0x682f2e2e
    25c8:	732f6c61 	.word	0x732f6c61
    25cc:	682f6372 	.word	0x682f6372
    25d0:	695f6c61 	.word	0x695f6c61
    25d4:	00632e6f 	.word	0x00632e6f
    25d8:	682f2e2e 	.word	0x682f2e2e
    25dc:	732f6c61 	.word	0x732f6c61
    25e0:	682f6372 	.word	0x682f6372
    25e4:	755f6c61 	.word	0x755f6c61
    25e8:	74726173 	.word	0x74726173
    25ec:	6e79735f 	.word	0x6e79735f
    25f0:	00632e63 	.word	0x00632e63
    25f4:	682f2e2e 	.word	0x682f2e2e
    25f8:	6e2f6c70 	.word	0x6e2f6c70
    25fc:	74636d76 	.word	0x74636d76
    2600:	682f6c72 	.word	0x682f6c72
    2604:	6e5f6c70 	.word	0x6e5f6c70
    2608:	74636d76 	.word	0x74636d76
    260c:	632e6c72 	.word	0x632e6c72
    2610:	00000000 	.word	0x00000000
    2614:	42000400 	.word	0x42000400
    2618:	42000800 	.word	0x42000800
    261c:	42000c00 	.word	0x42000c00
    2620:	42001000 	.word	0x42001000
    2624:	42001400 	.word	0x42001400
    2628:	42001800 	.word	0x42001800
    262c:	43000000 	.word	0x43000000
    2630:	43000400 	.word	0x43000400

00002634 <_usarts>:
    2634:	00000004 40310004 00030000 0000f62b     ......1@....+...
    2644:	00000000                                ....

00002648 <_i2cms>:
	...

00002660 <_i2css>:
	...

00002670 <sercomspi_regs>:
	...
    2684:	682f2e2e 732f6c70 6f637265 70682f6d     ../hpl/sercom/hp
    2694:	65735f6c 6d6f6372 0000632e 00007825     l_sercom.c..%x..

000026a4 <_global_impure_ptr>:
    26a4:	2000001c 4f500043 00584953 2000002e              ... C.POSIX...

000026b2 <_ctype_>:
    26b2:	20202000 20202020 28282020 20282828     .         ((((( 
    26c2:	20202020 20202020 20202020 20202020                     
    26d2:	10108820 10101010 10101010 10101010      ...............
    26e2:	04040410 04040404 10040404 10101010     ................
    26f2:	41411010 41414141 01010101 01010101     ..AAAAAA........
    2702:	01010101 01010101 01010101 10101010     ................
    2712:	42421010 42424242 02020202 02020202     ..BBBBBB........
    2722:	02020202 02020202 02020202 10101010     ................
    2732:	00000020 00000000 00000000 00000000      ...............
	...

000027b4 <__sf_fake_stderr>:
	...

000027d4 <__sf_fake_stdin>:
	...

000027f4 <__sf_fake_stdout>:
	...
    2814:	2b302d23 6c680020 6665004c 47464567     #-0+ .hlL.efgEFG
    2824:	32313000 36353433 41393837 45444342     .0123456789ABCDE
    2834:	31300046 35343332 39383736 64636261     F.0123456789abcd
    2844:	00006665                                ef..

00002848 <_init>:
    2848:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    284a:	46c0      	nop			; (mov r8, r8)
    284c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    284e:	bc08      	pop	{r3}
    2850:	469e      	mov	lr, r3
    2852:	4770      	bx	lr

00002854 <__init_array_start>:
    2854:	000000e5 	.word	0x000000e5

00002858 <_fini>:
    2858:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    285a:	46c0      	nop			; (mov r8, r8)
    285c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    285e:	bc08      	pop	{r3}
    2860:	469e      	mov	lr, r3
    2862:	4770      	bx	lr

00002864 <__fini_array_start>:
    2864:	000000bd 	.word	0x000000bd
