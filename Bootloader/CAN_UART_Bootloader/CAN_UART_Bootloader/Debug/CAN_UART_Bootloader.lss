
CAN_UART_Bootloader.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001f3c  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000078  20000000  00001f3c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000244  20000078  00001fb4  00020078  2**2
                  ALLOC
  3 .stack        00002004  200002bc  000021f8  00020078  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY
  6 .debug_info   000275ca  00000000  00000000  000200f9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003a2e  00000000  00000000  000476c3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000e26d  00000000  00000000  0004b0f1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000c30  00000000  00000000  0005935e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000d30  00000000  00000000  00059f8e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00022d17  00000000  00000000  0005acbe  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0001535c  00000000  00000000  0007d9d5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000a3718  00000000  00000000  00092d31  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  000026a4  00000000  00000000  0013644c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	c0 22 00 20 35 01 00 00 31 01 00 00 31 01 00 00     .". 5...1...1...
	...
      2c:	31 01 00 00 00 00 00 00 00 00 00 00 31 01 00 00     1...........1...
      3c:	31 01 00 00 31 01 00 00 31 01 00 00 31 01 00 00     1...1...1...1...
      4c:	31 01 00 00 31 01 00 00 31 01 00 00 31 09 00 00     1...1...1...1...
      5c:	31 01 00 00 31 01 00 00 31 01 00 00 31 01 00 00     1...1...1...1...
      6c:	31 01 00 00 31 01 00 00 31 01 00 00 31 01 00 00     1...1...1...1...
      7c:	31 01 00 00 49 07 00 00 31 01 00 00 31 01 00 00     1...I...1...1...
      8c:	31 01 00 00 31 01 00 00 31 01 00 00 31 01 00 00     1...1...1...1...
      9c:	31 01 00 00 31 01 00 00 31 01 00 00 31 01 00 00     1...1...1...1...
      ac:	31 01 00 00 31 01 00 00 31 01 00 00 31 01 00 00     1...1...1...1...

000000bc <__do_global_dtors_aux>:
      bc:	b510      	push	{r4, lr}
      be:	4c06      	ldr	r4, [pc, #24]	; (d8 <__do_global_dtors_aux+0x1c>)
      c0:	7823      	ldrb	r3, [r4, #0]
      c2:	2b00      	cmp	r3, #0
      c4:	d107      	bne.n	d6 <__do_global_dtors_aux+0x1a>
      c6:	4b05      	ldr	r3, [pc, #20]	; (dc <__do_global_dtors_aux+0x20>)
      c8:	2b00      	cmp	r3, #0
      ca:	d002      	beq.n	d2 <__do_global_dtors_aux+0x16>
      cc:	4804      	ldr	r0, [pc, #16]	; (e0 <__do_global_dtors_aux+0x24>)
      ce:	e000      	b.n	d2 <__do_global_dtors_aux+0x16>
      d0:	bf00      	nop
      d2:	2301      	movs	r3, #1
      d4:	7023      	strb	r3, [r4, #0]
      d6:	bd10      	pop	{r4, pc}
      d8:	20000078 	.word	0x20000078
      dc:	00000000 	.word	0x00000000
      e0:	00001f3c 	.word	0x00001f3c

000000e4 <frame_dummy>:
      e4:	4b08      	ldr	r3, [pc, #32]	; (108 <frame_dummy+0x24>)
      e6:	b510      	push	{r4, lr}
      e8:	2b00      	cmp	r3, #0
      ea:	d003      	beq.n	f4 <frame_dummy+0x10>
      ec:	4907      	ldr	r1, [pc, #28]	; (10c <frame_dummy+0x28>)
      ee:	4808      	ldr	r0, [pc, #32]	; (110 <frame_dummy+0x2c>)
      f0:	e000      	b.n	f4 <frame_dummy+0x10>
      f2:	bf00      	nop
      f4:	4807      	ldr	r0, [pc, #28]	; (114 <frame_dummy+0x30>)
      f6:	6803      	ldr	r3, [r0, #0]
      f8:	2b00      	cmp	r3, #0
      fa:	d100      	bne.n	fe <frame_dummy+0x1a>
      fc:	bd10      	pop	{r4, pc}
      fe:	4b06      	ldr	r3, [pc, #24]	; (118 <frame_dummy+0x34>)
     100:	2b00      	cmp	r3, #0
     102:	d0fb      	beq.n	fc <frame_dummy+0x18>
     104:	4798      	blx	r3
     106:	e7f9      	b.n	fc <frame_dummy+0x18>
     108:	00000000 	.word	0x00000000
     10c:	2000007c 	.word	0x2000007c
     110:	00001f3c 	.word	0x00001f3c
     114:	00001f3c 	.word	0x00001f3c
     118:	00000000 	.word	0x00000000

0000011c <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
     11c:	b510      	push	{r4, lr}
	system_init();
     11e:	4b02      	ldr	r3, [pc, #8]	; (128 <atmel_start_init+0xc>)
     120:	4798      	blx	r3
	stdio_redirect_init();
     122:	4b02      	ldr	r3, [pc, #8]	; (12c <atmel_start_init+0x10>)
     124:	4798      	blx	r3
}
     126:	bd10      	pop	{r4, pc}
     128:	000002e1 	.word	0x000002e1
     12c:	00000d0d 	.word	0x00000d0d

00000130 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     130:	e7fe      	b.n	130 <Dummy_Handler>
	...

00000134 <Reset_Handler>:
{
     134:	b510      	push	{r4, lr}
        if (pSrc != pDest) {
     136:	4a10      	ldr	r2, [pc, #64]	; (178 <Reset_Handler+0x44>)
     138:	4b10      	ldr	r3, [pc, #64]	; (17c <Reset_Handler+0x48>)
     13a:	429a      	cmp	r2, r3
     13c:	d009      	beq.n	152 <Reset_Handler+0x1e>
     13e:	4b0f      	ldr	r3, [pc, #60]	; (17c <Reset_Handler+0x48>)
     140:	4a0d      	ldr	r2, [pc, #52]	; (178 <Reset_Handler+0x44>)
     142:	e003      	b.n	14c <Reset_Handler+0x18>
                        *pDest++ = *pSrc++;
     144:	6811      	ldr	r1, [r2, #0]
     146:	6019      	str	r1, [r3, #0]
     148:	3304      	adds	r3, #4
     14a:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
     14c:	490c      	ldr	r1, [pc, #48]	; (180 <Reset_Handler+0x4c>)
     14e:	428b      	cmp	r3, r1
     150:	d3f8      	bcc.n	144 <Reset_Handler+0x10>
                        *pDest++ = *pSrc++;
     152:	4b0c      	ldr	r3, [pc, #48]	; (184 <Reset_Handler+0x50>)
     154:	e002      	b.n	15c <Reset_Handler+0x28>
                *pDest++ = 0;
     156:	2200      	movs	r2, #0
     158:	601a      	str	r2, [r3, #0]
     15a:	3304      	adds	r3, #4
        for (pDest = &_szero; pDest < &_ezero;) {
     15c:	4a0a      	ldr	r2, [pc, #40]	; (188 <Reset_Handler+0x54>)
     15e:	4293      	cmp	r3, r2
     160:	d3f9      	bcc.n	156 <Reset_Handler+0x22>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     162:	4a0a      	ldr	r2, [pc, #40]	; (18c <Reset_Handler+0x58>)
     164:	21ff      	movs	r1, #255	; 0xff
     166:	4b0a      	ldr	r3, [pc, #40]	; (190 <Reset_Handler+0x5c>)
     168:	438b      	bics	r3, r1
     16a:	6093      	str	r3, [r2, #8]
        __libc_init_array();
     16c:	4b09      	ldr	r3, [pc, #36]	; (194 <Reset_Handler+0x60>)
     16e:	4798      	blx	r3
        main();
     170:	4b09      	ldr	r3, [pc, #36]	; (198 <Reset_Handler+0x64>)
     172:	4798      	blx	r3
     174:	e7fe      	b.n	174 <Reset_Handler+0x40>
     176:	46c0      	nop			; (mov r8, r8)
     178:	00001f3c 	.word	0x00001f3c
     17c:	20000000 	.word	0x20000000
     180:	20000078 	.word	0x20000078
     184:	20000078 	.word	0x20000078
     188:	200002bc 	.word	0x200002bc
     18c:	e000ed00 	.word	0xe000ed00
     190:	00000000 	.word	0x00000000
     194:	00000d2d 	.word	0x00000d2d
     198:	00000be5 	.word	0x00000be5

0000019c <FLASH_0_CLOCK_init>:
}

static inline void hri_mclk_set_AHBMASK_NVMCTRL_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_NVMCTRL;
     19c:	4a02      	ldr	r2, [pc, #8]	; (1a8 <FLASH_0_CLOCK_init+0xc>)
     19e:	6913      	ldr	r3, [r2, #16]
     1a0:	2120      	movs	r1, #32
     1a2:	430b      	orrs	r3, r1
     1a4:	6113      	str	r3, [r2, #16]

void FLASH_0_CLOCK_init(void)
{

	hri_mclk_set_AHBMASK_NVMCTRL_bit(MCLK);
}
     1a6:	4770      	bx	lr
     1a8:	40000800 	.word	0x40000800

000001ac <FLASH_0_init>:

void FLASH_0_init(void)
{
     1ac:	b510      	push	{r4, lr}
	FLASH_0_CLOCK_init();
     1ae:	4b03      	ldr	r3, [pc, #12]	; (1bc <FLASH_0_init+0x10>)
     1b0:	4798      	blx	r3
	flash_init(&FLASH_0, NVMCTRL);
     1b2:	4903      	ldr	r1, [pc, #12]	; (1c0 <FLASH_0_init+0x14>)
     1b4:	4803      	ldr	r0, [pc, #12]	; (1c4 <FLASH_0_init+0x18>)
     1b6:	4b04      	ldr	r3, [pc, #16]	; (1c8 <FLASH_0_init+0x1c>)
     1b8:	4798      	blx	r3
}
     1ba:	bd10      	pop	{r4, pc}
     1bc:	0000019d 	.word	0x0000019d
     1c0:	41004000 	.word	0x41004000
     1c4:	200000d8 	.word	0x200000d8
     1c8:	000003b5 	.word	0x000003b5

000001cc <TARGET_IO_PORT_init>:

void TARGET_IO_PORT_init(void)
{
     1cc:	b530      	push	{r4, r5, lr}
static inline void hri_port_write_PINCFG_PMUXEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                    bool value)
{
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     1ce:	2382      	movs	r3, #130	; 0x82
     1d0:	05db      	lsls	r3, r3, #23
     1d2:	22ca      	movs	r2, #202	; 0xca
     1d4:	5c99      	ldrb	r1, [r3, r2]
	tmp &= ~PORT_PINCFG_PMUXEN;
     1d6:	2501      	movs	r5, #1
     1d8:	43a9      	bics	r1, r5
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     1da:	2401      	movs	r4, #1
     1dc:	4321      	orrs	r1, r4
     1de:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     1e0:	5499      	strb	r1, [r3, r2]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     1e2:	20b5      	movs	r0, #181	; 0xb5
     1e4:	5c19      	ldrb	r1, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     1e6:	3abb      	subs	r2, #187	; 0xbb
     1e8:	4391      	bics	r1, r2
	tmp |= PORT_PMUX_PMUXE(data);
     1ea:	2203      	movs	r2, #3
     1ec:	4311      	orrs	r1, r2
     1ee:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     1f0:	5419      	strb	r1, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     1f2:	21cb      	movs	r1, #203	; 0xcb
     1f4:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PINCFG_PMUXEN;
     1f6:	43aa      	bics	r2, r5
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     1f8:	4322      	orrs	r2, r4
     1fa:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     1fc:	545a      	strb	r2, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     1fe:	5c1a      	ldrb	r2, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     200:	39bc      	subs	r1, #188	; 0xbc
     202:	400a      	ands	r2, r1
	tmp |= PORT_PMUX_PMUXO(data);
     204:	2130      	movs	r1, #48	; 0x30
     206:	430a      	orrs	r2, r1
     208:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     20a:	541a      	strb	r2, [r3, r0]

	gpio_set_pin_function(PB10, PINMUX_PB10D_SERCOM4_PAD2);

	gpio_set_pin_function(PB11, PINMUX_PB11D_SERCOM4_PAD3);
}
     20c:	bd30      	pop	{r4, r5, pc}
	...

00000210 <TARGET_IO_CLOCK_init>:
}

static inline void hri_gclk_write_PCHCTRL_reg(const void *const hw, uint8_t index, hri_gclk_pchctrl_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->PCHCTRL[index].reg = data;
     210:	4b06      	ldr	r3, [pc, #24]	; (22c <TARGET_IO_CLOCK_init+0x1c>)
     212:	2140      	movs	r1, #64	; 0x40
     214:	22dc      	movs	r2, #220	; 0xdc
     216:	5099      	str	r1, [r3, r2]
     218:	3103      	adds	r1, #3
     21a:	3a14      	subs	r2, #20
     21c:	5099      	str	r1, [r3, r2]
}

static inline void hri_mclk_set_APBCMASK_SERCOM4_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_SERCOM4;
     21e:	4a04      	ldr	r2, [pc, #16]	; (230 <TARGET_IO_CLOCK_init+0x20>)
     220:	69d3      	ldr	r3, [r2, #28]
     222:	3923      	subs	r1, #35	; 0x23
     224:	430b      	orrs	r3, r1
     226:	61d3      	str	r3, [r2, #28]
{
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM4_GCLK_ID_CORE, CONF_GCLK_SERCOM4_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM4_GCLK_ID_SLOW, CONF_GCLK_SERCOM4_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));

	hri_mclk_set_APBCMASK_SERCOM4_bit(MCLK);
}
     228:	4770      	bx	lr
     22a:	46c0      	nop			; (mov r8, r8)
     22c:	40001c00 	.word	0x40001c00
     230:	40000800 	.word	0x40000800

00000234 <TARGET_IO_init>:

void TARGET_IO_init(void)
{
     234:	b510      	push	{r4, lr}
	TARGET_IO_CLOCK_init();
     236:	4b05      	ldr	r3, [pc, #20]	; (24c <TARGET_IO_init+0x18>)
     238:	4798      	blx	r3
	usart_sync_init(&TARGET_IO, SERCOM4, (void *)NULL);
     23a:	2200      	movs	r2, #0
     23c:	4904      	ldr	r1, [pc, #16]	; (250 <TARGET_IO_init+0x1c>)
     23e:	4805      	ldr	r0, [pc, #20]	; (254 <TARGET_IO_init+0x20>)
     240:	4b05      	ldr	r3, [pc, #20]	; (258 <TARGET_IO_init+0x24>)
     242:	4798      	blx	r3
	TARGET_IO_PORT_init();
     244:	4b05      	ldr	r3, [pc, #20]	; (25c <TARGET_IO_init+0x28>)
     246:	4798      	blx	r3
}
     248:	bd10      	pop	{r4, pc}
     24a:	46c0      	nop			; (mov r8, r8)
     24c:	00000211 	.word	0x00000211
     250:	42001400 	.word	0x42001400
     254:	200000f4 	.word	0x200000f4
     258:	00000551 	.word	0x00000551
     25c:	000001cd 	.word	0x000001cd

00000260 <CAN_1_PORT_init>:

void CAN_1_PORT_init(void)
{
     260:	b530      	push	{r4, r5, lr}
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     262:	2382      	movs	r3, #130	; 0x82
     264:	05db      	lsls	r3, r3, #23
     266:	22cf      	movs	r2, #207	; 0xcf
     268:	5c99      	ldrb	r1, [r3, r2]
	tmp &= ~PORT_PINCFG_PMUXEN;
     26a:	2501      	movs	r5, #1
     26c:	43a9      	bics	r1, r5
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     26e:	2401      	movs	r4, #1
     270:	4321      	orrs	r1, r4
     272:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     274:	5499      	strb	r1, [r3, r2]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     276:	20b7      	movs	r0, #183	; 0xb7
     278:	5c19      	ldrb	r1, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     27a:	3ac0      	subs	r2, #192	; 0xc0
     27c:	4011      	ands	r1, r2
	tmp |= PORT_PMUX_PMUXO(data);
     27e:	2260      	movs	r2, #96	; 0x60
     280:	4311      	orrs	r1, r2
     282:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     284:	5419      	strb	r1, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     286:	21ce      	movs	r1, #206	; 0xce
     288:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PINCFG_PMUXEN;
     28a:	43aa      	bics	r2, r5
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     28c:	4322      	orrs	r2, r4
     28e:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     290:	545a      	strb	r2, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     292:	5c1a      	ldrb	r2, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     294:	39bf      	subs	r1, #191	; 0xbf
     296:	438a      	bics	r2, r1
	tmp |= PORT_PMUX_PMUXE(data);
     298:	2106      	movs	r1, #6
     29a:	430a      	orrs	r2, r1
     29c:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     29e:	541a      	strb	r2, [r3, r0]

	gpio_set_pin_function(PB15, PINMUX_PB15G_CAN1_RX);

	gpio_set_pin_function(PB14, PINMUX_PB14G_CAN1_TX);
}
     2a0:	bd30      	pop	{r4, r5, pc}
	...

000002a4 <CAN_1_init>:
 * \brief CAN initialization function
 *
 * Enables CAN peripheral, clocks and initializes CAN driver
 */
void CAN_1_init(void)
{
     2a4:	b510      	push	{r4, lr}
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_CAN1;
     2a6:	4a08      	ldr	r2, [pc, #32]	; (2c8 <CAN_1_init+0x24>)
     2a8:	6911      	ldr	r1, [r2, #16]
     2aa:	2380      	movs	r3, #128	; 0x80
     2ac:	009b      	lsls	r3, r3, #2
     2ae:	430b      	orrs	r3, r1
     2b0:	6113      	str	r3, [r2, #16]
     2b2:	2140      	movs	r1, #64	; 0x40
     2b4:	23ec      	movs	r3, #236	; 0xec
     2b6:	4a05      	ldr	r2, [pc, #20]	; (2cc <CAN_1_init+0x28>)
     2b8:	50d1      	str	r1, [r2, r3]
	hri_mclk_set_AHBMASK_CAN1_bit(MCLK);
	hri_gclk_write_PCHCTRL_reg(GCLK, CAN1_GCLK_ID, CONF_GCLK_CAN1_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
	can_async_init(&CAN_1, CAN1);
     2ba:	4905      	ldr	r1, [pc, #20]	; (2d0 <CAN_1_init+0x2c>)
     2bc:	4805      	ldr	r0, [pc, #20]	; (2d4 <CAN_1_init+0x30>)
     2be:	4b06      	ldr	r3, [pc, #24]	; (2d8 <CAN_1_init+0x34>)
     2c0:	4798      	blx	r3
	CAN_1_PORT_init();
     2c2:	4b06      	ldr	r3, [pc, #24]	; (2dc <CAN_1_init+0x38>)
     2c4:	4798      	blx	r3
}
     2c6:	bd10      	pop	{r4, pc}
     2c8:	40000800 	.word	0x40000800
     2cc:	40001c00 	.word	0x40001c00
     2d0:	42002000 	.word	0x42002000
     2d4:	20000100 	.word	0x20000100
     2d8:	00000329 	.word	0x00000329
     2dc:	00000261 	.word	0x00000261

000002e0 <system_init>:

void system_init(void)
{
     2e0:	b510      	push	{r4, lr}
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
	_init_chip();
     2e2:	4b04      	ldr	r3, [pc, #16]	; (2f4 <system_init+0x14>)
     2e4:	4798      	blx	r3
	init_mcu();

	FLASH_0_init();
     2e6:	4b04      	ldr	r3, [pc, #16]	; (2f8 <system_init+0x18>)
     2e8:	4798      	blx	r3

	TARGET_IO_init();
     2ea:	4b04      	ldr	r3, [pc, #16]	; (2fc <system_init+0x1c>)
     2ec:	4798      	blx	r3
	CAN_1_init();
     2ee:	4b04      	ldr	r3, [pc, #16]	; (300 <system_init+0x20>)
     2f0:	4798      	blx	r3
}
     2f2:	bd10      	pop	{r4, pc}
     2f4:	000007dd 	.word	0x000007dd
     2f8:	000001ad 	.word	0x000001ad
     2fc:	00000235 	.word	0x00000235
     300:	000002a5 	.word	0x000002a5

00000304 <can_tx_done>:

/**
 * \internal Callback of CAN Message Write finished
 */
static void can_tx_done(struct _can_async_device *dev)
{
     304:	b510      	push	{r4, lr}
	struct can_async_descriptor *const descr = CONTAINER_OF(dev, struct can_async_descriptor, dev);

	if (descr->cb.tx_done) {
     306:	69c3      	ldr	r3, [r0, #28]
     308:	2b00      	cmp	r3, #0
     30a:	d000      	beq.n	30e <can_tx_done+0xa>
		descr->cb.tx_done(descr);
     30c:	4798      	blx	r3
	}
}
     30e:	bd10      	pop	{r4, pc}

00000310 <can_rx_done>:

/**
 * \internal Callback of CAN Message Read finished
 */
static void can_rx_done(struct _can_async_device *dev)
{
     310:	b510      	push	{r4, lr}
	struct can_async_descriptor *const descr = CONTAINER_OF(dev, struct can_async_descriptor, dev);

	if (descr->cb.rx_done) {
     312:	6a03      	ldr	r3, [r0, #32]
     314:	2b00      	cmp	r3, #0
     316:	d000      	beq.n	31a <can_rx_done+0xa>
		descr->cb.rx_done(descr);
     318:	4798      	blx	r3
	}
}
     31a:	bd10      	pop	{r4, pc}

0000031c <can_irq_handler>:

/**
 * \internal Callback of CAN Interrupt
 */
static void can_irq_handler(struct _can_async_device *dev, enum can_async_interrupt_type type)
{
     31c:	b510      	push	{r4, lr}
	struct can_async_descriptor *const descr = CONTAINER_OF(dev, struct can_async_descriptor, dev);

	if (descr->cb.irq_handler) {
     31e:	6a43      	ldr	r3, [r0, #36]	; 0x24
     320:	2b00      	cmp	r3, #0
     322:	d000      	beq.n	326 <can_irq_handler+0xa>
		descr->cb.irq_handler(descr, type);
     324:	4798      	blx	r3
	}
}
     326:	bd10      	pop	{r4, pc}

00000328 <can_async_init>:
{
     328:	b570      	push	{r4, r5, r6, lr}
     32a:	0004      	movs	r4, r0
     32c:	000d      	movs	r5, r1
	ASSERT(descr && hw);
     32e:	2800      	cmp	r0, #0
     330:	d015      	beq.n	35e <can_async_init+0x36>
     332:	2900      	cmp	r1, #0
     334:	d011      	beq.n	35a <can_async_init+0x32>
     336:	2001      	movs	r0, #1
     338:	2241      	movs	r2, #65	; 0x41
     33a:	490a      	ldr	r1, [pc, #40]	; (364 <can_async_init+0x3c>)
     33c:	4b0a      	ldr	r3, [pc, #40]	; (368 <can_async_init+0x40>)
     33e:	4798      	blx	r3
	rc = _can_async_init(&descr->dev, hw);
     340:	0029      	movs	r1, r5
     342:	0020      	movs	r0, r4
     344:	4b09      	ldr	r3, [pc, #36]	; (36c <can_async_init+0x44>)
     346:	4798      	blx	r3
	if (rc) {
     348:	2800      	cmp	r0, #0
     34a:	d105      	bne.n	358 <can_async_init+0x30>
	descr->dev.cb.tx_done     = can_tx_done;
     34c:	4b08      	ldr	r3, [pc, #32]	; (370 <can_async_init+0x48>)
     34e:	6063      	str	r3, [r4, #4]
	descr->dev.cb.rx_done     = can_rx_done;
     350:	4b08      	ldr	r3, [pc, #32]	; (374 <can_async_init+0x4c>)
     352:	60a3      	str	r3, [r4, #8]
	descr->dev.cb.irq_handler = can_irq_handler;
     354:	4b08      	ldr	r3, [pc, #32]	; (378 <can_async_init+0x50>)
     356:	60e3      	str	r3, [r4, #12]
}
     358:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(descr && hw);
     35a:	2000      	movs	r0, #0
     35c:	e7ec      	b.n	338 <can_async_init+0x10>
     35e:	2000      	movs	r0, #0
     360:	e7ea      	b.n	338 <can_async_init+0x10>
     362:	46c0      	nop			; (mov r8, r8)
     364:	00001d68 	.word	0x00001d68
     368:	000005f9 	.word	0x000005f9
     36c:	0000063d 	.word	0x0000063d
     370:	00000305 	.word	0x00000305
     374:	00000311 	.word	0x00000311
     378:	0000031d 	.word	0x0000031d

0000037c <delay_ms>:

/**
 * \brief Perform delay in ms
 */
void delay_ms(const uint16_t ms)
{
     37c:	b510      	push	{r4, lr}
	_delay_cycles(hardware, _get_cycles_for_ms(ms));
     37e:	4b04      	ldr	r3, [pc, #16]	; (390 <delay_ms+0x14>)
     380:	681c      	ldr	r4, [r3, #0]
     382:	4b04      	ldr	r3, [pc, #16]	; (394 <delay_ms+0x18>)
     384:	4798      	blx	r3
     386:	0001      	movs	r1, r0
     388:	0020      	movs	r0, r4
     38a:	4b03      	ldr	r3, [pc, #12]	; (398 <delay_ms+0x1c>)
     38c:	4798      	blx	r3
}
     38e:	bd10      	pop	{r4, pc}
     390:	20000094 	.word	0x20000094
     394:	000007b9 	.word	0x000007b9
     398:	000007d5 	.word	0x000007d5

0000039c <flash_ready>:
 * \internal Ready for a new flash command
 *
 * \param[in] device The pointer to flash device structure
 */
static void flash_ready(struct _flash_device *device)
{
     39c:	b510      	push	{r4, lr}
	struct flash_descriptor *const descr = CONTAINER_OF(device, struct flash_descriptor, dev);
	if (descr->callbacks.cb_ready) {
     39e:	6943      	ldr	r3, [r0, #20]
     3a0:	2b00      	cmp	r3, #0
     3a2:	d000      	beq.n	3a6 <flash_ready+0xa>
		descr->callbacks.cb_ready(descr);
     3a4:	4798      	blx	r3
	}
}
     3a6:	bd10      	pop	{r4, pc}

000003a8 <flash_error>:
 * \internal Error occurs in flash command
 *
 * \param[in] device The pointer to flash device structure
 */
static void flash_error(struct _flash_device *device)
{
     3a8:	b510      	push	{r4, lr}
	struct flash_descriptor *const descr = CONTAINER_OF(device, struct flash_descriptor, dev);
	if (descr->callbacks.cb_error) {
     3aa:	6983      	ldr	r3, [r0, #24]
     3ac:	2b00      	cmp	r3, #0
     3ae:	d000      	beq.n	3b2 <flash_error+0xa>
		descr->callbacks.cb_error(descr);
     3b0:	4798      	blx	r3
	}
}
     3b2:	bd10      	pop	{r4, pc}

000003b4 <flash_init>:
{
     3b4:	b570      	push	{r4, r5, r6, lr}
     3b6:	0004      	movs	r4, r0
     3b8:	000d      	movs	r5, r1
	ASSERT(flash && hw);
     3ba:	2800      	cmp	r0, #0
     3bc:	d013      	beq.n	3e6 <flash_init+0x32>
     3be:	2900      	cmp	r1, #0
     3c0:	d00f      	beq.n	3e2 <flash_init+0x2e>
     3c2:	2001      	movs	r0, #1
     3c4:	2238      	movs	r2, #56	; 0x38
     3c6:	4909      	ldr	r1, [pc, #36]	; (3ec <flash_init+0x38>)
     3c8:	4b09      	ldr	r3, [pc, #36]	; (3f0 <flash_init+0x3c>)
     3ca:	4798      	blx	r3
	rc = _flash_init(&flash->dev, hw);
     3cc:	0029      	movs	r1, r5
     3ce:	0020      	movs	r0, r4
     3d0:	4b08      	ldr	r3, [pc, #32]	; (3f4 <flash_init+0x40>)
     3d2:	4798      	blx	r3
	if (rc) {
     3d4:	2800      	cmp	r0, #0
     3d6:	d103      	bne.n	3e0 <flash_init+0x2c>
	flash->dev.flash_cb.ready_cb = flash_ready;
     3d8:	4b07      	ldr	r3, [pc, #28]	; (3f8 <flash_init+0x44>)
     3da:	6023      	str	r3, [r4, #0]
	flash->dev.flash_cb.error_cb = flash_error;
     3dc:	4b07      	ldr	r3, [pc, #28]	; (3fc <flash_init+0x48>)
     3de:	6063      	str	r3, [r4, #4]
}
     3e0:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(flash && hw);
     3e2:	2000      	movs	r0, #0
     3e4:	e7ee      	b.n	3c4 <flash_init+0x10>
     3e6:	2000      	movs	r0, #0
     3e8:	e7ec      	b.n	3c4 <flash_init+0x10>
     3ea:	46c0      	nop			; (mov r8, r8)
     3ec:	00001d84 	.word	0x00001d84
     3f0:	000005f9 	.word	0x000005f9
     3f4:	000008d1 	.word	0x000008d1
     3f8:	0000039d 	.word	0x0000039d
     3fc:	000003a9 	.word	0x000003a9

00000400 <io_write>:

/**
 * \brief I/O write interface
 */
int32_t io_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
     400:	b570      	push	{r4, r5, r6, lr}
     402:	0004      	movs	r4, r0
     404:	000d      	movs	r5, r1
     406:	0016      	movs	r6, r2
	ASSERT(io_descr && buf);
     408:	2800      	cmp	r0, #0
     40a:	d00e      	beq.n	42a <io_write+0x2a>
     40c:	2900      	cmp	r1, #0
     40e:	d00a      	beq.n	426 <io_write+0x26>
     410:	2001      	movs	r0, #1
     412:	2234      	movs	r2, #52	; 0x34
     414:	4906      	ldr	r1, [pc, #24]	; (430 <io_write+0x30>)
     416:	4b07      	ldr	r3, [pc, #28]	; (434 <io_write+0x34>)
     418:	4798      	blx	r3
	return io_descr->write(io_descr, buf, length);
     41a:	6823      	ldr	r3, [r4, #0]
     41c:	0032      	movs	r2, r6
     41e:	0029      	movs	r1, r5
     420:	0020      	movs	r0, r4
     422:	4798      	blx	r3
}
     424:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(io_descr && buf);
     426:	2000      	movs	r0, #0
     428:	e7f3      	b.n	412 <io_write+0x12>
     42a:	2000      	movs	r0, #0
     42c:	e7f1      	b.n	412 <io_write+0x12>
     42e:	46c0      	nop			; (mov r8, r8)
     430:	00001d9c 	.word	0x00001d9c
     434:	000005f9 	.word	0x000005f9

00000438 <io_read>:

/**
 * \brief I/O read interface
 */
int32_t io_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
     438:	b570      	push	{r4, r5, r6, lr}
     43a:	0004      	movs	r4, r0
     43c:	000d      	movs	r5, r1
     43e:	0016      	movs	r6, r2
	ASSERT(io_descr && buf);
     440:	2800      	cmp	r0, #0
     442:	d00e      	beq.n	462 <io_read+0x2a>
     444:	2900      	cmp	r1, #0
     446:	d00a      	beq.n	45e <io_read+0x26>
     448:	2001      	movs	r0, #1
     44a:	223d      	movs	r2, #61	; 0x3d
     44c:	4906      	ldr	r1, [pc, #24]	; (468 <io_read+0x30>)
     44e:	4b07      	ldr	r3, [pc, #28]	; (46c <io_read+0x34>)
     450:	4798      	blx	r3
	return io_descr->read(io_descr, buf, length);
     452:	6863      	ldr	r3, [r4, #4]
     454:	0032      	movs	r2, r6
     456:	0029      	movs	r1, r5
     458:	0020      	movs	r0, r4
     45a:	4798      	blx	r3
}
     45c:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(io_descr && buf);
     45e:	2000      	movs	r0, #0
     460:	e7f3      	b.n	44a <io_read+0x12>
     462:	2000      	movs	r0, #0
     464:	e7f1      	b.n	44a <io_read+0x12>
     466:	46c0      	nop			; (mov r8, r8)
     468:	00001d9c 	.word	0x00001d9c
     46c:	000005f9 	.word	0x000005f9

00000470 <usart_sync_write>:
 * \param[in] length The number of bytes to write
 *
 * \return The number of bytes written.
 */
static int32_t usart_sync_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
     470:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     472:	0005      	movs	r5, r0
     474:	000e      	movs	r6, r1
     476:	0017      	movs	r7, r2
	uint32_t                      offset = 0;
	struct usart_sync_descriptor *descr  = CONTAINER_OF(io_descr, struct usart_sync_descriptor, io);

	ASSERT(io_descr && buf && length);
     478:	2800      	cmp	r0, #0
     47a:	d023      	beq.n	4c4 <usart_sync_write+0x54>
     47c:	2900      	cmp	r1, #0
     47e:	d023      	beq.n	4c8 <usart_sync_write+0x58>
     480:	2a00      	cmp	r2, #0
     482:	d123      	bne.n	4cc <usart_sync_write+0x5c>
     484:	2000      	movs	r0, #0
     486:	22f1      	movs	r2, #241	; 0xf1
     488:	4911      	ldr	r1, [pc, #68]	; (4d0 <usart_sync_write+0x60>)
     48a:	4b12      	ldr	r3, [pc, #72]	; (4d4 <usart_sync_write+0x64>)
     48c:	4798      	blx	r3
	while (!_usart_sync_is_ready_to_send(&descr->device))
     48e:	002c      	movs	r4, r5
     490:	3408      	adds	r4, #8
     492:	0020      	movs	r0, r4
     494:	4b10      	ldr	r3, [pc, #64]	; (4d8 <usart_sync_write+0x68>)
     496:	4798      	blx	r3
     498:	2800      	cmp	r0, #0
     49a:	d0f8      	beq.n	48e <usart_sync_write+0x1e>
     49c:	2500      	movs	r5, #0
		;
	do {
		_usart_sync_write_byte(&descr->device, buf[offset]);
     49e:	5d71      	ldrb	r1, [r6, r5]
     4a0:	0020      	movs	r0, r4
     4a2:	4b0e      	ldr	r3, [pc, #56]	; (4dc <usart_sync_write+0x6c>)
     4a4:	4798      	blx	r3
		while (!_usart_sync_is_ready_to_send(&descr->device))
     4a6:	0020      	movs	r0, r4
     4a8:	4b0b      	ldr	r3, [pc, #44]	; (4d8 <usart_sync_write+0x68>)
     4aa:	4798      	blx	r3
     4ac:	2800      	cmp	r0, #0
     4ae:	d0fa      	beq.n	4a6 <usart_sync_write+0x36>
			;
	} while (++offset < length);
     4b0:	3501      	adds	r5, #1
     4b2:	42bd      	cmp	r5, r7
     4b4:	d3f3      	bcc.n	49e <usart_sync_write+0x2e>
	while (!_usart_sync_is_transmit_done(&descr->device))
     4b6:	0020      	movs	r0, r4
     4b8:	4b09      	ldr	r3, [pc, #36]	; (4e0 <usart_sync_write+0x70>)
     4ba:	4798      	blx	r3
     4bc:	2800      	cmp	r0, #0
     4be:	d0fa      	beq.n	4b6 <usart_sync_write+0x46>
		;
	return (int32_t)offset;
}
     4c0:	0028      	movs	r0, r5
     4c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	ASSERT(io_descr && buf && length);
     4c4:	2000      	movs	r0, #0
     4c6:	e7de      	b.n	486 <usart_sync_write+0x16>
     4c8:	2000      	movs	r0, #0
     4ca:	e7dc      	b.n	486 <usart_sync_write+0x16>
     4cc:	2001      	movs	r0, #1
     4ce:	e7da      	b.n	486 <usart_sync_write+0x16>
     4d0:	00001db0 	.word	0x00001db0
     4d4:	000005f9 	.word	0x000005f9
     4d8:	00000bc3 	.word	0x00000bc3
     4dc:	00000bb3 	.word	0x00000bb3
     4e0:	00000bcd 	.word	0x00000bcd

000004e4 <usart_sync_read>:
 * \param[in] length The size of a buffer
 *
 * \return The number of bytes read.
 */
static int32_t usart_sync_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
     4e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     4e6:	46ce      	mov	lr, r9
     4e8:	4647      	mov	r7, r8
     4ea:	b580      	push	{r7, lr}
     4ec:	1e05      	subs	r5, r0, #0
     4ee:	4688      	mov	r8, r1
     4f0:	4691      	mov	r9, r2
	uint32_t                      offset = 0;
	struct usart_sync_descriptor *descr  = CONTAINER_OF(io_descr, struct usart_sync_descriptor, io);

	ASSERT(io_descr && buf && length);
     4f2:	d01f      	beq.n	534 <usart_sync_read+0x50>
     4f4:	2900      	cmp	r1, #0
     4f6:	d01f      	beq.n	538 <usart_sync_read+0x54>
     4f8:	2a00      	cmp	r2, #0
     4fa:	d11f      	bne.n	53c <usart_sync_read+0x58>
     4fc:	2000      	movs	r0, #0
     4fe:	2286      	movs	r2, #134	; 0x86
     500:	0052      	lsls	r2, r2, #1
     502:	490f      	ldr	r1, [pc, #60]	; (540 <usart_sync_read+0x5c>)
     504:	4b0f      	ldr	r3, [pc, #60]	; (544 <usart_sync_read+0x60>)
     506:	4798      	blx	r3
	uint32_t                      offset = 0;
     508:	2600      	movs	r6, #0
	do {
		while (!_usart_sync_is_byte_received(&descr->device))
     50a:	002c      	movs	r4, r5
     50c:	3408      	adds	r4, #8
     50e:	0020      	movs	r0, r4
     510:	4b0d      	ldr	r3, [pc, #52]	; (548 <usart_sync_read+0x64>)
     512:	4798      	blx	r3
     514:	2800      	cmp	r0, #0
     516:	d0f8      	beq.n	50a <usart_sync_read+0x26>
			;
		buf[offset] = _usart_sync_read_byte(&descr->device);
     518:	4643      	mov	r3, r8
     51a:	199f      	adds	r7, r3, r6
     51c:	0020      	movs	r0, r4
     51e:	4b0b      	ldr	r3, [pc, #44]	; (54c <usart_sync_read+0x68>)
     520:	4798      	blx	r3
     522:	7038      	strb	r0, [r7, #0]
	} while (++offset < length);
     524:	3601      	adds	r6, #1
     526:	454e      	cmp	r6, r9
     528:	d3ef      	bcc.n	50a <usart_sync_read+0x26>

	return (int32_t)offset;
}
     52a:	0030      	movs	r0, r6
     52c:	bc0c      	pop	{r2, r3}
     52e:	4690      	mov	r8, r2
     530:	4699      	mov	r9, r3
     532:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	ASSERT(io_descr && buf && length);
     534:	2000      	movs	r0, #0
     536:	e7e2      	b.n	4fe <usart_sync_read+0x1a>
     538:	2000      	movs	r0, #0
     53a:	e7e0      	b.n	4fe <usart_sync_read+0x1a>
     53c:	2001      	movs	r0, #1
     53e:	e7de      	b.n	4fe <usart_sync_read+0x1a>
     540:	00001db0 	.word	0x00001db0
     544:	000005f9 	.word	0x000005f9
     548:	00000bd9 	.word	0x00000bd9
     54c:	00000bbb 	.word	0x00000bbb

00000550 <usart_sync_init>:
{
     550:	b570      	push	{r4, r5, r6, lr}
     552:	0004      	movs	r4, r0
     554:	000d      	movs	r5, r1
	ASSERT(descr && hw);
     556:	2800      	cmp	r0, #0
     558:	d014      	beq.n	584 <usart_sync_init+0x34>
     55a:	2900      	cmp	r1, #0
     55c:	d010      	beq.n	580 <usart_sync_init+0x30>
     55e:	2001      	movs	r0, #1
     560:	2234      	movs	r2, #52	; 0x34
     562:	4909      	ldr	r1, [pc, #36]	; (588 <usart_sync_init+0x38>)
     564:	4b09      	ldr	r3, [pc, #36]	; (58c <usart_sync_init+0x3c>)
     566:	4798      	blx	r3
	init_status = _usart_sync_init(&descr->device, hw);
     568:	0020      	movs	r0, r4
     56a:	3008      	adds	r0, #8
     56c:	0029      	movs	r1, r5
     56e:	4b08      	ldr	r3, [pc, #32]	; (590 <usart_sync_init+0x40>)
     570:	4798      	blx	r3
	if (init_status) {
     572:	2800      	cmp	r0, #0
     574:	d103      	bne.n	57e <usart_sync_init+0x2e>
	descr->io.read  = usart_sync_read;
     576:	4b07      	ldr	r3, [pc, #28]	; (594 <usart_sync_init+0x44>)
     578:	6063      	str	r3, [r4, #4]
	descr->io.write = usart_sync_write;
     57a:	4b07      	ldr	r3, [pc, #28]	; (598 <usart_sync_init+0x48>)
     57c:	6023      	str	r3, [r4, #0]
}
     57e:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(descr && hw);
     580:	2000      	movs	r0, #0
     582:	e7ed      	b.n	560 <usart_sync_init+0x10>
     584:	2000      	movs	r0, #0
     586:	e7eb      	b.n	560 <usart_sync_init+0x10>
     588:	00001db0 	.word	0x00001db0
     58c:	000005f9 	.word	0x000005f9
     590:	00000b75 	.word	0x00000b75
     594:	000004e5 	.word	0x000004e5
     598:	00000471 	.word	0x00000471

0000059c <usart_sync_enable>:
{
     59c:	b510      	push	{r4, lr}
     59e:	0004      	movs	r4, r0
	ASSERT(descr);
     5a0:	1e43      	subs	r3, r0, #1
     5a2:	4198      	sbcs	r0, r3
     5a4:	b2c0      	uxtb	r0, r0
     5a6:	2253      	movs	r2, #83	; 0x53
     5a8:	4904      	ldr	r1, [pc, #16]	; (5bc <usart_sync_enable+0x20>)
     5aa:	4b05      	ldr	r3, [pc, #20]	; (5c0 <usart_sync_enable+0x24>)
     5ac:	4798      	blx	r3
	_usart_sync_enable(&descr->device);
     5ae:	0020      	movs	r0, r4
     5b0:	3008      	adds	r0, #8
     5b2:	4b04      	ldr	r3, [pc, #16]	; (5c4 <usart_sync_enable+0x28>)
     5b4:	4798      	blx	r3
}
     5b6:	2000      	movs	r0, #0
     5b8:	bd10      	pop	{r4, pc}
     5ba:	46c0      	nop			; (mov r8, r8)
     5bc:	00001db0 	.word	0x00001db0
     5c0:	000005f9 	.word	0x000005f9
     5c4:	00000ba1 	.word	0x00000ba1

000005c8 <usart_sync_get_io_descriptor>:
{
     5c8:	b570      	push	{r4, r5, r6, lr}
     5ca:	0004      	movs	r4, r0
     5cc:	000d      	movs	r5, r1
	ASSERT(descr && io);
     5ce:	2800      	cmp	r0, #0
     5d0:	d00b      	beq.n	5ea <usart_sync_get_io_descriptor+0x22>
     5d2:	2900      	cmp	r1, #0
     5d4:	d007      	beq.n	5e6 <usart_sync_get_io_descriptor+0x1e>
     5d6:	2001      	movs	r0, #1
     5d8:	2269      	movs	r2, #105	; 0x69
     5da:	4905      	ldr	r1, [pc, #20]	; (5f0 <usart_sync_get_io_descriptor+0x28>)
     5dc:	4b05      	ldr	r3, [pc, #20]	; (5f4 <usart_sync_get_io_descriptor+0x2c>)
     5de:	4798      	blx	r3
	*io = &descr->io;
     5e0:	602c      	str	r4, [r5, #0]
}
     5e2:	2000      	movs	r0, #0
     5e4:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(descr && io);
     5e6:	2000      	movs	r0, #0
     5e8:	e7f6      	b.n	5d8 <usart_sync_get_io_descriptor+0x10>
     5ea:	2000      	movs	r0, #0
     5ec:	e7f4      	b.n	5d8 <usart_sync_get_io_descriptor+0x10>
     5ee:	46c0      	nop			; (mov r8, r8)
     5f0:	00001db0 	.word	0x00001db0
     5f4:	000005f9 	.word	0x000005f9

000005f8 <assert>:
/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
	if (!(condition)) {
     5f8:	2800      	cmp	r0, #0
     5fa:	d100      	bne.n	5fe <assert+0x6>
		__asm("BKPT #0");
     5fc:	be00      	bkpt	0x0000
	}
	(void)file;
	(void)line;
}
     5fe:	4770      	bx	lr

00000600 <_sbrk>:

/**
 * \brief Replacement of C library of _sbrk
 */
extern caddr_t _sbrk(int incr)
{
     600:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *       prev_heap;

	if (heap == NULL) {
     602:	4a06      	ldr	r2, [pc, #24]	; (61c <_sbrk+0x1c>)
     604:	6812      	ldr	r2, [r2, #0]
     606:	2a00      	cmp	r2, #0
     608:	d004      	beq.n	614 <_sbrk+0x14>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
     60a:	4a04      	ldr	r2, [pc, #16]	; (61c <_sbrk+0x1c>)
     60c:	6810      	ldr	r0, [r2, #0]

	heap += incr;
     60e:	18c3      	adds	r3, r0, r3
     610:	6013      	str	r3, [r2, #0]

	return (caddr_t)prev_heap;
}
     612:	4770      	bx	lr
		heap = (unsigned char *)&_end;
     614:	4902      	ldr	r1, [pc, #8]	; (620 <_sbrk+0x20>)
     616:	4a01      	ldr	r2, [pc, #4]	; (61c <_sbrk+0x1c>)
     618:	6011      	str	r1, [r2, #0]
     61a:	e7f6      	b.n	60a <_sbrk+0xa>
     61c:	20000098 	.word	0x20000098
     620:	200022c0 	.word	0x200022c0

00000624 <_close>:
 */
extern int _close(int file)
{
	(void)file;
	return -1;
}
     624:	2001      	movs	r0, #1
     626:	4240      	negs	r0, r0
     628:	4770      	bx	lr

0000062a <_fstat>:
 * \brief Replacement of C library of _fstat
 */
extern int _fstat(int file, struct stat *st)
{
	(void)file;
	st->st_mode = S_IFCHR;
     62a:	2380      	movs	r3, #128	; 0x80
     62c:	019b      	lsls	r3, r3, #6
     62e:	604b      	str	r3, [r1, #4]

	return 0;
}
     630:	2000      	movs	r0, #0
     632:	4770      	bx	lr

00000634 <_isatty>:
 */
extern int _isatty(int file)
{
	(void)file;
	return 1;
}
     634:	2001      	movs	r0, #1
     636:	4770      	bx	lr

00000638 <_lseek>:
 */
extern int _lseek(int file, int ptr, int dir)
{
	(void)file, (void)ptr, (void)dir;
	return 0;
}
     638:	2000      	movs	r0, #0
     63a:	4770      	bx	lr

0000063c <_can_async_init>:

/**
 * \brief Initialize CAN.
 */
int32_t _can_async_init(struct _can_async_device *const dev, void *const hw)
{
     63c:	b5f0      	push	{r4, r5, r6, r7, lr}
	dev->hw = hw;
     63e:	6001      	str	r1, [r0, #0]
}

static inline void hri_can_set_CCCR_INIT_bit(const void *const hw)
{
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg |= CAN_CCCR_INIT;
     640:	698b      	ldr	r3, [r1, #24]
     642:	2201      	movs	r2, #1
     644:	4313      	orrs	r3, r2
     646:	618b      	str	r3, [r1, #24]
	hri_can_set_CCCR_INIT_bit(dev->hw);
	while (hri_can_get_CCCR_INIT_bit(dev->hw) == 0)
     648:	6803      	ldr	r3, [r0, #0]
}

static inline bool hri_can_get_CCCR_INIT_bit(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Can *)hw)->CCCR.reg;
     64a:	699a      	ldr	r2, [r3, #24]
     64c:	07d2      	lsls	r2, r2, #31
     64e:	d5fb      	bpl.n	648 <_can_async_init+0xc>
}

static inline void hri_can_set_CCCR_CCE_bit(const void *const hw)
{
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg |= CAN_CCCR_CCE;
     650:	699a      	ldr	r2, [r3, #24]
     652:	2402      	movs	r4, #2
     654:	4322      	orrs	r2, r4
     656:	619a      	str	r2, [r3, #24]
		hri_can_write_ILE_reg(dev->hw, CAN_ILE_EINT0);
	}
#endif

#ifdef CONF_CAN1_ENABLED
	if (hw == CAN1) {
     658:	4b33      	ldr	r3, [pc, #204]	; (728 <_can_async_init+0xec>)
     65a:	4299      	cmp	r1, r3
     65c:	d00f      	beq.n	67e <_can_async_init+0x42>
		hri_can_write_ILE_reg(dev->hw, CAN_ILE_EINT0);
	}
#endif

	/* Disable CCE to prevent Configuration Change */
	hri_can_clear_CCCR_CCE_bit(dev->hw);
     65e:	6802      	ldr	r2, [r0, #0]
}

static inline void hri_can_clear_CCCR_CCE_bit(const void *const hw)
{
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg &= ~CAN_CCCR_CCE;
     660:	6993      	ldr	r3, [r2, #24]
     662:	2102      	movs	r1, #2
     664:	438b      	bics	r3, r1
     666:	6193      	str	r3, [r2, #24]
	hri_can_clear_CCCR_INIT_bit(dev->hw);
     668:	6802      	ldr	r2, [r0, #0]
	((Can *)hw)->CCCR.reg &= ~CAN_CCCR_INIT;
     66a:	6993      	ldr	r3, [r2, #24]
     66c:	3901      	subs	r1, #1
     66e:	438b      	bics	r3, r1
     670:	6193      	str	r3, [r2, #24]
	while (hri_can_get_CCCR_INIT_bit(dev->hw)) {
     672:	6803      	ldr	r3, [r0, #0]
	tmp = ((Can *)hw)->CCCR.reg;
     674:	699b      	ldr	r3, [r3, #24]
     676:	07db      	lsls	r3, r3, #31
     678:	d4fb      	bmi.n	672 <_can_async_init+0x36>
	};

	return ERR_NONE;
}
     67a:	2000      	movs	r0, #0
     67c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		_can1_dev    = dev;
     67e:	4b2b      	ldr	r3, [pc, #172]	; (72c <_can_async_init+0xf0>)
     680:	001a      	movs	r2, r3
     682:	c201      	stmia	r2!, {r0}
		dev->context = (void *)&_can1_context;
     684:	492a      	ldr	r1, [pc, #168]	; (730 <_can_async_init+0xf4>)
     686:	6181      	str	r1, [r0, #24]
		hri_can_set_CCCR_reg(dev->hw, CONF_CAN1_CCCR_REG);
     688:	6801      	ldr	r1, [r0, #0]
}

static inline void hri_can_set_CCCR_reg(const void *const hw, hri_can_cccr_reg_t mask)
{
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg |= mask;
     68a:	698c      	ldr	r4, [r1, #24]
     68c:	618c      	str	r4, [r1, #24]
		hri_can_write_MRCFG_reg(dev->hw, CONF_CAN1_MRCFG_REG);
     68e:	6801      	ldr	r1, [r0, #0]
	((Can *)hw)->MRCFG.reg = data;
     690:	2400      	movs	r4, #0
     692:	608c      	str	r4, [r1, #8]
		hri_can_write_NBTP_reg(dev->hw, CONF_CAN1_BTP_REG);
     694:	6801      	ldr	r1, [r0, #0]
}

static inline void hri_can_write_NBTP_reg(const void *const hw, hri_can_nbtp_reg_t data)
{
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->NBTP.reg = data;
     696:	4d27      	ldr	r5, [pc, #156]	; (734 <_can_async_init+0xf8>)
     698:	61cd      	str	r5, [r1, #28]
		hri_can_write_DBTP_reg(dev->hw, CONF_CAN1_DBTP_REG);
     69a:	6801      	ldr	r1, [r0, #0]
	((Can *)hw)->DBTP.reg = data;
     69c:	4d26      	ldr	r5, [pc, #152]	; (738 <_can_async_init+0xfc>)
     69e:	60cd      	str	r5, [r1, #12]
		hri_can_write_RXF0C_reg(dev->hw, CONF_CAN1_RXF0C_REG | CAN_RXF0C_F0SA((uint32_t)can1_rx_fifo));
     6a0:	4d26      	ldr	r5, [pc, #152]	; (73c <_can_async_init+0x100>)
     6a2:	042d      	lsls	r5, r5, #16
     6a4:	0c2d      	lsrs	r5, r5, #16
     6a6:	2180      	movs	r1, #128	; 0x80
     6a8:	0289      	lsls	r1, r1, #10
     6aa:	430d      	orrs	r5, r1
}

static inline void hri_can_write_RXF0C_reg(const void *const hw, hri_can_rxf0c_reg_t data)
{
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->RXF0C.reg = data;
     6ac:	26a0      	movs	r6, #160	; 0xa0
     6ae:	6807      	ldr	r7, [r0, #0]
     6b0:	51bd      	str	r5, [r7, r6]
}

static inline void hri_can_write_RXESC_reg(const void *const hw, hri_can_rxesc_reg_t data)
{
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->RXESC.reg = data;
     6b2:	25bc      	movs	r5, #188	; 0xbc
     6b4:	6806      	ldr	r6, [r0, #0]
     6b6:	5174      	str	r4, [r6, r5]
}

static inline void hri_can_write_TXESC_reg(const void *const hw, hri_can_txesc_reg_t data)
{
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->TXESC.reg = data;
     6b8:	350c      	adds	r5, #12
     6ba:	6806      	ldr	r6, [r0, #0]
     6bc:	5174      	str	r4, [r6, r5]
		hri_can_write_TXBC_reg(dev->hw, CONF_CAN1_TXBC_REG | CAN_TXBC_TBSA((uint32_t)can1_tx_fifo));
     6be:	4d20      	ldr	r5, [pc, #128]	; (740 <_can_async_init+0x104>)
     6c0:	042d      	lsls	r5, r5, #16
     6c2:	0c2d      	lsrs	r5, r5, #16
     6c4:	2680      	movs	r6, #128	; 0x80
     6c6:	04b6      	lsls	r6, r6, #18
     6c8:	4335      	orrs	r5, r6
	((Can *)hw)->TXBC.reg = data;
     6ca:	26c0      	movs	r6, #192	; 0xc0
     6cc:	6807      	ldr	r7, [r0, #0]
     6ce:	51bd      	str	r5, [r7, r6]
		hri_can_write_TXEFC_reg(dev->hw, CONF_CAN1_TXEFC_REG | CAN_TXEFC_EFSA((uint32_t)can1_tx_event_fifo));
     6d0:	0412      	lsls	r2, r2, #16
     6d2:	0c12      	lsrs	r2, r2, #16
     6d4:	430a      	orrs	r2, r1
}

static inline void hri_can_write_TXEFC_reg(const void *const hw, hri_can_txefc_reg_t data)
{
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->TXEFC.reg = data;
     6d6:	25f0      	movs	r5, #240	; 0xf0
     6d8:	6806      	ldr	r6, [r0, #0]
     6da:	5172      	str	r2, [r6, r5]
	((Can *)hw)->GFC.reg = data;
     6dc:	3d70      	subs	r5, #112	; 0x70
     6de:	2228      	movs	r2, #40	; 0x28
     6e0:	6806      	ldr	r6, [r0, #0]
     6e2:	5172      	str	r2, [r6, r5]
		hri_can_write_SIDFC_reg(dev->hw, CONF_CAN1_SIDFC_REG | CAN_SIDFC_FLSSA((uint32_t)can1_rx_std_filter));
     6e4:	001a      	movs	r2, r3
     6e6:	3214      	adds	r2, #20
     6e8:	0412      	lsls	r2, r2, #16
     6ea:	0c12      	lsrs	r2, r2, #16
     6ec:	430a      	orrs	r2, r1
	((Can *)hw)->SIDFC.reg = data;
     6ee:	2684      	movs	r6, #132	; 0x84
     6f0:	6807      	ldr	r7, [r0, #0]
     6f2:	51ba      	str	r2, [r7, r6]
		hri_can_write_XIDFC_reg(dev->hw, CONF_CAN1_XIDFC_REG | CAN_XIDFC_FLESA((uint32_t)can1_rx_ext_filter));
     6f4:	331c      	adds	r3, #28
     6f6:	041b      	lsls	r3, r3, #16
     6f8:	0c1b      	lsrs	r3, r3, #16
     6fa:	430b      	orrs	r3, r1
	((Can *)hw)->XIDFC.reg = data;
     6fc:	2288      	movs	r2, #136	; 0x88
     6fe:	6801      	ldr	r1, [r0, #0]
     700:	508b      	str	r3, [r1, r2]
	((Can *)hw)->XIDAM.reg = data;
     702:	2390      	movs	r3, #144	; 0x90
     704:	6802      	ldr	r2, [r0, #0]
     706:	50d4      	str	r4, [r2, r3]
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     708:	4b0e      	ldr	r3, [pc, #56]	; (744 <_can_async_init+0x108>)
     70a:	2280      	movs	r2, #128	; 0x80
     70c:	0252      	lsls	r2, r2, #9
     70e:	515a      	str	r2, [r3, r5]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
     710:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
     714:	f3bf 8f6f 	isb	sy
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     718:	21c0      	movs	r1, #192	; 0xc0
     71a:	0049      	lsls	r1, r1, #1
     71c:	505a      	str	r2, [r3, r1]
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     71e:	601a      	str	r2, [r3, #0]
		hri_can_write_ILE_reg(dev->hw, CAN_ILE_EINT0);
     720:	6803      	ldr	r3, [r0, #0]
	((Can *)hw)->ILE.reg = data;
     722:	2201      	movs	r2, #1
     724:	65da      	str	r2, [r3, #92]	; 0x5c
     726:	e79a      	b.n	65e <_can_async_init+0x22>
     728:	42002000 	.word	0x42002000
     72c:	2000009c 	.word	0x2000009c
     730:	20000000 	.word	0x20000000
     734:	06020a07 	.word	0x06020a07
     738:	00000a33 	.word	0x00000a33
     73c:	20000148 	.word	0x20000148
     740:	20000128 	.word	0x20000128
     744:	e000e100 	.word	0xe000e100

00000748 <CAN1_Handler>:

/*
 * \brief CAN interrupt handler
 */
void CAN1_Handler(void)
{
     748:	b570      	push	{r4, r5, r6, lr}
	struct _can_async_device *dev = _can1_dev;
     74a:	4b1a      	ldr	r3, [pc, #104]	; (7b4 <CAN1_Handler+0x6c>)
     74c:	681d      	ldr	r5, [r3, #0]
	uint32_t                  ir;
	ir = hri_can_read_IR_reg(dev->hw);
     74e:	682b      	ldr	r3, [r5, #0]
	return ((Can *)hw)->IR.reg;
     750:	6d1c      	ldr	r4, [r3, #80]	; 0x50

	if (ir & CAN_IR_RF0N) {
     752:	07e3      	lsls	r3, r4, #31
     754:	d414      	bmi.n	780 <CAN1_Handler+0x38>
		dev->cb.rx_done(dev);
	}

	if (ir & CAN_IR_TC) {
     756:	05a3      	lsls	r3, r4, #22
     758:	d416      	bmi.n	788 <CAN1_Handler+0x40>
		dev->cb.tx_done(dev);
	}

	if (ir & CAN_IR_BO) {
     75a:	01a3      	lsls	r3, r4, #6
     75c:	d418      	bmi.n	790 <CAN1_Handler+0x48>
		dev->cb.irq_handler(dev, CAN_IRQ_BO);
	}

	if (ir & CAN_IR_EW) {
     75e:	01e3      	lsls	r3, r4, #7
     760:	d41b      	bmi.n	79a <CAN1_Handler+0x52>
		dev->cb.irq_handler(dev, CAN_IRQ_EW);
	}

	if (ir & CAN_IR_EP) {
     762:	0223      	lsls	r3, r4, #8
     764:	d507      	bpl.n	776 <CAN1_Handler+0x2e>
		dev->cb.irq_handler(dev, hri_can_get_PSR_EP_bit(dev->hw) ? CAN_IRQ_EP : CAN_IRQ_EA);
     766:	68eb      	ldr	r3, [r5, #12]
     768:	682a      	ldr	r2, [r5, #0]
	return (((Can *)hw)->PSR.reg & CAN_PSR_EP) >> CAN_PSR_EP_Pos;
     76a:	6c52      	ldr	r2, [r2, #68]	; 0x44
     76c:	0692      	lsls	r2, r2, #26
     76e:	d519      	bpl.n	7a4 <CAN1_Handler+0x5c>
     770:	2102      	movs	r1, #2
     772:	0028      	movs	r0, r5
     774:	4798      	blx	r3
	}

	if (ir & CAN_IR_RF0L) {
     776:	0723      	lsls	r3, r4, #28
     778:	d416      	bmi.n	7a8 <CAN1_Handler+0x60>
		dev->cb.irq_handler(dev, CAN_IRQ_DO);
	}

	hri_can_write_IR_reg(dev->hw, ir);
     77a:	682b      	ldr	r3, [r5, #0]
	((Can *)hw)->IR.reg = data;
     77c:	651c      	str	r4, [r3, #80]	; 0x50
}
     77e:	bd70      	pop	{r4, r5, r6, pc}
		dev->cb.rx_done(dev);
     780:	0028      	movs	r0, r5
     782:	68ab      	ldr	r3, [r5, #8]
     784:	4798      	blx	r3
     786:	e7e6      	b.n	756 <CAN1_Handler+0xe>
		dev->cb.tx_done(dev);
     788:	0028      	movs	r0, r5
     78a:	686b      	ldr	r3, [r5, #4]
     78c:	4798      	blx	r3
     78e:	e7e4      	b.n	75a <CAN1_Handler+0x12>
		dev->cb.irq_handler(dev, CAN_IRQ_BO);
     790:	2103      	movs	r1, #3
     792:	0028      	movs	r0, r5
     794:	68eb      	ldr	r3, [r5, #12]
     796:	4798      	blx	r3
     798:	e7e1      	b.n	75e <CAN1_Handler+0x16>
		dev->cb.irq_handler(dev, CAN_IRQ_EW);
     79a:	2100      	movs	r1, #0
     79c:	0028      	movs	r0, r5
     79e:	68eb      	ldr	r3, [r5, #12]
     7a0:	4798      	blx	r3
     7a2:	e7de      	b.n	762 <CAN1_Handler+0x1a>
		dev->cb.irq_handler(dev, hri_can_get_PSR_EP_bit(dev->hw) ? CAN_IRQ_EP : CAN_IRQ_EA);
     7a4:	2101      	movs	r1, #1
     7a6:	e7e4      	b.n	772 <CAN1_Handler+0x2a>
		dev->cb.irq_handler(dev, CAN_IRQ_DO);
     7a8:	2104      	movs	r1, #4
     7aa:	0028      	movs	r0, r5
     7ac:	68eb      	ldr	r3, [r5, #12]
     7ae:	4798      	blx	r3
     7b0:	e7e3      	b.n	77a <CAN1_Handler+0x32>
     7b2:	46c0      	nop			; (mov r8, r8)
     7b4:	2000009c 	.word	0x2000009c

000007b8 <_get_cycles_for_ms>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
uint32_t _get_cycles_for_ms(const uint16_t ms)
{
     7b8:	b510      	push	{r4, lr}
		return (ms * (freq / 100000) + 2) / 3 * 100;
     7ba:	0103      	lsls	r3, r0, #4
     7bc:	1a1b      	subs	r3, r3, r0
     7be:	015b      	lsls	r3, r3, #5
     7c0:	1a18      	subs	r0, r3, r0
     7c2:	3002      	adds	r0, #2
     7c4:	2103      	movs	r1, #3
     7c6:	4b02      	ldr	r3, [pc, #8]	; (7d0 <_get_cycles_for_ms+0x18>)
     7c8:	4798      	blx	r3
     7ca:	2364      	movs	r3, #100	; 0x64
     7cc:	4358      	muls	r0, r3
	return _get_cycles_for_ms_internal(ms, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
}
     7ce:	bd10      	pop	{r4, pc}
     7d0:	0000082f 	.word	0x0000082f

000007d4 <_delay_cycles>:
{
#ifndef _UNIT_TEST_
	(void)hw;
	(void)cycles;
#if defined __GNUC__
	__asm(".syntax unified\n"
     7d4:	3901      	subs	r1, #1
     7d6:	d8fd      	bhi.n	7d4 <_delay_cycles>
	__asm("__delay:\n"
	      "subs r1, r1, #1\n"
	      "bhi __delay\n");
#endif
#endif
}
     7d8:	4770      	bx	lr
	...

000007dc <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
     7dc:	b510      	push	{r4, lr}
}

static inline void hri_nvmctrl_set_CTRLB_RWS_bf(const void *const hw, hri_nvmctrl_ctrlb_reg_t mask)
{
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLB.reg |= NVMCTRL_CTRLB_RWS(mask);
     7de:	4a09      	ldr	r2, [pc, #36]	; (804 <_init_chip+0x28>)
     7e0:	6853      	ldr	r3, [r2, #4]
     7e2:	2104      	movs	r1, #4
     7e4:	430b      	orrs	r3, r1
     7e6:	6053      	str	r3, [r2, #4]
	hri_nvmctrl_set_CTRLB_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);

	_osc32kctrl_init_sources();
     7e8:	4b07      	ldr	r3, [pc, #28]	; (808 <_init_chip+0x2c>)
     7ea:	4798      	blx	r3
	_oscctrl_init_sources();
     7ec:	4b07      	ldr	r3, [pc, #28]	; (80c <_init_chip+0x30>)
     7ee:	4798      	blx	r3
	_mclk_init();
     7f0:	4b07      	ldr	r3, [pc, #28]	; (810 <_init_chip+0x34>)
     7f2:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
#endif
	_oscctrl_init_referenced_generators();
     7f4:	4b07      	ldr	r3, [pc, #28]	; (814 <_init_chip+0x38>)
     7f6:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
     7f8:	20ff      	movs	r0, #255	; 0xff
     7fa:	4b07      	ldr	r3, [pc, #28]	; (818 <_init_chip+0x3c>)
     7fc:	4798      	blx	r3

	_div_init();
     7fe:	4b07      	ldr	r3, [pc, #28]	; (81c <_init_chip+0x40>)
     800:	4798      	blx	r3
#endif

#if (CONF_PORT_EVCTRL_PORT_0 | CONF_PORT_EVCTRL_PORT_1 | CONF_PORT_EVCTRL_PORT_2 | CONF_PORT_EVCTRL_PORT_3)
	_port_event_init();
#endif
}
     802:	bd10      	pop	{r4, pc}
     804:	41004000 	.word	0x41004000
     808:	00000961 	.word	0x00000961
     80c:	00000985 	.word	0x00000985
     810:	000008c5 	.word	0x000008c5
     814:	00000989 	.word	0x00000989
     818:	000008a1 	.word	0x000008a1
     81c:	00000821 	.word	0x00000821

00000820 <_div_init>:

static inline void hri_divas_write_CTRLA_DLZ_bit(const void *const hw, bool value)
{
	uint8_t tmp;
	DIVAS_CRITICAL_SECTION_ENTER();
	tmp = ((Divas *)hw)->CTRLA.reg;
     820:	2290      	movs	r2, #144	; 0x90
     822:	05d2      	lsls	r2, r2, #23
     824:	7813      	ldrb	r3, [r2, #0]
	tmp &= ~DIVAS_CTRLA_DLZ;
     826:	2102      	movs	r1, #2
     828:	438b      	bics	r3, r1
	tmp |= value << DIVAS_CTRLA_DLZ_Pos;
	((Divas *)hw)->CTRLA.reg = tmp;
     82a:	7013      	strb	r3, [r2, #0]
 * \brief Initialize hardware for division operation
 */
void _div_init(void)
{
	hri_divas_write_CTRLA_DLZ_bit(DIVAS, CONF_DIVAS_DLZ);
}
     82c:	4770      	bx	lr

0000082e <__aeabi_uidiv>:

/**
 * \brief Do unsigned division
 */
uint32_t __aeabi_uidiv(uint32_t numerator, uint32_t denominator)
{
     82e:	b510      	push	{r4, lr}
     830:	b082      	sub	sp, #8
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
     832:	f3ef 8310 	mrs	r3, PRIMASK
	uint32_t res;
	_DIVAS_CRITICAL_ENTER();
     836:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
     838:	b672      	cpsid	i
	DIVAS->CTRLA.bit.SIGNED = s;
     83a:	2390      	movs	r3, #144	; 0x90
     83c:	05db      	lsls	r3, r3, #23
     83e:	781a      	ldrb	r2, [r3, #0]
     840:	2401      	movs	r4, #1
     842:	43a2      	bics	r2, r4
     844:	701a      	strb	r2, [r3, #0]
	DIVAS->DIVIDEND.reg     = n;
     846:	6098      	str	r0, [r3, #8]
	DIVAS->DIVISOR.reg      = d;
     848:	60d9      	str	r1, [r3, #12]
	while (DIVAS->STATUS.bit.BUSY) {
     84a:	2390      	movs	r3, #144	; 0x90
     84c:	05db      	lsls	r3, r3, #23
     84e:	791b      	ldrb	r3, [r3, #4]
     850:	07db      	lsls	r3, r3, #31
     852:	d4fa      	bmi.n	84a <__aeabi_uidiv+0x1c>
	_divas_div(0, numerator, denominator);
	res = _divas_result32();
     854:	2390      	movs	r3, #144	; 0x90
     856:	05db      	lsls	r3, r3, #23
     858:	6918      	ldr	r0, [r3, #16]
	_DIVAS_CRITICAL_LEAVE();
     85a:	9b01      	ldr	r3, [sp, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
     85c:	f383 8810 	msr	PRIMASK, r3
	return res;
}
     860:	b002      	add	sp, #8
     862:	bd10      	pop	{r4, pc}

00000864 <__aeabi_uidivmod>:

/**
 * \brief Do unsigned division, return result and remainder
 */
uint64_t __aeabi_uidivmod(unsigned numerator, unsigned denominator)
{
     864:	b510      	push	{r4, lr}
     866:	b082      	sub	sp, #8
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
     868:	f3ef 8310 	mrs	r3, PRIMASK
	uint64_t res;
	_DIVAS_CRITICAL_ENTER();
     86c:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
     86e:	b672      	cpsid	i
	DIVAS->CTRLA.bit.SIGNED = s;
     870:	2390      	movs	r3, #144	; 0x90
     872:	05db      	lsls	r3, r3, #23
     874:	781a      	ldrb	r2, [r3, #0]
     876:	2401      	movs	r4, #1
     878:	43a2      	bics	r2, r4
     87a:	701a      	strb	r2, [r3, #0]
	DIVAS->DIVIDEND.reg     = n;
     87c:	6098      	str	r0, [r3, #8]
	DIVAS->DIVISOR.reg      = d;
     87e:	60d9      	str	r1, [r3, #12]
	while (DIVAS->STATUS.bit.BUSY) {
     880:	2390      	movs	r3, #144	; 0x90
     882:	05db      	lsls	r3, r3, #23
     884:	791b      	ldrb	r3, [r3, #4]
     886:	07db      	lsls	r3, r3, #31
     888:	d4fa      	bmi.n	880 <__aeabi_uidivmod+0x1c>
	_divas_div(0, numerator, denominator);
	res = _divas_result64();
     88a:	4b04      	ldr	r3, [pc, #16]	; (89c <__aeabi_uidivmod+0x38>)
     88c:	6818      	ldr	r0, [r3, #0]
     88e:	6859      	ldr	r1, [r3, #4]
	_DIVAS_CRITICAL_LEAVE();
     890:	9b01      	ldr	r3, [sp, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
     892:	f383 8810 	msr	PRIMASK, r3
	return res;
}
     896:	b002      	add	sp, #8
     898:	bd10      	pop	{r4, pc}
     89a:	46c0      	nop			; (mov r8, r8)
     89c:	48000010 	.word	0x48000010

000008a0 <_gclk_init_generators_by_fref>:

void _gclk_init_generators_by_fref(uint32_t bm)
{

#if CONF_GCLK_GENERATOR_0_CONFIG == 1
	if (bm & (1ul << 0)) {
     8a0:	07c3      	lsls	r3, r0, #31
     8a2:	d507      	bpl.n	8b4 <_gclk_init_generators_by_fref+0x14>
	((Gclk *)hw)->GENCTRL[index].reg = data;
     8a4:	4a04      	ldr	r2, [pc, #16]	; (8b8 <_gclk_init_generators_by_fref+0x18>)
     8a6:	4b05      	ldr	r3, [pc, #20]	; (8bc <_gclk_init_generators_by_fref+0x1c>)
     8a8:	621a      	str	r2, [r3, #32]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
     8aa:	4b04      	ldr	r3, [pc, #16]	; (8bc <_gclk_init_generators_by_fref+0x1c>)
     8ac:	685a      	ldr	r2, [r3, #4]
     8ae:	4b04      	ldr	r3, [pc, #16]	; (8c0 <_gclk_init_generators_by_fref+0x20>)
     8b0:	421a      	tst	r2, r3
     8b2:	d1fa      	bne.n	8aa <_gclk_init_generators_by_fref+0xa>
		        | (CONF_GCLK_GEN_8_DIVSEL << GCLK_GENCTRL_DIVSEL_Pos) | (CONF_GCLK_GEN_8_OE << GCLK_GENCTRL_OE_Pos)
		        | (CONF_GCLK_GEN_8_OOV << GCLK_GENCTRL_OOV_Pos) | (CONF_GCLK_GEN_8_IDC << GCLK_GENCTRL_IDC_Pos)
		        | (CONF_GCLK_GENERATOR_8_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_8_SOURCE);
	}
#endif
}
     8b4:	4770      	bx	lr
     8b6:	46c0      	nop			; (mov r8, r8)
     8b8:	00010107 	.word	0x00010107
     8bc:	40001c00 	.word	0x40001c00
     8c0:	000007fd 	.word	0x000007fd

000008c4 <_mclk_init>:
	((Mclk *)hw)->CPUDIV.reg = data;
     8c4:	2201      	movs	r2, #1
     8c6:	4b01      	ldr	r3, [pc, #4]	; (8cc <_mclk_init+0x8>)
     8c8:	711a      	strb	r2, [r3, #4]
 */
void _mclk_init(void)
{
	void *hw = (void *)MCLK;
	hri_mclk_write_CPUDIV_reg(hw, MCLK_CPUDIV_CPUDIV(CONF_MCLK_CPUDIV));
}
     8ca:	4770      	bx	lr
     8cc:	40000800 	.word	0x40000800

000008d0 <_flash_init>:

/**
 * \brief Initialize NVM
 */
int32_t _flash_init(struct _flash_device *const device, void *const hw)
{
     8d0:	b570      	push	{r4, r5, r6, lr}
     8d2:	0005      	movs	r5, r0
     8d4:	000c      	movs	r4, r1
	ASSERT(device && (hw == NVMCTRL));
     8d6:	2800      	cmp	r0, #0
     8d8:	d01c      	beq.n	914 <_flash_init+0x44>
     8da:	4b10      	ldr	r3, [pc, #64]	; (91c <_flash_init+0x4c>)
     8dc:	4299      	cmp	r1, r3
     8de:	d01b      	beq.n	918 <_flash_init+0x48>
     8e0:	2000      	movs	r0, #0
     8e2:	2246      	movs	r2, #70	; 0x46
     8e4:	490e      	ldr	r1, [pc, #56]	; (920 <_flash_init+0x50>)
     8e6:	4b0f      	ldr	r3, [pc, #60]	; (924 <_flash_init+0x54>)
     8e8:	4798      	blx	r3
	uint32_t ctrlb;

	device->hw = hw;
     8ea:	612c      	str	r4, [r5, #16]
}

static inline hri_nvmctrl_ctrlb_reg_t hri_nvmctrl_get_CTRLB_reg(const void *const hw, hri_nvmctrl_ctrlb_reg_t mask)
{
	uint32_t tmp;
	tmp = ((Nvmctrl *)hw)->CTRLB.reg;
     8ec:	6862      	ldr	r2, [r4, #4]
	tmp &= mask;
     8ee:	239e      	movs	r3, #158	; 0x9e
     8f0:	4013      	ands	r3, r2
}

static inline void hri_nvmctrl_write_CTRLB_reg(const void *const hw, hri_nvmctrl_ctrlb_reg_t data)
{
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLB.reg = data;
     8f2:	6063      	str	r3, [r4, #4]
	ctrlb      = _nvm.ctrlb & ~(NVMCTRL_CTRLB_RWS_Msk | NVMCTRL_CTRLB_MANW);
	ctrlb |= hri_nvmctrl_get_CTRLB_reg(device->hw, NVMCTRL_CTRLB_RWS_Msk | NVMCTRL_CTRLB_MANW);
	hri_nvmctrl_write_CTRLB_reg(device->hw, ctrlb);

	_nvm_dev = device;
     8f4:	4b0c      	ldr	r3, [pc, #48]	; (928 <_flash_init+0x58>)
     8f6:	601d      	str	r5, [r3, #0]
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     8f8:	4b0c      	ldr	r3, [pc, #48]	; (92c <_flash_init+0x5c>)
     8fa:	2240      	movs	r2, #64	; 0x40
     8fc:	2180      	movs	r1, #128	; 0x80
     8fe:	505a      	str	r2, [r3, r1]
  __ASM volatile ("dsb 0xF":::"memory");
     900:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
     904:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     908:	3101      	adds	r1, #1
     90a:	31ff      	adds	r1, #255	; 0xff
     90c:	505a      	str	r2, [r3, r1]
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     90e:	601a      	str	r2, [r3, #0]
	NVIC_DisableIRQ(NVMCTRL_IRQn);
	NVIC_ClearPendingIRQ(NVMCTRL_IRQn);
	NVIC_EnableIRQ(NVMCTRL_IRQn);
	return ERR_NONE;
}
     910:	2000      	movs	r0, #0
     912:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(device && (hw == NVMCTRL));
     914:	2000      	movs	r0, #0
     916:	e7e4      	b.n	8e2 <_flash_init+0x12>
     918:	2001      	movs	r0, #1
     91a:	e7e2      	b.n	8e2 <_flash_init+0x12>
     91c:	41004000 	.word	0x41004000
     920:	00001dcc 	.word	0x00001dcc
     924:	000005f9 	.word	0x000005f9
     928:	200000c8 	.word	0x200000c8
     92c:	e000e100 	.word	0xe000e100

00000930 <NVMCTRL_Handler>:

/**
 * \internal NVM interrupt handler
 */
void NVMCTRL_Handler(void)
{
     930:	b510      	push	{r4, lr}
	void *const hw = _nvm_dev->hw;
     932:	4b0a      	ldr	r3, [pc, #40]	; (95c <NVMCTRL_Handler+0x2c>)
     934:	6818      	ldr	r0, [r3, #0]
     936:	6903      	ldr	r3, [r0, #16]
	return (((Nvmctrl *)hw)->INTFLAG.reg & NVMCTRL_INTFLAG_READY) >> NVMCTRL_INTFLAG_READY_Pos;
     938:	7d1a      	ldrb	r2, [r3, #20]

	if (hri_nvmctrl_get_interrupt_READY_bit(hw)) {
     93a:	07d2      	lsls	r2, r2, #31
     93c:	d504      	bpl.n	948 <NVMCTRL_Handler+0x18>
		if (NULL != _nvm_dev->flash_cb.ready_cb) {
     93e:	6803      	ldr	r3, [r0, #0]
     940:	2b00      	cmp	r3, #0
     942:	d000      	beq.n	946 <NVMCTRL_Handler+0x16>
			_nvm_dev->flash_cb.ready_cb(_nvm_dev);
     944:	4798      	blx	r3
		hri_nvmctrl_clear_interrupt_ERROR_bit(hw);
		if (NULL != _nvm_dev->flash_cb.error_cb) {
			_nvm_dev->flash_cb.error_cb(_nvm_dev);
		}
	}
}
     946:	bd10      	pop	{r4, pc}
	return (((Nvmctrl *)hw)->INTFLAG.reg & NVMCTRL_INTFLAG_ERROR) >> NVMCTRL_INTFLAG_ERROR_Pos;
     948:	7d1a      	ldrb	r2, [r3, #20]
	} else if (hri_nvmctrl_get_interrupt_ERROR_bit(hw)) {
     94a:	0792      	lsls	r2, r2, #30
     94c:	d5fb      	bpl.n	946 <NVMCTRL_Handler+0x16>
	((Nvmctrl *)hw)->INTFLAG.reg = NVMCTRL_INTFLAG_ERROR;
     94e:	2202      	movs	r2, #2
     950:	751a      	strb	r2, [r3, #20]
		if (NULL != _nvm_dev->flash_cb.error_cb) {
     952:	6843      	ldr	r3, [r0, #4]
     954:	2b00      	cmp	r3, #0
     956:	d0f6      	beq.n	946 <NVMCTRL_Handler+0x16>
			_nvm_dev->flash_cb.error_cb(_nvm_dev);
     958:	4798      	blx	r3
}
     95a:	e7f4      	b.n	946 <NVMCTRL_Handler+0x16>
     95c:	200000c8 	.word	0x200000c8

00000960 <_osc32kctrl_init_sources>:
}

static inline void hri_osc32kctrl_write_XOSC32K_reg(const void *const hw, hri_osc32kctrl_xosc32k_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->XOSC32K.reg = data;
     960:	4a07      	ldr	r2, [pc, #28]	; (980 <_osc32kctrl_init_sources+0x20>)
     962:	238e      	movs	r3, #142	; 0x8e
     964:	8293      	strh	r3, [r2, #20]
}

static inline void hri_osc32kctrl_write_CFDCTRL_reg(const void *const hw, hri_osc32kctrl_cfdctrl_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->CFDCTRL.reg = data;
     966:	2300      	movs	r3, #0
     968:	7593      	strb	r3, [r2, #22]
}

static inline void hri_osc32kctrl_write_EVCTRL_reg(const void *const hw, hri_osc32kctrl_evctrl_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->EVCTRL.reg = data;
     96a:	75d3      	strb	r3, [r2, #23]
}

static inline hri_osc32kctrl_osculp32k_reg_t hri_osc32kctrl_read_OSCULP32K_CALIB_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Osc32kctrl *)hw)->OSCULP32K.reg;
     96c:	69d3      	ldr	r3, [r2, #28]
	tmp = (tmp & OSC32KCTRL_OSCULP32K_CALIB_Msk) >> OSC32KCTRL_OSCULP32K_CALIB_Pos;
     96e:	0a1b      	lsrs	r3, r3, #8
	calib = hri_osc32kctrl_read_OSCULP32K_CALIB_bf(hw);
	hri_osc32kctrl_write_OSCULP32K_reg(hw,
#if CONF_OSC32K_CALIB_ENABLE == 1
	                                   OSC32KCTRL_OSCULP32K_CALIB(CONF_OSC32K_CALIB)
#else
	                                   OSC32KCTRL_OSCULP32K_CALIB(calib)
     970:	021b      	lsls	r3, r3, #8
     972:	21f8      	movs	r1, #248	; 0xf8
     974:	0149      	lsls	r1, r1, #5
     976:	400b      	ands	r3, r1
}

static inline void hri_osc32kctrl_write_OSCULP32K_reg(const void *const hw, hri_osc32kctrl_osculp32k_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->OSCULP32K.reg = data;
     978:	61d3      	str	r3, [r2, #28]
	((Osc32kctrl *)hw)->RTCCTRL.reg = data;
     97a:	2301      	movs	r3, #1
     97c:	6113      	str	r3, [r2, #16]
		;
#endif
#endif
	hri_osc32kctrl_write_RTCCTRL_reg(hw, OSC32KCTRL_RTCCTRL_RTCSEL(CONF_RTCCTRL));
	(void)calib;
}
     97e:	4770      	bx	lr
     980:	40001400 	.word	0x40001400

00000984 <_oscctrl_init_sources>:
#if CONF_OSC48M_ONDEMAND == 1
	hri_oscctrl_set_OSC48MCTRL_ONDEMAND_bit(hw);
#endif
#endif
	(void)hw;
}
     984:	4770      	bx	lr
	...

00000988 <_oscctrl_init_referenced_generators>:
}

static inline void hri_oscctrl_write_DPLLRATIO_reg(const void *const hw, hri_oscctrl_dpllratio_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DPLLRATIO.reg = data;
     988:	4a19      	ldr	r2, [pc, #100]	; (9f0 <_oscctrl_init_referenced_generators+0x68>)
     98a:	4b1a      	ldr	r3, [pc, #104]	; (9f4 <_oscctrl_init_referenced_generators+0x6c>)
     98c:	621a      	str	r2, [r3, #32]
	while (((Oscctrl *)hw)->DPLLSYNCBUSY.reg & reg) {
     98e:	232c      	movs	r3, #44	; 0x2c
     990:	4a18      	ldr	r2, [pc, #96]	; (9f4 <_oscctrl_init_referenced_generators+0x6c>)
     992:	5cd2      	ldrb	r2, [r2, r3]
     994:	3b1e      	subs	r3, #30
     996:	421a      	tst	r2, r3
     998:	d1f9      	bne.n	98e <_oscctrl_init_referenced_generators+0x6>
}

static inline void hri_oscctrl_write_DPLLCTRLB_reg(const void *const hw, hri_oscctrl_dpllctrlb_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DPLLCTRLB.reg = data;
     99a:	4b16      	ldr	r3, [pc, #88]	; (9f4 <_oscctrl_init_referenced_generators+0x6c>)
     99c:	2200      	movs	r2, #0
     99e:	625a      	str	r2, [r3, #36]	; 0x24
}

static inline void hri_oscctrl_write_DPLLPRESC_reg(const void *const hw, hri_oscctrl_dpllpresc_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DPLLPRESC.reg = data;
     9a0:	2128      	movs	r1, #40	; 0x28
     9a2:	545a      	strb	r2, [r3, r1]
	while (((Oscctrl *)hw)->DPLLSYNCBUSY.reg & reg) {
     9a4:	232c      	movs	r3, #44	; 0x2c
     9a6:	4a13      	ldr	r2, [pc, #76]	; (9f4 <_oscctrl_init_referenced_generators+0x6c>)
     9a8:	5cd2      	ldrb	r2, [r2, r3]
     9aa:	3b1e      	subs	r3, #30
     9ac:	421a      	tst	r2, r3
     9ae:	d1f9      	bne.n	9a4 <_oscctrl_init_referenced_generators+0x1c>
	((Oscctrl *)hw)->DPLLCTRLA.reg = data;
     9b0:	2202      	movs	r2, #2
     9b2:	4b10      	ldr	r3, [pc, #64]	; (9f4 <_oscctrl_init_referenced_generators+0x6c>)
     9b4:	771a      	strb	r2, [r3, #28]
	while (((Oscctrl *)hw)->DPLLSYNCBUSY.reg & reg) {
     9b6:	232c      	movs	r3, #44	; 0x2c
     9b8:	4a0e      	ldr	r2, [pc, #56]	; (9f4 <_oscctrl_init_referenced_generators+0x6c>)
     9ba:	5cd3      	ldrb	r3, [r2, r3]
     9bc:	079b      	lsls	r3, r3, #30
     9be:	d4fa      	bmi.n	9b6 <_oscctrl_init_referenced_generators+0x2e>
	return (((Oscctrl *)hw)->DPLLSTATUS.reg & OSCCTRL_DPLLSTATUS_LOCK) >> OSCCTRL_DPLLSTATUS_LOCK_Pos;
     9c0:	2330      	movs	r3, #48	; 0x30
     9c2:	4a0c      	ldr	r2, [pc, #48]	; (9f4 <_oscctrl_init_referenced_generators+0x6c>)
     9c4:	5cd3      	ldrb	r3, [r2, r3]
	                                    | (CONF_DPLL_ENABLE << OSCCTRL_DPLLCTRLA_ENABLE_Pos));
#endif

#if CONF_DPLL_CONFIG == 1
#if CONF_DPLL_ENABLE == 1
	while (!(hri_oscctrl_get_DPLLSTATUS_LOCK_bit(hw) || hri_oscctrl_get_DPLLSTATUS_CLKRDY_bit(hw)))
     9c6:	07db      	lsls	r3, r3, #31
     9c8:	d403      	bmi.n	9d2 <_oscctrl_init_referenced_generators+0x4a>
	return (((Oscctrl *)hw)->DPLLSTATUS.reg & OSCCTRL_DPLLSTATUS_CLKRDY) >> OSCCTRL_DPLLSTATUS_CLKRDY_Pos;
     9ca:	2330      	movs	r3, #48	; 0x30
     9cc:	5cd3      	ldrb	r3, [r2, r3]
     9ce:	079b      	lsls	r3, r3, #30
     9d0:	d5f6      	bpl.n	9c0 <_oscctrl_init_referenced_generators+0x38>
	((Oscctrl *)hw)->DPLLCTRLA.reg |= OSCCTRL_DPLLCTRLA_ONDEMAND;
     9d2:	4a08      	ldr	r2, [pc, #32]	; (9f4 <_oscctrl_init_referenced_generators+0x6c>)
     9d4:	7f13      	ldrb	r3, [r2, #28]
     9d6:	2180      	movs	r1, #128	; 0x80
     9d8:	4249      	negs	r1, r1
     9da:	430b      	orrs	r3, r1
     9dc:	b2db      	uxtb	r3, r3
     9de:	7713      	strb	r3, [r2, #28]
	while (((Oscctrl *)hw)->DPLLSYNCBUSY.reg & reg) {
     9e0:	232c      	movs	r3, #44	; 0x2c
     9e2:	4a04      	ldr	r2, [pc, #16]	; (9f4 <_oscctrl_init_referenced_generators+0x6c>)
     9e4:	5cd2      	ldrb	r2, [r2, r3]
     9e6:	3b1e      	subs	r3, #30
     9e8:	421a      	tst	r2, r3
     9ea:	d1f9      	bne.n	9e0 <_oscctrl_init_referenced_generators+0x58>
#if CONF_DPLL_ONDEMAND == 1
	hri_oscctrl_set_DPLLCTRLA_ONDEMAND_bit(hw);
#endif
#endif
	(void)hw;
}
     9ec:	4770      	bx	lr
     9ee:	46c0      	nop			; (mov r8, r8)
     9f0:	000d05b7 	.word	0x000d05b7
     9f4:	40001000 	.word	0x40001000

000009f8 <_sercom_get_hardware_index>:

/**
 * \brief Retrieve ordinal number of the given sercom hardware instance
 */
static uint8_t _sercom_get_hardware_index(const void *const hw)
{
     9f8:	b530      	push	{r4, r5, lr}
     9fa:	b089      	sub	sp, #36	; 0x24
	Sercom *const sercom_modules[] = SERCOM_INSTS;
     9fc:	4c0b      	ldr	r4, [pc, #44]	; (a2c <_sercom_get_hardware_index+0x34>)
     9fe:	466b      	mov	r3, sp
     a00:	0022      	movs	r2, r4
     a02:	ca32      	ldmia	r2!, {r1, r4, r5}
     a04:	c332      	stmia	r3!, {r1, r4, r5}
     a06:	ca32      	ldmia	r2!, {r1, r4, r5}
     a08:	c332      	stmia	r3!, {r1, r4, r5}
     a0a:	ca12      	ldmia	r2!, {r1, r4}
     a0c:	c312      	stmia	r3!, {r1, r4}
	/* Find index for SERCOM instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     a0e:	2300      	movs	r3, #0
     a10:	2b07      	cmp	r3, #7
     a12:	d808      	bhi.n	a26 <_sercom_get_hardware_index+0x2e>
		if ((uint32_t)hw == (uint32_t)sercom_modules[i]) {
     a14:	009a      	lsls	r2, r3, #2
     a16:	4669      	mov	r1, sp
     a18:	5852      	ldr	r2, [r2, r1]
     a1a:	4282      	cmp	r2, r0
     a1c:	d001      	beq.n	a22 <_sercom_get_hardware_index+0x2a>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     a1e:	3301      	adds	r3, #1
     a20:	e7f6      	b.n	a10 <_sercom_get_hardware_index+0x18>
			return i;
     a22:	b2d8      	uxtb	r0, r3
     a24:	e000      	b.n	a28 <_sercom_get_hardware_index+0x30>
		}
	}
	return 0;
     a26:	2000      	movs	r0, #0
}
     a28:	b009      	add	sp, #36	; 0x24
     a2a:	bd30      	pop	{r4, r5, pc}
     a2c:	00001dec 	.word	0x00001dec

00000a30 <_get_sercom_index>:
 * \param[in] hw The pointer to hardware instance

 * \return The ordinal number of the given sercom hardware instance
 */
static uint8_t _get_sercom_index(const void *const hw)
{
     a30:	b510      	push	{r4, lr}
	uint8_t sercom_offset = _sercom_get_hardware_index(hw);
     a32:	4b0c      	ldr	r3, [pc, #48]	; (a64 <_get_sercom_index+0x34>)
     a34:	4798      	blx	r3
     a36:	0002      	movs	r2, r0
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_usarts); i++) {
     a38:	2000      	movs	r0, #0
     a3a:	2800      	cmp	r0, #0
     a3c:	d006      	beq.n	a4c <_get_sercom_index+0x1c>
		if (_usarts[i].number == sercom_offset) {
			return i;
		}
	}

	ASSERT(false);
     a3e:	4a0a      	ldr	r2, [pc, #40]	; (a68 <_get_sercom_index+0x38>)
     a40:	490a      	ldr	r1, [pc, #40]	; (a6c <_get_sercom_index+0x3c>)
     a42:	2000      	movs	r0, #0
     a44:	4b0a      	ldr	r3, [pc, #40]	; (a70 <_get_sercom_index+0x40>)
     a46:	4798      	blx	r3
	return 0;
     a48:	2000      	movs	r0, #0
}
     a4a:	bd10      	pop	{r4, pc}
		if (_usarts[i].number == sercom_offset) {
     a4c:	0083      	lsls	r3, r0, #2
     a4e:	181b      	adds	r3, r3, r0
     a50:	0099      	lsls	r1, r3, #2
     a52:	4b08      	ldr	r3, [pc, #32]	; (a74 <_get_sercom_index+0x44>)
     a54:	185b      	adds	r3, r3, r1
     a56:	2120      	movs	r1, #32
     a58:	5c5b      	ldrb	r3, [r3, r1]
     a5a:	429a      	cmp	r2, r3
     a5c:	d0f5      	beq.n	a4a <_get_sercom_index+0x1a>
	for (i = 0; i < ARRAY_SIZE(_usarts); i++) {
     a5e:	3001      	adds	r0, #1
     a60:	b2c0      	uxtb	r0, r0
     a62:	e7ea      	b.n	a3a <_get_sercom_index+0xa>
     a64:	000009f9 	.word	0x000009f9
     a68:	0000023d 	.word	0x0000023d
     a6c:	00001e5c 	.word	0x00001e5c
     a70:	000005f9 	.word	0x000005f9
     a74:	00001dec 	.word	0x00001dec

00000a78 <_usart_init>:
 * \param[in] hw The pointer to hardware instance
 *
 * \return The status of initialization
 */
static int32_t _usart_init(void *const hw)
{
     a78:	b570      	push	{r4, r5, r6, lr}
     a7a:	0004      	movs	r4, r0
	uint8_t i = _get_sercom_index(hw);
     a7c:	4b3b      	ldr	r3, [pc, #236]	; (b6c <_usart_init+0xf4>)
     a7e:	4798      	blx	r3
	};
}

static inline bool hri_sercomusart_is_syncing(const void *const hw, hri_sercomusart_syncbusy_reg_t reg)
{
	return ((Sercom *)hw)->USART.SYNCBUSY.reg & reg;
     a80:	69e3      	ldr	r3, [r4, #28]

	if (!hri_sercomusart_is_syncing(hw, SERCOM_USART_SYNCBUSY_SWRST)) {
     a82:	07db      	lsls	r3, r3, #31
     a84:	d41d      	bmi.n	ac2 <_usart_init+0x4a>
		uint32_t mode = _usarts[i].ctrl_a & SERCOM_USART_CTRLA_MODE_Msk;
     a86:	0083      	lsls	r3, r0, #2
     a88:	181b      	adds	r3, r3, r0
     a8a:	009a      	lsls	r2, r3, #2
     a8c:	4b38      	ldr	r3, [pc, #224]	; (b70 <_usart_init+0xf8>)
     a8e:	189b      	adds	r3, r3, r2
     a90:	6a5a      	ldr	r2, [r3, #36]	; 0x24
     a92:	231c      	movs	r3, #28
     a94:	401a      	ands	r2, r3
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
     a96:	69e3      	ldr	r3, [r4, #28]
     a98:	079b      	lsls	r3, r3, #30
     a9a:	d1fc      	bne.n	a96 <_usart_init+0x1e>
static inline hri_sercomusart_ctrla_reg_t hri_sercomusart_get_CTRLA_reg(const void *const           hw,
                                                                        hri_sercomusart_ctrla_reg_t mask)
{
	uint32_t tmp;
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST | SERCOM_USART_SYNCBUSY_ENABLE);
	tmp = ((Sercom *)hw)->USART.CTRLA.reg;
     a9c:	6823      	ldr	r3, [r4, #0]
		if (hri_sercomusart_get_CTRLA_reg(hw, SERCOM_USART_CTRLA_ENABLE)) {
     a9e:	079b      	lsls	r3, r3, #30
     aa0:	d509      	bpl.n	ab6 <_usart_init+0x3e>
	((Sercom *)hw)->USART.CTRLA.reg &= ~SERCOM_USART_CTRLA_ENABLE;
     aa2:	6823      	ldr	r3, [r4, #0]
     aa4:	2102      	movs	r1, #2
     aa6:	438b      	bics	r3, r1
     aa8:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
     aaa:	69e3      	ldr	r3, [r4, #28]
     aac:	079b      	lsls	r3, r3, #30
     aae:	d1fc      	bne.n	aaa <_usart_init+0x32>
     ab0:	69e3      	ldr	r3, [r4, #28]
     ab2:	079b      	lsls	r3, r3, #30
     ab4:	d4fc      	bmi.n	ab0 <_usart_init+0x38>
			hri_sercomusart_clear_CTRLA_ENABLE_bit(hw);
			hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_ENABLE);
		}
		hri_sercomusart_write_CTRLA_reg(hw, SERCOM_USART_CTRLA_SWRST | mode);
     ab6:	2301      	movs	r3, #1
     ab8:	4313      	orrs	r3, r2
}

static inline void hri_sercomusart_write_CTRLA_reg(const void *const hw, hri_sercomusart_ctrla_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLA.reg = data;
     aba:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
     abc:	69e3      	ldr	r3, [r4, #28]
     abe:	079b      	lsls	r3, r3, #30
     ac0:	d1fc      	bne.n	abc <_usart_init+0x44>
     ac2:	69e3      	ldr	r3, [r4, #28]
     ac4:	07db      	lsls	r3, r3, #31
     ac6:	d4fc      	bmi.n	ac2 <_usart_init+0x4a>
	}
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST);

	hri_sercomusart_write_CTRLA_reg(hw, _usarts[i].ctrl_a);
     ac8:	0083      	lsls	r3, r0, #2
     aca:	181b      	adds	r3, r3, r0
     acc:	009a      	lsls	r2, r3, #2
     ace:	4b28      	ldr	r3, [pc, #160]	; (b70 <_usart_init+0xf8>)
     ad0:	189b      	adds	r3, r3, r2
     ad2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	((Sercom *)hw)->USART.CTRLA.reg = data;
     ad4:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
     ad6:	69e3      	ldr	r3, [r4, #28]
     ad8:	079b      	lsls	r3, r3, #30
     ada:	d1fc      	bne.n	ad6 <_usart_init+0x5e>
	hri_sercomusart_write_CTRLB_reg(hw, _usarts[i].ctrl_b);
     adc:	0083      	lsls	r3, r0, #2
     ade:	181b      	adds	r3, r3, r0
     ae0:	009a      	lsls	r2, r3, #2
     ae2:	4b23      	ldr	r3, [pc, #140]	; (b70 <_usart_init+0xf8>)
     ae4:	189b      	adds	r3, r3, r2
     ae6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}

static inline void hri_sercomusart_write_CTRLB_reg(const void *const hw, hri_sercomusart_ctrlb_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLB.reg = data;
     ae8:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
     aea:	69e3      	ldr	r3, [r4, #28]
     aec:	075b      	lsls	r3, r3, #29
     aee:	d1fc      	bne.n	aea <_usart_init+0x72>
	if ((_usarts[i].ctrl_a & SERCOM_USART_CTRLA_SAMPR(0x1)) || (_usarts[i].ctrl_a & SERCOM_USART_CTRLA_SAMPR(0x3))) {
     af0:	0083      	lsls	r3, r0, #2
     af2:	181b      	adds	r3, r3, r0
     af4:	009a      	lsls	r2, r3, #2
     af6:	4b1e      	ldr	r3, [pc, #120]	; (b70 <_usart_init+0xf8>)
     af8:	189b      	adds	r3, r3, r2
     afa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
     afc:	049a      	lsls	r2, r3, #18
     afe:	d40b      	bmi.n	b18 <_usart_init+0xa0>
     b00:	22c0      	movs	r2, #192	; 0xc0
     b02:	01d2      	lsls	r2, r2, #7
     b04:	4213      	tst	r3, r2
     b06:	d107      	bne.n	b18 <_usart_init+0xa0>
		((Sercom *)hw)->USART.BAUD.FRAC.BAUD = _usarts[i].baud;
		((Sercom *)hw)->USART.BAUD.FRAC.FP   = _usarts[i].fractional;
	} else {
		hri_sercomusart_write_BAUD_reg(hw, _usarts[i].baud);
     b08:	0083      	lsls	r3, r0, #2
     b0a:	181b      	adds	r3, r3, r0
     b0c:	009a      	lsls	r2, r3, #2
     b0e:	4b18      	ldr	r3, [pc, #96]	; (b70 <_usart_init+0xf8>)
     b10:	189b      	adds	r3, r3, r2
     b12:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
}

static inline void hri_sercomusart_write_BAUD_reg(const void *const hw, hri_sercomusart_baud_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.BAUD.reg = data;
     b14:	81a3      	strh	r3, [r4, #12]
     b16:	e019      	b.n	b4c <_usart_init+0xd4>
		((Sercom *)hw)->USART.BAUD.FRAC.BAUD = _usarts[i].baud;
     b18:	4a15      	ldr	r2, [pc, #84]	; (b70 <_usart_init+0xf8>)
     b1a:	0081      	lsls	r1, r0, #2
     b1c:	180d      	adds	r5, r1, r0
     b1e:	00ab      	lsls	r3, r5, #2
     b20:	18d3      	adds	r3, r2, r3
     b22:	8d9d      	ldrh	r5, [r3, #44]	; 0x2c
     b24:	89a3      	ldrh	r3, [r4, #12]
     b26:	04ed      	lsls	r5, r5, #19
     b28:	0ced      	lsrs	r5, r5, #19
     b2a:	0b5b      	lsrs	r3, r3, #13
     b2c:	035b      	lsls	r3, r3, #13
     b2e:	432b      	orrs	r3, r5
     b30:	81a3      	strh	r3, [r4, #12]
		((Sercom *)hw)->USART.BAUD.FRAC.FP   = _usarts[i].fractional;
     b32:	3220      	adds	r2, #32
     b34:	180b      	adds	r3, r1, r0
     b36:	0099      	lsls	r1, r3, #2
     b38:	1852      	adds	r2, r2, r1
     b3a:	7b93      	ldrb	r3, [r2, #14]
     b3c:	2207      	movs	r2, #7
     b3e:	401a      	ands	r2, r3
     b40:	89a3      	ldrh	r3, [r4, #12]
     b42:	0352      	lsls	r2, r2, #13
     b44:	04db      	lsls	r3, r3, #19
     b46:	0cdb      	lsrs	r3, r3, #19
     b48:	4313      	orrs	r3, r2
     b4a:	81a3      	strh	r3, [r4, #12]
	}

	hri_sercomusart_write_RXPL_reg(hw, _usarts[i].rxpl);
     b4c:	4b08      	ldr	r3, [pc, #32]	; (b70 <_usart_init+0xf8>)
     b4e:	0019      	movs	r1, r3
     b50:	3120      	adds	r1, #32
     b52:	0082      	lsls	r2, r0, #2
     b54:	1816      	adds	r6, r2, r0
     b56:	00b5      	lsls	r5, r6, #2
     b58:	1949      	adds	r1, r1, r5
     b5a:	7bc9      	ldrb	r1, [r1, #15]
}

static inline void hri_sercomusart_write_RXPL_reg(const void *const hw, hri_sercomusart_rxpl_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.RXPL.reg = data;
     b5c:	73a1      	strb	r1, [r4, #14]
	hri_sercomusart_write_DBGCTRL_reg(hw, _usarts[i].debug_ctrl);
     b5e:	195b      	adds	r3, r3, r5
     b60:	3330      	adds	r3, #48	; 0x30
     b62:	781a      	ldrb	r2, [r3, #0]
}

static inline void hri_sercomusart_write_DBGCTRL_reg(const void *const hw, hri_sercomusart_dbgctrl_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.DBGCTRL.reg = data;
     b64:	2330      	movs	r3, #48	; 0x30
     b66:	54e2      	strb	r2, [r4, r3]

	return ERR_NONE;
}
     b68:	2000      	movs	r0, #0
     b6a:	bd70      	pop	{r4, r5, r6, pc}
     b6c:	00000a31 	.word	0x00000a31
     b70:	00001dec 	.word	0x00001dec

00000b74 <_usart_sync_init>:
{
     b74:	b570      	push	{r4, r5, r6, lr}
     b76:	0005      	movs	r5, r0
     b78:	000c      	movs	r4, r1
	ASSERT(device);
     b7a:	1e43      	subs	r3, r0, #1
     b7c:	4198      	sbcs	r0, r3
     b7e:	b2c0      	uxtb	r0, r0
     b80:	22b4      	movs	r2, #180	; 0xb4
     b82:	4904      	ldr	r1, [pc, #16]	; (b94 <_usart_sync_init+0x20>)
     b84:	4b04      	ldr	r3, [pc, #16]	; (b98 <_usart_sync_init+0x24>)
     b86:	4798      	blx	r3
	device->hw = hw;
     b88:	602c      	str	r4, [r5, #0]
	return _usart_init(hw);
     b8a:	0020      	movs	r0, r4
     b8c:	4b03      	ldr	r3, [pc, #12]	; (b9c <_usart_sync_init+0x28>)
     b8e:	4798      	blx	r3
}
     b90:	bd70      	pop	{r4, r5, r6, pc}
     b92:	46c0      	nop			; (mov r8, r8)
     b94:	00001e5c 	.word	0x00001e5c
     b98:	000005f9 	.word	0x000005f9
     b9c:	00000a79 	.word	0x00000a79

00000ba0 <_usart_sync_enable>:
	hri_sercomusart_set_CTRLA_ENABLE_bit(device->hw);
     ba0:	6802      	ldr	r2, [r0, #0]
	((Sercom *)hw)->USART.CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
     ba2:	6813      	ldr	r3, [r2, #0]
     ba4:	2102      	movs	r1, #2
     ba6:	430b      	orrs	r3, r1
     ba8:	6013      	str	r3, [r2, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
     baa:	69d3      	ldr	r3, [r2, #28]
     bac:	079b      	lsls	r3, r3, #30
     bae:	d1fc      	bne.n	baa <_usart_sync_enable+0xa>
}
     bb0:	4770      	bx	lr

00000bb2 <_usart_sync_write_byte>:
	hri_sercomusart_write_DATA_reg(device->hw, data);
     bb2:	6803      	ldr	r3, [r0, #0]
     bb4:	b289      	uxth	r1, r1
	((Sercom *)hw)->USART.DATA.reg = data;
     bb6:	8519      	strh	r1, [r3, #40]	; 0x28
}
     bb8:	4770      	bx	lr

00000bba <_usart_sync_read_byte>:
	return hri_sercomusart_read_DATA_reg(device->hw);
     bba:	6803      	ldr	r3, [r0, #0]
	return ((Sercom *)hw)->USART.DATA.reg;
     bbc:	8d18      	ldrh	r0, [r3, #40]	; 0x28
     bbe:	b2c0      	uxtb	r0, r0
}
     bc0:	4770      	bx	lr

00000bc2 <_usart_sync_is_ready_to_send>:
	return hri_sercomusart_get_interrupt_DRE_bit(device->hw);
     bc2:	6803      	ldr	r3, [r0, #0]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) >> SERCOM_USART_INTFLAG_DRE_Pos;
     bc4:	7e18      	ldrb	r0, [r3, #24]
     bc6:	2301      	movs	r3, #1
     bc8:	4018      	ands	r0, r3
}
     bca:	4770      	bx	lr

00000bcc <_usart_sync_is_transmit_done>:
	return hri_sercomusart_get_interrupt_TXC_bit(device->hw);
     bcc:	6803      	ldr	r3, [r0, #0]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) >> SERCOM_USART_INTFLAG_TXC_Pos;
     bce:	7e1b      	ldrb	r3, [r3, #24]
     bd0:	085b      	lsrs	r3, r3, #1
     bd2:	2001      	movs	r0, #1
     bd4:	4018      	ands	r0, r3
}
     bd6:	4770      	bx	lr

00000bd8 <_usart_sync_is_byte_received>:
	return hri_sercomusart_get_interrupt_RXC_bit(device->hw);
     bd8:	6803      	ldr	r3, [r0, #0]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) >> SERCOM_USART_INTFLAG_RXC_Pos;
     bda:	7e1b      	ldrb	r3, [r3, #24]
     bdc:	089b      	lsrs	r3, r3, #2
     bde:	2001      	movs	r0, #1
     be0:	4018      	ands	r0, r3
}
     be2:	4770      	bx	lr

00000be4 <main>:


//------------------------------------------------------------------------------------

int main(void)
{
     be4:	b510      	push	{r4, lr}
	atmel_start_init();
     be6:	4b0d      	ldr	r3, [pc, #52]	; (c1c <main+0x38>)
     be8:	4798      	blx	r3
   
    /* Machine states data */
    
     // hold the can data
    /*All init section  ===========================*/
    usart_sync_get_io_descriptor(&TARGET_IO, &serial_io);	// Get the descriptor
     bea:	490d      	ldr	r1, [pc, #52]	; (c20 <main+0x3c>)
     bec:	480d      	ldr	r0, [pc, #52]	; (c24 <main+0x40>)
     bee:	4b0e      	ldr	r3, [pc, #56]	; (c28 <main+0x44>)
     bf0:	4798      	blx	r3
	write_array_data_to_flash(src_data , &page_size , &adress);
    int flash_write_check_flag = check_flash_data_array(src_data , &page_size , &adress);
    printf("Flash Write status %d\n\r",flash_write_check_flag);
    
    */
    flash_write_info.curr_flash_write_addr = APP_START_BASE_ADDRESS;
     bf2:	22e0      	movs	r2, #224	; 0xe0
     bf4:	0212      	lsls	r2, r2, #8
     bf6:	4b0d      	ldr	r3, [pc, #52]	; (c2c <main+0x48>)
     bf8:	601a      	str	r2, [r3, #0]
    serial_read_data.uart_frame_received = 0;
     bfa:	2300      	movs	r3, #0
     bfc:	4a0c      	ldr	r2, [pc, #48]	; (c30 <main+0x4c>)
     bfe:	7213      	strb	r3, [r2, #8]
    can.can_id = -1;
     c00:	2101      	movs	r1, #1
     c02:	4249      	negs	r1, r1
     c04:	4a0b      	ldr	r2, [pc, #44]	; (c34 <main+0x50>)
     c06:	6011      	str	r1, [r2, #0]
    app.can_data_available = 0; 
     c08:	4a0b      	ldr	r2, [pc, #44]	; (c38 <main+0x54>)
     c0a:	7053      	strb	r3, [r2, #1]
        /* If the data is available */
        //if(app.can_data_available){
          //  app.can_data_available = 0;
          //  decode_can_data();
       // }
	printf("t001212AB\r");
     c0c:	480b      	ldr	r0, [pc, #44]	; (c3c <main+0x58>)
     c0e:	4b0c      	ldr	r3, [pc, #48]	; (c40 <main+0x5c>)
     c10:	4798      	blx	r3
	delay_ms(1000);
     c12:	20fa      	movs	r0, #250	; 0xfa
     c14:	0080      	lsls	r0, r0, #2
     c16:	4b0b      	ldr	r3, [pc, #44]	; (c44 <main+0x60>)
     c18:	4798      	blx	r3
     c1a:	e7f7      	b.n	c0c <main+0x28>
     c1c:	0000011d 	.word	0x0000011d
     c20:	200001ec 	.word	0x200001ec
     c24:	200000f4 	.word	0x200000f4
     c28:	000005c9 	.word	0x000005c9
     c2c:	200001f0 	.word	0x200001f0
     c30:	200001a8 	.word	0x200001a8
     c34:	2000021c 	.word	0x2000021c
     c38:	20000234 	.word	0x20000234
     c3c:	00001e78 	.word	0x00001e78
     c40:	00000d85 	.word	0x00000d85
     c44:	0000037d 	.word	0x0000037d

00000c48 <_read>:
#include <stdio.h>

int __attribute__((weak)) _read(int file, char *ptr, int len); /* Remove GCC compiler warning */

int __attribute__((weak)) _read(int file, char *ptr, int len)
{
     c48:	b510      	push	{r4, lr}
     c4a:	000b      	movs	r3, r1
	int n = 0;

	if (file != 0) {
     c4c:	2800      	cmp	r0, #0
     c4e:	d109      	bne.n	c64 <_read+0x1c>
		return -1;
	}

	n = stdio_io_read((uint8_t *)ptr, len);
     c50:	0011      	movs	r1, r2
     c52:	0018      	movs	r0, r3
     c54:	4b05      	ldr	r3, [pc, #20]	; (c6c <_read+0x24>)
     c56:	4798      	blx	r3
	if (n < 0) {
     c58:	2800      	cmp	r0, #0
     c5a:	db00      	blt.n	c5e <_read+0x16>
		return -1;
	}

	return n;
}
     c5c:	bd10      	pop	{r4, pc}
		return -1;
     c5e:	2001      	movs	r0, #1
     c60:	4240      	negs	r0, r0
     c62:	e7fb      	b.n	c5c <_read+0x14>
		return -1;
     c64:	2001      	movs	r0, #1
     c66:	4240      	negs	r0, r0
     c68:	e7f8      	b.n	c5c <_read+0x14>
     c6a:	46c0      	nop			; (mov r8, r8)
     c6c:	00000cc5 	.word	0x00000cc5

00000c70 <_write>:
#include <stdio.h>

int __attribute__((weak)) _write(int file, char *ptr, int len); /* Remove GCC compiler warning */

int __attribute__((weak)) _write(int file, char *ptr, int len)
{
     c70:	b510      	push	{r4, lr}
     c72:	000b      	movs	r3, r1
	int n = 0;

	if ((file != 1) && (file != 2) && (file != 3)) {
     c74:	3801      	subs	r0, #1
     c76:	2802      	cmp	r0, #2
     c78:	d809      	bhi.n	c8e <_write+0x1e>
		return -1;
	}

	n = stdio_io_write((const uint8_t *)ptr, len);
     c7a:	0011      	movs	r1, r2
     c7c:	0018      	movs	r0, r3
     c7e:	4b05      	ldr	r3, [pc, #20]	; (c94 <_write+0x24>)
     c80:	4798      	blx	r3
	if (n < 0) {
     c82:	2800      	cmp	r0, #0
     c84:	db00      	blt.n	c88 <_write+0x18>
		return -1;
	}

	return n;
}
     c86:	bd10      	pop	{r4, pc}
		return -1;
     c88:	2001      	movs	r0, #1
     c8a:	4240      	negs	r0, r0
     c8c:	e7fb      	b.n	c86 <_write+0x16>
		return -1;
     c8e:	2001      	movs	r0, #1
     c90:	4240      	negs	r0, r0
     c92:	e7f8      	b.n	c86 <_write+0x16>
     c94:	00000ce9 	.word	0x00000ce9

00000c98 <stdio_io_init>:

/** IO descriptor for STDIO access. */
static struct io_descriptor *stdio_io = NULL;

void stdio_io_init(struct io_descriptor *io)
{
     c98:	b570      	push	{r4, r5, r6, lr}
     c9a:	0006      	movs	r6, r0
#if defined(__GNUC__)
	/* Specify that stdout and stdin should not be buffered. */
	setbuf(stdout, NULL);
     c9c:	4d06      	ldr	r5, [pc, #24]	; (cb8 <stdio_io_init+0x20>)
     c9e:	682b      	ldr	r3, [r5, #0]
     ca0:	6898      	ldr	r0, [r3, #8]
     ca2:	2100      	movs	r1, #0
     ca4:	4c05      	ldr	r4, [pc, #20]	; (cbc <stdio_io_init+0x24>)
     ca6:	47a0      	blx	r4
	setbuf(stdin, NULL);
     ca8:	682b      	ldr	r3, [r5, #0]
     caa:	6858      	ldr	r0, [r3, #4]
     cac:	2100      	movs	r1, #0
     cae:	47a0      	blx	r4
	 * and AVR GCC library:
	 * - printf() emits one character at a time.
	 * - getchar() requests only 1 byte to exit.
	 */
#endif
	stdio_io = io;
     cb0:	4b03      	ldr	r3, [pc, #12]	; (cc0 <stdio_io_init+0x28>)
     cb2:	601e      	str	r6, [r3, #0]
}
     cb4:	bd70      	pop	{r4, r5, r6, pc}
     cb6:	46c0      	nop			; (mov r8, r8)
     cb8:	20000014 	.word	0x20000014
     cbc:	00000db9 	.word	0x00000db9
     cc0:	200000cc 	.word	0x200000cc

00000cc4 <stdio_io_read>:
{
	stdio_io = io;
}

int32_t stdio_io_read(uint8_t *buf, const int32_t len)
{
     cc4:	b510      	push	{r4, lr}
     cc6:	0004      	movs	r4, r0
	if (stdio_io == NULL) {
     cc8:	4b05      	ldr	r3, [pc, #20]	; (ce0 <stdio_io_read+0x1c>)
     cca:	6818      	ldr	r0, [r3, #0]
     ccc:	2800      	cmp	r0, #0
     cce:	d004      	beq.n	cda <stdio_io_read+0x16>
		return 0;
	}
	return io_read(stdio_io, buf, len);
     cd0:	b28a      	uxth	r2, r1
     cd2:	0021      	movs	r1, r4
     cd4:	4b03      	ldr	r3, [pc, #12]	; (ce4 <stdio_io_read+0x20>)
     cd6:	4798      	blx	r3
}
     cd8:	bd10      	pop	{r4, pc}
		return 0;
     cda:	2000      	movs	r0, #0
     cdc:	e7fc      	b.n	cd8 <stdio_io_read+0x14>
     cde:	46c0      	nop			; (mov r8, r8)
     ce0:	200000cc 	.word	0x200000cc
     ce4:	00000439 	.word	0x00000439

00000ce8 <stdio_io_write>:

int32_t stdio_io_write(const uint8_t *buf, const int32_t len)
{
     ce8:	b510      	push	{r4, lr}
     cea:	0004      	movs	r4, r0
	if (stdio_io == NULL) {
     cec:	4b05      	ldr	r3, [pc, #20]	; (d04 <stdio_io_write+0x1c>)
     cee:	6818      	ldr	r0, [r3, #0]
     cf0:	2800      	cmp	r0, #0
     cf2:	d004      	beq.n	cfe <stdio_io_write+0x16>
		return 0;
	}
	return io_write(stdio_io, buf, len);
     cf4:	b28a      	uxth	r2, r1
     cf6:	0021      	movs	r1, r4
     cf8:	4b03      	ldr	r3, [pc, #12]	; (d08 <stdio_io_write+0x20>)
     cfa:	4798      	blx	r3
}
     cfc:	bd10      	pop	{r4, pc}
		return 0;
     cfe:	2000      	movs	r0, #0
     d00:	e7fc      	b.n	cfc <stdio_io_write+0x14>
     d02:	46c0      	nop			; (mov r8, r8)
     d04:	200000cc 	.word	0x200000cc
     d08:	00000401 	.word	0x00000401

00000d0c <stdio_redirect_init>:
	/* Print welcome message */
	printf("\r\nHello ATMEL World!\r\n");
}

void stdio_redirect_init(void)
{
     d0c:	b510      	push	{r4, lr}

	usart_sync_enable(&TARGET_IO);
     d0e:	4c04      	ldr	r4, [pc, #16]	; (d20 <stdio_redirect_init+0x14>)
     d10:	0020      	movs	r0, r4
     d12:	4b04      	ldr	r3, [pc, #16]	; (d24 <stdio_redirect_init+0x18>)
     d14:	4798      	blx	r3
	stdio_io_init(&TARGET_IO.io);
     d16:	0020      	movs	r0, r4
     d18:	4b03      	ldr	r3, [pc, #12]	; (d28 <stdio_redirect_init+0x1c>)
     d1a:	4798      	blx	r3
}
     d1c:	bd10      	pop	{r4, pc}
     d1e:	46c0      	nop			; (mov r8, r8)
     d20:	200000f4 	.word	0x200000f4
     d24:	0000059d 	.word	0x0000059d
     d28:	00000c99 	.word	0x00000c99

00000d2c <__libc_init_array>:
     d2c:	b570      	push	{r4, r5, r6, lr}
     d2e:	2600      	movs	r6, #0
     d30:	4d0c      	ldr	r5, [pc, #48]	; (d64 <__libc_init_array+0x38>)
     d32:	4c0d      	ldr	r4, [pc, #52]	; (d68 <__libc_init_array+0x3c>)
     d34:	1b64      	subs	r4, r4, r5
     d36:	10a4      	asrs	r4, r4, #2
     d38:	42a6      	cmp	r6, r4
     d3a:	d109      	bne.n	d50 <__libc_init_array+0x24>
     d3c:	2600      	movs	r6, #0
     d3e:	f001 f8ed 	bl	1f1c <_init>
     d42:	4d0a      	ldr	r5, [pc, #40]	; (d6c <__libc_init_array+0x40>)
     d44:	4c0a      	ldr	r4, [pc, #40]	; (d70 <__libc_init_array+0x44>)
     d46:	1b64      	subs	r4, r4, r5
     d48:	10a4      	asrs	r4, r4, #2
     d4a:	42a6      	cmp	r6, r4
     d4c:	d105      	bne.n	d5a <__libc_init_array+0x2e>
     d4e:	bd70      	pop	{r4, r5, r6, pc}
     d50:	00b3      	lsls	r3, r6, #2
     d52:	58eb      	ldr	r3, [r5, r3]
     d54:	4798      	blx	r3
     d56:	3601      	adds	r6, #1
     d58:	e7ee      	b.n	d38 <__libc_init_array+0xc>
     d5a:	00b3      	lsls	r3, r6, #2
     d5c:	58eb      	ldr	r3, [r5, r3]
     d5e:	4798      	blx	r3
     d60:	3601      	adds	r6, #1
     d62:	e7f2      	b.n	d4a <__libc_init_array+0x1e>
     d64:	00001f28 	.word	0x00001f28
     d68:	00001f28 	.word	0x00001f28
     d6c:	00001f28 	.word	0x00001f28
     d70:	00001f2c 	.word	0x00001f2c

00000d74 <memset>:
     d74:	0003      	movs	r3, r0
     d76:	1882      	adds	r2, r0, r2
     d78:	4293      	cmp	r3, r2
     d7a:	d100      	bne.n	d7e <memset+0xa>
     d7c:	4770      	bx	lr
     d7e:	7019      	strb	r1, [r3, #0]
     d80:	3301      	adds	r3, #1
     d82:	e7f9      	b.n	d78 <memset+0x4>

00000d84 <iprintf>:
     d84:	b40f      	push	{r0, r1, r2, r3}
     d86:	4b0b      	ldr	r3, [pc, #44]	; (db4 <iprintf+0x30>)
     d88:	b513      	push	{r0, r1, r4, lr}
     d8a:	681c      	ldr	r4, [r3, #0]
     d8c:	2c00      	cmp	r4, #0
     d8e:	d005      	beq.n	d9c <iprintf+0x18>
     d90:	69a3      	ldr	r3, [r4, #24]
     d92:	2b00      	cmp	r3, #0
     d94:	d102      	bne.n	d9c <iprintf+0x18>
     d96:	0020      	movs	r0, r4
     d98:	f000 fa88 	bl	12ac <__sinit>
     d9c:	ab05      	add	r3, sp, #20
     d9e:	9a04      	ldr	r2, [sp, #16]
     da0:	68a1      	ldr	r1, [r4, #8]
     da2:	0020      	movs	r0, r4
     da4:	9301      	str	r3, [sp, #4]
     da6:	f000 fc5d 	bl	1664 <_vfiprintf_r>
     daa:	bc16      	pop	{r1, r2, r4}
     dac:	bc08      	pop	{r3}
     dae:	b004      	add	sp, #16
     db0:	4718      	bx	r3
     db2:	46c0      	nop			; (mov r8, r8)
     db4:	20000014 	.word	0x20000014

00000db8 <setbuf>:
     db8:	424a      	negs	r2, r1
     dba:	414a      	adcs	r2, r1
     dbc:	2380      	movs	r3, #128	; 0x80
     dbe:	b510      	push	{r4, lr}
     dc0:	0052      	lsls	r2, r2, #1
     dc2:	00db      	lsls	r3, r3, #3
     dc4:	f000 f802 	bl	dcc <setvbuf>
     dc8:	bd10      	pop	{r4, pc}
	...

00000dcc <setvbuf>:
     dcc:	b5f0      	push	{r4, r5, r6, r7, lr}
     dce:	001d      	movs	r5, r3
     dd0:	4b4f      	ldr	r3, [pc, #316]	; (f10 <setvbuf+0x144>)
     dd2:	b085      	sub	sp, #20
     dd4:	681e      	ldr	r6, [r3, #0]
     dd6:	0004      	movs	r4, r0
     dd8:	000f      	movs	r7, r1
     dda:	9200      	str	r2, [sp, #0]
     ddc:	2e00      	cmp	r6, #0
     dde:	d005      	beq.n	dec <setvbuf+0x20>
     de0:	69b3      	ldr	r3, [r6, #24]
     de2:	2b00      	cmp	r3, #0
     de4:	d102      	bne.n	dec <setvbuf+0x20>
     de6:	0030      	movs	r0, r6
     de8:	f000 fa60 	bl	12ac <__sinit>
     dec:	4b49      	ldr	r3, [pc, #292]	; (f14 <setvbuf+0x148>)
     dee:	429c      	cmp	r4, r3
     df0:	d150      	bne.n	e94 <setvbuf+0xc8>
     df2:	6874      	ldr	r4, [r6, #4]
     df4:	9b00      	ldr	r3, [sp, #0]
     df6:	2b02      	cmp	r3, #2
     df8:	d005      	beq.n	e06 <setvbuf+0x3a>
     dfa:	2b01      	cmp	r3, #1
     dfc:	d900      	bls.n	e00 <setvbuf+0x34>
     dfe:	e084      	b.n	f0a <setvbuf+0x13e>
     e00:	2d00      	cmp	r5, #0
     e02:	da00      	bge.n	e06 <setvbuf+0x3a>
     e04:	e081      	b.n	f0a <setvbuf+0x13e>
     e06:	0021      	movs	r1, r4
     e08:	0030      	movs	r0, r6
     e0a:	f000 f9e1 	bl	11d0 <_fflush_r>
     e0e:	6b61      	ldr	r1, [r4, #52]	; 0x34
     e10:	2900      	cmp	r1, #0
     e12:	d008      	beq.n	e26 <setvbuf+0x5a>
     e14:	0023      	movs	r3, r4
     e16:	3344      	adds	r3, #68	; 0x44
     e18:	4299      	cmp	r1, r3
     e1a:	d002      	beq.n	e22 <setvbuf+0x56>
     e1c:	0030      	movs	r0, r6
     e1e:	f000 fb51 	bl	14c4 <_free_r>
     e22:	2300      	movs	r3, #0
     e24:	6363      	str	r3, [r4, #52]	; 0x34
     e26:	2300      	movs	r3, #0
     e28:	61a3      	str	r3, [r4, #24]
     e2a:	6063      	str	r3, [r4, #4]
     e2c:	89a3      	ldrh	r3, [r4, #12]
     e2e:	061b      	lsls	r3, r3, #24
     e30:	d503      	bpl.n	e3a <setvbuf+0x6e>
     e32:	6921      	ldr	r1, [r4, #16]
     e34:	0030      	movs	r0, r6
     e36:	f000 fb45 	bl	14c4 <_free_r>
     e3a:	89a3      	ldrh	r3, [r4, #12]
     e3c:	4a36      	ldr	r2, [pc, #216]	; (f18 <setvbuf+0x14c>)
     e3e:	4013      	ands	r3, r2
     e40:	81a3      	strh	r3, [r4, #12]
     e42:	9b00      	ldr	r3, [sp, #0]
     e44:	2b02      	cmp	r3, #2
     e46:	d05a      	beq.n	efe <setvbuf+0x132>
     e48:	ab03      	add	r3, sp, #12
     e4a:	aa02      	add	r2, sp, #8
     e4c:	0021      	movs	r1, r4
     e4e:	0030      	movs	r0, r6
     e50:	f000 fac2 	bl	13d8 <__swhatbuf_r>
     e54:	89a3      	ldrh	r3, [r4, #12]
     e56:	4318      	orrs	r0, r3
     e58:	81a0      	strh	r0, [r4, #12]
     e5a:	2d00      	cmp	r5, #0
     e5c:	d124      	bne.n	ea8 <setvbuf+0xdc>
     e5e:	9d02      	ldr	r5, [sp, #8]
     e60:	0028      	movs	r0, r5
     e62:	f000 fb25 	bl	14b0 <malloc>
     e66:	9501      	str	r5, [sp, #4]
     e68:	1e07      	subs	r7, r0, #0
     e6a:	d142      	bne.n	ef2 <setvbuf+0x126>
     e6c:	9b02      	ldr	r3, [sp, #8]
     e6e:	9301      	str	r3, [sp, #4]
     e70:	42ab      	cmp	r3, r5
     e72:	d139      	bne.n	ee8 <setvbuf+0x11c>
     e74:	2001      	movs	r0, #1
     e76:	4240      	negs	r0, r0
     e78:	2302      	movs	r3, #2
     e7a:	89a2      	ldrh	r2, [r4, #12]
     e7c:	4313      	orrs	r3, r2
     e7e:	81a3      	strh	r3, [r4, #12]
     e80:	2300      	movs	r3, #0
     e82:	60a3      	str	r3, [r4, #8]
     e84:	0023      	movs	r3, r4
     e86:	3347      	adds	r3, #71	; 0x47
     e88:	6023      	str	r3, [r4, #0]
     e8a:	6123      	str	r3, [r4, #16]
     e8c:	2301      	movs	r3, #1
     e8e:	6163      	str	r3, [r4, #20]
     e90:	b005      	add	sp, #20
     e92:	bdf0      	pop	{r4, r5, r6, r7, pc}
     e94:	4b21      	ldr	r3, [pc, #132]	; (f1c <setvbuf+0x150>)
     e96:	429c      	cmp	r4, r3
     e98:	d101      	bne.n	e9e <setvbuf+0xd2>
     e9a:	68b4      	ldr	r4, [r6, #8]
     e9c:	e7aa      	b.n	df4 <setvbuf+0x28>
     e9e:	4b20      	ldr	r3, [pc, #128]	; (f20 <setvbuf+0x154>)
     ea0:	429c      	cmp	r4, r3
     ea2:	d1a7      	bne.n	df4 <setvbuf+0x28>
     ea4:	68f4      	ldr	r4, [r6, #12]
     ea6:	e7a5      	b.n	df4 <setvbuf+0x28>
     ea8:	2f00      	cmp	r7, #0
     eaa:	d0d9      	beq.n	e60 <setvbuf+0x94>
     eac:	69b3      	ldr	r3, [r6, #24]
     eae:	2b00      	cmp	r3, #0
     eb0:	d102      	bne.n	eb8 <setvbuf+0xec>
     eb2:	0030      	movs	r0, r6
     eb4:	f000 f9fa 	bl	12ac <__sinit>
     eb8:	9b00      	ldr	r3, [sp, #0]
     eba:	2b01      	cmp	r3, #1
     ebc:	d103      	bne.n	ec6 <setvbuf+0xfa>
     ebe:	89a3      	ldrh	r3, [r4, #12]
     ec0:	9a00      	ldr	r2, [sp, #0]
     ec2:	431a      	orrs	r2, r3
     ec4:	81a2      	strh	r2, [r4, #12]
     ec6:	2008      	movs	r0, #8
     ec8:	89a3      	ldrh	r3, [r4, #12]
     eca:	6027      	str	r7, [r4, #0]
     ecc:	6127      	str	r7, [r4, #16]
     ece:	6165      	str	r5, [r4, #20]
     ed0:	4018      	ands	r0, r3
     ed2:	d018      	beq.n	f06 <setvbuf+0x13a>
     ed4:	2001      	movs	r0, #1
     ed6:	4018      	ands	r0, r3
     ed8:	2300      	movs	r3, #0
     eda:	4298      	cmp	r0, r3
     edc:	d011      	beq.n	f02 <setvbuf+0x136>
     ede:	426d      	negs	r5, r5
     ee0:	60a3      	str	r3, [r4, #8]
     ee2:	61a5      	str	r5, [r4, #24]
     ee4:	0018      	movs	r0, r3
     ee6:	e7d3      	b.n	e90 <setvbuf+0xc4>
     ee8:	9801      	ldr	r0, [sp, #4]
     eea:	f000 fae1 	bl	14b0 <malloc>
     eee:	1e07      	subs	r7, r0, #0
     ef0:	d0c0      	beq.n	e74 <setvbuf+0xa8>
     ef2:	2380      	movs	r3, #128	; 0x80
     ef4:	89a2      	ldrh	r2, [r4, #12]
     ef6:	9d01      	ldr	r5, [sp, #4]
     ef8:	4313      	orrs	r3, r2
     efa:	81a3      	strh	r3, [r4, #12]
     efc:	e7d6      	b.n	eac <setvbuf+0xe0>
     efe:	2000      	movs	r0, #0
     f00:	e7ba      	b.n	e78 <setvbuf+0xac>
     f02:	60a5      	str	r5, [r4, #8]
     f04:	e7c4      	b.n	e90 <setvbuf+0xc4>
     f06:	60a0      	str	r0, [r4, #8]
     f08:	e7c2      	b.n	e90 <setvbuf+0xc4>
     f0a:	2001      	movs	r0, #1
     f0c:	4240      	negs	r0, r0
     f0e:	e7bf      	b.n	e90 <setvbuf+0xc4>
     f10:	20000014 	.word	0x20000014
     f14:	00001ea8 	.word	0x00001ea8
     f18:	fffff35c 	.word	0xfffff35c
     f1c:	00001ec8 	.word	0x00001ec8
     f20:	00001e88 	.word	0x00001e88

00000f24 <__swbuf_r>:
     f24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     f26:	0005      	movs	r5, r0
     f28:	000e      	movs	r6, r1
     f2a:	0014      	movs	r4, r2
     f2c:	2800      	cmp	r0, #0
     f2e:	d004      	beq.n	f3a <__swbuf_r+0x16>
     f30:	6983      	ldr	r3, [r0, #24]
     f32:	2b00      	cmp	r3, #0
     f34:	d101      	bne.n	f3a <__swbuf_r+0x16>
     f36:	f000 f9b9 	bl	12ac <__sinit>
     f3a:	4b22      	ldr	r3, [pc, #136]	; (fc4 <__swbuf_r+0xa0>)
     f3c:	429c      	cmp	r4, r3
     f3e:	d12d      	bne.n	f9c <__swbuf_r+0x78>
     f40:	686c      	ldr	r4, [r5, #4]
     f42:	69a3      	ldr	r3, [r4, #24]
     f44:	60a3      	str	r3, [r4, #8]
     f46:	89a3      	ldrh	r3, [r4, #12]
     f48:	071b      	lsls	r3, r3, #28
     f4a:	d531      	bpl.n	fb0 <__swbuf_r+0x8c>
     f4c:	6923      	ldr	r3, [r4, #16]
     f4e:	2b00      	cmp	r3, #0
     f50:	d02e      	beq.n	fb0 <__swbuf_r+0x8c>
     f52:	6823      	ldr	r3, [r4, #0]
     f54:	6922      	ldr	r2, [r4, #16]
     f56:	b2f7      	uxtb	r7, r6
     f58:	1a98      	subs	r0, r3, r2
     f5a:	6963      	ldr	r3, [r4, #20]
     f5c:	b2f6      	uxtb	r6, r6
     f5e:	4298      	cmp	r0, r3
     f60:	db05      	blt.n	f6e <__swbuf_r+0x4a>
     f62:	0021      	movs	r1, r4
     f64:	0028      	movs	r0, r5
     f66:	f000 f933 	bl	11d0 <_fflush_r>
     f6a:	2800      	cmp	r0, #0
     f6c:	d126      	bne.n	fbc <__swbuf_r+0x98>
     f6e:	68a3      	ldr	r3, [r4, #8]
     f70:	3001      	adds	r0, #1
     f72:	3b01      	subs	r3, #1
     f74:	60a3      	str	r3, [r4, #8]
     f76:	6823      	ldr	r3, [r4, #0]
     f78:	1c5a      	adds	r2, r3, #1
     f7a:	6022      	str	r2, [r4, #0]
     f7c:	701f      	strb	r7, [r3, #0]
     f7e:	6963      	ldr	r3, [r4, #20]
     f80:	4298      	cmp	r0, r3
     f82:	d004      	beq.n	f8e <__swbuf_r+0x6a>
     f84:	89a3      	ldrh	r3, [r4, #12]
     f86:	07db      	lsls	r3, r3, #31
     f88:	d51a      	bpl.n	fc0 <__swbuf_r+0x9c>
     f8a:	2e0a      	cmp	r6, #10
     f8c:	d118      	bne.n	fc0 <__swbuf_r+0x9c>
     f8e:	0021      	movs	r1, r4
     f90:	0028      	movs	r0, r5
     f92:	f000 f91d 	bl	11d0 <_fflush_r>
     f96:	2800      	cmp	r0, #0
     f98:	d012      	beq.n	fc0 <__swbuf_r+0x9c>
     f9a:	e00f      	b.n	fbc <__swbuf_r+0x98>
     f9c:	4b0a      	ldr	r3, [pc, #40]	; (fc8 <__swbuf_r+0xa4>)
     f9e:	429c      	cmp	r4, r3
     fa0:	d101      	bne.n	fa6 <__swbuf_r+0x82>
     fa2:	68ac      	ldr	r4, [r5, #8]
     fa4:	e7cd      	b.n	f42 <__swbuf_r+0x1e>
     fa6:	4b09      	ldr	r3, [pc, #36]	; (fcc <__swbuf_r+0xa8>)
     fa8:	429c      	cmp	r4, r3
     faa:	d1ca      	bne.n	f42 <__swbuf_r+0x1e>
     fac:	68ec      	ldr	r4, [r5, #12]
     fae:	e7c8      	b.n	f42 <__swbuf_r+0x1e>
     fb0:	0021      	movs	r1, r4
     fb2:	0028      	movs	r0, r5
     fb4:	f000 f80c 	bl	fd0 <__swsetup_r>
     fb8:	2800      	cmp	r0, #0
     fba:	d0ca      	beq.n	f52 <__swbuf_r+0x2e>
     fbc:	2601      	movs	r6, #1
     fbe:	4276      	negs	r6, r6
     fc0:	0030      	movs	r0, r6
     fc2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     fc4:	00001ea8 	.word	0x00001ea8
     fc8:	00001ec8 	.word	0x00001ec8
     fcc:	00001e88 	.word	0x00001e88

00000fd0 <__swsetup_r>:
     fd0:	4b36      	ldr	r3, [pc, #216]	; (10ac <__swsetup_r+0xdc>)
     fd2:	b570      	push	{r4, r5, r6, lr}
     fd4:	681d      	ldr	r5, [r3, #0]
     fd6:	0006      	movs	r6, r0
     fd8:	000c      	movs	r4, r1
     fda:	2d00      	cmp	r5, #0
     fdc:	d005      	beq.n	fea <__swsetup_r+0x1a>
     fde:	69ab      	ldr	r3, [r5, #24]
     fe0:	2b00      	cmp	r3, #0
     fe2:	d102      	bne.n	fea <__swsetup_r+0x1a>
     fe4:	0028      	movs	r0, r5
     fe6:	f000 f961 	bl	12ac <__sinit>
     fea:	4b31      	ldr	r3, [pc, #196]	; (10b0 <__swsetup_r+0xe0>)
     fec:	429c      	cmp	r4, r3
     fee:	d10f      	bne.n	1010 <__swsetup_r+0x40>
     ff0:	686c      	ldr	r4, [r5, #4]
     ff2:	230c      	movs	r3, #12
     ff4:	5ee2      	ldrsh	r2, [r4, r3]
     ff6:	b293      	uxth	r3, r2
     ff8:	0719      	lsls	r1, r3, #28
     ffa:	d42d      	bmi.n	1058 <__swsetup_r+0x88>
     ffc:	06d9      	lsls	r1, r3, #27
     ffe:	d411      	bmi.n	1024 <__swsetup_r+0x54>
    1000:	2309      	movs	r3, #9
    1002:	2001      	movs	r0, #1
    1004:	6033      	str	r3, [r6, #0]
    1006:	3337      	adds	r3, #55	; 0x37
    1008:	4313      	orrs	r3, r2
    100a:	81a3      	strh	r3, [r4, #12]
    100c:	4240      	negs	r0, r0
    100e:	bd70      	pop	{r4, r5, r6, pc}
    1010:	4b28      	ldr	r3, [pc, #160]	; (10b4 <__swsetup_r+0xe4>)
    1012:	429c      	cmp	r4, r3
    1014:	d101      	bne.n	101a <__swsetup_r+0x4a>
    1016:	68ac      	ldr	r4, [r5, #8]
    1018:	e7eb      	b.n	ff2 <__swsetup_r+0x22>
    101a:	4b27      	ldr	r3, [pc, #156]	; (10b8 <__swsetup_r+0xe8>)
    101c:	429c      	cmp	r4, r3
    101e:	d1e8      	bne.n	ff2 <__swsetup_r+0x22>
    1020:	68ec      	ldr	r4, [r5, #12]
    1022:	e7e6      	b.n	ff2 <__swsetup_r+0x22>
    1024:	075b      	lsls	r3, r3, #29
    1026:	d513      	bpl.n	1050 <__swsetup_r+0x80>
    1028:	6b61      	ldr	r1, [r4, #52]	; 0x34
    102a:	2900      	cmp	r1, #0
    102c:	d008      	beq.n	1040 <__swsetup_r+0x70>
    102e:	0023      	movs	r3, r4
    1030:	3344      	adds	r3, #68	; 0x44
    1032:	4299      	cmp	r1, r3
    1034:	d002      	beq.n	103c <__swsetup_r+0x6c>
    1036:	0030      	movs	r0, r6
    1038:	f000 fa44 	bl	14c4 <_free_r>
    103c:	2300      	movs	r3, #0
    103e:	6363      	str	r3, [r4, #52]	; 0x34
    1040:	2224      	movs	r2, #36	; 0x24
    1042:	89a3      	ldrh	r3, [r4, #12]
    1044:	4393      	bics	r3, r2
    1046:	81a3      	strh	r3, [r4, #12]
    1048:	2300      	movs	r3, #0
    104a:	6063      	str	r3, [r4, #4]
    104c:	6923      	ldr	r3, [r4, #16]
    104e:	6023      	str	r3, [r4, #0]
    1050:	2308      	movs	r3, #8
    1052:	89a2      	ldrh	r2, [r4, #12]
    1054:	4313      	orrs	r3, r2
    1056:	81a3      	strh	r3, [r4, #12]
    1058:	6923      	ldr	r3, [r4, #16]
    105a:	2b00      	cmp	r3, #0
    105c:	d10b      	bne.n	1076 <__swsetup_r+0xa6>
    105e:	21a0      	movs	r1, #160	; 0xa0
    1060:	2280      	movs	r2, #128	; 0x80
    1062:	89a3      	ldrh	r3, [r4, #12]
    1064:	0089      	lsls	r1, r1, #2
    1066:	0092      	lsls	r2, r2, #2
    1068:	400b      	ands	r3, r1
    106a:	4293      	cmp	r3, r2
    106c:	d003      	beq.n	1076 <__swsetup_r+0xa6>
    106e:	0021      	movs	r1, r4
    1070:	0030      	movs	r0, r6
    1072:	f000 f9d9 	bl	1428 <__smakebuf_r>
    1076:	2301      	movs	r3, #1
    1078:	89a2      	ldrh	r2, [r4, #12]
    107a:	4013      	ands	r3, r2
    107c:	d011      	beq.n	10a2 <__swsetup_r+0xd2>
    107e:	2300      	movs	r3, #0
    1080:	60a3      	str	r3, [r4, #8]
    1082:	6963      	ldr	r3, [r4, #20]
    1084:	425b      	negs	r3, r3
    1086:	61a3      	str	r3, [r4, #24]
    1088:	2000      	movs	r0, #0
    108a:	6923      	ldr	r3, [r4, #16]
    108c:	4283      	cmp	r3, r0
    108e:	d1be      	bne.n	100e <__swsetup_r+0x3e>
    1090:	230c      	movs	r3, #12
    1092:	5ee2      	ldrsh	r2, [r4, r3]
    1094:	0613      	lsls	r3, r2, #24
    1096:	d5ba      	bpl.n	100e <__swsetup_r+0x3e>
    1098:	2340      	movs	r3, #64	; 0x40
    109a:	4313      	orrs	r3, r2
    109c:	81a3      	strh	r3, [r4, #12]
    109e:	3801      	subs	r0, #1
    10a0:	e7b5      	b.n	100e <__swsetup_r+0x3e>
    10a2:	0792      	lsls	r2, r2, #30
    10a4:	d400      	bmi.n	10a8 <__swsetup_r+0xd8>
    10a6:	6963      	ldr	r3, [r4, #20]
    10a8:	60a3      	str	r3, [r4, #8]
    10aa:	e7ed      	b.n	1088 <__swsetup_r+0xb8>
    10ac:	20000014 	.word	0x20000014
    10b0:	00001ea8 	.word	0x00001ea8
    10b4:	00001ec8 	.word	0x00001ec8
    10b8:	00001e88 	.word	0x00001e88

000010bc <__sflush_r>:
    10bc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    10be:	898a      	ldrh	r2, [r1, #12]
    10c0:	0005      	movs	r5, r0
    10c2:	000c      	movs	r4, r1
    10c4:	0713      	lsls	r3, r2, #28
    10c6:	d460      	bmi.n	118a <__sflush_r+0xce>
    10c8:	684b      	ldr	r3, [r1, #4]
    10ca:	2b00      	cmp	r3, #0
    10cc:	dc04      	bgt.n	10d8 <__sflush_r+0x1c>
    10ce:	6c0b      	ldr	r3, [r1, #64]	; 0x40
    10d0:	2b00      	cmp	r3, #0
    10d2:	dc01      	bgt.n	10d8 <__sflush_r+0x1c>
    10d4:	2000      	movs	r0, #0
    10d6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    10d8:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    10da:	2f00      	cmp	r7, #0
    10dc:	d0fa      	beq.n	10d4 <__sflush_r+0x18>
    10de:	2300      	movs	r3, #0
    10e0:	682e      	ldr	r6, [r5, #0]
    10e2:	602b      	str	r3, [r5, #0]
    10e4:	2380      	movs	r3, #128	; 0x80
    10e6:	015b      	lsls	r3, r3, #5
    10e8:	401a      	ands	r2, r3
    10ea:	d034      	beq.n	1156 <__sflush_r+0x9a>
    10ec:	6d60      	ldr	r0, [r4, #84]	; 0x54
    10ee:	89a3      	ldrh	r3, [r4, #12]
    10f0:	075b      	lsls	r3, r3, #29
    10f2:	d506      	bpl.n	1102 <__sflush_r+0x46>
    10f4:	6863      	ldr	r3, [r4, #4]
    10f6:	1ac0      	subs	r0, r0, r3
    10f8:	6b63      	ldr	r3, [r4, #52]	; 0x34
    10fa:	2b00      	cmp	r3, #0
    10fc:	d001      	beq.n	1102 <__sflush_r+0x46>
    10fe:	6c23      	ldr	r3, [r4, #64]	; 0x40
    1100:	1ac0      	subs	r0, r0, r3
    1102:	0002      	movs	r2, r0
    1104:	6a21      	ldr	r1, [r4, #32]
    1106:	2300      	movs	r3, #0
    1108:	0028      	movs	r0, r5
    110a:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    110c:	47b8      	blx	r7
    110e:	89a1      	ldrh	r1, [r4, #12]
    1110:	1c43      	adds	r3, r0, #1
    1112:	d106      	bne.n	1122 <__sflush_r+0x66>
    1114:	682b      	ldr	r3, [r5, #0]
    1116:	2b1d      	cmp	r3, #29
    1118:	d831      	bhi.n	117e <__sflush_r+0xc2>
    111a:	4a2c      	ldr	r2, [pc, #176]	; (11cc <__sflush_r+0x110>)
    111c:	40da      	lsrs	r2, r3
    111e:	07d3      	lsls	r3, r2, #31
    1120:	d52d      	bpl.n	117e <__sflush_r+0xc2>
    1122:	2300      	movs	r3, #0
    1124:	6063      	str	r3, [r4, #4]
    1126:	6923      	ldr	r3, [r4, #16]
    1128:	6023      	str	r3, [r4, #0]
    112a:	04cb      	lsls	r3, r1, #19
    112c:	d505      	bpl.n	113a <__sflush_r+0x7e>
    112e:	1c43      	adds	r3, r0, #1
    1130:	d102      	bne.n	1138 <__sflush_r+0x7c>
    1132:	682b      	ldr	r3, [r5, #0]
    1134:	2b00      	cmp	r3, #0
    1136:	d100      	bne.n	113a <__sflush_r+0x7e>
    1138:	6560      	str	r0, [r4, #84]	; 0x54
    113a:	6b61      	ldr	r1, [r4, #52]	; 0x34
    113c:	602e      	str	r6, [r5, #0]
    113e:	2900      	cmp	r1, #0
    1140:	d0c8      	beq.n	10d4 <__sflush_r+0x18>
    1142:	0023      	movs	r3, r4
    1144:	3344      	adds	r3, #68	; 0x44
    1146:	4299      	cmp	r1, r3
    1148:	d002      	beq.n	1150 <__sflush_r+0x94>
    114a:	0028      	movs	r0, r5
    114c:	f000 f9ba 	bl	14c4 <_free_r>
    1150:	2000      	movs	r0, #0
    1152:	6360      	str	r0, [r4, #52]	; 0x34
    1154:	e7bf      	b.n	10d6 <__sflush_r+0x1a>
    1156:	2301      	movs	r3, #1
    1158:	6a21      	ldr	r1, [r4, #32]
    115a:	0028      	movs	r0, r5
    115c:	47b8      	blx	r7
    115e:	1c43      	adds	r3, r0, #1
    1160:	d1c5      	bne.n	10ee <__sflush_r+0x32>
    1162:	682b      	ldr	r3, [r5, #0]
    1164:	2b00      	cmp	r3, #0
    1166:	d0c2      	beq.n	10ee <__sflush_r+0x32>
    1168:	2b1d      	cmp	r3, #29
    116a:	d001      	beq.n	1170 <__sflush_r+0xb4>
    116c:	2b16      	cmp	r3, #22
    116e:	d101      	bne.n	1174 <__sflush_r+0xb8>
    1170:	602e      	str	r6, [r5, #0]
    1172:	e7af      	b.n	10d4 <__sflush_r+0x18>
    1174:	2340      	movs	r3, #64	; 0x40
    1176:	89a2      	ldrh	r2, [r4, #12]
    1178:	4313      	orrs	r3, r2
    117a:	81a3      	strh	r3, [r4, #12]
    117c:	e7ab      	b.n	10d6 <__sflush_r+0x1a>
    117e:	2340      	movs	r3, #64	; 0x40
    1180:	430b      	orrs	r3, r1
    1182:	2001      	movs	r0, #1
    1184:	81a3      	strh	r3, [r4, #12]
    1186:	4240      	negs	r0, r0
    1188:	e7a5      	b.n	10d6 <__sflush_r+0x1a>
    118a:	690f      	ldr	r7, [r1, #16]
    118c:	2f00      	cmp	r7, #0
    118e:	d0a1      	beq.n	10d4 <__sflush_r+0x18>
    1190:	680b      	ldr	r3, [r1, #0]
    1192:	600f      	str	r7, [r1, #0]
    1194:	1bdb      	subs	r3, r3, r7
    1196:	9301      	str	r3, [sp, #4]
    1198:	2300      	movs	r3, #0
    119a:	0792      	lsls	r2, r2, #30
    119c:	d100      	bne.n	11a0 <__sflush_r+0xe4>
    119e:	694b      	ldr	r3, [r1, #20]
    11a0:	60a3      	str	r3, [r4, #8]
    11a2:	9b01      	ldr	r3, [sp, #4]
    11a4:	2b00      	cmp	r3, #0
    11a6:	dc00      	bgt.n	11aa <__sflush_r+0xee>
    11a8:	e794      	b.n	10d4 <__sflush_r+0x18>
    11aa:	9b01      	ldr	r3, [sp, #4]
    11ac:	003a      	movs	r2, r7
    11ae:	6a21      	ldr	r1, [r4, #32]
    11b0:	0028      	movs	r0, r5
    11b2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    11b4:	47b0      	blx	r6
    11b6:	2800      	cmp	r0, #0
    11b8:	dc03      	bgt.n	11c2 <__sflush_r+0x106>
    11ba:	2340      	movs	r3, #64	; 0x40
    11bc:	89a2      	ldrh	r2, [r4, #12]
    11be:	4313      	orrs	r3, r2
    11c0:	e7df      	b.n	1182 <__sflush_r+0xc6>
    11c2:	9b01      	ldr	r3, [sp, #4]
    11c4:	183f      	adds	r7, r7, r0
    11c6:	1a1b      	subs	r3, r3, r0
    11c8:	9301      	str	r3, [sp, #4]
    11ca:	e7ea      	b.n	11a2 <__sflush_r+0xe6>
    11cc:	20400001 	.word	0x20400001

000011d0 <_fflush_r>:
    11d0:	690b      	ldr	r3, [r1, #16]
    11d2:	b570      	push	{r4, r5, r6, lr}
    11d4:	0005      	movs	r5, r0
    11d6:	000c      	movs	r4, r1
    11d8:	2b00      	cmp	r3, #0
    11da:	d101      	bne.n	11e0 <_fflush_r+0x10>
    11dc:	2000      	movs	r0, #0
    11de:	bd70      	pop	{r4, r5, r6, pc}
    11e0:	2800      	cmp	r0, #0
    11e2:	d004      	beq.n	11ee <_fflush_r+0x1e>
    11e4:	6983      	ldr	r3, [r0, #24]
    11e6:	2b00      	cmp	r3, #0
    11e8:	d101      	bne.n	11ee <_fflush_r+0x1e>
    11ea:	f000 f85f 	bl	12ac <__sinit>
    11ee:	4b0b      	ldr	r3, [pc, #44]	; (121c <_fflush_r+0x4c>)
    11f0:	429c      	cmp	r4, r3
    11f2:	d109      	bne.n	1208 <_fflush_r+0x38>
    11f4:	686c      	ldr	r4, [r5, #4]
    11f6:	220c      	movs	r2, #12
    11f8:	5ea3      	ldrsh	r3, [r4, r2]
    11fa:	2b00      	cmp	r3, #0
    11fc:	d0ee      	beq.n	11dc <_fflush_r+0xc>
    11fe:	0021      	movs	r1, r4
    1200:	0028      	movs	r0, r5
    1202:	f7ff ff5b 	bl	10bc <__sflush_r>
    1206:	e7ea      	b.n	11de <_fflush_r+0xe>
    1208:	4b05      	ldr	r3, [pc, #20]	; (1220 <_fflush_r+0x50>)
    120a:	429c      	cmp	r4, r3
    120c:	d101      	bne.n	1212 <_fflush_r+0x42>
    120e:	68ac      	ldr	r4, [r5, #8]
    1210:	e7f1      	b.n	11f6 <_fflush_r+0x26>
    1212:	4b04      	ldr	r3, [pc, #16]	; (1224 <_fflush_r+0x54>)
    1214:	429c      	cmp	r4, r3
    1216:	d1ee      	bne.n	11f6 <_fflush_r+0x26>
    1218:	68ec      	ldr	r4, [r5, #12]
    121a:	e7ec      	b.n	11f6 <_fflush_r+0x26>
    121c:	00001ea8 	.word	0x00001ea8
    1220:	00001ec8 	.word	0x00001ec8
    1224:	00001e88 	.word	0x00001e88

00001228 <_cleanup_r>:
    1228:	b510      	push	{r4, lr}
    122a:	4902      	ldr	r1, [pc, #8]	; (1234 <_cleanup_r+0xc>)
    122c:	f000 f8b2 	bl	1394 <_fwalk_reent>
    1230:	bd10      	pop	{r4, pc}
    1232:	46c0      	nop			; (mov r8, r8)
    1234:	000011d1 	.word	0x000011d1

00001238 <std.isra.0>:
    1238:	2300      	movs	r3, #0
    123a:	b510      	push	{r4, lr}
    123c:	0004      	movs	r4, r0
    123e:	6003      	str	r3, [r0, #0]
    1240:	6043      	str	r3, [r0, #4]
    1242:	6083      	str	r3, [r0, #8]
    1244:	8181      	strh	r1, [r0, #12]
    1246:	6643      	str	r3, [r0, #100]	; 0x64
    1248:	81c2      	strh	r2, [r0, #14]
    124a:	6103      	str	r3, [r0, #16]
    124c:	6143      	str	r3, [r0, #20]
    124e:	6183      	str	r3, [r0, #24]
    1250:	0019      	movs	r1, r3
    1252:	2208      	movs	r2, #8
    1254:	305c      	adds	r0, #92	; 0x5c
    1256:	f7ff fd8d 	bl	d74 <memset>
    125a:	4b05      	ldr	r3, [pc, #20]	; (1270 <std.isra.0+0x38>)
    125c:	6224      	str	r4, [r4, #32]
    125e:	6263      	str	r3, [r4, #36]	; 0x24
    1260:	4b04      	ldr	r3, [pc, #16]	; (1274 <std.isra.0+0x3c>)
    1262:	62a3      	str	r3, [r4, #40]	; 0x28
    1264:	4b04      	ldr	r3, [pc, #16]	; (1278 <std.isra.0+0x40>)
    1266:	62e3      	str	r3, [r4, #44]	; 0x2c
    1268:	4b04      	ldr	r3, [pc, #16]	; (127c <std.isra.0+0x44>)
    126a:	6323      	str	r3, [r4, #48]	; 0x30
    126c:	bd10      	pop	{r4, pc}
    126e:	46c0      	nop			; (mov r8, r8)
    1270:	00001bd1 	.word	0x00001bd1
    1274:	00001bf9 	.word	0x00001bf9
    1278:	00001c31 	.word	0x00001c31
    127c:	00001c5d 	.word	0x00001c5d

00001280 <__sfmoreglue>:
    1280:	b570      	push	{r4, r5, r6, lr}
    1282:	2568      	movs	r5, #104	; 0x68
    1284:	1e4a      	subs	r2, r1, #1
    1286:	4355      	muls	r5, r2
    1288:	000e      	movs	r6, r1
    128a:	0029      	movs	r1, r5
    128c:	3174      	adds	r1, #116	; 0x74
    128e:	f000 f963 	bl	1558 <_malloc_r>
    1292:	1e04      	subs	r4, r0, #0
    1294:	d008      	beq.n	12a8 <__sfmoreglue+0x28>
    1296:	2100      	movs	r1, #0
    1298:	002a      	movs	r2, r5
    129a:	6001      	str	r1, [r0, #0]
    129c:	6046      	str	r6, [r0, #4]
    129e:	300c      	adds	r0, #12
    12a0:	60a0      	str	r0, [r4, #8]
    12a2:	3268      	adds	r2, #104	; 0x68
    12a4:	f7ff fd66 	bl	d74 <memset>
    12a8:	0020      	movs	r0, r4
    12aa:	bd70      	pop	{r4, r5, r6, pc}

000012ac <__sinit>:
    12ac:	6983      	ldr	r3, [r0, #24]
    12ae:	b513      	push	{r0, r1, r4, lr}
    12b0:	0004      	movs	r4, r0
    12b2:	2b00      	cmp	r3, #0
    12b4:	d128      	bne.n	1308 <__sinit+0x5c>
    12b6:	6483      	str	r3, [r0, #72]	; 0x48
    12b8:	64c3      	str	r3, [r0, #76]	; 0x4c
    12ba:	6503      	str	r3, [r0, #80]	; 0x50
    12bc:	4b13      	ldr	r3, [pc, #76]	; (130c <__sinit+0x60>)
    12be:	4a14      	ldr	r2, [pc, #80]	; (1310 <__sinit+0x64>)
    12c0:	681b      	ldr	r3, [r3, #0]
    12c2:	6282      	str	r2, [r0, #40]	; 0x28
    12c4:	9301      	str	r3, [sp, #4]
    12c6:	4298      	cmp	r0, r3
    12c8:	d101      	bne.n	12ce <__sinit+0x22>
    12ca:	2301      	movs	r3, #1
    12cc:	6183      	str	r3, [r0, #24]
    12ce:	0020      	movs	r0, r4
    12d0:	f000 f820 	bl	1314 <__sfp>
    12d4:	6060      	str	r0, [r4, #4]
    12d6:	0020      	movs	r0, r4
    12d8:	f000 f81c 	bl	1314 <__sfp>
    12dc:	60a0      	str	r0, [r4, #8]
    12de:	0020      	movs	r0, r4
    12e0:	f000 f818 	bl	1314 <__sfp>
    12e4:	2200      	movs	r2, #0
    12e6:	60e0      	str	r0, [r4, #12]
    12e8:	2104      	movs	r1, #4
    12ea:	6860      	ldr	r0, [r4, #4]
    12ec:	f7ff ffa4 	bl	1238 <std.isra.0>
    12f0:	2201      	movs	r2, #1
    12f2:	2109      	movs	r1, #9
    12f4:	68a0      	ldr	r0, [r4, #8]
    12f6:	f7ff ff9f 	bl	1238 <std.isra.0>
    12fa:	2202      	movs	r2, #2
    12fc:	2112      	movs	r1, #18
    12fe:	68e0      	ldr	r0, [r4, #12]
    1300:	f7ff ff9a 	bl	1238 <std.isra.0>
    1304:	2301      	movs	r3, #1
    1306:	61a3      	str	r3, [r4, #24]
    1308:	bd13      	pop	{r0, r1, r4, pc}
    130a:	46c0      	nop			; (mov r8, r8)
    130c:	00001e84 	.word	0x00001e84
    1310:	00001229 	.word	0x00001229

00001314 <__sfp>:
    1314:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1316:	4b1e      	ldr	r3, [pc, #120]	; (1390 <__sfp+0x7c>)
    1318:	0007      	movs	r7, r0
    131a:	681e      	ldr	r6, [r3, #0]
    131c:	69b3      	ldr	r3, [r6, #24]
    131e:	2b00      	cmp	r3, #0
    1320:	d102      	bne.n	1328 <__sfp+0x14>
    1322:	0030      	movs	r0, r6
    1324:	f7ff ffc2 	bl	12ac <__sinit>
    1328:	3648      	adds	r6, #72	; 0x48
    132a:	68b4      	ldr	r4, [r6, #8]
    132c:	6873      	ldr	r3, [r6, #4]
    132e:	3b01      	subs	r3, #1
    1330:	d504      	bpl.n	133c <__sfp+0x28>
    1332:	6833      	ldr	r3, [r6, #0]
    1334:	2b00      	cmp	r3, #0
    1336:	d007      	beq.n	1348 <__sfp+0x34>
    1338:	6836      	ldr	r6, [r6, #0]
    133a:	e7f6      	b.n	132a <__sfp+0x16>
    133c:	220c      	movs	r2, #12
    133e:	5ea5      	ldrsh	r5, [r4, r2]
    1340:	2d00      	cmp	r5, #0
    1342:	d00d      	beq.n	1360 <__sfp+0x4c>
    1344:	3468      	adds	r4, #104	; 0x68
    1346:	e7f2      	b.n	132e <__sfp+0x1a>
    1348:	2104      	movs	r1, #4
    134a:	0038      	movs	r0, r7
    134c:	f7ff ff98 	bl	1280 <__sfmoreglue>
    1350:	6030      	str	r0, [r6, #0]
    1352:	2800      	cmp	r0, #0
    1354:	d1f0      	bne.n	1338 <__sfp+0x24>
    1356:	230c      	movs	r3, #12
    1358:	0004      	movs	r4, r0
    135a:	603b      	str	r3, [r7, #0]
    135c:	0020      	movs	r0, r4
    135e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1360:	2301      	movs	r3, #1
    1362:	0020      	movs	r0, r4
    1364:	425b      	negs	r3, r3
    1366:	81e3      	strh	r3, [r4, #14]
    1368:	3302      	adds	r3, #2
    136a:	81a3      	strh	r3, [r4, #12]
    136c:	6665      	str	r5, [r4, #100]	; 0x64
    136e:	6025      	str	r5, [r4, #0]
    1370:	60a5      	str	r5, [r4, #8]
    1372:	6065      	str	r5, [r4, #4]
    1374:	6125      	str	r5, [r4, #16]
    1376:	6165      	str	r5, [r4, #20]
    1378:	61a5      	str	r5, [r4, #24]
    137a:	2208      	movs	r2, #8
    137c:	0029      	movs	r1, r5
    137e:	305c      	adds	r0, #92	; 0x5c
    1380:	f7ff fcf8 	bl	d74 <memset>
    1384:	6365      	str	r5, [r4, #52]	; 0x34
    1386:	63a5      	str	r5, [r4, #56]	; 0x38
    1388:	64a5      	str	r5, [r4, #72]	; 0x48
    138a:	64e5      	str	r5, [r4, #76]	; 0x4c
    138c:	e7e6      	b.n	135c <__sfp+0x48>
    138e:	46c0      	nop			; (mov r8, r8)
    1390:	00001e84 	.word	0x00001e84

00001394 <_fwalk_reent>:
    1394:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    1396:	0004      	movs	r4, r0
    1398:	0007      	movs	r7, r0
    139a:	2600      	movs	r6, #0
    139c:	9101      	str	r1, [sp, #4]
    139e:	3448      	adds	r4, #72	; 0x48
    13a0:	2c00      	cmp	r4, #0
    13a2:	d101      	bne.n	13a8 <_fwalk_reent+0x14>
    13a4:	0030      	movs	r0, r6
    13a6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    13a8:	6863      	ldr	r3, [r4, #4]
    13aa:	68a5      	ldr	r5, [r4, #8]
    13ac:	9300      	str	r3, [sp, #0]
    13ae:	9b00      	ldr	r3, [sp, #0]
    13b0:	3b01      	subs	r3, #1
    13b2:	9300      	str	r3, [sp, #0]
    13b4:	d501      	bpl.n	13ba <_fwalk_reent+0x26>
    13b6:	6824      	ldr	r4, [r4, #0]
    13b8:	e7f2      	b.n	13a0 <_fwalk_reent+0xc>
    13ba:	89ab      	ldrh	r3, [r5, #12]
    13bc:	2b01      	cmp	r3, #1
    13be:	d908      	bls.n	13d2 <_fwalk_reent+0x3e>
    13c0:	220e      	movs	r2, #14
    13c2:	5eab      	ldrsh	r3, [r5, r2]
    13c4:	3301      	adds	r3, #1
    13c6:	d004      	beq.n	13d2 <_fwalk_reent+0x3e>
    13c8:	0029      	movs	r1, r5
    13ca:	0038      	movs	r0, r7
    13cc:	9b01      	ldr	r3, [sp, #4]
    13ce:	4798      	blx	r3
    13d0:	4306      	orrs	r6, r0
    13d2:	3568      	adds	r5, #104	; 0x68
    13d4:	e7eb      	b.n	13ae <_fwalk_reent+0x1a>
	...

000013d8 <__swhatbuf_r>:
    13d8:	b570      	push	{r4, r5, r6, lr}
    13da:	000e      	movs	r6, r1
    13dc:	001d      	movs	r5, r3
    13de:	230e      	movs	r3, #14
    13e0:	5ec9      	ldrsh	r1, [r1, r3]
    13e2:	b090      	sub	sp, #64	; 0x40
    13e4:	0014      	movs	r4, r2
    13e6:	2900      	cmp	r1, #0
    13e8:	da07      	bge.n	13fa <__swhatbuf_r+0x22>
    13ea:	2300      	movs	r3, #0
    13ec:	602b      	str	r3, [r5, #0]
    13ee:	89b3      	ldrh	r3, [r6, #12]
    13f0:	061b      	lsls	r3, r3, #24
    13f2:	d411      	bmi.n	1418 <__swhatbuf_r+0x40>
    13f4:	2380      	movs	r3, #128	; 0x80
    13f6:	00db      	lsls	r3, r3, #3
    13f8:	e00f      	b.n	141a <__swhatbuf_r+0x42>
    13fa:	aa01      	add	r2, sp, #4
    13fc:	f000 fc5a 	bl	1cb4 <_fstat_r>
    1400:	2800      	cmp	r0, #0
    1402:	dbf2      	blt.n	13ea <__swhatbuf_r+0x12>
    1404:	22f0      	movs	r2, #240	; 0xf0
    1406:	9b02      	ldr	r3, [sp, #8]
    1408:	0212      	lsls	r2, r2, #8
    140a:	4013      	ands	r3, r2
    140c:	4a05      	ldr	r2, [pc, #20]	; (1424 <__swhatbuf_r+0x4c>)
    140e:	189b      	adds	r3, r3, r2
    1410:	425a      	negs	r2, r3
    1412:	4153      	adcs	r3, r2
    1414:	602b      	str	r3, [r5, #0]
    1416:	e7ed      	b.n	13f4 <__swhatbuf_r+0x1c>
    1418:	2340      	movs	r3, #64	; 0x40
    141a:	2000      	movs	r0, #0
    141c:	6023      	str	r3, [r4, #0]
    141e:	b010      	add	sp, #64	; 0x40
    1420:	bd70      	pop	{r4, r5, r6, pc}
    1422:	46c0      	nop			; (mov r8, r8)
    1424:	ffffe000 	.word	0xffffe000

00001428 <__smakebuf_r>:
    1428:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    142a:	2602      	movs	r6, #2
    142c:	898b      	ldrh	r3, [r1, #12]
    142e:	0005      	movs	r5, r0
    1430:	000c      	movs	r4, r1
    1432:	4233      	tst	r3, r6
    1434:	d006      	beq.n	1444 <__smakebuf_r+0x1c>
    1436:	0023      	movs	r3, r4
    1438:	3347      	adds	r3, #71	; 0x47
    143a:	6023      	str	r3, [r4, #0]
    143c:	6123      	str	r3, [r4, #16]
    143e:	2301      	movs	r3, #1
    1440:	6163      	str	r3, [r4, #20]
    1442:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    1444:	ab01      	add	r3, sp, #4
    1446:	466a      	mov	r2, sp
    1448:	f7ff ffc6 	bl	13d8 <__swhatbuf_r>
    144c:	9900      	ldr	r1, [sp, #0]
    144e:	0007      	movs	r7, r0
    1450:	0028      	movs	r0, r5
    1452:	f000 f881 	bl	1558 <_malloc_r>
    1456:	2800      	cmp	r0, #0
    1458:	d108      	bne.n	146c <__smakebuf_r+0x44>
    145a:	220c      	movs	r2, #12
    145c:	5ea3      	ldrsh	r3, [r4, r2]
    145e:	059a      	lsls	r2, r3, #22
    1460:	d4ef      	bmi.n	1442 <__smakebuf_r+0x1a>
    1462:	2203      	movs	r2, #3
    1464:	4393      	bics	r3, r2
    1466:	431e      	orrs	r6, r3
    1468:	81a6      	strh	r6, [r4, #12]
    146a:	e7e4      	b.n	1436 <__smakebuf_r+0xe>
    146c:	4b0f      	ldr	r3, [pc, #60]	; (14ac <__smakebuf_r+0x84>)
    146e:	62ab      	str	r3, [r5, #40]	; 0x28
    1470:	2380      	movs	r3, #128	; 0x80
    1472:	89a2      	ldrh	r2, [r4, #12]
    1474:	6020      	str	r0, [r4, #0]
    1476:	4313      	orrs	r3, r2
    1478:	81a3      	strh	r3, [r4, #12]
    147a:	9b00      	ldr	r3, [sp, #0]
    147c:	6120      	str	r0, [r4, #16]
    147e:	6163      	str	r3, [r4, #20]
    1480:	9b01      	ldr	r3, [sp, #4]
    1482:	2b00      	cmp	r3, #0
    1484:	d00d      	beq.n	14a2 <__smakebuf_r+0x7a>
    1486:	230e      	movs	r3, #14
    1488:	5ee1      	ldrsh	r1, [r4, r3]
    148a:	0028      	movs	r0, r5
    148c:	f000 fc24 	bl	1cd8 <_isatty_r>
    1490:	2800      	cmp	r0, #0
    1492:	d006      	beq.n	14a2 <__smakebuf_r+0x7a>
    1494:	2203      	movs	r2, #3
    1496:	89a3      	ldrh	r3, [r4, #12]
    1498:	4393      	bics	r3, r2
    149a:	001a      	movs	r2, r3
    149c:	2301      	movs	r3, #1
    149e:	4313      	orrs	r3, r2
    14a0:	81a3      	strh	r3, [r4, #12]
    14a2:	89a0      	ldrh	r0, [r4, #12]
    14a4:	4338      	orrs	r0, r7
    14a6:	81a0      	strh	r0, [r4, #12]
    14a8:	e7cb      	b.n	1442 <__smakebuf_r+0x1a>
    14aa:	46c0      	nop			; (mov r8, r8)
    14ac:	00001229 	.word	0x00001229

000014b0 <malloc>:
    14b0:	b510      	push	{r4, lr}
    14b2:	4b03      	ldr	r3, [pc, #12]	; (14c0 <malloc+0x10>)
    14b4:	0001      	movs	r1, r0
    14b6:	6818      	ldr	r0, [r3, #0]
    14b8:	f000 f84e 	bl	1558 <_malloc_r>
    14bc:	bd10      	pop	{r4, pc}
    14be:	46c0      	nop			; (mov r8, r8)
    14c0:	20000014 	.word	0x20000014

000014c4 <_free_r>:
    14c4:	b570      	push	{r4, r5, r6, lr}
    14c6:	0005      	movs	r5, r0
    14c8:	2900      	cmp	r1, #0
    14ca:	d010      	beq.n	14ee <_free_r+0x2a>
    14cc:	1f0c      	subs	r4, r1, #4
    14ce:	6823      	ldr	r3, [r4, #0]
    14d0:	2b00      	cmp	r3, #0
    14d2:	da00      	bge.n	14d6 <_free_r+0x12>
    14d4:	18e4      	adds	r4, r4, r3
    14d6:	0028      	movs	r0, r5
    14d8:	f000 fc2f 	bl	1d3a <__malloc_lock>
    14dc:	4a1d      	ldr	r2, [pc, #116]	; (1554 <_free_r+0x90>)
    14de:	6813      	ldr	r3, [r2, #0]
    14e0:	2b00      	cmp	r3, #0
    14e2:	d105      	bne.n	14f0 <_free_r+0x2c>
    14e4:	6063      	str	r3, [r4, #4]
    14e6:	6014      	str	r4, [r2, #0]
    14e8:	0028      	movs	r0, r5
    14ea:	f000 fc27 	bl	1d3c <__malloc_unlock>
    14ee:	bd70      	pop	{r4, r5, r6, pc}
    14f0:	42a3      	cmp	r3, r4
    14f2:	d909      	bls.n	1508 <_free_r+0x44>
    14f4:	6821      	ldr	r1, [r4, #0]
    14f6:	1860      	adds	r0, r4, r1
    14f8:	4283      	cmp	r3, r0
    14fa:	d1f3      	bne.n	14e4 <_free_r+0x20>
    14fc:	6818      	ldr	r0, [r3, #0]
    14fe:	685b      	ldr	r3, [r3, #4]
    1500:	1841      	adds	r1, r0, r1
    1502:	6021      	str	r1, [r4, #0]
    1504:	e7ee      	b.n	14e4 <_free_r+0x20>
    1506:	0013      	movs	r3, r2
    1508:	685a      	ldr	r2, [r3, #4]
    150a:	2a00      	cmp	r2, #0
    150c:	d001      	beq.n	1512 <_free_r+0x4e>
    150e:	42a2      	cmp	r2, r4
    1510:	d9f9      	bls.n	1506 <_free_r+0x42>
    1512:	6819      	ldr	r1, [r3, #0]
    1514:	1858      	adds	r0, r3, r1
    1516:	42a0      	cmp	r0, r4
    1518:	d10b      	bne.n	1532 <_free_r+0x6e>
    151a:	6820      	ldr	r0, [r4, #0]
    151c:	1809      	adds	r1, r1, r0
    151e:	1858      	adds	r0, r3, r1
    1520:	6019      	str	r1, [r3, #0]
    1522:	4282      	cmp	r2, r0
    1524:	d1e0      	bne.n	14e8 <_free_r+0x24>
    1526:	6810      	ldr	r0, [r2, #0]
    1528:	6852      	ldr	r2, [r2, #4]
    152a:	1841      	adds	r1, r0, r1
    152c:	6019      	str	r1, [r3, #0]
    152e:	605a      	str	r2, [r3, #4]
    1530:	e7da      	b.n	14e8 <_free_r+0x24>
    1532:	42a0      	cmp	r0, r4
    1534:	d902      	bls.n	153c <_free_r+0x78>
    1536:	230c      	movs	r3, #12
    1538:	602b      	str	r3, [r5, #0]
    153a:	e7d5      	b.n	14e8 <_free_r+0x24>
    153c:	6821      	ldr	r1, [r4, #0]
    153e:	1860      	adds	r0, r4, r1
    1540:	4282      	cmp	r2, r0
    1542:	d103      	bne.n	154c <_free_r+0x88>
    1544:	6810      	ldr	r0, [r2, #0]
    1546:	6852      	ldr	r2, [r2, #4]
    1548:	1841      	adds	r1, r0, r1
    154a:	6021      	str	r1, [r4, #0]
    154c:	6062      	str	r2, [r4, #4]
    154e:	605c      	str	r4, [r3, #4]
    1550:	e7ca      	b.n	14e8 <_free_r+0x24>
    1552:	46c0      	nop			; (mov r8, r8)
    1554:	200000d0 	.word	0x200000d0

00001558 <_malloc_r>:
    1558:	2303      	movs	r3, #3
    155a:	b570      	push	{r4, r5, r6, lr}
    155c:	1ccd      	adds	r5, r1, #3
    155e:	439d      	bics	r5, r3
    1560:	3508      	adds	r5, #8
    1562:	0006      	movs	r6, r0
    1564:	2d0c      	cmp	r5, #12
    1566:	d21e      	bcs.n	15a6 <_malloc_r+0x4e>
    1568:	250c      	movs	r5, #12
    156a:	42a9      	cmp	r1, r5
    156c:	d81d      	bhi.n	15aa <_malloc_r+0x52>
    156e:	0030      	movs	r0, r6
    1570:	f000 fbe3 	bl	1d3a <__malloc_lock>
    1574:	4a25      	ldr	r2, [pc, #148]	; (160c <_malloc_r+0xb4>)
    1576:	6814      	ldr	r4, [r2, #0]
    1578:	0021      	movs	r1, r4
    157a:	2900      	cmp	r1, #0
    157c:	d119      	bne.n	15b2 <_malloc_r+0x5a>
    157e:	4c24      	ldr	r4, [pc, #144]	; (1610 <_malloc_r+0xb8>)
    1580:	6823      	ldr	r3, [r4, #0]
    1582:	2b00      	cmp	r3, #0
    1584:	d103      	bne.n	158e <_malloc_r+0x36>
    1586:	0030      	movs	r0, r6
    1588:	f000 fb10 	bl	1bac <_sbrk_r>
    158c:	6020      	str	r0, [r4, #0]
    158e:	0029      	movs	r1, r5
    1590:	0030      	movs	r0, r6
    1592:	f000 fb0b 	bl	1bac <_sbrk_r>
    1596:	1c43      	adds	r3, r0, #1
    1598:	d12c      	bne.n	15f4 <_malloc_r+0x9c>
    159a:	230c      	movs	r3, #12
    159c:	0030      	movs	r0, r6
    159e:	6033      	str	r3, [r6, #0]
    15a0:	f000 fbcc 	bl	1d3c <__malloc_unlock>
    15a4:	e003      	b.n	15ae <_malloc_r+0x56>
    15a6:	2d00      	cmp	r5, #0
    15a8:	dadf      	bge.n	156a <_malloc_r+0x12>
    15aa:	230c      	movs	r3, #12
    15ac:	6033      	str	r3, [r6, #0]
    15ae:	2000      	movs	r0, #0
    15b0:	bd70      	pop	{r4, r5, r6, pc}
    15b2:	680b      	ldr	r3, [r1, #0]
    15b4:	1b5b      	subs	r3, r3, r5
    15b6:	d41a      	bmi.n	15ee <_malloc_r+0x96>
    15b8:	2b0b      	cmp	r3, #11
    15ba:	d903      	bls.n	15c4 <_malloc_r+0x6c>
    15bc:	600b      	str	r3, [r1, #0]
    15be:	18cc      	adds	r4, r1, r3
    15c0:	6025      	str	r5, [r4, #0]
    15c2:	e003      	b.n	15cc <_malloc_r+0x74>
    15c4:	428c      	cmp	r4, r1
    15c6:	d10e      	bne.n	15e6 <_malloc_r+0x8e>
    15c8:	6863      	ldr	r3, [r4, #4]
    15ca:	6013      	str	r3, [r2, #0]
    15cc:	0030      	movs	r0, r6
    15ce:	f000 fbb5 	bl	1d3c <__malloc_unlock>
    15d2:	0020      	movs	r0, r4
    15d4:	2207      	movs	r2, #7
    15d6:	300b      	adds	r0, #11
    15d8:	1d23      	adds	r3, r4, #4
    15da:	4390      	bics	r0, r2
    15dc:	1ac3      	subs	r3, r0, r3
    15de:	d0e7      	beq.n	15b0 <_malloc_r+0x58>
    15e0:	425a      	negs	r2, r3
    15e2:	50e2      	str	r2, [r4, r3]
    15e4:	e7e4      	b.n	15b0 <_malloc_r+0x58>
    15e6:	684b      	ldr	r3, [r1, #4]
    15e8:	6063      	str	r3, [r4, #4]
    15ea:	000c      	movs	r4, r1
    15ec:	e7ee      	b.n	15cc <_malloc_r+0x74>
    15ee:	000c      	movs	r4, r1
    15f0:	6849      	ldr	r1, [r1, #4]
    15f2:	e7c2      	b.n	157a <_malloc_r+0x22>
    15f4:	2303      	movs	r3, #3
    15f6:	1cc4      	adds	r4, r0, #3
    15f8:	439c      	bics	r4, r3
    15fa:	42a0      	cmp	r0, r4
    15fc:	d0e0      	beq.n	15c0 <_malloc_r+0x68>
    15fe:	1a21      	subs	r1, r4, r0
    1600:	0030      	movs	r0, r6
    1602:	f000 fad3 	bl	1bac <_sbrk_r>
    1606:	1c43      	adds	r3, r0, #1
    1608:	d1da      	bne.n	15c0 <_malloc_r+0x68>
    160a:	e7c6      	b.n	159a <_malloc_r+0x42>
    160c:	200000d0 	.word	0x200000d0
    1610:	200000d4 	.word	0x200000d4

00001614 <__sfputc_r>:
    1614:	6893      	ldr	r3, [r2, #8]
    1616:	b510      	push	{r4, lr}
    1618:	3b01      	subs	r3, #1
    161a:	6093      	str	r3, [r2, #8]
    161c:	2b00      	cmp	r3, #0
    161e:	da05      	bge.n	162c <__sfputc_r+0x18>
    1620:	6994      	ldr	r4, [r2, #24]
    1622:	42a3      	cmp	r3, r4
    1624:	db08      	blt.n	1638 <__sfputc_r+0x24>
    1626:	b2cb      	uxtb	r3, r1
    1628:	2b0a      	cmp	r3, #10
    162a:	d005      	beq.n	1638 <__sfputc_r+0x24>
    162c:	6813      	ldr	r3, [r2, #0]
    162e:	1c58      	adds	r0, r3, #1
    1630:	6010      	str	r0, [r2, #0]
    1632:	7019      	strb	r1, [r3, #0]
    1634:	b2c8      	uxtb	r0, r1
    1636:	bd10      	pop	{r4, pc}
    1638:	f7ff fc74 	bl	f24 <__swbuf_r>
    163c:	e7fb      	b.n	1636 <__sfputc_r+0x22>

0000163e <__sfputs_r>:
    163e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1640:	0006      	movs	r6, r0
    1642:	000f      	movs	r7, r1
    1644:	0014      	movs	r4, r2
    1646:	18d5      	adds	r5, r2, r3
    1648:	42ac      	cmp	r4, r5
    164a:	d101      	bne.n	1650 <__sfputs_r+0x12>
    164c:	2000      	movs	r0, #0
    164e:	e007      	b.n	1660 <__sfputs_r+0x22>
    1650:	7821      	ldrb	r1, [r4, #0]
    1652:	003a      	movs	r2, r7
    1654:	0030      	movs	r0, r6
    1656:	f7ff ffdd 	bl	1614 <__sfputc_r>
    165a:	3401      	adds	r4, #1
    165c:	1c43      	adds	r3, r0, #1
    165e:	d1f3      	bne.n	1648 <__sfputs_r+0xa>
    1660:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

00001664 <_vfiprintf_r>:
    1664:	b5f0      	push	{r4, r5, r6, r7, lr}
    1666:	b09f      	sub	sp, #124	; 0x7c
    1668:	0006      	movs	r6, r0
    166a:	000f      	movs	r7, r1
    166c:	0014      	movs	r4, r2
    166e:	9305      	str	r3, [sp, #20]
    1670:	2800      	cmp	r0, #0
    1672:	d004      	beq.n	167e <_vfiprintf_r+0x1a>
    1674:	6983      	ldr	r3, [r0, #24]
    1676:	2b00      	cmp	r3, #0
    1678:	d101      	bne.n	167e <_vfiprintf_r+0x1a>
    167a:	f7ff fe17 	bl	12ac <__sinit>
    167e:	4b7f      	ldr	r3, [pc, #508]	; (187c <_vfiprintf_r+0x218>)
    1680:	429f      	cmp	r7, r3
    1682:	d15c      	bne.n	173e <_vfiprintf_r+0xda>
    1684:	6877      	ldr	r7, [r6, #4]
    1686:	89bb      	ldrh	r3, [r7, #12]
    1688:	071b      	lsls	r3, r3, #28
    168a:	d562      	bpl.n	1752 <_vfiprintf_r+0xee>
    168c:	693b      	ldr	r3, [r7, #16]
    168e:	2b00      	cmp	r3, #0
    1690:	d05f      	beq.n	1752 <_vfiprintf_r+0xee>
    1692:	2300      	movs	r3, #0
    1694:	ad06      	add	r5, sp, #24
    1696:	616b      	str	r3, [r5, #20]
    1698:	3320      	adds	r3, #32
    169a:	766b      	strb	r3, [r5, #25]
    169c:	3310      	adds	r3, #16
    169e:	76ab      	strb	r3, [r5, #26]
    16a0:	9402      	str	r4, [sp, #8]
    16a2:	9c02      	ldr	r4, [sp, #8]
    16a4:	7823      	ldrb	r3, [r4, #0]
    16a6:	2b00      	cmp	r3, #0
    16a8:	d15d      	bne.n	1766 <_vfiprintf_r+0x102>
    16aa:	9b02      	ldr	r3, [sp, #8]
    16ac:	1ae3      	subs	r3, r4, r3
    16ae:	9304      	str	r3, [sp, #16]
    16b0:	d00d      	beq.n	16ce <_vfiprintf_r+0x6a>
    16b2:	9b04      	ldr	r3, [sp, #16]
    16b4:	9a02      	ldr	r2, [sp, #8]
    16b6:	0039      	movs	r1, r7
    16b8:	0030      	movs	r0, r6
    16ba:	f7ff ffc0 	bl	163e <__sfputs_r>
    16be:	1c43      	adds	r3, r0, #1
    16c0:	d100      	bne.n	16c4 <_vfiprintf_r+0x60>
    16c2:	e0cc      	b.n	185e <_vfiprintf_r+0x1fa>
    16c4:	696a      	ldr	r2, [r5, #20]
    16c6:	9b04      	ldr	r3, [sp, #16]
    16c8:	4694      	mov	ip, r2
    16ca:	4463      	add	r3, ip
    16cc:	616b      	str	r3, [r5, #20]
    16ce:	7823      	ldrb	r3, [r4, #0]
    16d0:	2b00      	cmp	r3, #0
    16d2:	d100      	bne.n	16d6 <_vfiprintf_r+0x72>
    16d4:	e0c3      	b.n	185e <_vfiprintf_r+0x1fa>
    16d6:	2201      	movs	r2, #1
    16d8:	2300      	movs	r3, #0
    16da:	4252      	negs	r2, r2
    16dc:	606a      	str	r2, [r5, #4]
    16de:	a902      	add	r1, sp, #8
    16e0:	3254      	adds	r2, #84	; 0x54
    16e2:	1852      	adds	r2, r2, r1
    16e4:	3401      	adds	r4, #1
    16e6:	602b      	str	r3, [r5, #0]
    16e8:	60eb      	str	r3, [r5, #12]
    16ea:	60ab      	str	r3, [r5, #8]
    16ec:	7013      	strb	r3, [r2, #0]
    16ee:	65ab      	str	r3, [r5, #88]	; 0x58
    16f0:	7821      	ldrb	r1, [r4, #0]
    16f2:	2205      	movs	r2, #5
    16f4:	4862      	ldr	r0, [pc, #392]	; (1880 <_vfiprintf_r+0x21c>)
    16f6:	f000 fb15 	bl	1d24 <memchr>
    16fa:	1c63      	adds	r3, r4, #1
    16fc:	469c      	mov	ip, r3
    16fe:	2800      	cmp	r0, #0
    1700:	d135      	bne.n	176e <_vfiprintf_r+0x10a>
    1702:	6829      	ldr	r1, [r5, #0]
    1704:	06cb      	lsls	r3, r1, #27
    1706:	d504      	bpl.n	1712 <_vfiprintf_r+0xae>
    1708:	2353      	movs	r3, #83	; 0x53
    170a:	aa02      	add	r2, sp, #8
    170c:	3020      	adds	r0, #32
    170e:	189b      	adds	r3, r3, r2
    1710:	7018      	strb	r0, [r3, #0]
    1712:	070b      	lsls	r3, r1, #28
    1714:	d504      	bpl.n	1720 <_vfiprintf_r+0xbc>
    1716:	2353      	movs	r3, #83	; 0x53
    1718:	202b      	movs	r0, #43	; 0x2b
    171a:	aa02      	add	r2, sp, #8
    171c:	189b      	adds	r3, r3, r2
    171e:	7018      	strb	r0, [r3, #0]
    1720:	7823      	ldrb	r3, [r4, #0]
    1722:	2b2a      	cmp	r3, #42	; 0x2a
    1724:	d02c      	beq.n	1780 <_vfiprintf_r+0x11c>
    1726:	2000      	movs	r0, #0
    1728:	210a      	movs	r1, #10
    172a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    172c:	7822      	ldrb	r2, [r4, #0]
    172e:	3a30      	subs	r2, #48	; 0x30
    1730:	2a09      	cmp	r2, #9
    1732:	d800      	bhi.n	1736 <_vfiprintf_r+0xd2>
    1734:	e06b      	b.n	180e <_vfiprintf_r+0x1aa>
    1736:	2800      	cmp	r0, #0
    1738:	d02a      	beq.n	1790 <_vfiprintf_r+0x12c>
    173a:	9309      	str	r3, [sp, #36]	; 0x24
    173c:	e028      	b.n	1790 <_vfiprintf_r+0x12c>
    173e:	4b51      	ldr	r3, [pc, #324]	; (1884 <_vfiprintf_r+0x220>)
    1740:	429f      	cmp	r7, r3
    1742:	d101      	bne.n	1748 <_vfiprintf_r+0xe4>
    1744:	68b7      	ldr	r7, [r6, #8]
    1746:	e79e      	b.n	1686 <_vfiprintf_r+0x22>
    1748:	4b4f      	ldr	r3, [pc, #316]	; (1888 <_vfiprintf_r+0x224>)
    174a:	429f      	cmp	r7, r3
    174c:	d19b      	bne.n	1686 <_vfiprintf_r+0x22>
    174e:	68f7      	ldr	r7, [r6, #12]
    1750:	e799      	b.n	1686 <_vfiprintf_r+0x22>
    1752:	0039      	movs	r1, r7
    1754:	0030      	movs	r0, r6
    1756:	f7ff fc3b 	bl	fd0 <__swsetup_r>
    175a:	2800      	cmp	r0, #0
    175c:	d099      	beq.n	1692 <_vfiprintf_r+0x2e>
    175e:	2001      	movs	r0, #1
    1760:	4240      	negs	r0, r0
    1762:	b01f      	add	sp, #124	; 0x7c
    1764:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1766:	2b25      	cmp	r3, #37	; 0x25
    1768:	d09f      	beq.n	16aa <_vfiprintf_r+0x46>
    176a:	3401      	adds	r4, #1
    176c:	e79a      	b.n	16a4 <_vfiprintf_r+0x40>
    176e:	4b44      	ldr	r3, [pc, #272]	; (1880 <_vfiprintf_r+0x21c>)
    1770:	6829      	ldr	r1, [r5, #0]
    1772:	1ac0      	subs	r0, r0, r3
    1774:	2301      	movs	r3, #1
    1776:	4083      	lsls	r3, r0
    1778:	430b      	orrs	r3, r1
    177a:	602b      	str	r3, [r5, #0]
    177c:	4664      	mov	r4, ip
    177e:	e7b7      	b.n	16f0 <_vfiprintf_r+0x8c>
    1780:	9b05      	ldr	r3, [sp, #20]
    1782:	1d18      	adds	r0, r3, #4
    1784:	681b      	ldr	r3, [r3, #0]
    1786:	9005      	str	r0, [sp, #20]
    1788:	2b00      	cmp	r3, #0
    178a:	db3a      	blt.n	1802 <_vfiprintf_r+0x19e>
    178c:	9309      	str	r3, [sp, #36]	; 0x24
    178e:	4664      	mov	r4, ip
    1790:	7823      	ldrb	r3, [r4, #0]
    1792:	2b2e      	cmp	r3, #46	; 0x2e
    1794:	d10b      	bne.n	17ae <_vfiprintf_r+0x14a>
    1796:	7863      	ldrb	r3, [r4, #1]
    1798:	1c62      	adds	r2, r4, #1
    179a:	2b2a      	cmp	r3, #42	; 0x2a
    179c:	d13f      	bne.n	181e <_vfiprintf_r+0x1ba>
    179e:	9b05      	ldr	r3, [sp, #20]
    17a0:	3402      	adds	r4, #2
    17a2:	1d1a      	adds	r2, r3, #4
    17a4:	681b      	ldr	r3, [r3, #0]
    17a6:	9205      	str	r2, [sp, #20]
    17a8:	2b00      	cmp	r3, #0
    17aa:	db35      	blt.n	1818 <_vfiprintf_r+0x1b4>
    17ac:	9307      	str	r3, [sp, #28]
    17ae:	7821      	ldrb	r1, [r4, #0]
    17b0:	2203      	movs	r2, #3
    17b2:	4836      	ldr	r0, [pc, #216]	; (188c <_vfiprintf_r+0x228>)
    17b4:	f000 fab6 	bl	1d24 <memchr>
    17b8:	2800      	cmp	r0, #0
    17ba:	d007      	beq.n	17cc <_vfiprintf_r+0x168>
    17bc:	4b33      	ldr	r3, [pc, #204]	; (188c <_vfiprintf_r+0x228>)
    17be:	682a      	ldr	r2, [r5, #0]
    17c0:	1ac0      	subs	r0, r0, r3
    17c2:	2340      	movs	r3, #64	; 0x40
    17c4:	4083      	lsls	r3, r0
    17c6:	4313      	orrs	r3, r2
    17c8:	602b      	str	r3, [r5, #0]
    17ca:	3401      	adds	r4, #1
    17cc:	7821      	ldrb	r1, [r4, #0]
    17ce:	1c63      	adds	r3, r4, #1
    17d0:	2206      	movs	r2, #6
    17d2:	482f      	ldr	r0, [pc, #188]	; (1890 <_vfiprintf_r+0x22c>)
    17d4:	9302      	str	r3, [sp, #8]
    17d6:	7629      	strb	r1, [r5, #24]
    17d8:	f000 faa4 	bl	1d24 <memchr>
    17dc:	2800      	cmp	r0, #0
    17de:	d044      	beq.n	186a <_vfiprintf_r+0x206>
    17e0:	4b2c      	ldr	r3, [pc, #176]	; (1894 <_vfiprintf_r+0x230>)
    17e2:	2b00      	cmp	r3, #0
    17e4:	d12f      	bne.n	1846 <_vfiprintf_r+0x1e2>
    17e6:	6829      	ldr	r1, [r5, #0]
    17e8:	9b05      	ldr	r3, [sp, #20]
    17ea:	2207      	movs	r2, #7
    17ec:	05c9      	lsls	r1, r1, #23
    17ee:	d528      	bpl.n	1842 <_vfiprintf_r+0x1de>
    17f0:	189b      	adds	r3, r3, r2
    17f2:	4393      	bics	r3, r2
    17f4:	3308      	adds	r3, #8
    17f6:	9305      	str	r3, [sp, #20]
    17f8:	696b      	ldr	r3, [r5, #20]
    17fa:	9a03      	ldr	r2, [sp, #12]
    17fc:	189b      	adds	r3, r3, r2
    17fe:	616b      	str	r3, [r5, #20]
    1800:	e74f      	b.n	16a2 <_vfiprintf_r+0x3e>
    1802:	425b      	negs	r3, r3
    1804:	60eb      	str	r3, [r5, #12]
    1806:	2302      	movs	r3, #2
    1808:	430b      	orrs	r3, r1
    180a:	602b      	str	r3, [r5, #0]
    180c:	e7bf      	b.n	178e <_vfiprintf_r+0x12a>
    180e:	434b      	muls	r3, r1
    1810:	3401      	adds	r4, #1
    1812:	189b      	adds	r3, r3, r2
    1814:	2001      	movs	r0, #1
    1816:	e789      	b.n	172c <_vfiprintf_r+0xc8>
    1818:	2301      	movs	r3, #1
    181a:	425b      	negs	r3, r3
    181c:	e7c6      	b.n	17ac <_vfiprintf_r+0x148>
    181e:	2300      	movs	r3, #0
    1820:	0014      	movs	r4, r2
    1822:	200a      	movs	r0, #10
    1824:	001a      	movs	r2, r3
    1826:	606b      	str	r3, [r5, #4]
    1828:	7821      	ldrb	r1, [r4, #0]
    182a:	3930      	subs	r1, #48	; 0x30
    182c:	2909      	cmp	r1, #9
    182e:	d903      	bls.n	1838 <_vfiprintf_r+0x1d4>
    1830:	2b00      	cmp	r3, #0
    1832:	d0bc      	beq.n	17ae <_vfiprintf_r+0x14a>
    1834:	9207      	str	r2, [sp, #28]
    1836:	e7ba      	b.n	17ae <_vfiprintf_r+0x14a>
    1838:	4342      	muls	r2, r0
    183a:	3401      	adds	r4, #1
    183c:	1852      	adds	r2, r2, r1
    183e:	2301      	movs	r3, #1
    1840:	e7f2      	b.n	1828 <_vfiprintf_r+0x1c4>
    1842:	3307      	adds	r3, #7
    1844:	e7d5      	b.n	17f2 <_vfiprintf_r+0x18e>
    1846:	ab05      	add	r3, sp, #20
    1848:	9300      	str	r3, [sp, #0]
    184a:	003a      	movs	r2, r7
    184c:	4b12      	ldr	r3, [pc, #72]	; (1898 <_vfiprintf_r+0x234>)
    184e:	0029      	movs	r1, r5
    1850:	0030      	movs	r0, r6
    1852:	e000      	b.n	1856 <_vfiprintf_r+0x1f2>
    1854:	bf00      	nop
    1856:	9003      	str	r0, [sp, #12]
    1858:	9b03      	ldr	r3, [sp, #12]
    185a:	3301      	adds	r3, #1
    185c:	d1cc      	bne.n	17f8 <_vfiprintf_r+0x194>
    185e:	89bb      	ldrh	r3, [r7, #12]
    1860:	065b      	lsls	r3, r3, #25
    1862:	d500      	bpl.n	1866 <_vfiprintf_r+0x202>
    1864:	e77b      	b.n	175e <_vfiprintf_r+0xfa>
    1866:	980b      	ldr	r0, [sp, #44]	; 0x2c
    1868:	e77b      	b.n	1762 <_vfiprintf_r+0xfe>
    186a:	ab05      	add	r3, sp, #20
    186c:	9300      	str	r3, [sp, #0]
    186e:	003a      	movs	r2, r7
    1870:	4b09      	ldr	r3, [pc, #36]	; (1898 <_vfiprintf_r+0x234>)
    1872:	0029      	movs	r1, r5
    1874:	0030      	movs	r0, r6
    1876:	f000 f87f 	bl	1978 <_printf_i>
    187a:	e7ec      	b.n	1856 <_vfiprintf_r+0x1f2>
    187c:	00001ea8 	.word	0x00001ea8
    1880:	00001ee8 	.word	0x00001ee8
    1884:	00001ec8 	.word	0x00001ec8
    1888:	00001e88 	.word	0x00001e88
    188c:	00001eee 	.word	0x00001eee
    1890:	00001ef2 	.word	0x00001ef2
    1894:	00000000 	.word	0x00000000
    1898:	0000163f 	.word	0x0000163f

0000189c <_printf_common>:
    189c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    189e:	0015      	movs	r5, r2
    18a0:	9301      	str	r3, [sp, #4]
    18a2:	688a      	ldr	r2, [r1, #8]
    18a4:	690b      	ldr	r3, [r1, #16]
    18a6:	9000      	str	r0, [sp, #0]
    18a8:	000c      	movs	r4, r1
    18aa:	4293      	cmp	r3, r2
    18ac:	da00      	bge.n	18b0 <_printf_common+0x14>
    18ae:	0013      	movs	r3, r2
    18b0:	0022      	movs	r2, r4
    18b2:	602b      	str	r3, [r5, #0]
    18b4:	3243      	adds	r2, #67	; 0x43
    18b6:	7812      	ldrb	r2, [r2, #0]
    18b8:	2a00      	cmp	r2, #0
    18ba:	d001      	beq.n	18c0 <_printf_common+0x24>
    18bc:	3301      	adds	r3, #1
    18be:	602b      	str	r3, [r5, #0]
    18c0:	6823      	ldr	r3, [r4, #0]
    18c2:	069b      	lsls	r3, r3, #26
    18c4:	d502      	bpl.n	18cc <_printf_common+0x30>
    18c6:	682b      	ldr	r3, [r5, #0]
    18c8:	3302      	adds	r3, #2
    18ca:	602b      	str	r3, [r5, #0]
    18cc:	2706      	movs	r7, #6
    18ce:	6823      	ldr	r3, [r4, #0]
    18d0:	401f      	ands	r7, r3
    18d2:	d027      	beq.n	1924 <_printf_common+0x88>
    18d4:	0023      	movs	r3, r4
    18d6:	3343      	adds	r3, #67	; 0x43
    18d8:	781b      	ldrb	r3, [r3, #0]
    18da:	1e5a      	subs	r2, r3, #1
    18dc:	4193      	sbcs	r3, r2
    18de:	6822      	ldr	r2, [r4, #0]
    18e0:	0692      	lsls	r2, r2, #26
    18e2:	d430      	bmi.n	1946 <_printf_common+0xaa>
    18e4:	0022      	movs	r2, r4
    18e6:	9901      	ldr	r1, [sp, #4]
    18e8:	3243      	adds	r2, #67	; 0x43
    18ea:	9800      	ldr	r0, [sp, #0]
    18ec:	9e08      	ldr	r6, [sp, #32]
    18ee:	47b0      	blx	r6
    18f0:	1c43      	adds	r3, r0, #1
    18f2:	d025      	beq.n	1940 <_printf_common+0xa4>
    18f4:	2306      	movs	r3, #6
    18f6:	6820      	ldr	r0, [r4, #0]
    18f8:	682a      	ldr	r2, [r5, #0]
    18fa:	68e1      	ldr	r1, [r4, #12]
    18fc:	4003      	ands	r3, r0
    18fe:	2500      	movs	r5, #0
    1900:	2b04      	cmp	r3, #4
    1902:	d103      	bne.n	190c <_printf_common+0x70>
    1904:	1a8d      	subs	r5, r1, r2
    1906:	43eb      	mvns	r3, r5
    1908:	17db      	asrs	r3, r3, #31
    190a:	401d      	ands	r5, r3
    190c:	68a3      	ldr	r3, [r4, #8]
    190e:	6922      	ldr	r2, [r4, #16]
    1910:	4293      	cmp	r3, r2
    1912:	dd01      	ble.n	1918 <_printf_common+0x7c>
    1914:	1a9b      	subs	r3, r3, r2
    1916:	18ed      	adds	r5, r5, r3
    1918:	2700      	movs	r7, #0
    191a:	42bd      	cmp	r5, r7
    191c:	d120      	bne.n	1960 <_printf_common+0xc4>
    191e:	2000      	movs	r0, #0
    1920:	e010      	b.n	1944 <_printf_common+0xa8>
    1922:	3701      	adds	r7, #1
    1924:	68e3      	ldr	r3, [r4, #12]
    1926:	682a      	ldr	r2, [r5, #0]
    1928:	1a9b      	subs	r3, r3, r2
    192a:	429f      	cmp	r7, r3
    192c:	dad2      	bge.n	18d4 <_printf_common+0x38>
    192e:	0022      	movs	r2, r4
    1930:	2301      	movs	r3, #1
    1932:	3219      	adds	r2, #25
    1934:	9901      	ldr	r1, [sp, #4]
    1936:	9800      	ldr	r0, [sp, #0]
    1938:	9e08      	ldr	r6, [sp, #32]
    193a:	47b0      	blx	r6
    193c:	1c43      	adds	r3, r0, #1
    193e:	d1f0      	bne.n	1922 <_printf_common+0x86>
    1940:	2001      	movs	r0, #1
    1942:	4240      	negs	r0, r0
    1944:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    1946:	2030      	movs	r0, #48	; 0x30
    1948:	18e1      	adds	r1, r4, r3
    194a:	3143      	adds	r1, #67	; 0x43
    194c:	7008      	strb	r0, [r1, #0]
    194e:	0021      	movs	r1, r4
    1950:	1c5a      	adds	r2, r3, #1
    1952:	3145      	adds	r1, #69	; 0x45
    1954:	7809      	ldrb	r1, [r1, #0]
    1956:	18a2      	adds	r2, r4, r2
    1958:	3243      	adds	r2, #67	; 0x43
    195a:	3302      	adds	r3, #2
    195c:	7011      	strb	r1, [r2, #0]
    195e:	e7c1      	b.n	18e4 <_printf_common+0x48>
    1960:	0022      	movs	r2, r4
    1962:	2301      	movs	r3, #1
    1964:	321a      	adds	r2, #26
    1966:	9901      	ldr	r1, [sp, #4]
    1968:	9800      	ldr	r0, [sp, #0]
    196a:	9e08      	ldr	r6, [sp, #32]
    196c:	47b0      	blx	r6
    196e:	1c43      	adds	r3, r0, #1
    1970:	d0e6      	beq.n	1940 <_printf_common+0xa4>
    1972:	3701      	adds	r7, #1
    1974:	e7d1      	b.n	191a <_printf_common+0x7e>
	...

00001978 <_printf_i>:
    1978:	b5f0      	push	{r4, r5, r6, r7, lr}
    197a:	b08b      	sub	sp, #44	; 0x2c
    197c:	9206      	str	r2, [sp, #24]
    197e:	000a      	movs	r2, r1
    1980:	3243      	adds	r2, #67	; 0x43
    1982:	9307      	str	r3, [sp, #28]
    1984:	9005      	str	r0, [sp, #20]
    1986:	9204      	str	r2, [sp, #16]
    1988:	7e0a      	ldrb	r2, [r1, #24]
    198a:	000c      	movs	r4, r1
    198c:	9b10      	ldr	r3, [sp, #64]	; 0x40
    198e:	2a6e      	cmp	r2, #110	; 0x6e
    1990:	d100      	bne.n	1994 <_printf_i+0x1c>
    1992:	e08f      	b.n	1ab4 <_printf_i+0x13c>
    1994:	d817      	bhi.n	19c6 <_printf_i+0x4e>
    1996:	2a63      	cmp	r2, #99	; 0x63
    1998:	d02c      	beq.n	19f4 <_printf_i+0x7c>
    199a:	d808      	bhi.n	19ae <_printf_i+0x36>
    199c:	2a00      	cmp	r2, #0
    199e:	d100      	bne.n	19a2 <_printf_i+0x2a>
    19a0:	e099      	b.n	1ad6 <_printf_i+0x15e>
    19a2:	2a58      	cmp	r2, #88	; 0x58
    19a4:	d054      	beq.n	1a50 <_printf_i+0xd8>
    19a6:	0026      	movs	r6, r4
    19a8:	3642      	adds	r6, #66	; 0x42
    19aa:	7032      	strb	r2, [r6, #0]
    19ac:	e029      	b.n	1a02 <_printf_i+0x8a>
    19ae:	2a64      	cmp	r2, #100	; 0x64
    19b0:	d001      	beq.n	19b6 <_printf_i+0x3e>
    19b2:	2a69      	cmp	r2, #105	; 0x69
    19b4:	d1f7      	bne.n	19a6 <_printf_i+0x2e>
    19b6:	6821      	ldr	r1, [r4, #0]
    19b8:	681a      	ldr	r2, [r3, #0]
    19ba:	0608      	lsls	r0, r1, #24
    19bc:	d523      	bpl.n	1a06 <_printf_i+0x8e>
    19be:	1d11      	adds	r1, r2, #4
    19c0:	6019      	str	r1, [r3, #0]
    19c2:	6815      	ldr	r5, [r2, #0]
    19c4:	e025      	b.n	1a12 <_printf_i+0x9a>
    19c6:	2a73      	cmp	r2, #115	; 0x73
    19c8:	d100      	bne.n	19cc <_printf_i+0x54>
    19ca:	e088      	b.n	1ade <_printf_i+0x166>
    19cc:	d808      	bhi.n	19e0 <_printf_i+0x68>
    19ce:	2a6f      	cmp	r2, #111	; 0x6f
    19d0:	d029      	beq.n	1a26 <_printf_i+0xae>
    19d2:	2a70      	cmp	r2, #112	; 0x70
    19d4:	d1e7      	bne.n	19a6 <_printf_i+0x2e>
    19d6:	2220      	movs	r2, #32
    19d8:	6809      	ldr	r1, [r1, #0]
    19da:	430a      	orrs	r2, r1
    19dc:	6022      	str	r2, [r4, #0]
    19de:	e003      	b.n	19e8 <_printf_i+0x70>
    19e0:	2a75      	cmp	r2, #117	; 0x75
    19e2:	d020      	beq.n	1a26 <_printf_i+0xae>
    19e4:	2a78      	cmp	r2, #120	; 0x78
    19e6:	d1de      	bne.n	19a6 <_printf_i+0x2e>
    19e8:	0022      	movs	r2, r4
    19ea:	2178      	movs	r1, #120	; 0x78
    19ec:	3245      	adds	r2, #69	; 0x45
    19ee:	7011      	strb	r1, [r2, #0]
    19f0:	4a6c      	ldr	r2, [pc, #432]	; (1ba4 <_printf_i+0x22c>)
    19f2:	e030      	b.n	1a56 <_printf_i+0xde>
    19f4:	000e      	movs	r6, r1
    19f6:	681a      	ldr	r2, [r3, #0]
    19f8:	3642      	adds	r6, #66	; 0x42
    19fa:	1d11      	adds	r1, r2, #4
    19fc:	6019      	str	r1, [r3, #0]
    19fe:	6813      	ldr	r3, [r2, #0]
    1a00:	7033      	strb	r3, [r6, #0]
    1a02:	2301      	movs	r3, #1
    1a04:	e079      	b.n	1afa <_printf_i+0x182>
    1a06:	0649      	lsls	r1, r1, #25
    1a08:	d5d9      	bpl.n	19be <_printf_i+0x46>
    1a0a:	1d11      	adds	r1, r2, #4
    1a0c:	6019      	str	r1, [r3, #0]
    1a0e:	2300      	movs	r3, #0
    1a10:	5ed5      	ldrsh	r5, [r2, r3]
    1a12:	2d00      	cmp	r5, #0
    1a14:	da03      	bge.n	1a1e <_printf_i+0xa6>
    1a16:	232d      	movs	r3, #45	; 0x2d
    1a18:	9a04      	ldr	r2, [sp, #16]
    1a1a:	426d      	negs	r5, r5
    1a1c:	7013      	strb	r3, [r2, #0]
    1a1e:	4b62      	ldr	r3, [pc, #392]	; (1ba8 <_printf_i+0x230>)
    1a20:	270a      	movs	r7, #10
    1a22:	9303      	str	r3, [sp, #12]
    1a24:	e02f      	b.n	1a86 <_printf_i+0x10e>
    1a26:	6820      	ldr	r0, [r4, #0]
    1a28:	6819      	ldr	r1, [r3, #0]
    1a2a:	0605      	lsls	r5, r0, #24
    1a2c:	d503      	bpl.n	1a36 <_printf_i+0xbe>
    1a2e:	1d08      	adds	r0, r1, #4
    1a30:	6018      	str	r0, [r3, #0]
    1a32:	680d      	ldr	r5, [r1, #0]
    1a34:	e005      	b.n	1a42 <_printf_i+0xca>
    1a36:	0640      	lsls	r0, r0, #25
    1a38:	d5f9      	bpl.n	1a2e <_printf_i+0xb6>
    1a3a:	680d      	ldr	r5, [r1, #0]
    1a3c:	1d08      	adds	r0, r1, #4
    1a3e:	6018      	str	r0, [r3, #0]
    1a40:	b2ad      	uxth	r5, r5
    1a42:	4b59      	ldr	r3, [pc, #356]	; (1ba8 <_printf_i+0x230>)
    1a44:	2708      	movs	r7, #8
    1a46:	9303      	str	r3, [sp, #12]
    1a48:	2a6f      	cmp	r2, #111	; 0x6f
    1a4a:	d018      	beq.n	1a7e <_printf_i+0x106>
    1a4c:	270a      	movs	r7, #10
    1a4e:	e016      	b.n	1a7e <_printf_i+0x106>
    1a50:	3145      	adds	r1, #69	; 0x45
    1a52:	700a      	strb	r2, [r1, #0]
    1a54:	4a54      	ldr	r2, [pc, #336]	; (1ba8 <_printf_i+0x230>)
    1a56:	9203      	str	r2, [sp, #12]
    1a58:	681a      	ldr	r2, [r3, #0]
    1a5a:	6821      	ldr	r1, [r4, #0]
    1a5c:	1d10      	adds	r0, r2, #4
    1a5e:	6018      	str	r0, [r3, #0]
    1a60:	6815      	ldr	r5, [r2, #0]
    1a62:	0608      	lsls	r0, r1, #24
    1a64:	d522      	bpl.n	1aac <_printf_i+0x134>
    1a66:	07cb      	lsls	r3, r1, #31
    1a68:	d502      	bpl.n	1a70 <_printf_i+0xf8>
    1a6a:	2320      	movs	r3, #32
    1a6c:	4319      	orrs	r1, r3
    1a6e:	6021      	str	r1, [r4, #0]
    1a70:	2710      	movs	r7, #16
    1a72:	2d00      	cmp	r5, #0
    1a74:	d103      	bne.n	1a7e <_printf_i+0x106>
    1a76:	2320      	movs	r3, #32
    1a78:	6822      	ldr	r2, [r4, #0]
    1a7a:	439a      	bics	r2, r3
    1a7c:	6022      	str	r2, [r4, #0]
    1a7e:	0023      	movs	r3, r4
    1a80:	2200      	movs	r2, #0
    1a82:	3343      	adds	r3, #67	; 0x43
    1a84:	701a      	strb	r2, [r3, #0]
    1a86:	6863      	ldr	r3, [r4, #4]
    1a88:	60a3      	str	r3, [r4, #8]
    1a8a:	2b00      	cmp	r3, #0
    1a8c:	db5c      	blt.n	1b48 <_printf_i+0x1d0>
    1a8e:	2204      	movs	r2, #4
    1a90:	6821      	ldr	r1, [r4, #0]
    1a92:	4391      	bics	r1, r2
    1a94:	6021      	str	r1, [r4, #0]
    1a96:	2d00      	cmp	r5, #0
    1a98:	d158      	bne.n	1b4c <_printf_i+0x1d4>
    1a9a:	9e04      	ldr	r6, [sp, #16]
    1a9c:	2b00      	cmp	r3, #0
    1a9e:	d064      	beq.n	1b6a <_printf_i+0x1f2>
    1aa0:	0026      	movs	r6, r4
    1aa2:	9b03      	ldr	r3, [sp, #12]
    1aa4:	3642      	adds	r6, #66	; 0x42
    1aa6:	781b      	ldrb	r3, [r3, #0]
    1aa8:	7033      	strb	r3, [r6, #0]
    1aaa:	e05e      	b.n	1b6a <_printf_i+0x1f2>
    1aac:	0648      	lsls	r0, r1, #25
    1aae:	d5da      	bpl.n	1a66 <_printf_i+0xee>
    1ab0:	b2ad      	uxth	r5, r5
    1ab2:	e7d8      	b.n	1a66 <_printf_i+0xee>
    1ab4:	6809      	ldr	r1, [r1, #0]
    1ab6:	681a      	ldr	r2, [r3, #0]
    1ab8:	0608      	lsls	r0, r1, #24
    1aba:	d505      	bpl.n	1ac8 <_printf_i+0x150>
    1abc:	1d11      	adds	r1, r2, #4
    1abe:	6019      	str	r1, [r3, #0]
    1ac0:	6813      	ldr	r3, [r2, #0]
    1ac2:	6962      	ldr	r2, [r4, #20]
    1ac4:	601a      	str	r2, [r3, #0]
    1ac6:	e006      	b.n	1ad6 <_printf_i+0x15e>
    1ac8:	0649      	lsls	r1, r1, #25
    1aca:	d5f7      	bpl.n	1abc <_printf_i+0x144>
    1acc:	1d11      	adds	r1, r2, #4
    1ace:	6019      	str	r1, [r3, #0]
    1ad0:	6813      	ldr	r3, [r2, #0]
    1ad2:	8aa2      	ldrh	r2, [r4, #20]
    1ad4:	801a      	strh	r2, [r3, #0]
    1ad6:	2300      	movs	r3, #0
    1ad8:	9e04      	ldr	r6, [sp, #16]
    1ada:	6123      	str	r3, [r4, #16]
    1adc:	e054      	b.n	1b88 <_printf_i+0x210>
    1ade:	681a      	ldr	r2, [r3, #0]
    1ae0:	1d11      	adds	r1, r2, #4
    1ae2:	6019      	str	r1, [r3, #0]
    1ae4:	6816      	ldr	r6, [r2, #0]
    1ae6:	2100      	movs	r1, #0
    1ae8:	6862      	ldr	r2, [r4, #4]
    1aea:	0030      	movs	r0, r6
    1aec:	f000 f91a 	bl	1d24 <memchr>
    1af0:	2800      	cmp	r0, #0
    1af2:	d001      	beq.n	1af8 <_printf_i+0x180>
    1af4:	1b80      	subs	r0, r0, r6
    1af6:	6060      	str	r0, [r4, #4]
    1af8:	6863      	ldr	r3, [r4, #4]
    1afa:	6123      	str	r3, [r4, #16]
    1afc:	2300      	movs	r3, #0
    1afe:	9a04      	ldr	r2, [sp, #16]
    1b00:	7013      	strb	r3, [r2, #0]
    1b02:	e041      	b.n	1b88 <_printf_i+0x210>
    1b04:	6923      	ldr	r3, [r4, #16]
    1b06:	0032      	movs	r2, r6
    1b08:	9906      	ldr	r1, [sp, #24]
    1b0a:	9805      	ldr	r0, [sp, #20]
    1b0c:	9d07      	ldr	r5, [sp, #28]
    1b0e:	47a8      	blx	r5
    1b10:	1c43      	adds	r3, r0, #1
    1b12:	d043      	beq.n	1b9c <_printf_i+0x224>
    1b14:	6823      	ldr	r3, [r4, #0]
    1b16:	2500      	movs	r5, #0
    1b18:	079b      	lsls	r3, r3, #30
    1b1a:	d40f      	bmi.n	1b3c <_printf_i+0x1c4>
    1b1c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    1b1e:	68e0      	ldr	r0, [r4, #12]
    1b20:	4298      	cmp	r0, r3
    1b22:	da3d      	bge.n	1ba0 <_printf_i+0x228>
    1b24:	0018      	movs	r0, r3
    1b26:	e03b      	b.n	1ba0 <_printf_i+0x228>
    1b28:	0022      	movs	r2, r4
    1b2a:	2301      	movs	r3, #1
    1b2c:	3219      	adds	r2, #25
    1b2e:	9906      	ldr	r1, [sp, #24]
    1b30:	9805      	ldr	r0, [sp, #20]
    1b32:	9e07      	ldr	r6, [sp, #28]
    1b34:	47b0      	blx	r6
    1b36:	1c43      	adds	r3, r0, #1
    1b38:	d030      	beq.n	1b9c <_printf_i+0x224>
    1b3a:	3501      	adds	r5, #1
    1b3c:	68e3      	ldr	r3, [r4, #12]
    1b3e:	9a09      	ldr	r2, [sp, #36]	; 0x24
    1b40:	1a9b      	subs	r3, r3, r2
    1b42:	429d      	cmp	r5, r3
    1b44:	dbf0      	blt.n	1b28 <_printf_i+0x1b0>
    1b46:	e7e9      	b.n	1b1c <_printf_i+0x1a4>
    1b48:	2d00      	cmp	r5, #0
    1b4a:	d0a9      	beq.n	1aa0 <_printf_i+0x128>
    1b4c:	9e04      	ldr	r6, [sp, #16]
    1b4e:	0028      	movs	r0, r5
    1b50:	0039      	movs	r1, r7
    1b52:	f7fe fe87 	bl	864 <__aeabi_uidivmod>
    1b56:	9b03      	ldr	r3, [sp, #12]
    1b58:	3e01      	subs	r6, #1
    1b5a:	5c5b      	ldrb	r3, [r3, r1]
    1b5c:	0028      	movs	r0, r5
    1b5e:	7033      	strb	r3, [r6, #0]
    1b60:	0039      	movs	r1, r7
    1b62:	f7fe fe64 	bl	82e <__aeabi_uidiv>
    1b66:	1e05      	subs	r5, r0, #0
    1b68:	d1f1      	bne.n	1b4e <_printf_i+0x1d6>
    1b6a:	2f08      	cmp	r7, #8
    1b6c:	d109      	bne.n	1b82 <_printf_i+0x20a>
    1b6e:	6823      	ldr	r3, [r4, #0]
    1b70:	07db      	lsls	r3, r3, #31
    1b72:	d506      	bpl.n	1b82 <_printf_i+0x20a>
    1b74:	6863      	ldr	r3, [r4, #4]
    1b76:	6922      	ldr	r2, [r4, #16]
    1b78:	4293      	cmp	r3, r2
    1b7a:	dc02      	bgt.n	1b82 <_printf_i+0x20a>
    1b7c:	2330      	movs	r3, #48	; 0x30
    1b7e:	3e01      	subs	r6, #1
    1b80:	7033      	strb	r3, [r6, #0]
    1b82:	9b04      	ldr	r3, [sp, #16]
    1b84:	1b9b      	subs	r3, r3, r6
    1b86:	6123      	str	r3, [r4, #16]
    1b88:	9b07      	ldr	r3, [sp, #28]
    1b8a:	aa09      	add	r2, sp, #36	; 0x24
    1b8c:	9300      	str	r3, [sp, #0]
    1b8e:	0021      	movs	r1, r4
    1b90:	9b06      	ldr	r3, [sp, #24]
    1b92:	9805      	ldr	r0, [sp, #20]
    1b94:	f7ff fe82 	bl	189c <_printf_common>
    1b98:	1c43      	adds	r3, r0, #1
    1b9a:	d1b3      	bne.n	1b04 <_printf_i+0x18c>
    1b9c:	2001      	movs	r0, #1
    1b9e:	4240      	negs	r0, r0
    1ba0:	b00b      	add	sp, #44	; 0x2c
    1ba2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1ba4:	00001f0a 	.word	0x00001f0a
    1ba8:	00001ef9 	.word	0x00001ef9

00001bac <_sbrk_r>:
    1bac:	2300      	movs	r3, #0
    1bae:	b570      	push	{r4, r5, r6, lr}
    1bb0:	4c06      	ldr	r4, [pc, #24]	; (1bcc <_sbrk_r+0x20>)
    1bb2:	0005      	movs	r5, r0
    1bb4:	0008      	movs	r0, r1
    1bb6:	6023      	str	r3, [r4, #0]
    1bb8:	f7fe fd22 	bl	600 <_sbrk>
    1bbc:	1c43      	adds	r3, r0, #1
    1bbe:	d103      	bne.n	1bc8 <_sbrk_r+0x1c>
    1bc0:	6823      	ldr	r3, [r4, #0]
    1bc2:	2b00      	cmp	r3, #0
    1bc4:	d000      	beq.n	1bc8 <_sbrk_r+0x1c>
    1bc6:	602b      	str	r3, [r5, #0]
    1bc8:	bd70      	pop	{r4, r5, r6, pc}
    1bca:	46c0      	nop			; (mov r8, r8)
    1bcc:	200002b8 	.word	0x200002b8

00001bd0 <__sread>:
    1bd0:	b570      	push	{r4, r5, r6, lr}
    1bd2:	000c      	movs	r4, r1
    1bd4:	250e      	movs	r5, #14
    1bd6:	5f49      	ldrsh	r1, [r1, r5]
    1bd8:	f000 f8b2 	bl	1d40 <_read_r>
    1bdc:	2800      	cmp	r0, #0
    1bde:	db03      	blt.n	1be8 <__sread+0x18>
    1be0:	6d63      	ldr	r3, [r4, #84]	; 0x54
    1be2:	181b      	adds	r3, r3, r0
    1be4:	6563      	str	r3, [r4, #84]	; 0x54
    1be6:	bd70      	pop	{r4, r5, r6, pc}
    1be8:	89a3      	ldrh	r3, [r4, #12]
    1bea:	4a02      	ldr	r2, [pc, #8]	; (1bf4 <__sread+0x24>)
    1bec:	4013      	ands	r3, r2
    1bee:	81a3      	strh	r3, [r4, #12]
    1bf0:	e7f9      	b.n	1be6 <__sread+0x16>
    1bf2:	46c0      	nop			; (mov r8, r8)
    1bf4:	ffffefff 	.word	0xffffefff

00001bf8 <__swrite>:
    1bf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1bfa:	001f      	movs	r7, r3
    1bfc:	898b      	ldrh	r3, [r1, #12]
    1bfe:	0005      	movs	r5, r0
    1c00:	000c      	movs	r4, r1
    1c02:	0016      	movs	r6, r2
    1c04:	05db      	lsls	r3, r3, #23
    1c06:	d505      	bpl.n	1c14 <__swrite+0x1c>
    1c08:	230e      	movs	r3, #14
    1c0a:	5ec9      	ldrsh	r1, [r1, r3]
    1c0c:	2200      	movs	r2, #0
    1c0e:	2302      	movs	r3, #2
    1c10:	f000 f874 	bl	1cfc <_lseek_r>
    1c14:	89a3      	ldrh	r3, [r4, #12]
    1c16:	4a05      	ldr	r2, [pc, #20]	; (1c2c <__swrite+0x34>)
    1c18:	0028      	movs	r0, r5
    1c1a:	4013      	ands	r3, r2
    1c1c:	81a3      	strh	r3, [r4, #12]
    1c1e:	0032      	movs	r2, r6
    1c20:	230e      	movs	r3, #14
    1c22:	5ee1      	ldrsh	r1, [r4, r3]
    1c24:	003b      	movs	r3, r7
    1c26:	f000 f81f 	bl	1c68 <_write_r>
    1c2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1c2c:	ffffefff 	.word	0xffffefff

00001c30 <__sseek>:
    1c30:	b570      	push	{r4, r5, r6, lr}
    1c32:	000c      	movs	r4, r1
    1c34:	250e      	movs	r5, #14
    1c36:	5f49      	ldrsh	r1, [r1, r5]
    1c38:	f000 f860 	bl	1cfc <_lseek_r>
    1c3c:	89a3      	ldrh	r3, [r4, #12]
    1c3e:	1c42      	adds	r2, r0, #1
    1c40:	d103      	bne.n	1c4a <__sseek+0x1a>
    1c42:	4a05      	ldr	r2, [pc, #20]	; (1c58 <__sseek+0x28>)
    1c44:	4013      	ands	r3, r2
    1c46:	81a3      	strh	r3, [r4, #12]
    1c48:	bd70      	pop	{r4, r5, r6, pc}
    1c4a:	2280      	movs	r2, #128	; 0x80
    1c4c:	0152      	lsls	r2, r2, #5
    1c4e:	4313      	orrs	r3, r2
    1c50:	81a3      	strh	r3, [r4, #12]
    1c52:	6560      	str	r0, [r4, #84]	; 0x54
    1c54:	e7f8      	b.n	1c48 <__sseek+0x18>
    1c56:	46c0      	nop			; (mov r8, r8)
    1c58:	ffffefff 	.word	0xffffefff

00001c5c <__sclose>:
    1c5c:	b510      	push	{r4, lr}
    1c5e:	230e      	movs	r3, #14
    1c60:	5ec9      	ldrsh	r1, [r1, r3]
    1c62:	f000 f815 	bl	1c90 <_close_r>
    1c66:	bd10      	pop	{r4, pc}

00001c68 <_write_r>:
    1c68:	b570      	push	{r4, r5, r6, lr}
    1c6a:	0005      	movs	r5, r0
    1c6c:	0008      	movs	r0, r1
    1c6e:	0011      	movs	r1, r2
    1c70:	2200      	movs	r2, #0
    1c72:	4c06      	ldr	r4, [pc, #24]	; (1c8c <_write_r+0x24>)
    1c74:	6022      	str	r2, [r4, #0]
    1c76:	001a      	movs	r2, r3
    1c78:	f7fe fffa 	bl	c70 <_write>
    1c7c:	1c43      	adds	r3, r0, #1
    1c7e:	d103      	bne.n	1c88 <_write_r+0x20>
    1c80:	6823      	ldr	r3, [r4, #0]
    1c82:	2b00      	cmp	r3, #0
    1c84:	d000      	beq.n	1c88 <_write_r+0x20>
    1c86:	602b      	str	r3, [r5, #0]
    1c88:	bd70      	pop	{r4, r5, r6, pc}
    1c8a:	46c0      	nop			; (mov r8, r8)
    1c8c:	200002b8 	.word	0x200002b8

00001c90 <_close_r>:
    1c90:	2300      	movs	r3, #0
    1c92:	b570      	push	{r4, r5, r6, lr}
    1c94:	4c06      	ldr	r4, [pc, #24]	; (1cb0 <_close_r+0x20>)
    1c96:	0005      	movs	r5, r0
    1c98:	0008      	movs	r0, r1
    1c9a:	6023      	str	r3, [r4, #0]
    1c9c:	f7fe fcc2 	bl	624 <_close>
    1ca0:	1c43      	adds	r3, r0, #1
    1ca2:	d103      	bne.n	1cac <_close_r+0x1c>
    1ca4:	6823      	ldr	r3, [r4, #0]
    1ca6:	2b00      	cmp	r3, #0
    1ca8:	d000      	beq.n	1cac <_close_r+0x1c>
    1caa:	602b      	str	r3, [r5, #0]
    1cac:	bd70      	pop	{r4, r5, r6, pc}
    1cae:	46c0      	nop			; (mov r8, r8)
    1cb0:	200002b8 	.word	0x200002b8

00001cb4 <_fstat_r>:
    1cb4:	2300      	movs	r3, #0
    1cb6:	b570      	push	{r4, r5, r6, lr}
    1cb8:	4c06      	ldr	r4, [pc, #24]	; (1cd4 <_fstat_r+0x20>)
    1cba:	0005      	movs	r5, r0
    1cbc:	0008      	movs	r0, r1
    1cbe:	0011      	movs	r1, r2
    1cc0:	6023      	str	r3, [r4, #0]
    1cc2:	f7fe fcb2 	bl	62a <_fstat>
    1cc6:	1c43      	adds	r3, r0, #1
    1cc8:	d103      	bne.n	1cd2 <_fstat_r+0x1e>
    1cca:	6823      	ldr	r3, [r4, #0]
    1ccc:	2b00      	cmp	r3, #0
    1cce:	d000      	beq.n	1cd2 <_fstat_r+0x1e>
    1cd0:	602b      	str	r3, [r5, #0]
    1cd2:	bd70      	pop	{r4, r5, r6, pc}
    1cd4:	200002b8 	.word	0x200002b8

00001cd8 <_isatty_r>:
    1cd8:	2300      	movs	r3, #0
    1cda:	b570      	push	{r4, r5, r6, lr}
    1cdc:	4c06      	ldr	r4, [pc, #24]	; (1cf8 <_isatty_r+0x20>)
    1cde:	0005      	movs	r5, r0
    1ce0:	0008      	movs	r0, r1
    1ce2:	6023      	str	r3, [r4, #0]
    1ce4:	f7fe fca6 	bl	634 <_isatty>
    1ce8:	1c43      	adds	r3, r0, #1
    1cea:	d103      	bne.n	1cf4 <_isatty_r+0x1c>
    1cec:	6823      	ldr	r3, [r4, #0]
    1cee:	2b00      	cmp	r3, #0
    1cf0:	d000      	beq.n	1cf4 <_isatty_r+0x1c>
    1cf2:	602b      	str	r3, [r5, #0]
    1cf4:	bd70      	pop	{r4, r5, r6, pc}
    1cf6:	46c0      	nop			; (mov r8, r8)
    1cf8:	200002b8 	.word	0x200002b8

00001cfc <_lseek_r>:
    1cfc:	b570      	push	{r4, r5, r6, lr}
    1cfe:	0005      	movs	r5, r0
    1d00:	0008      	movs	r0, r1
    1d02:	0011      	movs	r1, r2
    1d04:	2200      	movs	r2, #0
    1d06:	4c06      	ldr	r4, [pc, #24]	; (1d20 <_lseek_r+0x24>)
    1d08:	6022      	str	r2, [r4, #0]
    1d0a:	001a      	movs	r2, r3
    1d0c:	f7fe fc94 	bl	638 <_lseek>
    1d10:	1c43      	adds	r3, r0, #1
    1d12:	d103      	bne.n	1d1c <_lseek_r+0x20>
    1d14:	6823      	ldr	r3, [r4, #0]
    1d16:	2b00      	cmp	r3, #0
    1d18:	d000      	beq.n	1d1c <_lseek_r+0x20>
    1d1a:	602b      	str	r3, [r5, #0]
    1d1c:	bd70      	pop	{r4, r5, r6, pc}
    1d1e:	46c0      	nop			; (mov r8, r8)
    1d20:	200002b8 	.word	0x200002b8

00001d24 <memchr>:
    1d24:	b2c9      	uxtb	r1, r1
    1d26:	1882      	adds	r2, r0, r2
    1d28:	4290      	cmp	r0, r2
    1d2a:	d101      	bne.n	1d30 <memchr+0xc>
    1d2c:	2000      	movs	r0, #0
    1d2e:	4770      	bx	lr
    1d30:	7803      	ldrb	r3, [r0, #0]
    1d32:	428b      	cmp	r3, r1
    1d34:	d0fb      	beq.n	1d2e <memchr+0xa>
    1d36:	3001      	adds	r0, #1
    1d38:	e7f6      	b.n	1d28 <memchr+0x4>

00001d3a <__malloc_lock>:
    1d3a:	4770      	bx	lr

00001d3c <__malloc_unlock>:
    1d3c:	4770      	bx	lr
	...

00001d40 <_read_r>:
    1d40:	b570      	push	{r4, r5, r6, lr}
    1d42:	0005      	movs	r5, r0
    1d44:	0008      	movs	r0, r1
    1d46:	0011      	movs	r1, r2
    1d48:	2200      	movs	r2, #0
    1d4a:	4c06      	ldr	r4, [pc, #24]	; (1d64 <_read_r+0x24>)
    1d4c:	6022      	str	r2, [r4, #0]
    1d4e:	001a      	movs	r2, r3
    1d50:	f7fe ff7a 	bl	c48 <_read>
    1d54:	1c43      	adds	r3, r0, #1
    1d56:	d103      	bne.n	1d60 <_read_r+0x20>
    1d58:	6823      	ldr	r3, [r4, #0]
    1d5a:	2b00      	cmp	r3, #0
    1d5c:	d000      	beq.n	1d60 <_read_r+0x20>
    1d5e:	602b      	str	r3, [r5, #0]
    1d60:	bd70      	pop	{r4, r5, r6, pc}
    1d62:	46c0      	nop			; (mov r8, r8)
    1d64:	200002b8 	.word	0x200002b8
    1d68:	682f2e2e 	.word	0x682f2e2e
    1d6c:	732f6c61 	.word	0x732f6c61
    1d70:	682f6372 	.word	0x682f6372
    1d74:	635f6c61 	.word	0x635f6c61
    1d78:	615f6e61 	.word	0x615f6e61
    1d7c:	636e7973 	.word	0x636e7973
    1d80:	0000632e 	.word	0x0000632e
    1d84:	682f2e2e 	.word	0x682f2e2e
    1d88:	732f6c61 	.word	0x732f6c61
    1d8c:	682f6372 	.word	0x682f6372
    1d90:	665f6c61 	.word	0x665f6c61
    1d94:	6873616c 	.word	0x6873616c
    1d98:	0000632e 	.word	0x0000632e
    1d9c:	682f2e2e 	.word	0x682f2e2e
    1da0:	732f6c61 	.word	0x732f6c61
    1da4:	682f6372 	.word	0x682f6372
    1da8:	695f6c61 	.word	0x695f6c61
    1dac:	00632e6f 	.word	0x00632e6f
    1db0:	682f2e2e 	.word	0x682f2e2e
    1db4:	732f6c61 	.word	0x732f6c61
    1db8:	682f6372 	.word	0x682f6372
    1dbc:	755f6c61 	.word	0x755f6c61
    1dc0:	74726173 	.word	0x74726173
    1dc4:	6e79735f 	.word	0x6e79735f
    1dc8:	00632e63 	.word	0x00632e63
    1dcc:	682f2e2e 	.word	0x682f2e2e
    1dd0:	6e2f6c70 	.word	0x6e2f6c70
    1dd4:	74636d76 	.word	0x74636d76
    1dd8:	682f6c72 	.word	0x682f6c72
    1ddc:	6e5f6c70 	.word	0x6e5f6c70
    1de0:	74636d76 	.word	0x74636d76
    1de4:	632e6c72 	.word	0x632e6c72
    1de8:	00000000 	.word	0x00000000
    1dec:	42000400 	.word	0x42000400
    1df0:	42000800 	.word	0x42000800
    1df4:	42000c00 	.word	0x42000c00
    1df8:	42001000 	.word	0x42001000
    1dfc:	42001400 	.word	0x42001400
    1e00:	42001800 	.word	0x42001800
    1e04:	43000000 	.word	0x43000000
    1e08:	43000400 	.word	0x43000400

00001e0c <_usarts>:
    1e0c:	00000004 40310004 00030000 0000f62b     ......1@....+...
    1e1c:	00000000                                ....

00001e20 <_i2cms>:
	...

00001e38 <_i2css>:
	...

00001e48 <sercomspi_regs>:
	...
    1e5c:	682f2e2e 732f6c70 6f637265 70682f6d     ../hpl/sercom/hp
    1e6c:	65735f6c 6d6f6372 0000632e 31303074     l_sercom.c..t001
    1e7c:	41323132 00000d42                       212AB...

00001e84 <_global_impure_ptr>:
    1e84:	20000018                                ... 

00001e88 <__sf_fake_stderr>:
	...

00001ea8 <__sf_fake_stdin>:
	...

00001ec8 <__sf_fake_stdout>:
	...
    1ee8:	2b302d23 6c680020 6665004c 47464567     #-0+ .hlL.efgEFG
    1ef8:	32313000 36353433 41393837 45444342     .0123456789ABCDE
    1f08:	31300046 35343332 39383736 64636261     F.0123456789abcd
    1f18:	00006665                                ef..

00001f1c <_init>:
    1f1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1f1e:	46c0      	nop			; (mov r8, r8)
    1f20:	bcf8      	pop	{r3, r4, r5, r6, r7}
    1f22:	bc08      	pop	{r3}
    1f24:	469e      	mov	lr, r3
    1f26:	4770      	bx	lr

00001f28 <__init_array_start>:
    1f28:	000000e5 	.word	0x000000e5

00001f2c <_fini>:
    1f2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1f2e:	46c0      	nop			; (mov r8, r8)
    1f30:	bcf8      	pop	{r3, r4, r5, r6, r7}
    1f32:	bc08      	pop	{r3}
    1f34:	469e      	mov	lr, r3
    1f36:	4770      	bx	lr

00001f38 <__fini_array_start>:
    1f38:	000000bd 	.word	0x000000bd
