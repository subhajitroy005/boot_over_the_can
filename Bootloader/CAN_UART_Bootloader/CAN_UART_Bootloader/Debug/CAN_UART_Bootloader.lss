
CAN_UART_Bootloader.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000033dc  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     000001e8  20000000  000033dc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000344  200001e8  000035c8  000201e8  2**3
                  ALLOC
  3 .stack        00002004  2000052c  0000390c  000201e8  2**0
                  ALLOC
  4 .ARM.attributes 0000002a  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00020212  2**0
                  CONTENTS, READONLY
  6 .debug_info   00033e65  00000000  00000000  0002026b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00004ae7  00000000  00000000  000540d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    000102ea  00000000  00000000  00058bb7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000e38  00000000  00000000  00068ea1  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000ec0  00000000  00000000  00069cd9  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00025da3  00000000  00000000  0006ab99  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00019d1c  00000000  00000000  0009093c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000a8b46  00000000  00000000  000aa658  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00002c2c  00000000  00000000  001531a0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	30 25 00 20 35 01 00 00 31 01 00 00 31 01 00 00     0%. 5...1...1...
	...
      2c:	31 01 00 00 00 00 00 00 00 00 00 00 31 01 00 00     1...........1...
      3c:	31 01 00 00 31 01 00 00 31 01 00 00 31 01 00 00     1...1...1...1...
      4c:	31 01 00 00 31 01 00 00 31 01 00 00 75 11 00 00     1...1...1...u...
      5c:	31 01 00 00 31 01 00 00 31 01 00 00 31 01 00 00     1...1...1...1...
      6c:	31 01 00 00 31 01 00 00 31 01 00 00 31 01 00 00     1...1...1...1...
      7c:	31 01 00 00 6d 0d 00 00 31 01 00 00 31 01 00 00     1...m...1...1...
      8c:	31 01 00 00 5d 17 00 00 31 01 00 00 31 01 00 00     1...]...1...1...
      9c:	31 01 00 00 31 01 00 00 31 01 00 00 31 01 00 00     1...1...1...1...
      ac:	31 01 00 00 31 01 00 00 31 01 00 00 31 01 00 00     1...1...1...1...

000000bc <__do_global_dtors_aux>:
      bc:	b510      	push	{r4, lr}
      be:	4c06      	ldr	r4, [pc, #24]	; (d8 <__do_global_dtors_aux+0x1c>)
      c0:	7823      	ldrb	r3, [r4, #0]
      c2:	2b00      	cmp	r3, #0
      c4:	d107      	bne.n	d6 <__do_global_dtors_aux+0x1a>
      c6:	4b05      	ldr	r3, [pc, #20]	; (dc <__do_global_dtors_aux+0x20>)
      c8:	2b00      	cmp	r3, #0
      ca:	d002      	beq.n	d2 <__do_global_dtors_aux+0x16>
      cc:	4804      	ldr	r0, [pc, #16]	; (e0 <__do_global_dtors_aux+0x24>)
      ce:	e000      	b.n	d2 <__do_global_dtors_aux+0x16>
      d0:	bf00      	nop
      d2:	2301      	movs	r3, #1
      d4:	7023      	strb	r3, [r4, #0]
      d6:	bd10      	pop	{r4, pc}
      d8:	200001e8 	.word	0x200001e8
      dc:	00000000 	.word	0x00000000
      e0:	000033dc 	.word	0x000033dc

000000e4 <frame_dummy>:
      e4:	4b08      	ldr	r3, [pc, #32]	; (108 <frame_dummy+0x24>)
      e6:	b510      	push	{r4, lr}
      e8:	2b00      	cmp	r3, #0
      ea:	d003      	beq.n	f4 <frame_dummy+0x10>
      ec:	4907      	ldr	r1, [pc, #28]	; (10c <frame_dummy+0x28>)
      ee:	4808      	ldr	r0, [pc, #32]	; (110 <frame_dummy+0x2c>)
      f0:	e000      	b.n	f4 <frame_dummy+0x10>
      f2:	bf00      	nop
      f4:	4807      	ldr	r0, [pc, #28]	; (114 <frame_dummy+0x30>)
      f6:	6803      	ldr	r3, [r0, #0]
      f8:	2b00      	cmp	r3, #0
      fa:	d100      	bne.n	fe <frame_dummy+0x1a>
      fc:	bd10      	pop	{r4, pc}
      fe:	4b06      	ldr	r3, [pc, #24]	; (118 <frame_dummy+0x34>)
     100:	2b00      	cmp	r3, #0
     102:	d0fb      	beq.n	fc <frame_dummy+0x18>
     104:	4798      	blx	r3
     106:	e7f9      	b.n	fc <frame_dummy+0x18>
     108:	00000000 	.word	0x00000000
     10c:	200001ec 	.word	0x200001ec
     110:	000033dc 	.word	0x000033dc
     114:	000033dc 	.word	0x000033dc
     118:	00000000 	.word	0x00000000

0000011c <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
     11c:	b510      	push	{r4, lr}
	system_init();
     11e:	4b02      	ldr	r3, [pc, #8]	; (128 <atmel_start_init+0xc>)
     120:	4798      	blx	r3
	stdio_redirect_init();
     122:	4b02      	ldr	r3, [pc, #8]	; (12c <atmel_start_init+0x10>)
     124:	4798      	blx	r3
}
     126:	bd10      	pop	{r4, pc}
     128:	00000321 	.word	0x00000321
     12c:	000020dd 	.word	0x000020dd

00000130 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     130:	e7fe      	b.n	130 <Dummy_Handler>
	...

00000134 <Reset_Handler>:
{
     134:	b510      	push	{r4, lr}
        if (pSrc != pDest) {
     136:	4a10      	ldr	r2, [pc, #64]	; (178 <Reset_Handler+0x44>)
     138:	4b10      	ldr	r3, [pc, #64]	; (17c <Reset_Handler+0x48>)
     13a:	429a      	cmp	r2, r3
     13c:	d009      	beq.n	152 <Reset_Handler+0x1e>
     13e:	4b0f      	ldr	r3, [pc, #60]	; (17c <Reset_Handler+0x48>)
     140:	4a0d      	ldr	r2, [pc, #52]	; (178 <Reset_Handler+0x44>)
     142:	e003      	b.n	14c <Reset_Handler+0x18>
                        *pDest++ = *pSrc++;
     144:	6811      	ldr	r1, [r2, #0]
     146:	6019      	str	r1, [r3, #0]
     148:	3304      	adds	r3, #4
     14a:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
     14c:	490c      	ldr	r1, [pc, #48]	; (180 <Reset_Handler+0x4c>)
     14e:	428b      	cmp	r3, r1
     150:	d3f8      	bcc.n	144 <Reset_Handler+0x10>
                        *pDest++ = *pSrc++;
     152:	4b0c      	ldr	r3, [pc, #48]	; (184 <Reset_Handler+0x50>)
     154:	e002      	b.n	15c <Reset_Handler+0x28>
                *pDest++ = 0;
     156:	2200      	movs	r2, #0
     158:	601a      	str	r2, [r3, #0]
     15a:	3304      	adds	r3, #4
        for (pDest = &_szero; pDest < &_ezero;) {
     15c:	4a0a      	ldr	r2, [pc, #40]	; (188 <Reset_Handler+0x54>)
     15e:	4293      	cmp	r3, r2
     160:	d3f9      	bcc.n	156 <Reset_Handler+0x22>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     162:	4a0a      	ldr	r2, [pc, #40]	; (18c <Reset_Handler+0x58>)
     164:	21ff      	movs	r1, #255	; 0xff
     166:	4b0a      	ldr	r3, [pc, #40]	; (190 <Reset_Handler+0x5c>)
     168:	438b      	bics	r3, r1
     16a:	6093      	str	r3, [r2, #8]
        __libc_init_array();
     16c:	4b09      	ldr	r3, [pc, #36]	; (194 <Reset_Handler+0x60>)
     16e:	4798      	blx	r3
        main();
     170:	4b09      	ldr	r3, [pc, #36]	; (198 <Reset_Handler+0x64>)
     172:	4798      	blx	r3
     174:	e7fe      	b.n	174 <Reset_Handler+0x40>
     176:	46c0      	nop			; (mov r8, r8)
     178:	000033dc 	.word	0x000033dc
     17c:	20000000 	.word	0x20000000
     180:	200001e8 	.word	0x200001e8
     184:	200001e8 	.word	0x200001e8
     188:	2000052c 	.word	0x2000052c
     18c:	e000ed00 	.word	0xe000ed00
     190:	00000000 	.word	0x00000000
     194:	000020fd 	.word	0x000020fd
     198:	00001b8d 	.word	0x00001b8d

0000019c <TIMER_0_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_0_init(void)
{
     19c:	b510      	push	{r4, lr}
}

static inline void hri_mclk_set_APBCMASK_TC0_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_TC0;
     19e:	4a09      	ldr	r2, [pc, #36]	; (1c4 <TIMER_0_init+0x28>)
     1a0:	69d1      	ldr	r1, [r2, #28]
     1a2:	2380      	movs	r3, #128	; 0x80
     1a4:	015b      	lsls	r3, r3, #5
     1a6:	430b      	orrs	r3, r1
     1a8:	61d3      	str	r3, [r2, #28]
}

static inline void hri_gclk_write_PCHCTRL_reg(const void *const hw, uint8_t index, hri_gclk_pchctrl_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->PCHCTRL[index].reg = data;
     1aa:	2140      	movs	r1, #64	; 0x40
     1ac:	23f8      	movs	r3, #248	; 0xf8
     1ae:	4a06      	ldr	r2, [pc, #24]	; (1c8 <TIMER_0_init+0x2c>)
     1b0:	50d1      	str	r1, [r2, r3]

	hri_mclk_set_APBCMASK_TC0_bit(MCLK);
	hri_gclk_write_PCHCTRL_reg(GCLK, TC0_GCLK_ID, CONF_GCLK_TC0_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));

	timer_init(&TIMER_0, TC0, _tc_get_timer());
     1b2:	4b06      	ldr	r3, [pc, #24]	; (1cc <TIMER_0_init+0x30>)
     1b4:	4798      	blx	r3
     1b6:	0002      	movs	r2, r0
     1b8:	4905      	ldr	r1, [pc, #20]	; (1d0 <TIMER_0_init+0x34>)
     1ba:	4806      	ldr	r0, [pc, #24]	; (1d4 <TIMER_0_init+0x38>)
     1bc:	4b06      	ldr	r3, [pc, #24]	; (1d8 <TIMER_0_init+0x3c>)
     1be:	4798      	blx	r3
}
     1c0:	bd10      	pop	{r4, pc}
     1c2:	46c0      	nop			; (mov r8, r8)
     1c4:	40000800 	.word	0x40000800
     1c8:	40001c00 	.word	0x40001c00
     1cc:	00001719 	.word	0x00001719
     1d0:	42003000 	.word	0x42003000
     1d4:	20000368 	.word	0x20000368
     1d8:	000007cd 	.word	0x000007cd

000001dc <FLASH_0_CLOCK_init>:
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_NVMCTRL;
     1dc:	4a02      	ldr	r2, [pc, #8]	; (1e8 <FLASH_0_CLOCK_init+0xc>)
     1de:	6913      	ldr	r3, [r2, #16]
     1e0:	2120      	movs	r1, #32
     1e2:	430b      	orrs	r3, r1
     1e4:	6113      	str	r3, [r2, #16]
}
     1e6:	4770      	bx	lr
     1e8:	40000800 	.word	0x40000800

000001ec <FLASH_0_init>:
{
     1ec:	b510      	push	{r4, lr}
	FLASH_0_CLOCK_init();
     1ee:	4b03      	ldr	r3, [pc, #12]	; (1fc <FLASH_0_init+0x10>)
     1f0:	4798      	blx	r3
	flash_init(&FLASH_0, NVMCTRL);
     1f2:	4903      	ldr	r1, [pc, #12]	; (200 <FLASH_0_init+0x14>)
     1f4:	4803      	ldr	r0, [pc, #12]	; (204 <FLASH_0_init+0x18>)
     1f6:	4b04      	ldr	r3, [pc, #16]	; (208 <FLASH_0_init+0x1c>)
     1f8:	4798      	blx	r3
}
     1fa:	bd10      	pop	{r4, pc}
     1fc:	000001dd 	.word	0x000001dd
     200:	41004000 	.word	0x41004000
     204:	20000318 	.word	0x20000318
     208:	000004ed 	.word	0x000004ed

0000020c <TARGET_IO_PORT_init>:
{
     20c:	b530      	push	{r4, r5, lr}
static inline void hri_port_write_PINCFG_PMUXEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                    bool value)
{
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     20e:	2382      	movs	r3, #130	; 0x82
     210:	05db      	lsls	r3, r3, #23
     212:	22ca      	movs	r2, #202	; 0xca
     214:	5c99      	ldrb	r1, [r3, r2]
	tmp &= ~PORT_PINCFG_PMUXEN;
     216:	2501      	movs	r5, #1
     218:	43a9      	bics	r1, r5
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     21a:	2401      	movs	r4, #1
     21c:	4321      	orrs	r1, r4
     21e:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     220:	5499      	strb	r1, [r3, r2]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     222:	20b5      	movs	r0, #181	; 0xb5
     224:	5c19      	ldrb	r1, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     226:	3abb      	subs	r2, #187	; 0xbb
     228:	4391      	bics	r1, r2
	tmp |= PORT_PMUX_PMUXE(data);
     22a:	2203      	movs	r2, #3
     22c:	4311      	orrs	r1, r2
     22e:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     230:	5419      	strb	r1, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     232:	21cb      	movs	r1, #203	; 0xcb
     234:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PINCFG_PMUXEN;
     236:	43aa      	bics	r2, r5
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     238:	4322      	orrs	r2, r4
     23a:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     23c:	545a      	strb	r2, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     23e:	5c1a      	ldrb	r2, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     240:	39bc      	subs	r1, #188	; 0xbc
     242:	400a      	ands	r2, r1
	tmp |= PORT_PMUX_PMUXO(data);
     244:	2130      	movs	r1, #48	; 0x30
     246:	430a      	orrs	r2, r1
     248:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     24a:	541a      	strb	r2, [r3, r0]
}
     24c:	bd30      	pop	{r4, r5, pc}
	...

00000250 <TARGET_IO_CLOCK_init>:
     250:	4b06      	ldr	r3, [pc, #24]	; (26c <TARGET_IO_CLOCK_init+0x1c>)
     252:	2140      	movs	r1, #64	; 0x40
     254:	22dc      	movs	r2, #220	; 0xdc
     256:	5099      	str	r1, [r3, r2]
     258:	3103      	adds	r1, #3
     25a:	3a14      	subs	r2, #20
     25c:	5099      	str	r1, [r3, r2]
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_SERCOM4;
     25e:	4a04      	ldr	r2, [pc, #16]	; (270 <TARGET_IO_CLOCK_init+0x20>)
     260:	69d3      	ldr	r3, [r2, #28]
     262:	3923      	subs	r1, #35	; 0x23
     264:	430b      	orrs	r3, r1
     266:	61d3      	str	r3, [r2, #28]
}
     268:	4770      	bx	lr
     26a:	46c0      	nop			; (mov r8, r8)
     26c:	40001c00 	.word	0x40001c00
     270:	40000800 	.word	0x40000800

00000274 <TARGET_IO_init>:
{
     274:	b510      	push	{r4, lr}
	TARGET_IO_CLOCK_init();
     276:	4b05      	ldr	r3, [pc, #20]	; (28c <TARGET_IO_init+0x18>)
     278:	4798      	blx	r3
	usart_sync_init(&TARGET_IO, SERCOM4, (void *)NULL);
     27a:	2200      	movs	r2, #0
     27c:	4904      	ldr	r1, [pc, #16]	; (290 <TARGET_IO_init+0x1c>)
     27e:	4805      	ldr	r0, [pc, #20]	; (294 <TARGET_IO_init+0x20>)
     280:	4b05      	ldr	r3, [pc, #20]	; (298 <TARGET_IO_init+0x24>)
     282:	4798      	blx	r3
	TARGET_IO_PORT_init();
     284:	4b05      	ldr	r3, [pc, #20]	; (29c <TARGET_IO_init+0x28>)
     286:	4798      	blx	r3
}
     288:	bd10      	pop	{r4, pc}
     28a:	46c0      	nop			; (mov r8, r8)
     28c:	00000251 	.word	0x00000251
     290:	42001400 	.word	0x42001400
     294:	20000334 	.word	0x20000334
     298:	000009c9 	.word	0x000009c9
     29c:	0000020d 	.word	0x0000020d

000002a0 <CAN_1_PORT_init>:

void CAN_1_PORT_init(void)
{
     2a0:	b530      	push	{r4, r5, lr}
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     2a2:	2382      	movs	r3, #130	; 0x82
     2a4:	05db      	lsls	r3, r3, #23
     2a6:	22cf      	movs	r2, #207	; 0xcf
     2a8:	5c99      	ldrb	r1, [r3, r2]
	tmp &= ~PORT_PINCFG_PMUXEN;
     2aa:	2501      	movs	r5, #1
     2ac:	43a9      	bics	r1, r5
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     2ae:	2401      	movs	r4, #1
     2b0:	4321      	orrs	r1, r4
     2b2:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     2b4:	5499      	strb	r1, [r3, r2]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     2b6:	20b7      	movs	r0, #183	; 0xb7
     2b8:	5c19      	ldrb	r1, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     2ba:	3ac0      	subs	r2, #192	; 0xc0
     2bc:	4011      	ands	r1, r2
	tmp |= PORT_PMUX_PMUXO(data);
     2be:	2260      	movs	r2, #96	; 0x60
     2c0:	4311      	orrs	r1, r2
     2c2:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     2c4:	5419      	strb	r1, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     2c6:	21ce      	movs	r1, #206	; 0xce
     2c8:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PINCFG_PMUXEN;
     2ca:	43aa      	bics	r2, r5
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     2cc:	4322      	orrs	r2, r4
     2ce:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     2d0:	545a      	strb	r2, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     2d2:	5c1a      	ldrb	r2, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     2d4:	39bf      	subs	r1, #191	; 0xbf
     2d6:	438a      	bics	r2, r1
	tmp |= PORT_PMUX_PMUXE(data);
     2d8:	2106      	movs	r1, #6
     2da:	430a      	orrs	r2, r1
     2dc:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     2de:	541a      	strb	r2, [r3, r0]

	gpio_set_pin_function(PB15, PINMUX_PB15G_CAN1_RX);

	gpio_set_pin_function(PB14, PINMUX_PB14G_CAN1_TX);
}
     2e0:	bd30      	pop	{r4, r5, pc}
	...

000002e4 <CAN_1_init>:
 * \brief CAN initialization function
 *
 * Enables CAN peripheral, clocks and initializes CAN driver
 */
void CAN_1_init(void)
{
     2e4:	b510      	push	{r4, lr}
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_CAN1;
     2e6:	4a08      	ldr	r2, [pc, #32]	; (308 <CAN_1_init+0x24>)
     2e8:	6911      	ldr	r1, [r2, #16]
     2ea:	2380      	movs	r3, #128	; 0x80
     2ec:	009b      	lsls	r3, r3, #2
     2ee:	430b      	orrs	r3, r1
     2f0:	6113      	str	r3, [r2, #16]
     2f2:	2140      	movs	r1, #64	; 0x40
     2f4:	23ec      	movs	r3, #236	; 0xec
     2f6:	4a05      	ldr	r2, [pc, #20]	; (30c <CAN_1_init+0x28>)
     2f8:	50d1      	str	r1, [r2, r3]
	hri_mclk_set_AHBMASK_CAN1_bit(MCLK);
	hri_gclk_write_PCHCTRL_reg(GCLK, CAN1_GCLK_ID, CONF_GCLK_CAN1_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
	can_async_init(&CAN_1, CAN1);
     2fa:	4905      	ldr	r1, [pc, #20]	; (310 <CAN_1_init+0x2c>)
     2fc:	4805      	ldr	r0, [pc, #20]	; (314 <CAN_1_init+0x30>)
     2fe:	4b06      	ldr	r3, [pc, #24]	; (318 <CAN_1_init+0x34>)
     300:	4798      	blx	r3
	CAN_1_PORT_init();
     302:	4b06      	ldr	r3, [pc, #24]	; (31c <CAN_1_init+0x38>)
     304:	4798      	blx	r3
}
     306:	bd10      	pop	{r4, pc}
     308:	40000800 	.word	0x40000800
     30c:	40001c00 	.word	0x40001c00
     310:	42002000 	.word	0x42002000
     314:	20000340 	.word	0x20000340
     318:	0000038d 	.word	0x0000038d
     31c:	000002a1 	.word	0x000002a1

00000320 <system_init>:

void system_init(void)
{
     320:	b510      	push	{r4, lr}
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
	_init_chip();
     322:	4b05      	ldr	r3, [pc, #20]	; (338 <system_init+0x18>)
     324:	4798      	blx	r3
	init_mcu();

	FLASH_0_init();
     326:	4b05      	ldr	r3, [pc, #20]	; (33c <system_init+0x1c>)
     328:	4798      	blx	r3

	TARGET_IO_init();
     32a:	4b05      	ldr	r3, [pc, #20]	; (340 <system_init+0x20>)
     32c:	4798      	blx	r3

	TIMER_0_init();
     32e:	4b05      	ldr	r3, [pc, #20]	; (344 <system_init+0x24>)
     330:	4798      	blx	r3
	CAN_1_init();
     332:	4b05      	ldr	r3, [pc, #20]	; (348 <system_init+0x28>)
     334:	4798      	blx	r3
}
     336:	bd10      	pop	{r4, pc}
     338:	00000e1d 	.word	0x00000e1d
     33c:	000001ed 	.word	0x000001ed
     340:	00000275 	.word	0x00000275
     344:	0000019d 	.word	0x0000019d
     348:	000002e5 	.word	0x000002e5

0000034c <atomic_enter_critical>:
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
     34c:	f3ef 8310 	mrs	r3, PRIMASK
/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
	*atomic = __get_PRIMASK();
     350:	6003      	str	r3, [r0, #0]
  __ASM volatile ("cpsid i" : : : "memory");
     352:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
     354:	f3bf 8f5f 	dmb	sy
	__disable_irq();
	__DMB();
}
     358:	4770      	bx	lr

0000035a <atomic_leave_critical>:
     35a:	f3bf 8f5f 	dmb	sy
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
	__DMB();
	__set_PRIMASK(*atomic);
     35e:	6803      	ldr	r3, [r0, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
     360:	f383 8810 	msr	PRIMASK, r3
}
     364:	4770      	bx	lr

00000366 <can_tx_done>:

/**
 * \internal Callback of CAN Message Write finished
 */
static void can_tx_done(struct _can_async_device *dev)
{
     366:	b510      	push	{r4, lr}
	struct can_async_descriptor *const descr = CONTAINER_OF(dev, struct can_async_descriptor, dev);

	if (descr->cb.tx_done) {
     368:	69c3      	ldr	r3, [r0, #28]
     36a:	2b00      	cmp	r3, #0
     36c:	d000      	beq.n	370 <can_tx_done+0xa>
		descr->cb.tx_done(descr);
     36e:	4798      	blx	r3
	}
}
     370:	bd10      	pop	{r4, pc}

00000372 <can_rx_done>:

/**
 * \internal Callback of CAN Message Read finished
 */
static void can_rx_done(struct _can_async_device *dev)
{
     372:	b510      	push	{r4, lr}
	struct can_async_descriptor *const descr = CONTAINER_OF(dev, struct can_async_descriptor, dev);

	if (descr->cb.rx_done) {
     374:	6a03      	ldr	r3, [r0, #32]
     376:	2b00      	cmp	r3, #0
     378:	d000      	beq.n	37c <can_rx_done+0xa>
		descr->cb.rx_done(descr);
     37a:	4798      	blx	r3
	}
}
     37c:	bd10      	pop	{r4, pc}

0000037e <can_irq_handler>:

/**
 * \internal Callback of CAN Interrupt
 */
static void can_irq_handler(struct _can_async_device *dev, enum can_async_interrupt_type type)
{
     37e:	b510      	push	{r4, lr}
	struct can_async_descriptor *const descr = CONTAINER_OF(dev, struct can_async_descriptor, dev);

	if (descr->cb.irq_handler) {
     380:	6a43      	ldr	r3, [r0, #36]	; 0x24
     382:	2b00      	cmp	r3, #0
     384:	d000      	beq.n	388 <can_irq_handler+0xa>
		descr->cb.irq_handler(descr, type);
     386:	4798      	blx	r3
	}
}
     388:	bd10      	pop	{r4, pc}
	...

0000038c <can_async_init>:
{
     38c:	b570      	push	{r4, r5, r6, lr}
     38e:	0004      	movs	r4, r0
     390:	000d      	movs	r5, r1
	ASSERT(descr && hw);
     392:	2800      	cmp	r0, #0
     394:	d015      	beq.n	3c2 <can_async_init+0x36>
     396:	2900      	cmp	r1, #0
     398:	d011      	beq.n	3be <can_async_init+0x32>
     39a:	2001      	movs	r0, #1
     39c:	2241      	movs	r2, #65	; 0x41
     39e:	490a      	ldr	r1, [pc, #40]	; (3c8 <can_async_init+0x3c>)
     3a0:	4b0a      	ldr	r3, [pc, #40]	; (3cc <can_async_init+0x40>)
     3a2:	4798      	blx	r3
	rc = _can_async_init(&descr->dev, hw);
     3a4:	0029      	movs	r1, r5
     3a6:	0020      	movs	r0, r4
     3a8:	4b09      	ldr	r3, [pc, #36]	; (3d0 <can_async_init+0x44>)
     3aa:	4798      	blx	r3
	if (rc) {
     3ac:	2800      	cmp	r0, #0
     3ae:	d105      	bne.n	3bc <can_async_init+0x30>
	descr->dev.cb.tx_done     = can_tx_done;
     3b0:	4b08      	ldr	r3, [pc, #32]	; (3d4 <can_async_init+0x48>)
     3b2:	6063      	str	r3, [r4, #4]
	descr->dev.cb.rx_done     = can_rx_done;
     3b4:	4b08      	ldr	r3, [pc, #32]	; (3d8 <can_async_init+0x4c>)
     3b6:	60a3      	str	r3, [r4, #8]
	descr->dev.cb.irq_handler = can_irq_handler;
     3b8:	4b08      	ldr	r3, [pc, #32]	; (3dc <can_async_init+0x50>)
     3ba:	60e3      	str	r3, [r4, #12]
}
     3bc:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(descr && hw);
     3be:	2000      	movs	r0, #0
     3c0:	e7ec      	b.n	39c <can_async_init+0x10>
     3c2:	2000      	movs	r0, #0
     3c4:	e7ea      	b.n	39c <can_async_init+0x10>
     3c6:	46c0      	nop			; (mov r8, r8)
     3c8:	00003058 	.word	0x00003058
     3cc:	00000ac9 	.word	0x00000ac9
     3d0:	00000b69 	.word	0x00000b69
     3d4:	00000367 	.word	0x00000367
     3d8:	00000373 	.word	0x00000373
     3dc:	0000037f 	.word	0x0000037f

000003e0 <can_async_deinit>:
{
     3e0:	b510      	push	{r4, lr}
     3e2:	0004      	movs	r4, r0
	ASSERT(descr);
     3e4:	1e43      	subs	r3, r0, #1
     3e6:	4198      	sbcs	r0, r3
     3e8:	b2c0      	uxtb	r0, r0
     3ea:	2253      	movs	r2, #83	; 0x53
     3ec:	4903      	ldr	r1, [pc, #12]	; (3fc <can_async_deinit+0x1c>)
     3ee:	4b04      	ldr	r3, [pc, #16]	; (400 <can_async_deinit+0x20>)
     3f0:	4798      	blx	r3
	return _can_async_deinit(&descr->dev);
     3f2:	0020      	movs	r0, r4
     3f4:	4b03      	ldr	r3, [pc, #12]	; (404 <can_async_deinit+0x24>)
     3f6:	4798      	blx	r3
}
     3f8:	bd10      	pop	{r4, pc}
     3fa:	46c0      	nop			; (mov r8, r8)
     3fc:	00003058 	.word	0x00003058
     400:	00000ac9 	.word	0x00000ac9
     404:	00000c75 	.word	0x00000c75

00000408 <can_async_enable>:
{
     408:	b510      	push	{r4, lr}
     40a:	0004      	movs	r4, r0
	ASSERT(descr);
     40c:	1e43      	subs	r3, r0, #1
     40e:	4198      	sbcs	r0, r3
     410:	b2c0      	uxtb	r0, r0
     412:	225c      	movs	r2, #92	; 0x5c
     414:	4903      	ldr	r1, [pc, #12]	; (424 <can_async_enable+0x1c>)
     416:	4b04      	ldr	r3, [pc, #16]	; (428 <can_async_enable+0x20>)
     418:	4798      	blx	r3
	return _can_async_enable(&descr->dev);
     41a:	0020      	movs	r0, r4
     41c:	4b03      	ldr	r3, [pc, #12]	; (42c <can_async_enable+0x24>)
     41e:	4798      	blx	r3
}
     420:	bd10      	pop	{r4, pc}
     422:	46c0      	nop			; (mov r8, r8)
     424:	00003058 	.word	0x00003058
     428:	00000ac9 	.word	0x00000ac9
     42c:	00000c87 	.word	0x00000c87

00000430 <can_async_register_callback>:
{
     430:	b570      	push	{r4, r5, r6, lr}
     432:	0006      	movs	r6, r0
     434:	000d      	movs	r5, r1
     436:	0014      	movs	r4, r2
	ASSERT(descr);
     438:	1e43      	subs	r3, r0, #1
     43a:	4198      	sbcs	r0, r3
     43c:	b2c0      	uxtb	r0, r0
     43e:	2281      	movs	r2, #129	; 0x81
     440:	490c      	ldr	r1, [pc, #48]	; (474 <can_async_register_callback+0x44>)
     442:	4b0d      	ldr	r3, [pc, #52]	; (478 <can_async_register_callback+0x48>)
     444:	4798      	blx	r3
	switch (type) {
     446:	2d01      	cmp	r5, #1
     448:	d010      	beq.n	46c <can_async_register_callback+0x3c>
     44a:	2d00      	cmp	r5, #0
     44c:	d004      	beq.n	458 <can_async_register_callback+0x28>
     44e:	2d02      	cmp	r5, #2
     450:	d00e      	beq.n	470 <can_async_register_callback+0x40>
		return ERR_INVALID_ARG;
     452:	200d      	movs	r0, #13
     454:	4240      	negs	r0, r0
     456:	e008      	b.n	46a <can_async_register_callback+0x3a>
		descr->cb.rx_done = (cb != NULL) ? (can_cb_t)cb : NULL;
     458:	6234      	str	r4, [r6, #32]
	_can_async_set_irq_state(&descr->dev, type, NULL != cb);
     45a:	1e62      	subs	r2, r4, #1
     45c:	4194      	sbcs	r4, r2
     45e:	b2e2      	uxtb	r2, r4
     460:	0029      	movs	r1, r5
     462:	0030      	movs	r0, r6
     464:	4b05      	ldr	r3, [pc, #20]	; (47c <can_async_register_callback+0x4c>)
     466:	4798      	blx	r3
	return ERR_NONE;
     468:	2000      	movs	r0, #0
}
     46a:	bd70      	pop	{r4, r5, r6, pc}
		descr->cb.tx_done = (cb != NULL) ? (can_cb_t)cb : NULL;
     46c:	61f4      	str	r4, [r6, #28]
		break;
     46e:	e7f4      	b.n	45a <can_async_register_callback+0x2a>
		    = (cb != NULL) ? (void (*)(struct can_async_descriptor *const, enum can_async_interrupt_type))cb : NULL;
     470:	6274      	str	r4, [r6, #36]	; 0x24
		break;
     472:	e7f2      	b.n	45a <can_async_register_callback+0x2a>
     474:	00003058 	.word	0x00003058
     478:	00000ac9 	.word	0x00000ac9
     47c:	00000c95 	.word	0x00000c95

00000480 <can_async_set_filter>:
{
     480:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     482:	0004      	movs	r4, r0
     484:	000d      	movs	r5, r1
     486:	0016      	movs	r6, r2
     488:	001f      	movs	r7, r3
	ASSERT(descr);
     48a:	1e43      	subs	r3, r0, #1
     48c:	4198      	sbcs	r0, r3
     48e:	b2c0      	uxtb	r0, r0
     490:	22b8      	movs	r2, #184	; 0xb8
     492:	4905      	ldr	r1, [pc, #20]	; (4a8 <can_async_set_filter+0x28>)
     494:	4b05      	ldr	r3, [pc, #20]	; (4ac <can_async_set_filter+0x2c>)
     496:	4798      	blx	r3
	return _can_async_set_filter(&descr->dev, index, fmt, filter);
     498:	003b      	movs	r3, r7
     49a:	0032      	movs	r2, r6
     49c:	0029      	movs	r1, r5
     49e:	0020      	movs	r0, r4
     4a0:	4c03      	ldr	r4, [pc, #12]	; (4b0 <can_async_set_filter+0x30>)
     4a2:	47a0      	blx	r4
}
     4a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     4a6:	46c0      	nop			; (mov r8, r8)
     4a8:	00003058 	.word	0x00003058
     4ac:	00000ac9 	.word	0x00000ac9
     4b0:	00000ce1 	.word	0x00000ce1

000004b4 <delay_ms>:

/**
 * \brief Perform delay in ms
 */
void delay_ms(const uint16_t ms)
{
     4b4:	b510      	push	{r4, lr}
	_delay_cycles(hardware, _get_cycles_for_ms(ms));
     4b6:	4b04      	ldr	r3, [pc, #16]	; (4c8 <delay_ms+0x14>)
     4b8:	681c      	ldr	r4, [r3, #0]
     4ba:	4b04      	ldr	r3, [pc, #16]	; (4cc <delay_ms+0x18>)
     4bc:	4798      	blx	r3
     4be:	0001      	movs	r1, r0
     4c0:	0020      	movs	r0, r4
     4c2:	4b03      	ldr	r3, [pc, #12]	; (4d0 <delay_ms+0x1c>)
     4c4:	4798      	blx	r3
}
     4c6:	bd10      	pop	{r4, pc}
     4c8:	20000204 	.word	0x20000204
     4cc:	00000df9 	.word	0x00000df9
     4d0:	00000e15 	.word	0x00000e15

000004d4 <flash_ready>:
 * \internal Ready for a new flash command
 *
 * \param[in] device The pointer to flash device structure
 */
static void flash_ready(struct _flash_device *device)
{
     4d4:	b510      	push	{r4, lr}
	struct flash_descriptor *const descr = CONTAINER_OF(device, struct flash_descriptor, dev);
	if (descr->callbacks.cb_ready) {
     4d6:	6943      	ldr	r3, [r0, #20]
     4d8:	2b00      	cmp	r3, #0
     4da:	d000      	beq.n	4de <flash_ready+0xa>
		descr->callbacks.cb_ready(descr);
     4dc:	4798      	blx	r3
	}
}
     4de:	bd10      	pop	{r4, pc}

000004e0 <flash_error>:
 * \internal Error occurs in flash command
 *
 * \param[in] device The pointer to flash device structure
 */
static void flash_error(struct _flash_device *device)
{
     4e0:	b510      	push	{r4, lr}
	struct flash_descriptor *const descr = CONTAINER_OF(device, struct flash_descriptor, dev);
	if (descr->callbacks.cb_error) {
     4e2:	6983      	ldr	r3, [r0, #24]
     4e4:	2b00      	cmp	r3, #0
     4e6:	d000      	beq.n	4ea <flash_error+0xa>
		descr->callbacks.cb_error(descr);
     4e8:	4798      	blx	r3
	}
}
     4ea:	bd10      	pop	{r4, pc}

000004ec <flash_init>:
{
     4ec:	b570      	push	{r4, r5, r6, lr}
     4ee:	0004      	movs	r4, r0
     4f0:	000d      	movs	r5, r1
	ASSERT(flash && hw);
     4f2:	2800      	cmp	r0, #0
     4f4:	d013      	beq.n	51e <flash_init+0x32>
     4f6:	2900      	cmp	r1, #0
     4f8:	d00f      	beq.n	51a <flash_init+0x2e>
     4fa:	2001      	movs	r0, #1
     4fc:	2238      	movs	r2, #56	; 0x38
     4fe:	4909      	ldr	r1, [pc, #36]	; (524 <flash_init+0x38>)
     500:	4b09      	ldr	r3, [pc, #36]	; (528 <flash_init+0x3c>)
     502:	4798      	blx	r3
	rc = _flash_init(&flash->dev, hw);
     504:	0029      	movs	r1, r5
     506:	0020      	movs	r0, r4
     508:	4b08      	ldr	r3, [pc, #32]	; (52c <flash_init+0x40>)
     50a:	4798      	blx	r3
	if (rc) {
     50c:	2800      	cmp	r0, #0
     50e:	d103      	bne.n	518 <flash_init+0x2c>
	flash->dev.flash_cb.ready_cb = flash_ready;
     510:	4b07      	ldr	r3, [pc, #28]	; (530 <flash_init+0x44>)
     512:	6023      	str	r3, [r4, #0]
	flash->dev.flash_cb.error_cb = flash_error;
     514:	4b07      	ldr	r3, [pc, #28]	; (534 <flash_init+0x48>)
     516:	6063      	str	r3, [r4, #4]
}
     518:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(flash && hw);
     51a:	2000      	movs	r0, #0
     51c:	e7ee      	b.n	4fc <flash_init+0x10>
     51e:	2000      	movs	r0, #0
     520:	e7ec      	b.n	4fc <flash_init+0x10>
     522:	46c0      	nop			; (mov r8, r8)
     524:	00003074 	.word	0x00003074
     528:	00000ac9 	.word	0x00000ac9
     52c:	00000fb1 	.word	0x00000fb1
     530:	000004d5 	.word	0x000004d5
     534:	000004e1 	.word	0x000004e1

00000538 <flash_deinit>:
{
     538:	b510      	push	{r4, lr}
     53a:	0004      	movs	r4, r0
	ASSERT(flash);
     53c:	1e43      	subs	r3, r0, #1
     53e:	4198      	sbcs	r0, r3
     540:	b2c0      	uxtb	r0, r0
     542:	224a      	movs	r2, #74	; 0x4a
     544:	4903      	ldr	r1, [pc, #12]	; (554 <flash_deinit+0x1c>)
     546:	4b04      	ldr	r3, [pc, #16]	; (558 <flash_deinit+0x20>)
     548:	4798      	blx	r3
	_flash_deinit(&flash->dev);
     54a:	0020      	movs	r0, r4
     54c:	4b03      	ldr	r3, [pc, #12]	; (55c <flash_deinit+0x24>)
     54e:	4798      	blx	r3
}
     550:	2000      	movs	r0, #0
     552:	bd10      	pop	{r4, pc}
     554:	00003074 	.word	0x00003074
     558:	00000ac9 	.word	0x00000ac9
     55c:	00001011 	.word	0x00001011

00000560 <flash_read>:
{
     560:	b5f0      	push	{r4, r5, r6, r7, lr}
     562:	46c6      	mov	lr, r8
     564:	b500      	push	{lr}
     566:	0004      	movs	r4, r0
     568:	000e      	movs	r6, r1
     56a:	0015      	movs	r5, r2
     56c:	001f      	movs	r7, r3
	ASSERT(flash && buffer && length);
     56e:	2800      	cmp	r0, #0
     570:	d020      	beq.n	5b4 <flash_read+0x54>
     572:	2a00      	cmp	r2, #0
     574:	d020      	beq.n	5b8 <flash_read+0x58>
     576:	2b00      	cmp	r3, #0
     578:	d120      	bne.n	5bc <flash_read+0x5c>
     57a:	2000      	movs	r0, #0
     57c:	2256      	movs	r2, #86	; 0x56
     57e:	4913      	ldr	r1, [pc, #76]	; (5cc <flash_read+0x6c>)
     580:	4b13      	ldr	r3, [pc, #76]	; (5d0 <flash_read+0x70>)
     582:	4798      	blx	r3
	uint32_t page_size   = _flash_get_page_size(&flash->dev);
     584:	0020      	movs	r0, r4
     586:	4b13      	ldr	r3, [pc, #76]	; (5d4 <flash_read+0x74>)
     588:	4798      	blx	r3
     58a:	4680      	mov	r8, r0
	uint32_t total_pages = _flash_get_total_pages(&flash->dev);
     58c:	0020      	movs	r0, r4
     58e:	4b12      	ldr	r3, [pc, #72]	; (5d8 <flash_read+0x78>)
     590:	4798      	blx	r3
	if ((src_addr > page_size * total_pages) || (src_addr + length > page_size * total_pages)) {
     592:	4643      	mov	r3, r8
     594:	4358      	muls	r0, r3
     596:	42b0      	cmp	r0, r6
     598:	d312      	bcc.n	5c0 <flash_read+0x60>
     59a:	19bb      	adds	r3, r7, r6
     59c:	4298      	cmp	r0, r3
     59e:	d312      	bcc.n	5c6 <flash_read+0x66>
	_flash_read(&flash->dev, src_addr, buffer, length);
     5a0:	003b      	movs	r3, r7
     5a2:	002a      	movs	r2, r5
     5a4:	0031      	movs	r1, r6
     5a6:	0020      	movs	r0, r4
     5a8:	4c0c      	ldr	r4, [pc, #48]	; (5dc <flash_read+0x7c>)
     5aa:	47a0      	blx	r4
	return ERR_NONE;
     5ac:	2000      	movs	r0, #0
}
     5ae:	bc04      	pop	{r2}
     5b0:	4690      	mov	r8, r2
     5b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	ASSERT(flash && buffer && length);
     5b4:	2000      	movs	r0, #0
     5b6:	e7e1      	b.n	57c <flash_read+0x1c>
     5b8:	2000      	movs	r0, #0
     5ba:	e7df      	b.n	57c <flash_read+0x1c>
     5bc:	2001      	movs	r0, #1
     5be:	e7dd      	b.n	57c <flash_read+0x1c>
		return ERR_BAD_ADDRESS;
     5c0:	200e      	movs	r0, #14
     5c2:	4240      	negs	r0, r0
     5c4:	e7f3      	b.n	5ae <flash_read+0x4e>
     5c6:	200e      	movs	r0, #14
     5c8:	4240      	negs	r0, r0
     5ca:	e7f0      	b.n	5ae <flash_read+0x4e>
     5cc:	00003074 	.word	0x00003074
     5d0:	00000ac9 	.word	0x00000ac9
     5d4:	0000102d 	.word	0x0000102d
     5d8:	00001031 	.word	0x00001031
     5dc:	00001037 	.word	0x00001037

000005e0 <flash_write>:
{
     5e0:	b5f0      	push	{r4, r5, r6, r7, lr}
     5e2:	46c6      	mov	lr, r8
     5e4:	b500      	push	{lr}
     5e6:	0004      	movs	r4, r0
     5e8:	000d      	movs	r5, r1
     5ea:	0016      	movs	r6, r2
     5ec:	001f      	movs	r7, r3
	ASSERT(flash && buffer && length);
     5ee:	2800      	cmp	r0, #0
     5f0:	d026      	beq.n	640 <flash_write+0x60>
     5f2:	2a00      	cmp	r2, #0
     5f4:	d026      	beq.n	644 <flash_write+0x64>
     5f6:	2b00      	cmp	r3, #0
     5f8:	d126      	bne.n	648 <flash_write+0x68>
     5fa:	2000      	movs	r0, #0
     5fc:	226a      	movs	r2, #106	; 0x6a
     5fe:	4918      	ldr	r1, [pc, #96]	; (660 <flash_write+0x80>)
     600:	4b18      	ldr	r3, [pc, #96]	; (664 <flash_write+0x84>)
     602:	4798      	blx	r3
	uint32_t page_size   = _flash_get_page_size(&flash->dev);
     604:	0020      	movs	r0, r4
     606:	4b18      	ldr	r3, [pc, #96]	; (668 <flash_write+0x88>)
     608:	4798      	blx	r3
     60a:	4680      	mov	r8, r0
	uint32_t total_pages = _flash_get_total_pages(&flash->dev);
     60c:	0020      	movs	r0, r4
     60e:	4b17      	ldr	r3, [pc, #92]	; (66c <flash_write+0x8c>)
     610:	4798      	blx	r3
	if ((dst_addr > page_size * total_pages) || (dst_addr + length > page_size * total_pages)) {
     612:	4643      	mov	r3, r8
     614:	4358      	muls	r0, r3
     616:	42a8      	cmp	r0, r5
     618:	d318      	bcc.n	64c <flash_write+0x6c>
     61a:	197b      	adds	r3, r7, r5
     61c:	4298      	cmp	r0, r3
     61e:	d318      	bcc.n	652 <flash_write+0x72>
	if (_flash_is_locked(&flash->dev, dst_addr)) {
     620:	0029      	movs	r1, r5
     622:	0020      	movs	r0, r4
     624:	4b12      	ldr	r3, [pc, #72]	; (670 <flash_write+0x90>)
     626:	4798      	blx	r3
     628:	2800      	cmp	r0, #0
     62a:	d115      	bne.n	658 <flash_write+0x78>
	_flash_write(&flash->dev, dst_addr, buffer, length);
     62c:	003b      	movs	r3, r7
     62e:	0032      	movs	r2, r6
     630:	0029      	movs	r1, r5
     632:	0020      	movs	r0, r4
     634:	4c0f      	ldr	r4, [pc, #60]	; (674 <flash_write+0x94>)
     636:	47a0      	blx	r4
	return ERR_NONE;
     638:	2000      	movs	r0, #0
}
     63a:	bc04      	pop	{r2}
     63c:	4690      	mov	r8, r2
     63e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	ASSERT(flash && buffer && length);
     640:	2000      	movs	r0, #0
     642:	e7db      	b.n	5fc <flash_write+0x1c>
     644:	2000      	movs	r0, #0
     646:	e7d9      	b.n	5fc <flash_write+0x1c>
     648:	2001      	movs	r0, #1
     64a:	e7d7      	b.n	5fc <flash_write+0x1c>
		return ERR_BAD_ADDRESS;
     64c:	200e      	movs	r0, #14
     64e:	4240      	negs	r0, r0
     650:	e7f3      	b.n	63a <flash_write+0x5a>
     652:	200e      	movs	r0, #14
     654:	4240      	negs	r0, r0
     656:	e7f0      	b.n	63a <flash_write+0x5a>
		return ERR_DENIED;
     658:	2011      	movs	r0, #17
     65a:	4240      	negs	r0, r0
     65c:	e7ed      	b.n	63a <flash_write+0x5a>
     65e:	46c0      	nop			; (mov r8, r8)
     660:	00003074 	.word	0x00003074
     664:	00000ac9 	.word	0x00000ac9
     668:	0000102d 	.word	0x0000102d
     66c:	00001031 	.word	0x00001031
     670:	0000115d 	.word	0x0000115d
     674:	00001085 	.word	0x00001085

00000678 <flash_get_page_size>:
{
     678:	b510      	push	{r4, lr}
     67a:	0004      	movs	r4, r0
	ASSERT(flash);
     67c:	1e43      	subs	r3, r0, #1
     67e:	4198      	sbcs	r0, r3
     680:	b2c0      	uxtb	r0, r0
     682:	22f7      	movs	r2, #247	; 0xf7
     684:	4903      	ldr	r1, [pc, #12]	; (694 <flash_get_page_size+0x1c>)
     686:	4b04      	ldr	r3, [pc, #16]	; (698 <flash_get_page_size+0x20>)
     688:	4798      	blx	r3
	return _flash_get_page_size(&flash->dev);
     68a:	0020      	movs	r0, r4
     68c:	4b03      	ldr	r3, [pc, #12]	; (69c <flash_get_page_size+0x24>)
     68e:	4798      	blx	r3
}
     690:	bd10      	pop	{r4, pc}
     692:	46c0      	nop			; (mov r8, r8)
     694:	00003074 	.word	0x00003074
     698:	00000ac9 	.word	0x00000ac9
     69c:	0000102d 	.word	0x0000102d

000006a0 <io_write>:

/**
 * \brief I/O write interface
 */
int32_t io_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
     6a0:	b570      	push	{r4, r5, r6, lr}
     6a2:	0004      	movs	r4, r0
     6a4:	000d      	movs	r5, r1
     6a6:	0016      	movs	r6, r2
	ASSERT(io_descr && buf);
     6a8:	2800      	cmp	r0, #0
     6aa:	d00e      	beq.n	6ca <io_write+0x2a>
     6ac:	2900      	cmp	r1, #0
     6ae:	d00a      	beq.n	6c6 <io_write+0x26>
     6b0:	2001      	movs	r0, #1
     6b2:	2234      	movs	r2, #52	; 0x34
     6b4:	4906      	ldr	r1, [pc, #24]	; (6d0 <io_write+0x30>)
     6b6:	4b07      	ldr	r3, [pc, #28]	; (6d4 <io_write+0x34>)
     6b8:	4798      	blx	r3
	return io_descr->write(io_descr, buf, length);
     6ba:	6823      	ldr	r3, [r4, #0]
     6bc:	0032      	movs	r2, r6
     6be:	0029      	movs	r1, r5
     6c0:	0020      	movs	r0, r4
     6c2:	4798      	blx	r3
}
     6c4:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(io_descr && buf);
     6c6:	2000      	movs	r0, #0
     6c8:	e7f3      	b.n	6b2 <io_write+0x12>
     6ca:	2000      	movs	r0, #0
     6cc:	e7f1      	b.n	6b2 <io_write+0x12>
     6ce:	46c0      	nop			; (mov r8, r8)
     6d0:	0000308c 	.word	0x0000308c
     6d4:	00000ac9 	.word	0x00000ac9

000006d8 <io_read>:

/**
 * \brief I/O read interface
 */
int32_t io_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
     6d8:	b570      	push	{r4, r5, r6, lr}
     6da:	0004      	movs	r4, r0
     6dc:	000d      	movs	r5, r1
     6de:	0016      	movs	r6, r2
	ASSERT(io_descr && buf);
     6e0:	2800      	cmp	r0, #0
     6e2:	d00e      	beq.n	702 <io_read+0x2a>
     6e4:	2900      	cmp	r1, #0
     6e6:	d00a      	beq.n	6fe <io_read+0x26>
     6e8:	2001      	movs	r0, #1
     6ea:	223d      	movs	r2, #61	; 0x3d
     6ec:	4906      	ldr	r1, [pc, #24]	; (708 <io_read+0x30>)
     6ee:	4b07      	ldr	r3, [pc, #28]	; (70c <io_read+0x34>)
     6f0:	4798      	blx	r3
	return io_descr->read(io_descr, buf, length);
     6f2:	6863      	ldr	r3, [r4, #4]
     6f4:	0032      	movs	r2, r6
     6f6:	0029      	movs	r1, r5
     6f8:	0020      	movs	r0, r4
     6fa:	4798      	blx	r3
}
     6fc:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(io_descr && buf);
     6fe:	2000      	movs	r0, #0
     700:	e7f3      	b.n	6ea <io_read+0x12>
     702:	2000      	movs	r0, #0
     704:	e7f1      	b.n	6ea <io_read+0x12>
     706:	46c0      	nop			; (mov r8, r8)
     708:	0000308c 	.word	0x0000308c
     70c:	00000ac9 	.word	0x00000ac9

00000710 <timer_add_timer_task>:
 * \param[in] head The pointer to the head of timer task list
 * \param[in] task The pointer to task to add
 * \param[in] time Current timer time
 */
static void timer_add_timer_task(struct list_descriptor *list, struct timer_task *const new_task, const uint32_t time)
{
     710:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 * \return A pointer to the head of the given list or NULL if the list is
 * empty
 */
static inline void *list_get_head(const struct list_descriptor *const list)
{
	return (void *)list->head;
     712:	6806      	ldr	r6, [r0, #0]
	struct timer_task *it, *prev = NULL, *head = (struct timer_task *)list_get_head(list);

	if (!head) {
     714:	2e00      	cmp	r6, #0
     716:	d002      	beq.n	71e <timer_add_timer_task+0xe>
     718:	0033      	movs	r3, r6
     71a:	2500      	movs	r5, #0
     71c:	e00c      	b.n	738 <timer_add_timer_task+0x28>
		list_insert_as_head(list, new_task);
     71e:	4b10      	ldr	r3, [pc, #64]	; (760 <timer_add_timer_task+0x50>)
     720:	4798      	blx	r3
		return;
     722:	e018      	b.n	756 <timer_add_timer_task+0x46>
		uint32_t time_left;

		if (it->time_label <= time) {
			time_left = it->interval - (time - it->time_label);
		} else {
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
     724:	689f      	ldr	r7, [r3, #8]
     726:	46bc      	mov	ip, r7
     728:	4464      	add	r4, ip
     72a:	1aa4      	subs	r4, r4, r2
     72c:	3401      	adds	r4, #1
		}
		if (time_left >= new_task->interval)
     72e:	688f      	ldr	r7, [r1, #8]
     730:	42bc      	cmp	r4, r7
     732:	d20b      	bcs.n	74c <timer_add_timer_task+0x3c>
			break;
		prev = it;
     734:	001d      	movs	r5, r3
	for (it = head; it; it = (struct timer_task *)list_get_next_element(it)) {
     736:	681b      	ldr	r3, [r3, #0]
     738:	2b00      	cmp	r3, #0
     73a:	d007      	beq.n	74c <timer_add_timer_task+0x3c>
		if (it->time_label <= time) {
     73c:	685c      	ldr	r4, [r3, #4]
     73e:	4294      	cmp	r4, r2
     740:	d8f0      	bhi.n	724 <timer_add_timer_task+0x14>
			time_left = it->interval - (time - it->time_label);
     742:	1aa4      	subs	r4, r4, r2
     744:	689f      	ldr	r7, [r3, #8]
     746:	46bc      	mov	ip, r7
     748:	4464      	add	r4, ip
     74a:	e7f0      	b.n	72e <timer_add_timer_task+0x1e>
	}

	if (it == head) {
     74c:	42b3      	cmp	r3, r6
     74e:	d003      	beq.n	758 <timer_add_timer_task+0x48>
		list_insert_as_head(list, new_task);
	} else {
		list_insert_after(prev, new_task);
     750:	0028      	movs	r0, r5
     752:	4b04      	ldr	r3, [pc, #16]	; (764 <timer_add_timer_task+0x54>)
     754:	4798      	blx	r3
	}
}
     756:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		list_insert_as_head(list, new_task);
     758:	4b01      	ldr	r3, [pc, #4]	; (760 <timer_add_timer_task+0x50>)
     75a:	4798      	blx	r3
     75c:	e7fb      	b.n	756 <timer_add_timer_task+0x46>
     75e:	46c0      	nop			; (mov r8, r8)
     760:	00000ae9 	.word	0x00000ae9
     764:	00000b15 	.word	0x00000b15

00000768 <timer_process_counted>:

/**
 * \internal Process interrupts
 */
static void timer_process_counted(struct _timer_device *device)
{
     768:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     76a:	0005      	movs	r5, r0
     76c:	6944      	ldr	r4, [r0, #20]
	struct timer_descriptor *timer = CONTAINER_OF(device, struct timer_descriptor, device);
	struct timer_task *      it    = (struct timer_task *)list_get_head(&timer->tasks);
	uint32_t                 time  = ++timer->time;
     76e:	6903      	ldr	r3, [r0, #16]
     770:	1c5e      	adds	r6, r3, #1
     772:	6106      	str	r6, [r0, #16]

	if ((timer->flags & TIMER_FLAG_QUEUE_IS_TAKEN) || (timer->flags & TIMER_FLAG_INTERRUPT_TRIGERRED)) {
     774:	7e03      	ldrb	r3, [r0, #24]
     776:	07db      	lsls	r3, r3, #31
     778:	d402      	bmi.n	780 <timer_process_counted+0x18>
     77a:	7e03      	ldrb	r3, [r0, #24]
     77c:	079b      	lsls	r3, r3, #30
     77e:	d50a      	bpl.n	796 <timer_process_counted+0x2e>
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
     780:	7e2b      	ldrb	r3, [r5, #24]
     782:	2202      	movs	r2, #2
     784:	4313      	orrs	r3, r2
     786:	b2db      	uxtb	r3, r3
     788:	762b      	strb	r3, [r5, #24]
		}
		it = (struct timer_task *)list_get_head(&timer->tasks);

		tmp->cb(tmp);
	}
}
     78a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     78c:	696f      	ldr	r7, [r5, #20]
		tmp->cb(tmp);
     78e:	68e3      	ldr	r3, [r4, #12]
     790:	0020      	movs	r0, r4
     792:	4798      	blx	r3
		it = (struct timer_task *)list_get_head(&timer->tasks);
     794:	003c      	movs	r4, r7
	while (it && ((time - it->time_label) >= it->interval)) {
     796:	2c00      	cmp	r4, #0
     798:	d0f7      	beq.n	78a <timer_process_counted+0x22>
     79a:	6863      	ldr	r3, [r4, #4]
     79c:	1af3      	subs	r3, r6, r3
     79e:	68a2      	ldr	r2, [r4, #8]
     7a0:	4293      	cmp	r3, r2
     7a2:	d3f2      	bcc.n	78a <timer_process_counted+0x22>
		list_remove_head(&timer->tasks);
     7a4:	002f      	movs	r7, r5
     7a6:	3714      	adds	r7, #20
     7a8:	0038      	movs	r0, r7
     7aa:	4b06      	ldr	r3, [pc, #24]	; (7c4 <timer_process_counted+0x5c>)
     7ac:	4798      	blx	r3
		if (TIMER_TASK_REPEAT == tmp->mode) {
     7ae:	7c23      	ldrb	r3, [r4, #16]
     7b0:	2b01      	cmp	r3, #1
     7b2:	d1eb      	bne.n	78c <timer_process_counted+0x24>
			tmp->time_label = time;
     7b4:	6066      	str	r6, [r4, #4]
			timer_add_timer_task(&timer->tasks, tmp, time);
     7b6:	0032      	movs	r2, r6
     7b8:	0021      	movs	r1, r4
     7ba:	0038      	movs	r0, r7
     7bc:	4b02      	ldr	r3, [pc, #8]	; (7c8 <timer_process_counted+0x60>)
     7be:	4798      	blx	r3
     7c0:	e7e4      	b.n	78c <timer_process_counted+0x24>
     7c2:	46c0      	nop			; (mov r8, r8)
     7c4:	00000b1d 	.word	0x00000b1d
     7c8:	00000711 	.word	0x00000711

000007cc <timer_init>:
{
     7cc:	b570      	push	{r4, r5, r6, lr}
     7ce:	0004      	movs	r4, r0
     7d0:	000d      	movs	r5, r1
	ASSERT(descr && hw);
     7d2:	2800      	cmp	r0, #0
     7d4:	d012      	beq.n	7fc <timer_init+0x30>
     7d6:	2900      	cmp	r1, #0
     7d8:	d00e      	beq.n	7f8 <timer_init+0x2c>
     7da:	2001      	movs	r0, #1
     7dc:	223b      	movs	r2, #59	; 0x3b
     7de:	4908      	ldr	r1, [pc, #32]	; (800 <timer_init+0x34>)
     7e0:	4b08      	ldr	r3, [pc, #32]	; (804 <timer_init+0x38>)
     7e2:	4798      	blx	r3
	_timer_init(&descr->device, hw);
     7e4:	0029      	movs	r1, r5
     7e6:	0020      	movs	r0, r4
     7e8:	4b07      	ldr	r3, [pc, #28]	; (808 <timer_init+0x3c>)
     7ea:	4798      	blx	r3
	descr->time                           = 0;
     7ec:	2300      	movs	r3, #0
     7ee:	6123      	str	r3, [r4, #16]
	descr->device.timer_cb.period_expired = timer_process_counted;
     7f0:	4b06      	ldr	r3, [pc, #24]	; (80c <timer_init+0x40>)
     7f2:	6023      	str	r3, [r4, #0]
}
     7f4:	2000      	movs	r0, #0
     7f6:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(descr && hw);
     7f8:	2000      	movs	r0, #0
     7fa:	e7ef      	b.n	7dc <timer_init+0x10>
     7fc:	2000      	movs	r0, #0
     7fe:	e7ed      	b.n	7dc <timer_init+0x10>
     800:	000030a0 	.word	0x000030a0
     804:	00000ac9 	.word	0x00000ac9
     808:	000014f9 	.word	0x000014f9
     80c:	00000769 	.word	0x00000769

00000810 <timer_deinit>:
{
     810:	b510      	push	{r4, lr}
     812:	0004      	movs	r4, r0
	ASSERT(descr);
     814:	1e43      	subs	r3, r0, #1
     816:	4198      	sbcs	r0, r3
     818:	b2c0      	uxtb	r0, r0
     81a:	2248      	movs	r2, #72	; 0x48
     81c:	4903      	ldr	r1, [pc, #12]	; (82c <timer_deinit+0x1c>)
     81e:	4b04      	ldr	r3, [pc, #16]	; (830 <timer_deinit+0x20>)
     820:	4798      	blx	r3
	_timer_deinit(&descr->device);
     822:	0020      	movs	r0, r4
     824:	4b03      	ldr	r3, [pc, #12]	; (834 <timer_deinit+0x24>)
     826:	4798      	blx	r3
}
     828:	2000      	movs	r0, #0
     82a:	bd10      	pop	{r4, pc}
     82c:	000030a0 	.word	0x000030a0
     830:	00000ac9 	.word	0x00000ac9
     834:	000016a5 	.word	0x000016a5

00000838 <timer_add_task>:
{
     838:	b570      	push	{r4, r5, r6, lr}
     83a:	b082      	sub	sp, #8
     83c:	0004      	movs	r4, r0
     83e:	000d      	movs	r5, r1
	ASSERT(descr && task);
     840:	2800      	cmp	r0, #0
     842:	d026      	beq.n	892 <timer_add_task+0x5a>
     844:	2900      	cmp	r1, #0
     846:	d022      	beq.n	88e <timer_add_task+0x56>
     848:	2001      	movs	r0, #1
     84a:	227a      	movs	r2, #122	; 0x7a
     84c:	491f      	ldr	r1, [pc, #124]	; (8cc <timer_add_task+0x94>)
     84e:	4b20      	ldr	r3, [pc, #128]	; (8d0 <timer_add_task+0x98>)
     850:	4798      	blx	r3
	descr->flags |= TIMER_FLAG_QUEUE_IS_TAKEN;
     852:	7e23      	ldrb	r3, [r4, #24]
     854:	2201      	movs	r2, #1
     856:	4313      	orrs	r3, r2
     858:	b2db      	uxtb	r3, r3
     85a:	7623      	strb	r3, [r4, #24]
	if (is_list_element(&descr->tasks, task)) {
     85c:	0026      	movs	r6, r4
     85e:	3614      	adds	r6, #20
     860:	0029      	movs	r1, r5
     862:	0030      	movs	r0, r6
     864:	4b1b      	ldr	r3, [pc, #108]	; (8d4 <timer_add_task+0x9c>)
     866:	4798      	blx	r3
     868:	2800      	cmp	r0, #0
     86a:	d114      	bne.n	896 <timer_add_task+0x5e>
	task->time_label = descr->time;
     86c:	6923      	ldr	r3, [r4, #16]
     86e:	606b      	str	r3, [r5, #4]
	timer_add_timer_task(&descr->tasks, task, descr->time);
     870:	6922      	ldr	r2, [r4, #16]
     872:	0029      	movs	r1, r5
     874:	0030      	movs	r0, r6
     876:	4b18      	ldr	r3, [pc, #96]	; (8d8 <timer_add_task+0xa0>)
     878:	4798      	blx	r3
	descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
     87a:	7e23      	ldrb	r3, [r4, #24]
     87c:	2201      	movs	r2, #1
     87e:	4393      	bics	r3, r2
     880:	7623      	strb	r3, [r4, #24]
	if (descr->flags & TIMER_FLAG_INTERRUPT_TRIGERRED) {
     882:	7e23      	ldrb	r3, [r4, #24]
     884:	079b      	lsls	r3, r3, #30
     886:	d412      	bmi.n	8ae <timer_add_task+0x76>
	return ERR_NONE;
     888:	2000      	movs	r0, #0
}
     88a:	b002      	add	sp, #8
     88c:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(descr && task);
     88e:	2000      	movs	r0, #0
     890:	e7db      	b.n	84a <timer_add_task+0x12>
     892:	2000      	movs	r0, #0
     894:	e7d9      	b.n	84a <timer_add_task+0x12>
		descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
     896:	7e23      	ldrb	r3, [r4, #24]
     898:	2201      	movs	r2, #1
     89a:	4393      	bics	r3, r2
     89c:	7623      	strb	r3, [r4, #24]
		ASSERT(false);
     89e:	327e      	adds	r2, #126	; 0x7e
     8a0:	490a      	ldr	r1, [pc, #40]	; (8cc <timer_add_task+0x94>)
     8a2:	2000      	movs	r0, #0
     8a4:	4b0a      	ldr	r3, [pc, #40]	; (8d0 <timer_add_task+0x98>)
     8a6:	4798      	blx	r3
		return ERR_ALREADY_INITIALIZED;
     8a8:	2012      	movs	r0, #18
     8aa:	4240      	negs	r0, r0
     8ac:	e7ed      	b.n	88a <timer_add_task+0x52>
		CRITICAL_SECTION_ENTER()
     8ae:	a801      	add	r0, sp, #4
     8b0:	4b0a      	ldr	r3, [pc, #40]	; (8dc <timer_add_task+0xa4>)
     8b2:	4798      	blx	r3
		descr->flags &= ~TIMER_FLAG_INTERRUPT_TRIGERRED;
     8b4:	7e23      	ldrb	r3, [r4, #24]
     8b6:	2202      	movs	r2, #2
     8b8:	4393      	bics	r3, r2
     8ba:	7623      	strb	r3, [r4, #24]
		_timer_set_irq(&descr->device);
     8bc:	0020      	movs	r0, r4
     8be:	4b08      	ldr	r3, [pc, #32]	; (8e0 <timer_add_task+0xa8>)
     8c0:	4798      	blx	r3
		CRITICAL_SECTION_LEAVE()
     8c2:	a801      	add	r0, sp, #4
     8c4:	4b07      	ldr	r3, [pc, #28]	; (8e4 <timer_add_task+0xac>)
     8c6:	4798      	blx	r3
	return ERR_NONE;
     8c8:	2000      	movs	r0, #0
     8ca:	e7de      	b.n	88a <timer_add_task+0x52>
     8cc:	000030a0 	.word	0x000030a0
     8d0:	00000ac9 	.word	0x00000ac9
     8d4:	00000ad1 	.word	0x00000ad1
     8d8:	00000711 	.word	0x00000711
     8dc:	0000034d 	.word	0x0000034d
     8e0:	0000171d 	.word	0x0000171d
     8e4:	0000035b 	.word	0x0000035b

000008e8 <usart_sync_write>:
 * \param[in] length The number of bytes to write
 *
 * \return The number of bytes written.
 */
static int32_t usart_sync_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
     8e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     8ea:	0005      	movs	r5, r0
     8ec:	000e      	movs	r6, r1
     8ee:	0017      	movs	r7, r2
	uint32_t                      offset = 0;
	struct usart_sync_descriptor *descr  = CONTAINER_OF(io_descr, struct usart_sync_descriptor, io);

	ASSERT(io_descr && buf && length);
     8f0:	2800      	cmp	r0, #0
     8f2:	d023      	beq.n	93c <usart_sync_write+0x54>
     8f4:	2900      	cmp	r1, #0
     8f6:	d023      	beq.n	940 <usart_sync_write+0x58>
     8f8:	2a00      	cmp	r2, #0
     8fa:	d123      	bne.n	944 <usart_sync_write+0x5c>
     8fc:	2000      	movs	r0, #0
     8fe:	22f1      	movs	r2, #241	; 0xf1
     900:	4911      	ldr	r1, [pc, #68]	; (948 <usart_sync_write+0x60>)
     902:	4b12      	ldr	r3, [pc, #72]	; (94c <usart_sync_write+0x64>)
     904:	4798      	blx	r3
	while (!_usart_sync_is_ready_to_send(&descr->device))
     906:	002c      	movs	r4, r5
     908:	3408      	adds	r4, #8
     90a:	0020      	movs	r0, r4
     90c:	4b10      	ldr	r3, [pc, #64]	; (950 <usart_sync_write+0x68>)
     90e:	4798      	blx	r3
     910:	2800      	cmp	r0, #0
     912:	d0f8      	beq.n	906 <usart_sync_write+0x1e>
     914:	2500      	movs	r5, #0
		;
	do {
		_usart_sync_write_byte(&descr->device, buf[offset]);
     916:	5d71      	ldrb	r1, [r6, r5]
     918:	0020      	movs	r0, r4
     91a:	4b0e      	ldr	r3, [pc, #56]	; (954 <usart_sync_write+0x6c>)
     91c:	4798      	blx	r3
		while (!_usart_sync_is_ready_to_send(&descr->device))
     91e:	0020      	movs	r0, r4
     920:	4b0b      	ldr	r3, [pc, #44]	; (950 <usart_sync_write+0x68>)
     922:	4798      	blx	r3
     924:	2800      	cmp	r0, #0
     926:	d0fa      	beq.n	91e <usart_sync_write+0x36>
			;
	} while (++offset < length);
     928:	3501      	adds	r5, #1
     92a:	42bd      	cmp	r5, r7
     92c:	d3f3      	bcc.n	916 <usart_sync_write+0x2e>
	while (!_usart_sync_is_transmit_done(&descr->device))
     92e:	0020      	movs	r0, r4
     930:	4b09      	ldr	r3, [pc, #36]	; (958 <usart_sync_write+0x70>)
     932:	4798      	blx	r3
     934:	2800      	cmp	r0, #0
     936:	d0fa      	beq.n	92e <usart_sync_write+0x46>
		;
	return (int32_t)offset;
}
     938:	0028      	movs	r0, r5
     93a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	ASSERT(io_descr && buf && length);
     93c:	2000      	movs	r0, #0
     93e:	e7de      	b.n	8fe <usart_sync_write+0x16>
     940:	2000      	movs	r0, #0
     942:	e7dc      	b.n	8fe <usart_sync_write+0x16>
     944:	2001      	movs	r0, #1
     946:	e7da      	b.n	8fe <usart_sync_write+0x16>
     948:	000030b8 	.word	0x000030b8
     94c:	00000ac9 	.word	0x00000ac9
     950:	00001427 	.word	0x00001427
     954:	00001417 	.word	0x00001417
     958:	00001431 	.word	0x00001431

0000095c <usart_sync_read>:
 * \param[in] length The size of a buffer
 *
 * \return The number of bytes read.
 */
static int32_t usart_sync_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
     95c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     95e:	46ce      	mov	lr, r9
     960:	4647      	mov	r7, r8
     962:	b580      	push	{r7, lr}
     964:	1e05      	subs	r5, r0, #0
     966:	4688      	mov	r8, r1
     968:	4691      	mov	r9, r2
	uint32_t                      offset = 0;
	struct usart_sync_descriptor *descr  = CONTAINER_OF(io_descr, struct usart_sync_descriptor, io);

	ASSERT(io_descr && buf && length);
     96a:	d01f      	beq.n	9ac <usart_sync_read+0x50>
     96c:	2900      	cmp	r1, #0
     96e:	d01f      	beq.n	9b0 <usart_sync_read+0x54>
     970:	2a00      	cmp	r2, #0
     972:	d11f      	bne.n	9b4 <usart_sync_read+0x58>
     974:	2000      	movs	r0, #0
     976:	2286      	movs	r2, #134	; 0x86
     978:	0052      	lsls	r2, r2, #1
     97a:	490f      	ldr	r1, [pc, #60]	; (9b8 <usart_sync_read+0x5c>)
     97c:	4b0f      	ldr	r3, [pc, #60]	; (9bc <usart_sync_read+0x60>)
     97e:	4798      	blx	r3
	uint32_t                      offset = 0;
     980:	2600      	movs	r6, #0
	do {
		while (!_usart_sync_is_byte_received(&descr->device))
     982:	002c      	movs	r4, r5
     984:	3408      	adds	r4, #8
     986:	0020      	movs	r0, r4
     988:	4b0d      	ldr	r3, [pc, #52]	; (9c0 <usart_sync_read+0x64>)
     98a:	4798      	blx	r3
     98c:	2800      	cmp	r0, #0
     98e:	d0f8      	beq.n	982 <usart_sync_read+0x26>
			;
		buf[offset] = _usart_sync_read_byte(&descr->device);
     990:	4643      	mov	r3, r8
     992:	199f      	adds	r7, r3, r6
     994:	0020      	movs	r0, r4
     996:	4b0b      	ldr	r3, [pc, #44]	; (9c4 <usart_sync_read+0x68>)
     998:	4798      	blx	r3
     99a:	7038      	strb	r0, [r7, #0]
	} while (++offset < length);
     99c:	3601      	adds	r6, #1
     99e:	454e      	cmp	r6, r9
     9a0:	d3ef      	bcc.n	982 <usart_sync_read+0x26>

	return (int32_t)offset;
}
     9a2:	0030      	movs	r0, r6
     9a4:	bc0c      	pop	{r2, r3}
     9a6:	4690      	mov	r8, r2
     9a8:	4699      	mov	r9, r3
     9aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	ASSERT(io_descr && buf && length);
     9ac:	2000      	movs	r0, #0
     9ae:	e7e2      	b.n	976 <usart_sync_read+0x1a>
     9b0:	2000      	movs	r0, #0
     9b2:	e7e0      	b.n	976 <usart_sync_read+0x1a>
     9b4:	2001      	movs	r0, #1
     9b6:	e7de      	b.n	976 <usart_sync_read+0x1a>
     9b8:	000030b8 	.word	0x000030b8
     9bc:	00000ac9 	.word	0x00000ac9
     9c0:	0000143d 	.word	0x0000143d
     9c4:	0000141f 	.word	0x0000141f

000009c8 <usart_sync_init>:
{
     9c8:	b570      	push	{r4, r5, r6, lr}
     9ca:	0004      	movs	r4, r0
     9cc:	000d      	movs	r5, r1
	ASSERT(descr && hw);
     9ce:	2800      	cmp	r0, #0
     9d0:	d014      	beq.n	9fc <usart_sync_init+0x34>
     9d2:	2900      	cmp	r1, #0
     9d4:	d010      	beq.n	9f8 <usart_sync_init+0x30>
     9d6:	2001      	movs	r0, #1
     9d8:	2234      	movs	r2, #52	; 0x34
     9da:	4909      	ldr	r1, [pc, #36]	; (a00 <usart_sync_init+0x38>)
     9dc:	4b09      	ldr	r3, [pc, #36]	; (a04 <usart_sync_init+0x3c>)
     9de:	4798      	blx	r3
	init_status = _usart_sync_init(&descr->device, hw);
     9e0:	0020      	movs	r0, r4
     9e2:	3008      	adds	r0, #8
     9e4:	0029      	movs	r1, r5
     9e6:	4b08      	ldr	r3, [pc, #32]	; (a08 <usart_sync_init+0x40>)
     9e8:	4798      	blx	r3
	if (init_status) {
     9ea:	2800      	cmp	r0, #0
     9ec:	d103      	bne.n	9f6 <usart_sync_init+0x2e>
	descr->io.read  = usart_sync_read;
     9ee:	4b07      	ldr	r3, [pc, #28]	; (a0c <usart_sync_init+0x44>)
     9f0:	6063      	str	r3, [r4, #4]
	descr->io.write = usart_sync_write;
     9f2:	4b07      	ldr	r3, [pc, #28]	; (a10 <usart_sync_init+0x48>)
     9f4:	6023      	str	r3, [r4, #0]
}
     9f6:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(descr && hw);
     9f8:	2000      	movs	r0, #0
     9fa:	e7ed      	b.n	9d8 <usart_sync_init+0x10>
     9fc:	2000      	movs	r0, #0
     9fe:	e7eb      	b.n	9d8 <usart_sync_init+0x10>
     a00:	000030b8 	.word	0x000030b8
     a04:	00000ac9 	.word	0x00000ac9
     a08:	000013b9 	.word	0x000013b9
     a0c:	0000095d 	.word	0x0000095d
     a10:	000008e9 	.word	0x000008e9

00000a14 <usart_sync_deinit>:
{
     a14:	b510      	push	{r4, lr}
     a16:	0004      	movs	r4, r0
	ASSERT(descr);
     a18:	1e43      	subs	r3, r0, #1
     a1a:	4198      	sbcs	r0, r3
     a1c:	b2c0      	uxtb	r0, r0
     a1e:	2245      	movs	r2, #69	; 0x45
     a20:	4905      	ldr	r1, [pc, #20]	; (a38 <usart_sync_deinit+0x24>)
     a22:	4b06      	ldr	r3, [pc, #24]	; (a3c <usart_sync_deinit+0x28>)
     a24:	4798      	blx	r3
	_usart_sync_deinit(&descr->device);
     a26:	0020      	movs	r0, r4
     a28:	3008      	adds	r0, #8
     a2a:	4b05      	ldr	r3, [pc, #20]	; (a40 <usart_sync_deinit+0x2c>)
     a2c:	4798      	blx	r3
	descr->io.read  = NULL;
     a2e:	2300      	movs	r3, #0
     a30:	6063      	str	r3, [r4, #4]
	descr->io.write = NULL;
     a32:	6023      	str	r3, [r4, #0]
}
     a34:	2000      	movs	r0, #0
     a36:	bd10      	pop	{r4, pc}
     a38:	000030b8 	.word	0x000030b8
     a3c:	00000ac9 	.word	0x00000ac9
     a40:	000013e5 	.word	0x000013e5

00000a44 <usart_sync_enable>:
{
     a44:	b510      	push	{r4, lr}
     a46:	0004      	movs	r4, r0
	ASSERT(descr);
     a48:	1e43      	subs	r3, r0, #1
     a4a:	4198      	sbcs	r0, r3
     a4c:	b2c0      	uxtb	r0, r0
     a4e:	2253      	movs	r2, #83	; 0x53
     a50:	4904      	ldr	r1, [pc, #16]	; (a64 <usart_sync_enable+0x20>)
     a52:	4b05      	ldr	r3, [pc, #20]	; (a68 <usart_sync_enable+0x24>)
     a54:	4798      	blx	r3
	_usart_sync_enable(&descr->device);
     a56:	0020      	movs	r0, r4
     a58:	3008      	adds	r0, #8
     a5a:	4b04      	ldr	r3, [pc, #16]	; (a6c <usart_sync_enable+0x28>)
     a5c:	4798      	blx	r3
}
     a5e:	2000      	movs	r0, #0
     a60:	bd10      	pop	{r4, pc}
     a62:	46c0      	nop			; (mov r8, r8)
     a64:	000030b8 	.word	0x000030b8
     a68:	00000ac9 	.word	0x00000ac9
     a6c:	00001405 	.word	0x00001405

00000a70 <usart_sync_get_io_descriptor>:
{
     a70:	b570      	push	{r4, r5, r6, lr}
     a72:	0004      	movs	r4, r0
     a74:	000d      	movs	r5, r1
	ASSERT(descr && io);
     a76:	2800      	cmp	r0, #0
     a78:	d00b      	beq.n	a92 <usart_sync_get_io_descriptor+0x22>
     a7a:	2900      	cmp	r1, #0
     a7c:	d007      	beq.n	a8e <usart_sync_get_io_descriptor+0x1e>
     a7e:	2001      	movs	r0, #1
     a80:	2269      	movs	r2, #105	; 0x69
     a82:	4905      	ldr	r1, [pc, #20]	; (a98 <usart_sync_get_io_descriptor+0x28>)
     a84:	4b05      	ldr	r3, [pc, #20]	; (a9c <usart_sync_get_io_descriptor+0x2c>)
     a86:	4798      	blx	r3
	*io = &descr->io;
     a88:	602c      	str	r4, [r5, #0]
}
     a8a:	2000      	movs	r0, #0
     a8c:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(descr && io);
     a8e:	2000      	movs	r0, #0
     a90:	e7f6      	b.n	a80 <usart_sync_get_io_descriptor+0x10>
     a92:	2000      	movs	r0, #0
     a94:	e7f4      	b.n	a80 <usart_sync_get_io_descriptor+0x10>
     a96:	46c0      	nop			; (mov r8, r8)
     a98:	000030b8 	.word	0x000030b8
     a9c:	00000ac9 	.word	0x00000ac9

00000aa0 <usart_sync_is_rx_not_empty>:
{
     aa0:	b510      	push	{r4, lr}
     aa2:	0004      	movs	r4, r0
	ASSERT(descr);
     aa4:	1e43      	subs	r3, r0, #1
     aa6:	4198      	sbcs	r0, r3
     aa8:	b2c0      	uxtb	r0, r0
     aaa:	22d7      	movs	r2, #215	; 0xd7
     aac:	4903      	ldr	r1, [pc, #12]	; (abc <usart_sync_is_rx_not_empty+0x1c>)
     aae:	4b04      	ldr	r3, [pc, #16]	; (ac0 <usart_sync_is_rx_not_empty+0x20>)
     ab0:	4798      	blx	r3
	return _usart_sync_is_byte_received(&descr->device);
     ab2:	0020      	movs	r0, r4
     ab4:	3008      	adds	r0, #8
     ab6:	4b03      	ldr	r3, [pc, #12]	; (ac4 <usart_sync_is_rx_not_empty+0x24>)
     ab8:	4798      	blx	r3
}
     aba:	bd10      	pop	{r4, pc}
     abc:	000030b8 	.word	0x000030b8
     ac0:	00000ac9 	.word	0x00000ac9
     ac4:	0000143d 	.word	0x0000143d

00000ac8 <assert>:
/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
	if (!(condition)) {
     ac8:	2800      	cmp	r0, #0
     aca:	d100      	bne.n	ace <assert+0x6>
		__asm("BKPT #0");
     acc:	be00      	bkpt	0x0000
	}
	(void)file;
	(void)line;
}
     ace:	4770      	bx	lr

00000ad0 <is_list_element>:
 * \brief Check whether element belongs to list
 */
bool is_list_element(const struct list_descriptor *const list, const void *const element)
{
	struct list_element *it;
	for (it = list->head; it; it = it->next) {
     ad0:	6803      	ldr	r3, [r0, #0]
     ad2:	2b00      	cmp	r3, #0
     ad4:	d003      	beq.n	ade <is_list_element+0xe>
		if (it == element) {
     ad6:	428b      	cmp	r3, r1
     ad8:	d003      	beq.n	ae2 <is_list_element+0x12>
	for (it = list->head; it; it = it->next) {
     ada:	681b      	ldr	r3, [r3, #0]
     adc:	e7f9      	b.n	ad2 <is_list_element+0x2>
			return true;
		}
	}

	return false;
     ade:	2000      	movs	r0, #0
}
     ae0:	4770      	bx	lr
			return true;
     ae2:	2001      	movs	r0, #1
     ae4:	e7fc      	b.n	ae0 <is_list_element+0x10>
	...

00000ae8 <list_insert_as_head>:

/**
 * \brief Insert an element as list head
 */
void list_insert_as_head(struct list_descriptor *const list, void *const element)
{
     ae8:	b570      	push	{r4, r5, r6, lr}
     aea:	0004      	movs	r4, r0
     aec:	000d      	movs	r5, r1
	ASSERT(!is_list_element(list, element));
     aee:	4b06      	ldr	r3, [pc, #24]	; (b08 <list_insert_as_head+0x20>)
     af0:	4798      	blx	r3
     af2:	2301      	movs	r3, #1
     af4:	4058      	eors	r0, r3
     af6:	b2c0      	uxtb	r0, r0
     af8:	2239      	movs	r2, #57	; 0x39
     afa:	4904      	ldr	r1, [pc, #16]	; (b0c <list_insert_as_head+0x24>)
     afc:	4b04      	ldr	r3, [pc, #16]	; (b10 <list_insert_as_head+0x28>)
     afe:	4798      	blx	r3

	((struct list_element *)element)->next = list->head;
     b00:	6823      	ldr	r3, [r4, #0]
     b02:	602b      	str	r3, [r5, #0]
	list->head                             = (struct list_element *)element;
     b04:	6025      	str	r5, [r4, #0]
}
     b06:	bd70      	pop	{r4, r5, r6, pc}
     b08:	00000ad1 	.word	0x00000ad1
     b0c:	000030d4 	.word	0x000030d4
     b10:	00000ac9 	.word	0x00000ac9

00000b14 <list_insert_after>:
/**
 * \brief Insert an element after the given list element
 */
void list_insert_after(void *const after, void *const element)
{
	((struct list_element *)element)->next = ((struct list_element *)after)->next;
     b14:	6803      	ldr	r3, [r0, #0]
     b16:	600b      	str	r3, [r1, #0]
	((struct list_element *)after)->next   = (struct list_element *)element;
     b18:	6001      	str	r1, [r0, #0]
}
     b1a:	4770      	bx	lr

00000b1c <list_remove_head>:
/**
 * \brief Removes list head
 */
void *list_remove_head(struct list_descriptor *const list)
{
	if (list->head) {
     b1c:	6803      	ldr	r3, [r0, #0]
     b1e:	2b00      	cmp	r3, #0
     b20:	d003      	beq.n	b2a <list_remove_head+0xe>
		struct list_element *tmp = list->head;

		list->head = list->head->next;
     b22:	681a      	ldr	r2, [r3, #0]
     b24:	6002      	str	r2, [r0, #0]
		return (void *)tmp;
     b26:	0018      	movs	r0, r3
	}

	return NULL;
}
     b28:	4770      	bx	lr
	return NULL;
     b2a:	2000      	movs	r0, #0
     b2c:	e7fc      	b.n	b28 <list_remove_head+0xc>
	...

00000b30 <_sbrk>:

/**
 * \brief Replacement of C library of _sbrk
 */
extern caddr_t _sbrk(int incr)
{
     b30:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *       prev_heap;

	if (heap == NULL) {
     b32:	4a06      	ldr	r2, [pc, #24]	; (b4c <_sbrk+0x1c>)
     b34:	6812      	ldr	r2, [r2, #0]
     b36:	2a00      	cmp	r2, #0
     b38:	d004      	beq.n	b44 <_sbrk+0x14>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
     b3a:	4a04      	ldr	r2, [pc, #16]	; (b4c <_sbrk+0x1c>)
     b3c:	6810      	ldr	r0, [r2, #0]

	heap += incr;
     b3e:	18c3      	adds	r3, r0, r3
     b40:	6013      	str	r3, [r2, #0]

	return (caddr_t)prev_heap;
}
     b42:	4770      	bx	lr
		heap = (unsigned char *)&_end;
     b44:	4902      	ldr	r1, [pc, #8]	; (b50 <_sbrk+0x20>)
     b46:	4a01      	ldr	r2, [pc, #4]	; (b4c <_sbrk+0x1c>)
     b48:	6011      	str	r1, [r2, #0]
     b4a:	e7f6      	b.n	b3a <_sbrk+0xa>
     b4c:	20000208 	.word	0x20000208
     b50:	20002530 	.word	0x20002530

00000b54 <_close>:
 */
extern int _close(int file)
{
	(void)file;
	return -1;
}
     b54:	2001      	movs	r0, #1
     b56:	4240      	negs	r0, r0
     b58:	4770      	bx	lr

00000b5a <_fstat>:
 * \brief Replacement of C library of _fstat
 */
extern int _fstat(int file, struct stat *st)
{
	(void)file;
	st->st_mode = S_IFCHR;
     b5a:	2380      	movs	r3, #128	; 0x80
     b5c:	019b      	lsls	r3, r3, #6
     b5e:	604b      	str	r3, [r1, #4]

	return 0;
}
     b60:	2000      	movs	r0, #0
     b62:	4770      	bx	lr

00000b64 <_lseek>:
 */
extern int _lseek(int file, int ptr, int dir)
{
	(void)file, (void)ptr, (void)dir;
	return 0;
}
     b64:	2000      	movs	r0, #0
     b66:	4770      	bx	lr

00000b68 <_can_async_init>:

/**
 * \brief Initialize CAN.
 */
int32_t _can_async_init(struct _can_async_device *const dev, void *const hw)
{
     b68:	b5f0      	push	{r4, r5, r6, r7, lr}
	dev->hw = hw;
     b6a:	6001      	str	r1, [r0, #0]
}

static inline void hri_can_set_CCCR_INIT_bit(const void *const hw)
{
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg |= CAN_CCCR_INIT;
     b6c:	698b      	ldr	r3, [r1, #24]
     b6e:	2201      	movs	r2, #1
     b70:	4313      	orrs	r3, r2
     b72:	618b      	str	r3, [r1, #24]
	hri_can_set_CCCR_INIT_bit(dev->hw);
	while (hri_can_get_CCCR_INIT_bit(dev->hw) == 0)
     b74:	6803      	ldr	r3, [r0, #0]
}

static inline bool hri_can_get_CCCR_INIT_bit(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Can *)hw)->CCCR.reg;
     b76:	699a      	ldr	r2, [r3, #24]
     b78:	07d2      	lsls	r2, r2, #31
     b7a:	d5fb      	bpl.n	b74 <_can_async_init+0xc>
}

static inline void hri_can_set_CCCR_CCE_bit(const void *const hw)
{
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg |= CAN_CCCR_CCE;
     b7c:	699a      	ldr	r2, [r3, #24]
     b7e:	2402      	movs	r4, #2
     b80:	4322      	orrs	r2, r4
     b82:	619a      	str	r2, [r3, #24]
		hri_can_write_ILE_reg(dev->hw, CAN_ILE_EINT0);
	}
#endif

#ifdef CONF_CAN1_ENABLED
	if (hw == CAN1) {
     b84:	4b33      	ldr	r3, [pc, #204]	; (c54 <_can_async_init+0xec>)
     b86:	4299      	cmp	r1, r3
     b88:	d00f      	beq.n	baa <_can_async_init+0x42>
		hri_can_write_ILE_reg(dev->hw, CAN_ILE_EINT0);
	}
#endif

	/* Disable CCE to prevent Configuration Change */
	hri_can_clear_CCCR_CCE_bit(dev->hw);
     b8a:	6802      	ldr	r2, [r0, #0]
}

static inline void hri_can_clear_CCCR_CCE_bit(const void *const hw)
{
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg &= ~CAN_CCCR_CCE;
     b8c:	6993      	ldr	r3, [r2, #24]
     b8e:	2102      	movs	r1, #2
     b90:	438b      	bics	r3, r1
     b92:	6193      	str	r3, [r2, #24]
	hri_can_clear_CCCR_INIT_bit(dev->hw);
     b94:	6802      	ldr	r2, [r0, #0]
	((Can *)hw)->CCCR.reg &= ~CAN_CCCR_INIT;
     b96:	6993      	ldr	r3, [r2, #24]
     b98:	3901      	subs	r1, #1
     b9a:	438b      	bics	r3, r1
     b9c:	6193      	str	r3, [r2, #24]
	while (hri_can_get_CCCR_INIT_bit(dev->hw)) {
     b9e:	6803      	ldr	r3, [r0, #0]
	tmp = ((Can *)hw)->CCCR.reg;
     ba0:	699b      	ldr	r3, [r3, #24]
     ba2:	07db      	lsls	r3, r3, #31
     ba4:	d4fb      	bmi.n	b9e <_can_async_init+0x36>
	};

	return ERR_NONE;
}
     ba6:	2000      	movs	r0, #0
     ba8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		_can1_dev    = dev;
     baa:	4b2b      	ldr	r3, [pc, #172]	; (c58 <_can_async_init+0xf0>)
     bac:	001a      	movs	r2, r3
     bae:	c201      	stmia	r2!, {r0}
		dev->context = (void *)&_can1_context;
     bb0:	492a      	ldr	r1, [pc, #168]	; (c5c <_can_async_init+0xf4>)
     bb2:	6181      	str	r1, [r0, #24]
		hri_can_set_CCCR_reg(dev->hw, CONF_CAN1_CCCR_REG);
     bb4:	6801      	ldr	r1, [r0, #0]
}

static inline void hri_can_set_CCCR_reg(const void *const hw, hri_can_cccr_reg_t mask)
{
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg |= mask;
     bb6:	698c      	ldr	r4, [r1, #24]
     bb8:	618c      	str	r4, [r1, #24]
		hri_can_write_MRCFG_reg(dev->hw, CONF_CAN1_MRCFG_REG);
     bba:	6801      	ldr	r1, [r0, #0]
	((Can *)hw)->MRCFG.reg = data;
     bbc:	2400      	movs	r4, #0
     bbe:	608c      	str	r4, [r1, #8]
		hri_can_write_NBTP_reg(dev->hw, CONF_CAN1_BTP_REG);
     bc0:	6801      	ldr	r1, [r0, #0]
}

static inline void hri_can_write_NBTP_reg(const void *const hw, hri_can_nbtp_reg_t data)
{
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->NBTP.reg = data;
     bc2:	4d27      	ldr	r5, [pc, #156]	; (c60 <_can_async_init+0xf8>)
     bc4:	61cd      	str	r5, [r1, #28]
		hri_can_write_DBTP_reg(dev->hw, CONF_CAN1_DBTP_REG);
     bc6:	6801      	ldr	r1, [r0, #0]
	((Can *)hw)->DBTP.reg = data;
     bc8:	4d26      	ldr	r5, [pc, #152]	; (c64 <_can_async_init+0xfc>)
     bca:	60cd      	str	r5, [r1, #12]
		hri_can_write_RXF0C_reg(dev->hw, CONF_CAN1_RXF0C_REG | CAN_RXF0C_F0SA((uint32_t)can1_rx_fifo));
     bcc:	4d26      	ldr	r5, [pc, #152]	; (c68 <_can_async_init+0x100>)
     bce:	042d      	lsls	r5, r5, #16
     bd0:	0c2d      	lsrs	r5, r5, #16
     bd2:	2180      	movs	r1, #128	; 0x80
     bd4:	0289      	lsls	r1, r1, #10
     bd6:	430d      	orrs	r5, r1
}

static inline void hri_can_write_RXF0C_reg(const void *const hw, hri_can_rxf0c_reg_t data)
{
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->RXF0C.reg = data;
     bd8:	26a0      	movs	r6, #160	; 0xa0
     bda:	6807      	ldr	r7, [r0, #0]
     bdc:	51bd      	str	r5, [r7, r6]
}

static inline void hri_can_write_RXESC_reg(const void *const hw, hri_can_rxesc_reg_t data)
{
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->RXESC.reg = data;
     bde:	25bc      	movs	r5, #188	; 0xbc
     be0:	6806      	ldr	r6, [r0, #0]
     be2:	5174      	str	r4, [r6, r5]
}

static inline void hri_can_write_TXESC_reg(const void *const hw, hri_can_txesc_reg_t data)
{
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->TXESC.reg = data;
     be4:	350c      	adds	r5, #12
     be6:	6806      	ldr	r6, [r0, #0]
     be8:	5174      	str	r4, [r6, r5]
		hri_can_write_TXBC_reg(dev->hw, CONF_CAN1_TXBC_REG | CAN_TXBC_TBSA((uint32_t)can1_tx_fifo));
     bea:	4d20      	ldr	r5, [pc, #128]	; (c6c <_can_async_init+0x104>)
     bec:	042d      	lsls	r5, r5, #16
     bee:	0c2d      	lsrs	r5, r5, #16
     bf0:	2680      	movs	r6, #128	; 0x80
     bf2:	04b6      	lsls	r6, r6, #18
     bf4:	4335      	orrs	r5, r6
	((Can *)hw)->TXBC.reg = data;
     bf6:	26c0      	movs	r6, #192	; 0xc0
     bf8:	6807      	ldr	r7, [r0, #0]
     bfa:	51bd      	str	r5, [r7, r6]
		hri_can_write_TXEFC_reg(dev->hw, CONF_CAN1_TXEFC_REG | CAN_TXEFC_EFSA((uint32_t)can1_tx_event_fifo));
     bfc:	0412      	lsls	r2, r2, #16
     bfe:	0c12      	lsrs	r2, r2, #16
     c00:	430a      	orrs	r2, r1
}

static inline void hri_can_write_TXEFC_reg(const void *const hw, hri_can_txefc_reg_t data)
{
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->TXEFC.reg = data;
     c02:	25f0      	movs	r5, #240	; 0xf0
     c04:	6806      	ldr	r6, [r0, #0]
     c06:	5172      	str	r2, [r6, r5]
	((Can *)hw)->GFC.reg = data;
     c08:	3d70      	subs	r5, #112	; 0x70
     c0a:	2228      	movs	r2, #40	; 0x28
     c0c:	6806      	ldr	r6, [r0, #0]
     c0e:	5172      	str	r2, [r6, r5]
		hri_can_write_SIDFC_reg(dev->hw, CONF_CAN1_SIDFC_REG | CAN_SIDFC_FLSSA((uint32_t)can1_rx_std_filter));
     c10:	001a      	movs	r2, r3
     c12:	3214      	adds	r2, #20
     c14:	0412      	lsls	r2, r2, #16
     c16:	0c12      	lsrs	r2, r2, #16
     c18:	430a      	orrs	r2, r1
	((Can *)hw)->SIDFC.reg = data;
     c1a:	2684      	movs	r6, #132	; 0x84
     c1c:	6807      	ldr	r7, [r0, #0]
     c1e:	51ba      	str	r2, [r7, r6]
		hri_can_write_XIDFC_reg(dev->hw, CONF_CAN1_XIDFC_REG | CAN_XIDFC_FLESA((uint32_t)can1_rx_ext_filter));
     c20:	331c      	adds	r3, #28
     c22:	041b      	lsls	r3, r3, #16
     c24:	0c1b      	lsrs	r3, r3, #16
     c26:	430b      	orrs	r3, r1
	((Can *)hw)->XIDFC.reg = data;
     c28:	2288      	movs	r2, #136	; 0x88
     c2a:	6801      	ldr	r1, [r0, #0]
     c2c:	508b      	str	r3, [r1, r2]
	((Can *)hw)->XIDAM.reg = data;
     c2e:	2390      	movs	r3, #144	; 0x90
     c30:	6802      	ldr	r2, [r0, #0]
     c32:	50d4      	str	r4, [r2, r3]
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     c34:	4b0e      	ldr	r3, [pc, #56]	; (c70 <_can_async_init+0x108>)
     c36:	2280      	movs	r2, #128	; 0x80
     c38:	0252      	lsls	r2, r2, #9
     c3a:	515a      	str	r2, [r3, r5]
  __ASM volatile ("dsb 0xF":::"memory");
     c3c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
     c40:	f3bf 8f6f 	isb	sy
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     c44:	21c0      	movs	r1, #192	; 0xc0
     c46:	0049      	lsls	r1, r1, #1
     c48:	505a      	str	r2, [r3, r1]
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     c4a:	601a      	str	r2, [r3, #0]
		hri_can_write_ILE_reg(dev->hw, CAN_ILE_EINT0);
     c4c:	6803      	ldr	r3, [r0, #0]
	((Can *)hw)->ILE.reg = data;
     c4e:	2201      	movs	r2, #1
     c50:	65da      	str	r2, [r3, #92]	; 0x5c
     c52:	e79a      	b.n	b8a <_can_async_init+0x22>
     c54:	42002000 	.word	0x42002000
     c58:	2000020c 	.word	0x2000020c
     c5c:	20000000 	.word	0x20000000
     c60:	06020a07 	.word	0x06020a07
     c64:	00000a33 	.word	0x00000a33
     c68:	200003a4 	.word	0x200003a4
     c6c:	20000384 	.word	0x20000384
     c70:	e000e100 	.word	0xe000e100

00000c74 <_can_async_deinit>:
/**
 * \brief De-initialize CAN.
 */
int32_t _can_async_deinit(struct _can_async_device *const dev)
{
	hri_can_set_CCCR_INIT_bit(dev->hw);
     c74:	6802      	ldr	r2, [r0, #0]
	((Can *)hw)->CCCR.reg |= CAN_CCCR_INIT;
     c76:	6993      	ldr	r3, [r2, #24]
     c78:	2101      	movs	r1, #1
     c7a:	430b      	orrs	r3, r1
     c7c:	6193      	str	r3, [r2, #24]
	dev->hw = NULL;
     c7e:	2300      	movs	r3, #0
     c80:	6003      	str	r3, [r0, #0]
	return ERR_NONE;
}
     c82:	2000      	movs	r0, #0
     c84:	4770      	bx	lr

00000c86 <_can_async_enable>:
/**
 * \brief Enable CAN
 */
int32_t _can_async_enable(struct _can_async_device *const dev)
{
	hri_can_clear_CCCR_INIT_bit(dev->hw);
     c86:	6802      	ldr	r2, [r0, #0]
	((Can *)hw)->CCCR.reg &= ~CAN_CCCR_INIT;
     c88:	6993      	ldr	r3, [r2, #24]
     c8a:	2101      	movs	r1, #1
     c8c:	438b      	bics	r3, r1
     c8e:	6193      	str	r3, [r2, #24]
	return ERR_NONE;
}
     c90:	2000      	movs	r0, #0
     c92:	4770      	bx	lr

00000c94 <_can_async_set_irq_state>:

/**
 * \brief Set CAN Interrupt State
 */
void _can_async_set_irq_state(struct _can_async_device *const dev, enum can_async_callback_type type, bool state)
{
     c94:	b510      	push	{r4, lr}
	uint32_t ie;

	if (type == CAN_ASYNC_RX_CB) {
     c96:	2900      	cmp	r1, #0
     c98:	d009      	beq.n	cae <_can_async_set_irq_state+0x1a>
		hri_can_write_IE_RF0NE_bit(dev->hw, state);
	} else if (type == CAN_ASYNC_TX_CB) {
     c9a:	2901      	cmp	r1, #1
     c9c:	d00e      	beq.n	cbc <_can_async_set_irq_state+0x28>
		hri_can_write_IE_TCE_bit(dev->hw, state);
		hri_can_write_TXBTIE_reg(dev->hw, CAN_TXBTIE_MASK);
	} else if (type == CAN_ASYNC_IRQ_CB) {
     c9e:	2902      	cmp	r1, #2
     ca0:	d10b      	bne.n	cba <_can_async_set_irq_state+0x26>
		ie = hri_can_get_IE_reg(dev->hw, CAN_IE_RF0NE | CAN_IE_TCE);
     ca2:	6802      	ldr	r2, [r0, #0]
	tmp = ((Can *)hw)->IE.reg;
     ca4:	6d53      	ldr	r3, [r2, #84]	; 0x54
	tmp &= mask;
     ca6:	490c      	ldr	r1, [pc, #48]	; (cd8 <_can_async_set_irq_state+0x44>)
     ca8:	400b      	ands	r3, r1
	((Can *)hw)->IE.reg = data;
     caa:	6553      	str	r3, [r2, #84]	; 0x54
		hri_can_write_IE_reg(dev->hw, ie | CONF_CAN0_IE_REG);
	}

	return;
     cac:	e005      	b.n	cba <_can_async_set_irq_state+0x26>
		hri_can_write_IE_RF0NE_bit(dev->hw, state);
     cae:	6801      	ldr	r1, [r0, #0]
	tmp = ((Can *)hw)->IE.reg;
     cb0:	6d4b      	ldr	r3, [r1, #84]	; 0x54
	tmp &= ~CAN_IE_RF0NE;
     cb2:	2001      	movs	r0, #1
     cb4:	4383      	bics	r3, r0
	tmp |= value << CAN_IE_RF0NE_Pos;
     cb6:	431a      	orrs	r2, r3
	((Can *)hw)->IE.reg = tmp;
     cb8:	654a      	str	r2, [r1, #84]	; 0x54
}
     cba:	bd10      	pop	{r4, pc}
		hri_can_write_IE_TCE_bit(dev->hw, state);
     cbc:	6801      	ldr	r1, [r0, #0]
	tmp = ((Can *)hw)->IE.reg;
     cbe:	6d4b      	ldr	r3, [r1, #84]	; 0x54
	tmp &= ~CAN_IE_TCE;
     cc0:	4c06      	ldr	r4, [pc, #24]	; (cdc <_can_async_set_irq_state+0x48>)
     cc2:	4023      	ands	r3, r4
	tmp |= value << CAN_IE_TCE_Pos;
     cc4:	0252      	lsls	r2, r2, #9
     cc6:	431a      	orrs	r2, r3
	((Can *)hw)->IE.reg = tmp;
     cc8:	654a      	str	r2, [r1, #84]	; 0x54
		hri_can_write_TXBTIE_reg(dev->hw, CAN_TXBTIE_MASK);
     cca:	6802      	ldr	r2, [r0, #0]
	((Can *)hw)->TXBTIE.reg = data;
     ccc:	2101      	movs	r1, #1
     cce:	4249      	negs	r1, r1
     cd0:	23e0      	movs	r3, #224	; 0xe0
     cd2:	50d1      	str	r1, [r2, r3]
     cd4:	e7f1      	b.n	cba <_can_async_set_irq_state+0x26>
     cd6:	46c0      	nop			; (mov r8, r8)
     cd8:	00000201 	.word	0x00000201
     cdc:	fffffdff 	.word	0xfffffdff

00000ce0 <_can_async_set_filter>:
/**
 * \brief Set CAN to the specified mode
 */
int32_t _can_async_set_filter(struct _can_async_device *const dev, uint8_t index, enum can_format fmt,
                              struct can_filter *filter)
{
     ce0:	b530      	push	{r4, r5, lr}
	struct _can_standard_message_filter_element *sf;
	struct _can_extended_message_filter_element *ef;

	sf = &((struct _can_context *)dev->context)->rx_std_filter[index];
     ce2:	6984      	ldr	r4, [r0, #24]
     ce4:	0088      	lsls	r0, r1, #2
     ce6:	68e5      	ldr	r5, [r4, #12]
     ce8:	46ac      	mov	ip, r5
     cea:	4460      	add	r0, ip
	ef = &((struct _can_context *)dev->context)->rx_ext_filter[index];
     cec:	6924      	ldr	r4, [r4, #16]
     cee:	00c9      	lsls	r1, r1, #3
     cf0:	1861      	adds	r1, r4, r1

	if (fmt == CAN_FMT_STDID) {
     cf2:	2a00      	cmp	r2, #0
     cf4:	d11d      	bne.n	d32 <_can_async_set_filter+0x52>
		if (filter == NULL) {
     cf6:	2b00      	cmp	r3, #0
     cf8:	d019      	beq.n	d2e <_can_async_set_filter+0x4e>
			sf->S0.val = 0;
			return ERR_NONE;
		}
		sf->S0.val       = filter->mask;
     cfa:	685a      	ldr	r2, [r3, #4]
     cfc:	6002      	str	r2, [r0, #0]
		sf->S0.bit.SFID1 = filter->id;
     cfe:	681b      	ldr	r3, [r3, #0]
     d00:	6802      	ldr	r2, [r0, #0]
     d02:	055b      	lsls	r3, r3, #21
     d04:	095b      	lsrs	r3, r3, #5
     d06:	4917      	ldr	r1, [pc, #92]	; (d64 <_can_async_set_filter+0x84>)
     d08:	400a      	ands	r2, r1
     d0a:	4313      	orrs	r3, r2
     d0c:	6003      	str	r3, [r0, #0]
		sf->S0.bit.SFT   = _CAN_SFT_CLASSIC;
     d0e:	6803      	ldr	r3, [r0, #0]
     d10:	009b      	lsls	r3, r3, #2
     d12:	089b      	lsrs	r3, r3, #2
     d14:	2280      	movs	r2, #128	; 0x80
     d16:	0612      	lsls	r2, r2, #24
     d18:	431a      	orrs	r2, r3
     d1a:	6002      	str	r2, [r0, #0]
		sf->S0.bit.SFEC  = _CAN_SFEC_STF0M;
     d1c:	6802      	ldr	r2, [r0, #0]
     d1e:	4b12      	ldr	r3, [pc, #72]	; (d68 <_can_async_set_filter+0x88>)
     d20:	401a      	ands	r2, r3
     d22:	2380      	movs	r3, #128	; 0x80
     d24:	051b      	lsls	r3, r3, #20
     d26:	4313      	orrs	r3, r2
     d28:	6003      	str	r3, [r0, #0]
		ef->F1.val      = filter->mask;
		ef->F1.bit.EFT  = _CAN_EFT_CLASSIC;
	}

	return ERR_NONE;
}
     d2a:	2000      	movs	r0, #0
     d2c:	bd30      	pop	{r4, r5, pc}
			sf->S0.val = 0;
     d2e:	6003      	str	r3, [r0, #0]
			return ERR_NONE;
     d30:	e7fb      	b.n	d2a <_can_async_set_filter+0x4a>
	} else if (fmt == CAN_FMT_EXTID) {
     d32:	2a01      	cmp	r2, #1
     d34:	d1f9      	bne.n	d2a <_can_async_set_filter+0x4a>
		if (filter == NULL) {
     d36:	2b00      	cmp	r3, #0
     d38:	d012      	beq.n	d60 <_can_async_set_filter+0x80>
		ef->F0.val      = filter->id;
     d3a:	681a      	ldr	r2, [r3, #0]
     d3c:	600a      	str	r2, [r1, #0]
		ef->F0.bit.EFEC = _CAN_EFEC_STF0M;
     d3e:	680a      	ldr	r2, [r1, #0]
     d40:	00d2      	lsls	r2, r2, #3
     d42:	08d2      	lsrs	r2, r2, #3
     d44:	2080      	movs	r0, #128	; 0x80
     d46:	0580      	lsls	r0, r0, #22
     d48:	4310      	orrs	r0, r2
     d4a:	6008      	str	r0, [r1, #0]
		ef->F1.val      = filter->mask;
     d4c:	685b      	ldr	r3, [r3, #4]
     d4e:	604b      	str	r3, [r1, #4]
		ef->F1.bit.EFT  = _CAN_EFT_CLASSIC;
     d50:	684b      	ldr	r3, [r1, #4]
     d52:	009b      	lsls	r3, r3, #2
     d54:	089b      	lsrs	r3, r3, #2
     d56:	2280      	movs	r2, #128	; 0x80
     d58:	0612      	lsls	r2, r2, #24
     d5a:	431a      	orrs	r2, r3
     d5c:	604a      	str	r2, [r1, #4]
     d5e:	e7e4      	b.n	d2a <_can_async_set_filter+0x4a>
			ef->F0.val = 0;
     d60:	600b      	str	r3, [r1, #0]
			return ERR_NONE;
     d62:	e7e2      	b.n	d2a <_can_async_set_filter+0x4a>
     d64:	f800ffff 	.word	0xf800ffff
     d68:	c7ffffff 	.word	0xc7ffffff

00000d6c <CAN1_Handler>:

/*
 * \brief CAN interrupt handler
 */
void CAN1_Handler(void)
{
     d6c:	b570      	push	{r4, r5, r6, lr}
	struct _can_async_device *dev = _can1_dev;
     d6e:	4b1a      	ldr	r3, [pc, #104]	; (dd8 <CAN1_Handler+0x6c>)
     d70:	681d      	ldr	r5, [r3, #0]
	uint32_t                  ir;
	ir = hri_can_read_IR_reg(dev->hw);
     d72:	682b      	ldr	r3, [r5, #0]
	return ((Can *)hw)->IR.reg;
     d74:	6d1c      	ldr	r4, [r3, #80]	; 0x50

	if (ir & CAN_IR_RF0N) {
     d76:	07e3      	lsls	r3, r4, #31
     d78:	d414      	bmi.n	da4 <CAN1_Handler+0x38>
		dev->cb.rx_done(dev);
	}

	if (ir & CAN_IR_TC) {
     d7a:	05a3      	lsls	r3, r4, #22
     d7c:	d416      	bmi.n	dac <CAN1_Handler+0x40>
		dev->cb.tx_done(dev);
	}

	if (ir & CAN_IR_BO) {
     d7e:	01a3      	lsls	r3, r4, #6
     d80:	d418      	bmi.n	db4 <CAN1_Handler+0x48>
		dev->cb.irq_handler(dev, CAN_IRQ_BO);
	}

	if (ir & CAN_IR_EW) {
     d82:	01e3      	lsls	r3, r4, #7
     d84:	d41b      	bmi.n	dbe <CAN1_Handler+0x52>
		dev->cb.irq_handler(dev, CAN_IRQ_EW);
	}

	if (ir & CAN_IR_EP) {
     d86:	0223      	lsls	r3, r4, #8
     d88:	d507      	bpl.n	d9a <CAN1_Handler+0x2e>
		dev->cb.irq_handler(dev, hri_can_get_PSR_EP_bit(dev->hw) ? CAN_IRQ_EP : CAN_IRQ_EA);
     d8a:	68eb      	ldr	r3, [r5, #12]
     d8c:	682a      	ldr	r2, [r5, #0]
	return (((Can *)hw)->PSR.reg & CAN_PSR_EP) >> CAN_PSR_EP_Pos;
     d8e:	6c52      	ldr	r2, [r2, #68]	; 0x44
     d90:	0692      	lsls	r2, r2, #26
     d92:	d519      	bpl.n	dc8 <CAN1_Handler+0x5c>
     d94:	2102      	movs	r1, #2
     d96:	0028      	movs	r0, r5
     d98:	4798      	blx	r3
	}

	if (ir & CAN_IR_RF0L) {
     d9a:	0723      	lsls	r3, r4, #28
     d9c:	d416      	bmi.n	dcc <CAN1_Handler+0x60>
		dev->cb.irq_handler(dev, CAN_IRQ_DO);
	}

	hri_can_write_IR_reg(dev->hw, ir);
     d9e:	682b      	ldr	r3, [r5, #0]
	((Can *)hw)->IR.reg = data;
     da0:	651c      	str	r4, [r3, #80]	; 0x50
}
     da2:	bd70      	pop	{r4, r5, r6, pc}
		dev->cb.rx_done(dev);
     da4:	0028      	movs	r0, r5
     da6:	68ab      	ldr	r3, [r5, #8]
     da8:	4798      	blx	r3
     daa:	e7e6      	b.n	d7a <CAN1_Handler+0xe>
		dev->cb.tx_done(dev);
     dac:	0028      	movs	r0, r5
     dae:	686b      	ldr	r3, [r5, #4]
     db0:	4798      	blx	r3
     db2:	e7e4      	b.n	d7e <CAN1_Handler+0x12>
		dev->cb.irq_handler(dev, CAN_IRQ_BO);
     db4:	2103      	movs	r1, #3
     db6:	0028      	movs	r0, r5
     db8:	68eb      	ldr	r3, [r5, #12]
     dba:	4798      	blx	r3
     dbc:	e7e1      	b.n	d82 <CAN1_Handler+0x16>
		dev->cb.irq_handler(dev, CAN_IRQ_EW);
     dbe:	2100      	movs	r1, #0
     dc0:	0028      	movs	r0, r5
     dc2:	68eb      	ldr	r3, [r5, #12]
     dc4:	4798      	blx	r3
     dc6:	e7de      	b.n	d86 <CAN1_Handler+0x1a>
		dev->cb.irq_handler(dev, hri_can_get_PSR_EP_bit(dev->hw) ? CAN_IRQ_EP : CAN_IRQ_EA);
     dc8:	2101      	movs	r1, #1
     dca:	e7e4      	b.n	d96 <CAN1_Handler+0x2a>
		dev->cb.irq_handler(dev, CAN_IRQ_DO);
     dcc:	2104      	movs	r1, #4
     dce:	0028      	movs	r0, r5
     dd0:	68eb      	ldr	r3, [r5, #12]
     dd2:	4798      	blx	r3
     dd4:	e7e3      	b.n	d9e <CAN1_Handler+0x32>
     dd6:	46c0      	nop			; (mov r8, r8)
     dd8:	2000020c 	.word	0x2000020c

00000ddc <_irq_set>:
/**
 * \brief Set the given IRQ
 */
void _irq_set(uint8_t n)
{
	NVIC_SetPendingIRQ((IRQn_Type)n);
     ddc:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
     dde:	2b00      	cmp	r3, #0
     de0:	db07      	blt.n	df2 <_irq_set+0x16>
    NVIC->ISPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     de2:	231f      	movs	r3, #31
     de4:	4018      	ands	r0, r3
     de6:	3b1e      	subs	r3, #30
     de8:	4083      	lsls	r3, r0
     dea:	2280      	movs	r2, #128	; 0x80
     dec:	0052      	lsls	r2, r2, #1
     dee:	4901      	ldr	r1, [pc, #4]	; (df4 <_irq_set+0x18>)
     df0:	508b      	str	r3, [r1, r2]
}
     df2:	4770      	bx	lr
     df4:	e000e100 	.word	0xe000e100

00000df8 <_get_cycles_for_ms>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
uint32_t _get_cycles_for_ms(const uint16_t ms)
{
     df8:	b510      	push	{r4, lr}
		return (ms * (freq / 100000) + 2) / 3 * 100;
     dfa:	0103      	lsls	r3, r0, #4
     dfc:	1a1b      	subs	r3, r3, r0
     dfe:	015b      	lsls	r3, r3, #5
     e00:	1a18      	subs	r0, r3, r0
     e02:	3002      	adds	r0, #2
     e04:	2103      	movs	r1, #3
     e06:	4b02      	ldr	r3, [pc, #8]	; (e10 <_get_cycles_for_ms+0x18>)
     e08:	4798      	blx	r3
     e0a:	2364      	movs	r3, #100	; 0x64
     e0c:	4358      	muls	r0, r3
	return _get_cycles_for_ms_internal(ms, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
}
     e0e:	bd10      	pop	{r4, pc}
     e10:	00000e6f 	.word	0x00000e6f

00000e14 <_delay_cycles>:
{
#ifndef _UNIT_TEST_
	(void)hw;
	(void)cycles;
#if defined __GNUC__
	__asm(".syntax unified\n"
     e14:	3901      	subs	r1, #1
     e16:	d8fd      	bhi.n	e14 <_delay_cycles>
	__asm("__delay:\n"
	      "subs r1, r1, #1\n"
	      "bhi __delay\n");
#endif
#endif
}
     e18:	4770      	bx	lr
	...

00000e1c <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
     e1c:	b510      	push	{r4, lr}
}

static inline void hri_nvmctrl_set_CTRLB_RWS_bf(const void *const hw, hri_nvmctrl_ctrlb_reg_t mask)
{
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLB.reg |= NVMCTRL_CTRLB_RWS(mask);
     e1e:	4a09      	ldr	r2, [pc, #36]	; (e44 <_init_chip+0x28>)
     e20:	6853      	ldr	r3, [r2, #4]
     e22:	2104      	movs	r1, #4
     e24:	430b      	orrs	r3, r1
     e26:	6053      	str	r3, [r2, #4]
	hri_nvmctrl_set_CTRLB_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);

	_osc32kctrl_init_sources();
     e28:	4b07      	ldr	r3, [pc, #28]	; (e48 <_init_chip+0x2c>)
     e2a:	4798      	blx	r3
	_oscctrl_init_sources();
     e2c:	4b07      	ldr	r3, [pc, #28]	; (e4c <_init_chip+0x30>)
     e2e:	4798      	blx	r3
	_mclk_init();
     e30:	4b07      	ldr	r3, [pc, #28]	; (e50 <_init_chip+0x34>)
     e32:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
#endif
	_oscctrl_init_referenced_generators();
     e34:	4b07      	ldr	r3, [pc, #28]	; (e54 <_init_chip+0x38>)
     e36:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
     e38:	20ff      	movs	r0, #255	; 0xff
     e3a:	4b07      	ldr	r3, [pc, #28]	; (e58 <_init_chip+0x3c>)
     e3c:	4798      	blx	r3

	_div_init();
     e3e:	4b07      	ldr	r3, [pc, #28]	; (e5c <_init_chip+0x40>)
     e40:	4798      	blx	r3
#endif

#if (CONF_PORT_EVCTRL_PORT_0 | CONF_PORT_EVCTRL_PORT_1 | CONF_PORT_EVCTRL_PORT_2 | CONF_PORT_EVCTRL_PORT_3)
	_port_event_init();
#endif
}
     e42:	bd10      	pop	{r4, pc}
     e44:	41004000 	.word	0x41004000
     e48:	000011a5 	.word	0x000011a5
     e4c:	000011c9 	.word	0x000011c9
     e50:	00000f05 	.word	0x00000f05
     e54:	000011cd 	.word	0x000011cd
     e58:	00000ee1 	.word	0x00000ee1
     e5c:	00000e61 	.word	0x00000e61

00000e60 <_div_init>:

static inline void hri_divas_write_CTRLA_DLZ_bit(const void *const hw, bool value)
{
	uint8_t tmp;
	DIVAS_CRITICAL_SECTION_ENTER();
	tmp = ((Divas *)hw)->CTRLA.reg;
     e60:	2290      	movs	r2, #144	; 0x90
     e62:	05d2      	lsls	r2, r2, #23
     e64:	7813      	ldrb	r3, [r2, #0]
	tmp &= ~DIVAS_CTRLA_DLZ;
     e66:	2102      	movs	r1, #2
     e68:	438b      	bics	r3, r1
	tmp |= value << DIVAS_CTRLA_DLZ_Pos;
	((Divas *)hw)->CTRLA.reg = tmp;
     e6a:	7013      	strb	r3, [r2, #0]
 * \brief Initialize hardware for division operation
 */
void _div_init(void)
{
	hri_divas_write_CTRLA_DLZ_bit(DIVAS, CONF_DIVAS_DLZ);
}
     e6c:	4770      	bx	lr

00000e6e <__aeabi_uidiv>:

/**
 * \brief Do unsigned division
 */
uint32_t __aeabi_uidiv(uint32_t numerator, uint32_t denominator)
{
     e6e:	b510      	push	{r4, lr}
     e70:	b082      	sub	sp, #8
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
     e72:	f3ef 8310 	mrs	r3, PRIMASK
	uint32_t res;
	_DIVAS_CRITICAL_ENTER();
     e76:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
     e78:	b672      	cpsid	i
	DIVAS->CTRLA.bit.SIGNED = s;
     e7a:	2390      	movs	r3, #144	; 0x90
     e7c:	05db      	lsls	r3, r3, #23
     e7e:	781a      	ldrb	r2, [r3, #0]
     e80:	2401      	movs	r4, #1
     e82:	43a2      	bics	r2, r4
     e84:	701a      	strb	r2, [r3, #0]
	DIVAS->DIVIDEND.reg     = n;
     e86:	6098      	str	r0, [r3, #8]
	DIVAS->DIVISOR.reg      = d;
     e88:	60d9      	str	r1, [r3, #12]
	while (DIVAS->STATUS.bit.BUSY) {
     e8a:	2390      	movs	r3, #144	; 0x90
     e8c:	05db      	lsls	r3, r3, #23
     e8e:	791b      	ldrb	r3, [r3, #4]
     e90:	07db      	lsls	r3, r3, #31
     e92:	d4fa      	bmi.n	e8a <__aeabi_uidiv+0x1c>
	_divas_div(0, numerator, denominator);
	res = _divas_result32();
     e94:	2390      	movs	r3, #144	; 0x90
     e96:	05db      	lsls	r3, r3, #23
     e98:	6918      	ldr	r0, [r3, #16]
	_DIVAS_CRITICAL_LEAVE();
     e9a:	9b01      	ldr	r3, [sp, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
     e9c:	f383 8810 	msr	PRIMASK, r3
	return res;
}
     ea0:	b002      	add	sp, #8
     ea2:	bd10      	pop	{r4, pc}

00000ea4 <__aeabi_uidivmod>:

/**
 * \brief Do unsigned division, return result and remainder
 */
uint64_t __aeabi_uidivmod(unsigned numerator, unsigned denominator)
{
     ea4:	b510      	push	{r4, lr}
     ea6:	b082      	sub	sp, #8
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
     ea8:	f3ef 8310 	mrs	r3, PRIMASK
	uint64_t res;
	_DIVAS_CRITICAL_ENTER();
     eac:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
     eae:	b672      	cpsid	i
	DIVAS->CTRLA.bit.SIGNED = s;
     eb0:	2390      	movs	r3, #144	; 0x90
     eb2:	05db      	lsls	r3, r3, #23
     eb4:	781a      	ldrb	r2, [r3, #0]
     eb6:	2401      	movs	r4, #1
     eb8:	43a2      	bics	r2, r4
     eba:	701a      	strb	r2, [r3, #0]
	DIVAS->DIVIDEND.reg     = n;
     ebc:	6098      	str	r0, [r3, #8]
	DIVAS->DIVISOR.reg      = d;
     ebe:	60d9      	str	r1, [r3, #12]
	while (DIVAS->STATUS.bit.BUSY) {
     ec0:	2390      	movs	r3, #144	; 0x90
     ec2:	05db      	lsls	r3, r3, #23
     ec4:	791b      	ldrb	r3, [r3, #4]
     ec6:	07db      	lsls	r3, r3, #31
     ec8:	d4fa      	bmi.n	ec0 <__aeabi_uidivmod+0x1c>
	_divas_div(0, numerator, denominator);
	res = _divas_result64();
     eca:	4b04      	ldr	r3, [pc, #16]	; (edc <__aeabi_uidivmod+0x38>)
     ecc:	6818      	ldr	r0, [r3, #0]
     ece:	6859      	ldr	r1, [r3, #4]
	_DIVAS_CRITICAL_LEAVE();
     ed0:	9b01      	ldr	r3, [sp, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
     ed2:	f383 8810 	msr	PRIMASK, r3
	return res;
}
     ed6:	b002      	add	sp, #8
     ed8:	bd10      	pop	{r4, pc}
     eda:	46c0      	nop			; (mov r8, r8)
     edc:	48000010 	.word	0x48000010

00000ee0 <_gclk_init_generators_by_fref>:

void _gclk_init_generators_by_fref(uint32_t bm)
{

#if CONF_GCLK_GENERATOR_0_CONFIG == 1
	if (bm & (1ul << 0)) {
     ee0:	07c3      	lsls	r3, r0, #31
     ee2:	d507      	bpl.n	ef4 <_gclk_init_generators_by_fref+0x14>
	((Gclk *)hw)->GENCTRL[index].reg = data;
     ee4:	4a04      	ldr	r2, [pc, #16]	; (ef8 <_gclk_init_generators_by_fref+0x18>)
     ee6:	4b05      	ldr	r3, [pc, #20]	; (efc <_gclk_init_generators_by_fref+0x1c>)
     ee8:	621a      	str	r2, [r3, #32]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
     eea:	4b04      	ldr	r3, [pc, #16]	; (efc <_gclk_init_generators_by_fref+0x1c>)
     eec:	685a      	ldr	r2, [r3, #4]
     eee:	4b04      	ldr	r3, [pc, #16]	; (f00 <_gclk_init_generators_by_fref+0x20>)
     ef0:	421a      	tst	r2, r3
     ef2:	d1fa      	bne.n	eea <_gclk_init_generators_by_fref+0xa>
		        | (CONF_GCLK_GEN_8_DIVSEL << GCLK_GENCTRL_DIVSEL_Pos) | (CONF_GCLK_GEN_8_OE << GCLK_GENCTRL_OE_Pos)
		        | (CONF_GCLK_GEN_8_OOV << GCLK_GENCTRL_OOV_Pos) | (CONF_GCLK_GEN_8_IDC << GCLK_GENCTRL_IDC_Pos)
		        | (CONF_GCLK_GENERATOR_8_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_8_SOURCE);
	}
#endif
}
     ef4:	4770      	bx	lr
     ef6:	46c0      	nop			; (mov r8, r8)
     ef8:	00010107 	.word	0x00010107
     efc:	40001c00 	.word	0x40001c00
     f00:	000007fd 	.word	0x000007fd

00000f04 <_mclk_init>:
	((Mclk *)hw)->CPUDIV.reg = data;
     f04:	2201      	movs	r2, #1
     f06:	4b01      	ldr	r3, [pc, #4]	; (f0c <_mclk_init+0x8>)
     f08:	711a      	strb	r2, [r3, #4]
 */
void _mclk_init(void)
{
	void *hw = (void *)MCLK;
	hri_mclk_write_CPUDIV_reg(hw, MCLK_CPUDIV_CPUDIV(CONF_MCLK_CPUDIV));
}
     f0a:	4770      	bx	lr
     f0c:	40000800 	.word	0x40000800

00000f10 <_flash_erase_row>:
	return (((Nvmctrl *)hw)->INTFLAG.reg & NVMCTRL_INTFLAG_READY) >> NVMCTRL_INTFLAG_READY_Pos;
     f10:	7d03      	ldrb	r3, [r0, #20]
 * \param[in]  hw            The pointer to hardware instance
 * \param[in]  dst_addr      Destination page address to erase
 */
static void _flash_erase_row(void *const hw, const uint32_t dst_addr, uint32_t nvmctrl_cmd)
{
	while (!hri_nvmctrl_get_interrupt_READY_bit(hw)) {
     f12:	07db      	lsls	r3, r3, #31
     f14:	d5fc      	bpl.n	f10 <_flash_erase_row>
}

static inline void hri_nvmctrl_clear_STATUS_reg(const void *const hw, hri_nvmctrl_status_reg_t mask)
{
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->STATUS.reg = mask;
     f16:	2320      	movs	r3, #32
     f18:	33ff      	adds	r3, #255	; 0xff
     f1a:	8303      	strh	r3, [r0, #24]

	/* Clear flags */
	hri_nvmctrl_clear_STATUS_reg(hw, NVMCTRL_STATUS_MASK);

	/* Set address and command */
	hri_nvmctrl_write_ADDR_reg(hw, dst_addr / 2);
     f1c:	0849      	lsrs	r1, r1, #1
	((Nvmctrl *)hw)->ADDR.reg = data;
     f1e:	61c1      	str	r1, [r0, #28]
	hri_nvmctrl_write_CTRLA_reg(hw, nvmctrl_cmd | NVMCTRL_CTRLA_CMDEX_KEY);
     f20:	4b02      	ldr	r3, [pc, #8]	; (f2c <_flash_erase_row+0x1c>)
     f22:	431a      	orrs	r2, r3
     f24:	b292      	uxth	r2, r2
	((Nvmctrl *)hw)->CTRLA.reg = data;
     f26:	8002      	strh	r2, [r0, #0]
}
     f28:	4770      	bx	lr
     f2a:	46c0      	nop			; (mov r8, r8)
     f2c:	ffffa500 	.word	0xffffa500

00000f30 <_flash_program>:
 *                           write is stored
 * \param[in] size           The size of data to write to a page
 */
static void _flash_program(void *const hw, const uint32_t dst_addr, const uint8_t *buffer, const uint16_t size,
                           uint32_t nvmctrl_cmd)
{
     f30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     f32:	0004      	movs	r4, r0
     f34:	000f      	movs	r7, r1
     f36:	0016      	movs	r6, r2
     f38:	001d      	movs	r5, r3
	ASSERT(!(dst_addr % 2));
     f3a:	2001      	movs	r0, #1
     f3c:	4008      	ands	r0, r1
     f3e:	4243      	negs	r3, r0
     f40:	4158      	adcs	r0, r3
     f42:	b2c0      	uxtb	r0, r0
     f44:	22c5      	movs	r2, #197	; 0xc5
     f46:	0052      	lsls	r2, r2, #1
     f48:	4915      	ldr	r1, [pc, #84]	; (fa0 <_flash_program+0x70>)
     f4a:	4b16      	ldr	r3, [pc, #88]	; (fa4 <_flash_program+0x74>)
     f4c:	4798      	blx	r3

	uint32_t nvm_address = dst_addr / 2;
     f4e:	0879      	lsrs	r1, r7, #1
	return (((Nvmctrl *)hw)->INTFLAG.reg & NVMCTRL_INTFLAG_READY) >> NVMCTRL_INTFLAG_READY_Pos;
     f50:	7d23      	ldrb	r3, [r4, #20]
	uint16_t i, data;

	while (!hri_nvmctrl_get_interrupt_READY_bit(hw)) {
     f52:	07db      	lsls	r3, r3, #31
     f54:	d5fc      	bpl.n	f50 <_flash_program+0x20>
	((Nvmctrl *)hw)->CTRLA.reg = data;
     f56:	4b14      	ldr	r3, [pc, #80]	; (fa8 <_flash_program+0x78>)
     f58:	8023      	strh	r3, [r4, #0]
	return (((Nvmctrl *)hw)->INTFLAG.reg & NVMCTRL_INTFLAG_READY) >> NVMCTRL_INTFLAG_READY_Pos;
     f5a:	7d23      	ldrb	r3, [r4, #20]
		/* Wait until this module isn't busy */
	}

	hri_nvmctrl_write_CTRLA_reg(hw, NVMCTRL_CTRLA_CMD_PBC | NVMCTRL_CTRLA_CMDEX_KEY);

	while (!hri_nvmctrl_get_interrupt_READY_bit(hw)) {
     f5c:	07db      	lsls	r3, r3, #31
     f5e:	d5fc      	bpl.n	f5a <_flash_program+0x2a>
	((Nvmctrl *)hw)->STATUS.reg = mask;
     f60:	2320      	movs	r3, #32
     f62:	33ff      	adds	r3, #255	; 0xff
     f64:	8323      	strh	r3, [r4, #24]
	uint32_t nvm_address = dst_addr / 2;
     f66:	000a      	movs	r2, r1
	}

	/* Clear flags */
	hri_nvmctrl_clear_STATUS_reg(hw, NVMCTRL_STATUS_MASK);

	for (i = 0; i < size; i += 2) {
     f68:	2300      	movs	r3, #0
     f6a:	e004      	b.n	f76 <_flash_program+0x46>
		data = buffer[i];
		if (i < NVMCTRL_PAGE_SIZE - 1) {
			data |= (buffer[i + 1] << 8);
		}
		NVM_MEMORY[nvm_address++] = data;
     f6c:	0057      	lsls	r7, r2, #1
     f6e:	8038      	strh	r0, [r7, #0]
	for (i = 0; i < size; i += 2) {
     f70:	3302      	adds	r3, #2
     f72:	b29b      	uxth	r3, r3
		NVM_MEMORY[nvm_address++] = data;
     f74:	3201      	adds	r2, #1
	for (i = 0; i < size; i += 2) {
     f76:	42ab      	cmp	r3, r5
     f78:	d208      	bcs.n	f8c <_flash_program+0x5c>
		data = buffer[i];
     f7a:	5cf7      	ldrb	r7, [r6, r3]
     f7c:	b2b8      	uxth	r0, r7
		if (i < NVMCTRL_PAGE_SIZE - 1) {
     f7e:	2b3e      	cmp	r3, #62	; 0x3e
     f80:	d8f4      	bhi.n	f6c <_flash_program+0x3c>
			data |= (buffer[i + 1] << 8);
     f82:	18f0      	adds	r0, r6, r3
     f84:	7840      	ldrb	r0, [r0, #1]
     f86:	0200      	lsls	r0, r0, #8
     f88:	4338      	orrs	r0, r7
     f8a:	e7ef      	b.n	f6c <_flash_program+0x3c>
	return (((Nvmctrl *)hw)->INTFLAG.reg & NVMCTRL_INTFLAG_READY) >> NVMCTRL_INTFLAG_READY_Pos;
     f8c:	7d23      	ldrb	r3, [r4, #20]
	}

	while (!hri_nvmctrl_get_interrupt_READY_bit(hw)) {
     f8e:	07db      	lsls	r3, r3, #31
     f90:	d5fc      	bpl.n	f8c <_flash_program+0x5c>
	((Nvmctrl *)hw)->ADDR.reg = data;
     f92:	61e1      	str	r1, [r4, #28]
		/* Wait until this module isn't busy */
	}

	hri_nvmctrl_write_ADDR_reg(hw, dst_addr / 2);
	hri_nvmctrl_write_CTRLA_reg(hw, nvmctrl_cmd | NVMCTRL_CTRLA_CMDEX_KEY);
     f94:	4b05      	ldr	r3, [pc, #20]	; (fac <_flash_program+0x7c>)
     f96:	9a06      	ldr	r2, [sp, #24]
     f98:	4313      	orrs	r3, r2
     f9a:	b29b      	uxth	r3, r3
	((Nvmctrl *)hw)->CTRLA.reg = data;
     f9c:	8023      	strh	r3, [r4, #0]
}
     f9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     fa0:	000030f4 	.word	0x000030f4
     fa4:	00000ac9 	.word	0x00000ac9
     fa8:	ffffa544 	.word	0xffffa544
     fac:	ffffa500 	.word	0xffffa500

00000fb0 <_flash_init>:
{
     fb0:	b570      	push	{r4, r5, r6, lr}
     fb2:	0005      	movs	r5, r0
     fb4:	000c      	movs	r4, r1
	ASSERT(device && (hw == NVMCTRL));
     fb6:	2800      	cmp	r0, #0
     fb8:	d01c      	beq.n	ff4 <_flash_init+0x44>
     fba:	4b10      	ldr	r3, [pc, #64]	; (ffc <_flash_init+0x4c>)
     fbc:	4299      	cmp	r1, r3
     fbe:	d01b      	beq.n	ff8 <_flash_init+0x48>
     fc0:	2000      	movs	r0, #0
     fc2:	2246      	movs	r2, #70	; 0x46
     fc4:	490e      	ldr	r1, [pc, #56]	; (1000 <_flash_init+0x50>)
     fc6:	4b0f      	ldr	r3, [pc, #60]	; (1004 <_flash_init+0x54>)
     fc8:	4798      	blx	r3
	device->hw = hw;
     fca:	612c      	str	r4, [r5, #16]
	tmp = ((Nvmctrl *)hw)->CTRLB.reg;
     fcc:	6862      	ldr	r2, [r4, #4]
	tmp &= mask;
     fce:	239e      	movs	r3, #158	; 0x9e
     fd0:	4013      	ands	r3, r2
	((Nvmctrl *)hw)->CTRLB.reg = data;
     fd2:	6063      	str	r3, [r4, #4]
	_nvm_dev = device;
     fd4:	4b0c      	ldr	r3, [pc, #48]	; (1008 <_flash_init+0x58>)
     fd6:	601d      	str	r5, [r3, #0]
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     fd8:	4b0c      	ldr	r3, [pc, #48]	; (100c <_flash_init+0x5c>)
     fda:	2240      	movs	r2, #64	; 0x40
     fdc:	2180      	movs	r1, #128	; 0x80
     fde:	505a      	str	r2, [r3, r1]
  __ASM volatile ("dsb 0xF":::"memory");
     fe0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
     fe4:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     fe8:	3101      	adds	r1, #1
     fea:	31ff      	adds	r1, #255	; 0xff
     fec:	505a      	str	r2, [r3, r1]
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     fee:	601a      	str	r2, [r3, #0]
}
     ff0:	2000      	movs	r0, #0
     ff2:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(device && (hw == NVMCTRL));
     ff4:	2000      	movs	r0, #0
     ff6:	e7e4      	b.n	fc2 <_flash_init+0x12>
     ff8:	2001      	movs	r0, #1
     ffa:	e7e2      	b.n	fc2 <_flash_init+0x12>
     ffc:	41004000 	.word	0x41004000
    1000:	000030f4 	.word	0x000030f4
    1004:	00000ac9 	.word	0x00000ac9
    1008:	20000238 	.word	0x20000238
    100c:	e000e100 	.word	0xe000e100

00001010 <_flash_deinit>:
	device->hw = NULL;
    1010:	2300      	movs	r3, #0
    1012:	6103      	str	r3, [r0, #16]
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1014:	2140      	movs	r1, #64	; 0x40
    1016:	3380      	adds	r3, #128	; 0x80
    1018:	4a03      	ldr	r2, [pc, #12]	; (1028 <_flash_deinit+0x18>)
    101a:	50d1      	str	r1, [r2, r3]
  __ASM volatile ("dsb 0xF":::"memory");
    101c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1020:	f3bf 8f6f 	isb	sy
}
    1024:	4770      	bx	lr
    1026:	46c0      	nop			; (mov r8, r8)
    1028:	e000e100 	.word	0xe000e100

0000102c <_flash_get_page_size>:
}
    102c:	2040      	movs	r0, #64	; 0x40
    102e:	4770      	bx	lr

00001030 <_flash_get_total_pages>:
}
    1030:	2080      	movs	r0, #128	; 0x80
    1032:	0140      	lsls	r0, r0, #5
    1034:	4770      	bx	lr

00001036 <_flash_read>:
{
    1036:	b570      	push	{r4, r5, r6, lr}
	uint32_t nvm_address = src_addr / 2;
    1038:	084c      	lsrs	r4, r1, #1
	while (!hri_nvmctrl_get_interrupt_READY_bit(device->hw)) {
    103a:	6905      	ldr	r5, [r0, #16]
	return (((Nvmctrl *)hw)->INTFLAG.reg & NVMCTRL_INTFLAG_READY) >> NVMCTRL_INTFLAG_READY_Pos;
    103c:	7d2e      	ldrb	r6, [r5, #20]
    103e:	07f6      	lsls	r6, r6, #31
    1040:	d5fb      	bpl.n	103a <_flash_read+0x4>
	((Nvmctrl *)hw)->STATUS.reg = mask;
    1042:	2020      	movs	r0, #32
    1044:	30ff      	adds	r0, #255	; 0xff
    1046:	8328      	strh	r0, [r5, #24]
	if (src_addr % 2) {
    1048:	07c8      	lsls	r0, r1, #31
    104a:	d507      	bpl.n	105c <_flash_read+0x26>
		data      = NVM_MEMORY[nvm_address++];
    104c:	3401      	adds	r4, #1
    104e:	2001      	movs	r0, #1
    1050:	4381      	bics	r1, r0
    1052:	8809      	ldrh	r1, [r1, #0]
		buffer[0] = data >> 8;
    1054:	0a09      	lsrs	r1, r1, #8
    1056:	7011      	strb	r1, [r2, #0]
		i         = 1;
    1058:	2101      	movs	r1, #1
    105a:	e003      	b.n	1064 <_flash_read+0x2e>
		i = 0;
    105c:	2100      	movs	r1, #0
    105e:	e001      	b.n	1064 <_flash_read+0x2e>
		i += 2;
    1060:	3102      	adds	r1, #2
		data      = NVM_MEMORY[nvm_address++];
    1062:	002c      	movs	r4, r5
	while (i < length) {
    1064:	4299      	cmp	r1, r3
    1066:	d20b      	bcs.n	1080 <_flash_read+0x4a>
		data      = NVM_MEMORY[nvm_address++];
    1068:	1c65      	adds	r5, r4, #1
    106a:	0064      	lsls	r4, r4, #1
    106c:	8820      	ldrh	r0, [r4, #0]
    106e:	b280      	uxth	r0, r0
		buffer[i] = (data & 0xFF);
    1070:	5450      	strb	r0, [r2, r1]
		if (i < (length - 1)) {
    1072:	1e5c      	subs	r4, r3, #1
    1074:	42a1      	cmp	r1, r4
    1076:	d2f3      	bcs.n	1060 <_flash_read+0x2a>
			buffer[i + 1] = (data >> 8);
    1078:	1c4c      	adds	r4, r1, #1
    107a:	0a00      	lsrs	r0, r0, #8
    107c:	5510      	strb	r0, [r2, r4]
    107e:	e7ef      	b.n	1060 <_flash_read+0x2a>
}
    1080:	bd70      	pop	{r4, r5, r6, pc}
	...

00001084 <_flash_write>:
{
    1084:	b5f0      	push	{r4, r5, r6, r7, lr}
    1086:	46de      	mov	lr, fp
    1088:	4657      	mov	r7, sl
    108a:	464e      	mov	r6, r9
    108c:	4645      	mov	r5, r8
    108e:	b5e0      	push	{r5, r6, r7, lr}
    1090:	b0c5      	sub	sp, #276	; 0x114
    1092:	4681      	mov	r9, r0
    1094:	0016      	movs	r6, r2
    1096:	001d      	movs	r5, r3
	uint32_t wr_start_addr = dst_addr;
    1098:	000c      	movs	r4, r1
    109a:	e048      	b.n	112e <_flash_write+0xaa>
			_flash_read(device, row_start_addr + i * NVMCTRL_PAGE_SIZE, tmp_buffer[i], NVMCTRL_PAGE_SIZE);
    109c:	4653      	mov	r3, sl
    109e:	0199      	lsls	r1, r3, #6
    10a0:	ab04      	add	r3, sp, #16
    10a2:	185a      	adds	r2, r3, r1
    10a4:	4441      	add	r1, r8
    10a6:	2340      	movs	r3, #64	; 0x40
    10a8:	4648      	mov	r0, r9
    10aa:	4f29      	ldr	r7, [pc, #164]	; (1150 <_flash_write+0xcc>)
    10ac:	47b8      	blx	r7
		for (i = 0; i < NVMCTRL_ROW_PAGES; i++) {
    10ae:	2301      	movs	r3, #1
    10b0:	469c      	mov	ip, r3
    10b2:	44e2      	add	sl, ip
    10b4:	4653      	mov	r3, sl
    10b6:	2b03      	cmp	r3, #3
    10b8:	d9f0      	bls.n	109c <_flash_write+0x18>
		j = (wr_start_addr - row_start_addr) / NVMCTRL_PAGE_SIZE;
    10ba:	4643      	mov	r3, r8
    10bc:	1ae3      	subs	r3, r4, r3
    10be:	0999      	lsrs	r1, r3, #6
		k = wr_start_addr - row_start_addr - j * NVMCTRL_PAGE_SIZE;
    10c0:	223f      	movs	r2, #63	; 0x3f
    10c2:	4013      	ands	r3, r2
		while ((wr_start_addr <= row_end_addr) && (length > 0)) {
    10c4:	e002      	b.n	10cc <_flash_write+0x48>
			wr_start_addr++;
    10c6:	3401      	adds	r4, #1
			buffer++;
    10c8:	3601      	adds	r6, #1
			length--;
    10ca:	3d01      	subs	r5, #1
		while ((wr_start_addr <= row_end_addr) && (length > 0)) {
    10cc:	9a03      	ldr	r2, [sp, #12]
    10ce:	4294      	cmp	r4, r2
    10d0:	d80d      	bhi.n	10ee <_flash_write+0x6a>
    10d2:	2d00      	cmp	r5, #0
    10d4:	d00b      	beq.n	10ee <_flash_write+0x6a>
			tmp_buffer[j][k] = *buffer;
    10d6:	7830      	ldrb	r0, [r6, #0]
    10d8:	018a      	lsls	r2, r1, #6
    10da:	af04      	add	r7, sp, #16
    10dc:	46bc      	mov	ip, r7
    10de:	4462      	add	r2, ip
    10e0:	54d0      	strb	r0, [r2, r3]
			k                = (k + 1) % NVMCTRL_PAGE_SIZE;
    10e2:	3301      	adds	r3, #1
    10e4:	223f      	movs	r2, #63	; 0x3f
    10e6:	4013      	ands	r3, r2
			if (0 == k) {
    10e8:	d1ed      	bne.n	10c6 <_flash_write+0x42>
				j++;
    10ea:	3101      	adds	r1, #1
    10ec:	e7eb      	b.n	10c6 <_flash_write+0x42>
		_flash_erase_row(device->hw, row_start_addr, NVMCTRL_CTRLA_CMD_ER);
    10ee:	2202      	movs	r2, #2
    10f0:	4641      	mov	r1, r8
    10f2:	464b      	mov	r3, r9
    10f4:	6918      	ldr	r0, [r3, #16]
    10f6:	4b17      	ldr	r3, [pc, #92]	; (1154 <_flash_write+0xd0>)
    10f8:	4798      	blx	r3
		for (i = 0; i < NVMCTRL_ROW_PAGES; i++) {
    10fa:	2300      	movs	r3, #0
    10fc:	469a      	mov	sl, r3
    10fe:	e00e      	b.n	111e <_flash_write+0x9a>
			               row_start_addr + i * NVMCTRL_PAGE_SIZE,
    1100:	4653      	mov	r3, sl
    1102:	0199      	lsls	r1, r3, #6
			               tmp_buffer[i],
    1104:	ab04      	add	r3, sp, #16
    1106:	185a      	adds	r2, r3, r1
			_flash_program(device->hw,
    1108:	4441      	add	r1, r8
    110a:	2304      	movs	r3, #4
    110c:	9300      	str	r3, [sp, #0]
    110e:	333c      	adds	r3, #60	; 0x3c
    1110:	4648      	mov	r0, r9
    1112:	6900      	ldr	r0, [r0, #16]
    1114:	4f10      	ldr	r7, [pc, #64]	; (1158 <_flash_write+0xd4>)
    1116:	47b8      	blx	r7
		for (i = 0; i < NVMCTRL_ROW_PAGES; i++) {
    1118:	2301      	movs	r3, #1
    111a:	469c      	mov	ip, r3
    111c:	44e2      	add	sl, ip
    111e:	4653      	mov	r3, sl
    1120:	2b03      	cmp	r3, #3
    1122:	d9ed      	bls.n	1100 <_flash_write+0x7c>
	} while (row_end_addr < (wr_start_addr + length - 1));
    1124:	192b      	adds	r3, r5, r4
    1126:	3b01      	subs	r3, #1
    1128:	9a03      	ldr	r2, [sp, #12]
    112a:	429a      	cmp	r2, r3
    112c:	d209      	bcs.n	1142 <_flash_write+0xbe>
		row_start_addr = wr_start_addr & ~((NVMCTRL_PAGE_SIZE * NVMCTRL_ROW_PAGES) - 1);
    112e:	23ff      	movs	r3, #255	; 0xff
    1130:	0022      	movs	r2, r4
    1132:	439a      	bics	r2, r3
    1134:	4690      	mov	r8, r2
		row_end_addr   = row_start_addr + NVMCTRL_ROW_PAGES * NVMCTRL_PAGE_SIZE - 1;
    1136:	0017      	movs	r7, r2
    1138:	37ff      	adds	r7, #255	; 0xff
    113a:	9703      	str	r7, [sp, #12]
		for (i = 0; i < NVMCTRL_ROW_PAGES; i++) {
    113c:	2300      	movs	r3, #0
    113e:	469a      	mov	sl, r3
    1140:	e7b8      	b.n	10b4 <_flash_write+0x30>
}
    1142:	b045      	add	sp, #276	; 0x114
    1144:	bc3c      	pop	{r2, r3, r4, r5}
    1146:	4690      	mov	r8, r2
    1148:	4699      	mov	r9, r3
    114a:	46a2      	mov	sl, r4
    114c:	46ab      	mov	fp, r5
    114e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1150:	00001037 	.word	0x00001037
    1154:	00000f11 	.word	0x00000f11
    1158:	00000f31 	.word	0x00000f31

0000115c <_flash_is_locked>:
	region_id = dst_addr / (NVMCTRL_FLASH_SIZE / 16);
    115c:	0b89      	lsrs	r1, r1, #14
	return !(hri_nvmctrl_get_LOCK_reg(device->hw, 1 << region_id));
    115e:	6902      	ldr	r2, [r0, #16]
    1160:	0409      	lsls	r1, r1, #16
    1162:	0c09      	lsrs	r1, r1, #16
    1164:	2301      	movs	r3, #1
    1166:	408b      	lsls	r3, r1
	tmp = ((Nvmctrl *)hw)->LOCK.reg;
    1168:	8c10      	ldrh	r0, [r2, #32]
	tmp &= mask;
    116a:	4018      	ands	r0, r3
    116c:	4243      	negs	r3, r0
    116e:	4158      	adcs	r0, r3
    1170:	b2c0      	uxtb	r0, r0
}
    1172:	4770      	bx	lr

00001174 <NVMCTRL_Handler>:

/**
 * \internal NVM interrupt handler
 */
void NVMCTRL_Handler(void)
{
    1174:	b510      	push	{r4, lr}
	void *const hw = _nvm_dev->hw;
    1176:	4b0a      	ldr	r3, [pc, #40]	; (11a0 <NVMCTRL_Handler+0x2c>)
    1178:	6818      	ldr	r0, [r3, #0]
    117a:	6903      	ldr	r3, [r0, #16]
	return (((Nvmctrl *)hw)->INTFLAG.reg & NVMCTRL_INTFLAG_READY) >> NVMCTRL_INTFLAG_READY_Pos;
    117c:	7d1a      	ldrb	r2, [r3, #20]

	if (hri_nvmctrl_get_interrupt_READY_bit(hw)) {
    117e:	07d2      	lsls	r2, r2, #31
    1180:	d504      	bpl.n	118c <NVMCTRL_Handler+0x18>
		if (NULL != _nvm_dev->flash_cb.ready_cb) {
    1182:	6803      	ldr	r3, [r0, #0]
    1184:	2b00      	cmp	r3, #0
    1186:	d000      	beq.n	118a <NVMCTRL_Handler+0x16>
			_nvm_dev->flash_cb.ready_cb(_nvm_dev);
    1188:	4798      	blx	r3
		hri_nvmctrl_clear_interrupt_ERROR_bit(hw);
		if (NULL != _nvm_dev->flash_cb.error_cb) {
			_nvm_dev->flash_cb.error_cb(_nvm_dev);
		}
	}
}
    118a:	bd10      	pop	{r4, pc}
	return (((Nvmctrl *)hw)->INTFLAG.reg & NVMCTRL_INTFLAG_ERROR) >> NVMCTRL_INTFLAG_ERROR_Pos;
    118c:	7d1a      	ldrb	r2, [r3, #20]
	} else if (hri_nvmctrl_get_interrupt_ERROR_bit(hw)) {
    118e:	0792      	lsls	r2, r2, #30
    1190:	d5fb      	bpl.n	118a <NVMCTRL_Handler+0x16>
	((Nvmctrl *)hw)->INTFLAG.reg = NVMCTRL_INTFLAG_ERROR;
    1192:	2202      	movs	r2, #2
    1194:	751a      	strb	r2, [r3, #20]
		if (NULL != _nvm_dev->flash_cb.error_cb) {
    1196:	6843      	ldr	r3, [r0, #4]
    1198:	2b00      	cmp	r3, #0
    119a:	d0f6      	beq.n	118a <NVMCTRL_Handler+0x16>
			_nvm_dev->flash_cb.error_cb(_nvm_dev);
    119c:	4798      	blx	r3
}
    119e:	e7f4      	b.n	118a <NVMCTRL_Handler+0x16>
    11a0:	20000238 	.word	0x20000238

000011a4 <_osc32kctrl_init_sources>:
}

static inline void hri_osc32kctrl_write_XOSC32K_reg(const void *const hw, hri_osc32kctrl_xosc32k_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->XOSC32K.reg = data;
    11a4:	4a07      	ldr	r2, [pc, #28]	; (11c4 <_osc32kctrl_init_sources+0x20>)
    11a6:	238e      	movs	r3, #142	; 0x8e
    11a8:	8293      	strh	r3, [r2, #20]
}

static inline void hri_osc32kctrl_write_CFDCTRL_reg(const void *const hw, hri_osc32kctrl_cfdctrl_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->CFDCTRL.reg = data;
    11aa:	2300      	movs	r3, #0
    11ac:	7593      	strb	r3, [r2, #22]
}

static inline void hri_osc32kctrl_write_EVCTRL_reg(const void *const hw, hri_osc32kctrl_evctrl_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->EVCTRL.reg = data;
    11ae:	75d3      	strb	r3, [r2, #23]
}

static inline hri_osc32kctrl_osculp32k_reg_t hri_osc32kctrl_read_OSCULP32K_CALIB_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Osc32kctrl *)hw)->OSCULP32K.reg;
    11b0:	69d3      	ldr	r3, [r2, #28]
	tmp = (tmp & OSC32KCTRL_OSCULP32K_CALIB_Msk) >> OSC32KCTRL_OSCULP32K_CALIB_Pos;
    11b2:	0a1b      	lsrs	r3, r3, #8
	calib = hri_osc32kctrl_read_OSCULP32K_CALIB_bf(hw);
	hri_osc32kctrl_write_OSCULP32K_reg(hw,
#if CONF_OSC32K_CALIB_ENABLE == 1
	                                   OSC32KCTRL_OSCULP32K_CALIB(CONF_OSC32K_CALIB)
#else
	                                   OSC32KCTRL_OSCULP32K_CALIB(calib)
    11b4:	021b      	lsls	r3, r3, #8
    11b6:	21f8      	movs	r1, #248	; 0xf8
    11b8:	0149      	lsls	r1, r1, #5
    11ba:	400b      	ands	r3, r1
}

static inline void hri_osc32kctrl_write_OSCULP32K_reg(const void *const hw, hri_osc32kctrl_osculp32k_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->OSCULP32K.reg = data;
    11bc:	61d3      	str	r3, [r2, #28]
	((Osc32kctrl *)hw)->RTCCTRL.reg = data;
    11be:	2301      	movs	r3, #1
    11c0:	6113      	str	r3, [r2, #16]
		;
#endif
#endif
	hri_osc32kctrl_write_RTCCTRL_reg(hw, OSC32KCTRL_RTCCTRL_RTCSEL(CONF_RTCCTRL));
	(void)calib;
}
    11c2:	4770      	bx	lr
    11c4:	40001400 	.word	0x40001400

000011c8 <_oscctrl_init_sources>:
#if CONF_OSC48M_ONDEMAND == 1
	hri_oscctrl_set_OSC48MCTRL_ONDEMAND_bit(hw);
#endif
#endif
	(void)hw;
}
    11c8:	4770      	bx	lr
	...

000011cc <_oscctrl_init_referenced_generators>:
}

static inline void hri_oscctrl_write_DPLLRATIO_reg(const void *const hw, hri_oscctrl_dpllratio_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DPLLRATIO.reg = data;
    11cc:	4a19      	ldr	r2, [pc, #100]	; (1234 <_oscctrl_init_referenced_generators+0x68>)
    11ce:	4b1a      	ldr	r3, [pc, #104]	; (1238 <_oscctrl_init_referenced_generators+0x6c>)
    11d0:	621a      	str	r2, [r3, #32]
	while (((Oscctrl *)hw)->DPLLSYNCBUSY.reg & reg) {
    11d2:	232c      	movs	r3, #44	; 0x2c
    11d4:	4a18      	ldr	r2, [pc, #96]	; (1238 <_oscctrl_init_referenced_generators+0x6c>)
    11d6:	5cd2      	ldrb	r2, [r2, r3]
    11d8:	3b1e      	subs	r3, #30
    11da:	421a      	tst	r2, r3
    11dc:	d1f9      	bne.n	11d2 <_oscctrl_init_referenced_generators+0x6>
}

static inline void hri_oscctrl_write_DPLLCTRLB_reg(const void *const hw, hri_oscctrl_dpllctrlb_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DPLLCTRLB.reg = data;
    11de:	4b16      	ldr	r3, [pc, #88]	; (1238 <_oscctrl_init_referenced_generators+0x6c>)
    11e0:	2200      	movs	r2, #0
    11e2:	625a      	str	r2, [r3, #36]	; 0x24
}

static inline void hri_oscctrl_write_DPLLPRESC_reg(const void *const hw, hri_oscctrl_dpllpresc_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DPLLPRESC.reg = data;
    11e4:	2128      	movs	r1, #40	; 0x28
    11e6:	545a      	strb	r2, [r3, r1]
	while (((Oscctrl *)hw)->DPLLSYNCBUSY.reg & reg) {
    11e8:	232c      	movs	r3, #44	; 0x2c
    11ea:	4a13      	ldr	r2, [pc, #76]	; (1238 <_oscctrl_init_referenced_generators+0x6c>)
    11ec:	5cd2      	ldrb	r2, [r2, r3]
    11ee:	3b1e      	subs	r3, #30
    11f0:	421a      	tst	r2, r3
    11f2:	d1f9      	bne.n	11e8 <_oscctrl_init_referenced_generators+0x1c>
	((Oscctrl *)hw)->DPLLCTRLA.reg = data;
    11f4:	2202      	movs	r2, #2
    11f6:	4b10      	ldr	r3, [pc, #64]	; (1238 <_oscctrl_init_referenced_generators+0x6c>)
    11f8:	771a      	strb	r2, [r3, #28]
	while (((Oscctrl *)hw)->DPLLSYNCBUSY.reg & reg) {
    11fa:	232c      	movs	r3, #44	; 0x2c
    11fc:	4a0e      	ldr	r2, [pc, #56]	; (1238 <_oscctrl_init_referenced_generators+0x6c>)
    11fe:	5cd3      	ldrb	r3, [r2, r3]
    1200:	079b      	lsls	r3, r3, #30
    1202:	d4fa      	bmi.n	11fa <_oscctrl_init_referenced_generators+0x2e>
	return (((Oscctrl *)hw)->DPLLSTATUS.reg & OSCCTRL_DPLLSTATUS_LOCK) >> OSCCTRL_DPLLSTATUS_LOCK_Pos;
    1204:	2330      	movs	r3, #48	; 0x30
    1206:	4a0c      	ldr	r2, [pc, #48]	; (1238 <_oscctrl_init_referenced_generators+0x6c>)
    1208:	5cd3      	ldrb	r3, [r2, r3]
	                                    | (CONF_DPLL_ENABLE << OSCCTRL_DPLLCTRLA_ENABLE_Pos));
#endif

#if CONF_DPLL_CONFIG == 1
#if CONF_DPLL_ENABLE == 1
	while (!(hri_oscctrl_get_DPLLSTATUS_LOCK_bit(hw) || hri_oscctrl_get_DPLLSTATUS_CLKRDY_bit(hw)))
    120a:	07db      	lsls	r3, r3, #31
    120c:	d403      	bmi.n	1216 <_oscctrl_init_referenced_generators+0x4a>
	return (((Oscctrl *)hw)->DPLLSTATUS.reg & OSCCTRL_DPLLSTATUS_CLKRDY) >> OSCCTRL_DPLLSTATUS_CLKRDY_Pos;
    120e:	2330      	movs	r3, #48	; 0x30
    1210:	5cd3      	ldrb	r3, [r2, r3]
    1212:	079b      	lsls	r3, r3, #30
    1214:	d5f6      	bpl.n	1204 <_oscctrl_init_referenced_generators+0x38>
	((Oscctrl *)hw)->DPLLCTRLA.reg |= OSCCTRL_DPLLCTRLA_ONDEMAND;
    1216:	4a08      	ldr	r2, [pc, #32]	; (1238 <_oscctrl_init_referenced_generators+0x6c>)
    1218:	7f13      	ldrb	r3, [r2, #28]
    121a:	2180      	movs	r1, #128	; 0x80
    121c:	4249      	negs	r1, r1
    121e:	430b      	orrs	r3, r1
    1220:	b2db      	uxtb	r3, r3
    1222:	7713      	strb	r3, [r2, #28]
	while (((Oscctrl *)hw)->DPLLSYNCBUSY.reg & reg) {
    1224:	232c      	movs	r3, #44	; 0x2c
    1226:	4a04      	ldr	r2, [pc, #16]	; (1238 <_oscctrl_init_referenced_generators+0x6c>)
    1228:	5cd2      	ldrb	r2, [r2, r3]
    122a:	3b1e      	subs	r3, #30
    122c:	421a      	tst	r2, r3
    122e:	d1f9      	bne.n	1224 <_oscctrl_init_referenced_generators+0x58>
#if CONF_DPLL_ONDEMAND == 1
	hri_oscctrl_set_DPLLCTRLA_ONDEMAND_bit(hw);
#endif
#endif
	(void)hw;
}
    1230:	4770      	bx	lr
    1232:	46c0      	nop			; (mov r8, r8)
    1234:	000d05b7 	.word	0x000d05b7
    1238:	40001000 	.word	0x40001000

0000123c <_sercom_get_hardware_index>:

/**
 * \brief Retrieve ordinal number of the given sercom hardware instance
 */
static uint8_t _sercom_get_hardware_index(const void *const hw)
{
    123c:	b530      	push	{r4, r5, lr}
    123e:	b089      	sub	sp, #36	; 0x24
	Sercom *const sercom_modules[] = SERCOM_INSTS;
    1240:	4c0b      	ldr	r4, [pc, #44]	; (1270 <_sercom_get_hardware_index+0x34>)
    1242:	466b      	mov	r3, sp
    1244:	0022      	movs	r2, r4
    1246:	ca32      	ldmia	r2!, {r1, r4, r5}
    1248:	c332      	stmia	r3!, {r1, r4, r5}
    124a:	ca32      	ldmia	r2!, {r1, r4, r5}
    124c:	c332      	stmia	r3!, {r1, r4, r5}
    124e:	ca12      	ldmia	r2!, {r1, r4}
    1250:	c312      	stmia	r3!, {r1, r4}
	/* Find index for SERCOM instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    1252:	2300      	movs	r3, #0
    1254:	2b07      	cmp	r3, #7
    1256:	d808      	bhi.n	126a <_sercom_get_hardware_index+0x2e>
		if ((uint32_t)hw == (uint32_t)sercom_modules[i]) {
    1258:	009a      	lsls	r2, r3, #2
    125a:	4669      	mov	r1, sp
    125c:	5852      	ldr	r2, [r2, r1]
    125e:	4282      	cmp	r2, r0
    1260:	d001      	beq.n	1266 <_sercom_get_hardware_index+0x2a>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    1262:	3301      	adds	r3, #1
    1264:	e7f6      	b.n	1254 <_sercom_get_hardware_index+0x18>
			return i;
    1266:	b2d8      	uxtb	r0, r3
    1268:	e000      	b.n	126c <_sercom_get_hardware_index+0x30>
		}
	}
	return 0;
    126a:	2000      	movs	r0, #0
}
    126c:	b009      	add	sp, #36	; 0x24
    126e:	bd30      	pop	{r4, r5, pc}
    1270:	00003114 	.word	0x00003114

00001274 <_get_sercom_index>:
 * \param[in] hw The pointer to hardware instance

 * \return The ordinal number of the given sercom hardware instance
 */
static uint8_t _get_sercom_index(const void *const hw)
{
    1274:	b510      	push	{r4, lr}
	uint8_t sercom_offset = _sercom_get_hardware_index(hw);
    1276:	4b0c      	ldr	r3, [pc, #48]	; (12a8 <_get_sercom_index+0x34>)
    1278:	4798      	blx	r3
    127a:	0002      	movs	r2, r0
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_usarts); i++) {
    127c:	2000      	movs	r0, #0
    127e:	2800      	cmp	r0, #0
    1280:	d006      	beq.n	1290 <_get_sercom_index+0x1c>
		if (_usarts[i].number == sercom_offset) {
			return i;
		}
	}

	ASSERT(false);
    1282:	4a0a      	ldr	r2, [pc, #40]	; (12ac <_get_sercom_index+0x38>)
    1284:	490a      	ldr	r1, [pc, #40]	; (12b0 <_get_sercom_index+0x3c>)
    1286:	2000      	movs	r0, #0
    1288:	4b0a      	ldr	r3, [pc, #40]	; (12b4 <_get_sercom_index+0x40>)
    128a:	4798      	blx	r3
	return 0;
    128c:	2000      	movs	r0, #0
}
    128e:	bd10      	pop	{r4, pc}
		if (_usarts[i].number == sercom_offset) {
    1290:	0083      	lsls	r3, r0, #2
    1292:	181b      	adds	r3, r3, r0
    1294:	0099      	lsls	r1, r3, #2
    1296:	4b08      	ldr	r3, [pc, #32]	; (12b8 <_get_sercom_index+0x44>)
    1298:	185b      	adds	r3, r3, r1
    129a:	2120      	movs	r1, #32
    129c:	5c5b      	ldrb	r3, [r3, r1]
    129e:	429a      	cmp	r2, r3
    12a0:	d0f5      	beq.n	128e <_get_sercom_index+0x1a>
	for (i = 0; i < ARRAY_SIZE(_usarts); i++) {
    12a2:	3001      	adds	r0, #1
    12a4:	b2c0      	uxtb	r0, r0
    12a6:	e7ea      	b.n	127e <_get_sercom_index+0xa>
    12a8:	0000123d 	.word	0x0000123d
    12ac:	0000023d 	.word	0x0000023d
    12b0:	00003184 	.word	0x00003184
    12b4:	00000ac9 	.word	0x00000ac9
    12b8:	00003114 	.word	0x00003114

000012bc <_usart_init>:
 * \param[in] hw The pointer to hardware instance
 *
 * \return The status of initialization
 */
static int32_t _usart_init(void *const hw)
{
    12bc:	b570      	push	{r4, r5, r6, lr}
    12be:	0004      	movs	r4, r0
	uint8_t i = _get_sercom_index(hw);
    12c0:	4b3b      	ldr	r3, [pc, #236]	; (13b0 <_usart_init+0xf4>)
    12c2:	4798      	blx	r3
	};
}

static inline bool hri_sercomusart_is_syncing(const void *const hw, hri_sercomusart_syncbusy_reg_t reg)
{
	return ((Sercom *)hw)->USART.SYNCBUSY.reg & reg;
    12c4:	69e3      	ldr	r3, [r4, #28]

	if (!hri_sercomusart_is_syncing(hw, SERCOM_USART_SYNCBUSY_SWRST)) {
    12c6:	07db      	lsls	r3, r3, #31
    12c8:	d41d      	bmi.n	1306 <_usart_init+0x4a>
		uint32_t mode = _usarts[i].ctrl_a & SERCOM_USART_CTRLA_MODE_Msk;
    12ca:	0083      	lsls	r3, r0, #2
    12cc:	181b      	adds	r3, r3, r0
    12ce:	009a      	lsls	r2, r3, #2
    12d0:	4b38      	ldr	r3, [pc, #224]	; (13b4 <_usart_init+0xf8>)
    12d2:	189b      	adds	r3, r3, r2
    12d4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    12d6:	231c      	movs	r3, #28
    12d8:	401a      	ands	r2, r3
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    12da:	69e3      	ldr	r3, [r4, #28]
    12dc:	079b      	lsls	r3, r3, #30
    12de:	d1fc      	bne.n	12da <_usart_init+0x1e>
static inline hri_sercomusart_ctrla_reg_t hri_sercomusart_get_CTRLA_reg(const void *const           hw,
                                                                        hri_sercomusart_ctrla_reg_t mask)
{
	uint32_t tmp;
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST | SERCOM_USART_SYNCBUSY_ENABLE);
	tmp = ((Sercom *)hw)->USART.CTRLA.reg;
    12e0:	6823      	ldr	r3, [r4, #0]
		if (hri_sercomusart_get_CTRLA_reg(hw, SERCOM_USART_CTRLA_ENABLE)) {
    12e2:	079b      	lsls	r3, r3, #30
    12e4:	d509      	bpl.n	12fa <_usart_init+0x3e>
	((Sercom *)hw)->USART.CTRLA.reg &= ~SERCOM_USART_CTRLA_ENABLE;
    12e6:	6823      	ldr	r3, [r4, #0]
    12e8:	2102      	movs	r1, #2
    12ea:	438b      	bics	r3, r1
    12ec:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    12ee:	69e3      	ldr	r3, [r4, #28]
    12f0:	079b      	lsls	r3, r3, #30
    12f2:	d1fc      	bne.n	12ee <_usart_init+0x32>
    12f4:	69e3      	ldr	r3, [r4, #28]
    12f6:	079b      	lsls	r3, r3, #30
    12f8:	d4fc      	bmi.n	12f4 <_usart_init+0x38>
			hri_sercomusart_clear_CTRLA_ENABLE_bit(hw);
			hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_ENABLE);
		}
		hri_sercomusart_write_CTRLA_reg(hw, SERCOM_USART_CTRLA_SWRST | mode);
    12fa:	2301      	movs	r3, #1
    12fc:	4313      	orrs	r3, r2
}

static inline void hri_sercomusart_write_CTRLA_reg(const void *const hw, hri_sercomusart_ctrla_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLA.reg = data;
    12fe:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    1300:	69e3      	ldr	r3, [r4, #28]
    1302:	079b      	lsls	r3, r3, #30
    1304:	d1fc      	bne.n	1300 <_usart_init+0x44>
    1306:	69e3      	ldr	r3, [r4, #28]
    1308:	07db      	lsls	r3, r3, #31
    130a:	d4fc      	bmi.n	1306 <_usart_init+0x4a>
	}
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST);

	hri_sercomusart_write_CTRLA_reg(hw, _usarts[i].ctrl_a);
    130c:	0083      	lsls	r3, r0, #2
    130e:	181b      	adds	r3, r3, r0
    1310:	009a      	lsls	r2, r3, #2
    1312:	4b28      	ldr	r3, [pc, #160]	; (13b4 <_usart_init+0xf8>)
    1314:	189b      	adds	r3, r3, r2
    1316:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	((Sercom *)hw)->USART.CTRLA.reg = data;
    1318:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    131a:	69e3      	ldr	r3, [r4, #28]
    131c:	079b      	lsls	r3, r3, #30
    131e:	d1fc      	bne.n	131a <_usart_init+0x5e>
	hri_sercomusart_write_CTRLB_reg(hw, _usarts[i].ctrl_b);
    1320:	0083      	lsls	r3, r0, #2
    1322:	181b      	adds	r3, r3, r0
    1324:	009a      	lsls	r2, r3, #2
    1326:	4b23      	ldr	r3, [pc, #140]	; (13b4 <_usart_init+0xf8>)
    1328:	189b      	adds	r3, r3, r2
    132a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}

static inline void hri_sercomusart_write_CTRLB_reg(const void *const hw, hri_sercomusart_ctrlb_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLB.reg = data;
    132c:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    132e:	69e3      	ldr	r3, [r4, #28]
    1330:	075b      	lsls	r3, r3, #29
    1332:	d1fc      	bne.n	132e <_usart_init+0x72>
	if ((_usarts[i].ctrl_a & SERCOM_USART_CTRLA_SAMPR(0x1)) || (_usarts[i].ctrl_a & SERCOM_USART_CTRLA_SAMPR(0x3))) {
    1334:	0083      	lsls	r3, r0, #2
    1336:	181b      	adds	r3, r3, r0
    1338:	009a      	lsls	r2, r3, #2
    133a:	4b1e      	ldr	r3, [pc, #120]	; (13b4 <_usart_init+0xf8>)
    133c:	189b      	adds	r3, r3, r2
    133e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    1340:	049a      	lsls	r2, r3, #18
    1342:	d40b      	bmi.n	135c <_usart_init+0xa0>
    1344:	22c0      	movs	r2, #192	; 0xc0
    1346:	01d2      	lsls	r2, r2, #7
    1348:	4213      	tst	r3, r2
    134a:	d107      	bne.n	135c <_usart_init+0xa0>
		((Sercom *)hw)->USART.BAUD.FRAC.BAUD = _usarts[i].baud;
		((Sercom *)hw)->USART.BAUD.FRAC.FP   = _usarts[i].fractional;
	} else {
		hri_sercomusart_write_BAUD_reg(hw, _usarts[i].baud);
    134c:	0083      	lsls	r3, r0, #2
    134e:	181b      	adds	r3, r3, r0
    1350:	009a      	lsls	r2, r3, #2
    1352:	4b18      	ldr	r3, [pc, #96]	; (13b4 <_usart_init+0xf8>)
    1354:	189b      	adds	r3, r3, r2
    1356:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
}

static inline void hri_sercomusart_write_BAUD_reg(const void *const hw, hri_sercomusart_baud_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.BAUD.reg = data;
    1358:	81a3      	strh	r3, [r4, #12]
    135a:	e019      	b.n	1390 <_usart_init+0xd4>
		((Sercom *)hw)->USART.BAUD.FRAC.BAUD = _usarts[i].baud;
    135c:	4a15      	ldr	r2, [pc, #84]	; (13b4 <_usart_init+0xf8>)
    135e:	0081      	lsls	r1, r0, #2
    1360:	180d      	adds	r5, r1, r0
    1362:	00ab      	lsls	r3, r5, #2
    1364:	18d3      	adds	r3, r2, r3
    1366:	8d9d      	ldrh	r5, [r3, #44]	; 0x2c
    1368:	89a3      	ldrh	r3, [r4, #12]
    136a:	04ed      	lsls	r5, r5, #19
    136c:	0ced      	lsrs	r5, r5, #19
    136e:	0b5b      	lsrs	r3, r3, #13
    1370:	035b      	lsls	r3, r3, #13
    1372:	432b      	orrs	r3, r5
    1374:	81a3      	strh	r3, [r4, #12]
		((Sercom *)hw)->USART.BAUD.FRAC.FP   = _usarts[i].fractional;
    1376:	3220      	adds	r2, #32
    1378:	180b      	adds	r3, r1, r0
    137a:	0099      	lsls	r1, r3, #2
    137c:	1852      	adds	r2, r2, r1
    137e:	7b93      	ldrb	r3, [r2, #14]
    1380:	2207      	movs	r2, #7
    1382:	401a      	ands	r2, r3
    1384:	89a3      	ldrh	r3, [r4, #12]
    1386:	0352      	lsls	r2, r2, #13
    1388:	04db      	lsls	r3, r3, #19
    138a:	0cdb      	lsrs	r3, r3, #19
    138c:	4313      	orrs	r3, r2
    138e:	81a3      	strh	r3, [r4, #12]
	}

	hri_sercomusart_write_RXPL_reg(hw, _usarts[i].rxpl);
    1390:	4b08      	ldr	r3, [pc, #32]	; (13b4 <_usart_init+0xf8>)
    1392:	0019      	movs	r1, r3
    1394:	3120      	adds	r1, #32
    1396:	0082      	lsls	r2, r0, #2
    1398:	1816      	adds	r6, r2, r0
    139a:	00b5      	lsls	r5, r6, #2
    139c:	1949      	adds	r1, r1, r5
    139e:	7bc9      	ldrb	r1, [r1, #15]
}

static inline void hri_sercomusart_write_RXPL_reg(const void *const hw, hri_sercomusart_rxpl_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.RXPL.reg = data;
    13a0:	73a1      	strb	r1, [r4, #14]
	hri_sercomusart_write_DBGCTRL_reg(hw, _usarts[i].debug_ctrl);
    13a2:	195b      	adds	r3, r3, r5
    13a4:	3330      	adds	r3, #48	; 0x30
    13a6:	781a      	ldrb	r2, [r3, #0]
}

static inline void hri_sercomusart_write_DBGCTRL_reg(const void *const hw, hri_sercomusart_dbgctrl_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.DBGCTRL.reg = data;
    13a8:	2330      	movs	r3, #48	; 0x30
    13aa:	54e2      	strb	r2, [r4, r3]

	return ERR_NONE;
}
    13ac:	2000      	movs	r0, #0
    13ae:	bd70      	pop	{r4, r5, r6, pc}
    13b0:	00001275 	.word	0x00001275
    13b4:	00003114 	.word	0x00003114

000013b8 <_usart_sync_init>:
{
    13b8:	b570      	push	{r4, r5, r6, lr}
    13ba:	0005      	movs	r5, r0
    13bc:	000c      	movs	r4, r1
	ASSERT(device);
    13be:	1e43      	subs	r3, r0, #1
    13c0:	4198      	sbcs	r0, r3
    13c2:	b2c0      	uxtb	r0, r0
    13c4:	22b4      	movs	r2, #180	; 0xb4
    13c6:	4904      	ldr	r1, [pc, #16]	; (13d8 <_usart_sync_init+0x20>)
    13c8:	4b04      	ldr	r3, [pc, #16]	; (13dc <_usart_sync_init+0x24>)
    13ca:	4798      	blx	r3
	device->hw = hw;
    13cc:	602c      	str	r4, [r5, #0]
	return _usart_init(hw);
    13ce:	0020      	movs	r0, r4
    13d0:	4b03      	ldr	r3, [pc, #12]	; (13e0 <_usart_sync_init+0x28>)
    13d2:	4798      	blx	r3
}
    13d4:	bd70      	pop	{r4, r5, r6, pc}
    13d6:	46c0      	nop			; (mov r8, r8)
    13d8:	00003184 	.word	0x00003184
    13dc:	00000ac9 	.word	0x00000ac9
    13e0:	000012bd 	.word	0x000012bd

000013e4 <_usart_sync_deinit>:
	_usart_deinit(device->hw);
    13e4:	6803      	ldr	r3, [r0, #0]
	((Sercom *)hw)->USART.CTRLA.reg &= ~SERCOM_USART_CTRLA_ENABLE;
    13e6:	681a      	ldr	r2, [r3, #0]
    13e8:	2102      	movs	r1, #2
    13ea:	438a      	bics	r2, r1
    13ec:	601a      	str	r2, [r3, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    13ee:	69da      	ldr	r2, [r3, #28]
    13f0:	0792      	lsls	r2, r2, #30
    13f2:	d1fc      	bne.n	13ee <_usart_sync_deinit+0xa>
	((Sercom *)hw)->USART.CTRLA.reg |= SERCOM_USART_CTRLA_SWRST;
    13f4:	681a      	ldr	r2, [r3, #0]
    13f6:	2101      	movs	r1, #1
    13f8:	430a      	orrs	r2, r1
    13fa:	601a      	str	r2, [r3, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    13fc:	69da      	ldr	r2, [r3, #28]
    13fe:	07d2      	lsls	r2, r2, #31
    1400:	d4fc      	bmi.n	13fc <_usart_sync_deinit+0x18>
}
    1402:	4770      	bx	lr

00001404 <_usart_sync_enable>:
	hri_sercomusart_set_CTRLA_ENABLE_bit(device->hw);
    1404:	6802      	ldr	r2, [r0, #0]
	((Sercom *)hw)->USART.CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    1406:	6813      	ldr	r3, [r2, #0]
    1408:	2102      	movs	r1, #2
    140a:	430b      	orrs	r3, r1
    140c:	6013      	str	r3, [r2, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    140e:	69d3      	ldr	r3, [r2, #28]
    1410:	079b      	lsls	r3, r3, #30
    1412:	d1fc      	bne.n	140e <_usart_sync_enable+0xa>
}
    1414:	4770      	bx	lr

00001416 <_usart_sync_write_byte>:
	hri_sercomusart_write_DATA_reg(device->hw, data);
    1416:	6803      	ldr	r3, [r0, #0]
    1418:	b289      	uxth	r1, r1
	((Sercom *)hw)->USART.DATA.reg = data;
    141a:	8519      	strh	r1, [r3, #40]	; 0x28
}
    141c:	4770      	bx	lr

0000141e <_usart_sync_read_byte>:
	return hri_sercomusart_read_DATA_reg(device->hw);
    141e:	6803      	ldr	r3, [r0, #0]
	return ((Sercom *)hw)->USART.DATA.reg;
    1420:	8d18      	ldrh	r0, [r3, #40]	; 0x28
    1422:	b2c0      	uxtb	r0, r0
}
    1424:	4770      	bx	lr

00001426 <_usart_sync_is_ready_to_send>:
	return hri_sercomusart_get_interrupt_DRE_bit(device->hw);
    1426:	6803      	ldr	r3, [r0, #0]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) >> SERCOM_USART_INTFLAG_DRE_Pos;
    1428:	7e18      	ldrb	r0, [r3, #24]
    142a:	2301      	movs	r3, #1
    142c:	4018      	ands	r0, r3
}
    142e:	4770      	bx	lr

00001430 <_usart_sync_is_transmit_done>:
	return hri_sercomusart_get_interrupt_TXC_bit(device->hw);
    1430:	6803      	ldr	r3, [r0, #0]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) >> SERCOM_USART_INTFLAG_TXC_Pos;
    1432:	7e1b      	ldrb	r3, [r3, #24]
    1434:	085b      	lsrs	r3, r3, #1
    1436:	2001      	movs	r0, #1
    1438:	4018      	ands	r0, r3
}
    143a:	4770      	bx	lr

0000143c <_usart_sync_is_byte_received>:
	return hri_sercomusart_get_interrupt_RXC_bit(device->hw);
    143c:	6803      	ldr	r3, [r0, #0]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) >> SERCOM_USART_INTFLAG_RXC_Pos;
    143e:	7e1b      	ldrb	r3, [r3, #24]
    1440:	089b      	lsrs	r3, r3, #2
    1442:	2001      	movs	r0, #1
    1444:	4018      	ands	r0, r3
}
    1446:	4770      	bx	lr

00001448 <tc_interrupt_handler>:
 * \internal TC interrupt handler for Timer
 *
 * \param[in] instance TC instance number
 */
static void tc_interrupt_handler(struct _timer_device *device)
{
    1448:	b510      	push	{r4, lr}
	void *const hw = device->hw;
    144a:	68c3      	ldr	r3, [r0, #12]
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_MC1;
}

static inline bool hri_tc_get_interrupt_OVF_bit(const void *const hw)
{
	return (((Tc *)hw)->COUNT16.INTFLAG.reg & TC_INTFLAG_OVF) >> TC_INTFLAG_OVF_Pos;
    144c:	7a9a      	ldrb	r2, [r3, #10]

	if (hri_tc_get_interrupt_OVF_bit(hw)) {
    144e:	07d2      	lsls	r2, r2, #31
    1450:	d400      	bmi.n	1454 <tc_interrupt_handler+0xc>
		hri_tc_clear_interrupt_OVF_bit(hw);
		device->timer_cb.period_expired(device);
	}
}
    1452:	bd10      	pop	{r4, pc}
}

static inline void hri_tc_clear_interrupt_OVF_bit(const void *const hw)
{
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_OVF;
    1454:	2201      	movs	r2, #1
    1456:	729a      	strb	r2, [r3, #10]
		device->timer_cb.period_expired(device);
    1458:	6803      	ldr	r3, [r0, #0]
    145a:	4798      	blx	r3
}
    145c:	e7f9      	b.n	1452 <tc_interrupt_handler+0xa>
	...

00001460 <_tc_init_irq_param>:
/**
 * \brief Init irq param with the given tc hardware instance
 */
static void _tc_init_irq_param(const void *const hw, void *dev)
{
	if (hw == TC0) {
    1460:	4b03      	ldr	r3, [pc, #12]	; (1470 <_tc_init_irq_param+0x10>)
    1462:	4298      	cmp	r0, r3
    1464:	d000      	beq.n	1468 <_tc_init_irq_param+0x8>
		_tc0_dev = (struct _timer_device *)dev;
	}
}
    1466:	4770      	bx	lr
		_tc0_dev = (struct _timer_device *)dev;
    1468:	4b02      	ldr	r3, [pc, #8]	; (1474 <_tc_init_irq_param+0x14>)
    146a:	6019      	str	r1, [r3, #0]
}
    146c:	e7fb      	b.n	1466 <_tc_init_irq_param+0x6>
    146e:	46c0      	nop			; (mov r8, r8)
    1470:	42003000 	.word	0x42003000
    1474:	2000023c 	.word	0x2000023c

00001478 <get_tc_index>:
{
    1478:	b530      	push	{r4, r5, lr}
    147a:	b089      	sub	sp, #36	; 0x24
 * \param[in] hw The pointer to hardware instance
 */
static inline uint8_t _get_hardware_offset(const void *const hw)
{
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;
    147c:	4c1a      	ldr	r4, [pc, #104]	; (14e8 <get_tc_index+0x70>)
    147e:	466b      	mov	r3, sp
    1480:	0022      	movs	r2, r4
    1482:	ca32      	ldmia	r2!, {r1, r4, r5}
    1484:	c332      	stmia	r3!, {r1, r4, r5}
    1486:	ca32      	ldmia	r2!, {r1, r4, r5}
    1488:	c332      	stmia	r3!, {r1, r4, r5}
    148a:	ca12      	ldmia	r2!, {r1, r4}
    148c:	c312      	stmia	r3!, {r1, r4}

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    148e:	2300      	movs	r3, #0
    1490:	2b07      	cmp	r3, #7
    1492:	d808      	bhi.n	14a6 <get_tc_index+0x2e>
		if ((uint32_t)hw == (uint32_t)tc_modules[i]) {
    1494:	009a      	lsls	r2, r3, #2
    1496:	4669      	mov	r1, sp
    1498:	5852      	ldr	r2, [r2, r1]
    149a:	4282      	cmp	r2, r0
    149c:	d001      	beq.n	14a2 <get_tc_index+0x2a>
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    149e:	3301      	adds	r3, #1
    14a0:	e7f6      	b.n	1490 <get_tc_index+0x18>
			return i;
    14a2:	b2db      	uxtb	r3, r3
    14a4:	e004      	b.n	14b0 <get_tc_index+0x38>
		}
	}
	return (((uint32_t)hw - (uint32_t)TC0) >> 10);
    14a6:	4b11      	ldr	r3, [pc, #68]	; (14ec <get_tc_index+0x74>)
    14a8:	469c      	mov	ip, r3
    14aa:	4460      	add	r0, ip
    14ac:	0a80      	lsrs	r0, r0, #10
    14ae:	b2c3      	uxtb	r3, r0
	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
    14b0:	2000      	movs	r0, #0
    14b2:	2800      	cmp	r0, #0
    14b4:	d009      	beq.n	14ca <get_tc_index+0x52>
	ASSERT(false);
    14b6:	223a      	movs	r2, #58	; 0x3a
    14b8:	32ff      	adds	r2, #255	; 0xff
    14ba:	490d      	ldr	r1, [pc, #52]	; (14f0 <get_tc_index+0x78>)
    14bc:	2000      	movs	r0, #0
    14be:	4b0d      	ldr	r3, [pc, #52]	; (14f4 <get_tc_index+0x7c>)
    14c0:	4798      	blx	r3
	return -1;
    14c2:	2001      	movs	r0, #1
    14c4:	4240      	negs	r0, r0
}
    14c6:	b009      	add	sp, #36	; 0x24
    14c8:	bd30      	pop	{r4, r5, pc}
		if (_tcs[i].number == index) {
    14ca:	0082      	lsls	r2, r0, #2
    14cc:	1812      	adds	r2, r2, r0
    14ce:	0091      	lsls	r1, r2, #2
    14d0:	4a05      	ldr	r2, [pc, #20]	; (14e8 <get_tc_index+0x70>)
    14d2:	1852      	adds	r2, r2, r1
    14d4:	2120      	movs	r1, #32
    14d6:	5c52      	ldrb	r2, [r2, r1]
    14d8:	429a      	cmp	r2, r3
    14da:	d002      	beq.n	14e2 <get_tc_index+0x6a>
	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
    14dc:	3001      	adds	r0, #1
    14de:	b2c0      	uxtb	r0, r0
    14e0:	e7e7      	b.n	14b2 <get_tc_index+0x3a>
			return i;
    14e2:	b240      	sxtb	r0, r0
    14e4:	e7ef      	b.n	14c6 <get_tc_index+0x4e>
    14e6:	46c0      	nop			; (mov r8, r8)
    14e8:	000031a0 	.word	0x000031a0
    14ec:	bdffd000 	.word	0xbdffd000
    14f0:	000031d4 	.word	0x000031d4
    14f4:	00000ac9 	.word	0x00000ac9

000014f8 <_timer_init>:
{
    14f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    14fa:	0006      	movs	r6, r0
    14fc:	000c      	movs	r4, r1
	int8_t i = get_tc_index(hw);
    14fe:	0008      	movs	r0, r1
    1500:	4b62      	ldr	r3, [pc, #392]	; (168c <_timer_init+0x194>)
    1502:	4798      	blx	r3
    1504:	0005      	movs	r5, r0
	device->hw = hw;
    1506:	60f4      	str	r4, [r6, #12]
	ASSERT(ARRAY_SIZE(_tcs));
    1508:	228d      	movs	r2, #141	; 0x8d
    150a:	4961      	ldr	r1, [pc, #388]	; (1690 <_timer_init+0x198>)
    150c:	2001      	movs	r0, #1
    150e:	4b61      	ldr	r3, [pc, #388]	; (1694 <_timer_init+0x19c>)
    1510:	4798      	blx	r3
	return ((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg;
    1512:	6923      	ldr	r3, [r4, #16]
	if (!hri_tc_is_syncing(hw, TC_SYNCBUSY_SWRST)) {
    1514:	07db      	lsls	r3, r3, #31
    1516:	d414      	bmi.n	1542 <_timer_init+0x4a>
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    1518:	6923      	ldr	r3, [r4, #16]
    151a:	079b      	lsls	r3, r3, #30
    151c:	d1fc      	bne.n	1518 <_timer_init+0x20>

static inline hri_tc_ctrla_reg_t hri_tc_get_CTRLA_reg(const void *const hw, hri_tc_ctrla_reg_t mask)
{
	uint32_t tmp;
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    151e:	6823      	ldr	r3, [r4, #0]
		if (hri_tc_get_CTRLA_reg(hw, TC_CTRLA_ENABLE)) {
    1520:	079b      	lsls	r3, r3, #30
    1522:	d509      	bpl.n	1538 <_timer_init+0x40>
	((Tc *)hw)->COUNT16.CTRLA.reg &= ~TC_CTRLA_ENABLE;
    1524:	6823      	ldr	r3, [r4, #0]
    1526:	2202      	movs	r2, #2
    1528:	4393      	bics	r3, r2
    152a:	6023      	str	r3, [r4, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    152c:	6923      	ldr	r3, [r4, #16]
    152e:	079b      	lsls	r3, r3, #30
    1530:	d1fc      	bne.n	152c <_timer_init+0x34>
    1532:	6923      	ldr	r3, [r4, #16]
    1534:	079b      	lsls	r3, r3, #30
    1536:	d4fc      	bmi.n	1532 <_timer_init+0x3a>
}

static inline void hri_tc_write_CTRLA_reg(const void *const hw, hri_tc_ctrla_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    1538:	2301      	movs	r3, #1
    153a:	6023      	str	r3, [r4, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    153c:	6923      	ldr	r3, [r4, #16]
    153e:	079b      	lsls	r3, r3, #30
    1540:	d1fc      	bne.n	153c <_timer_init+0x44>
    1542:	6923      	ldr	r3, [r4, #16]
    1544:	07db      	lsls	r3, r3, #31
    1546:	d4fc      	bmi.n	1542 <_timer_init+0x4a>
	hri_tc_write_CTRLA_reg(hw, _tcs[i].ctrl_a);
    1548:	00ab      	lsls	r3, r5, #2
    154a:	195b      	adds	r3, r3, r5
    154c:	009a      	lsls	r2, r3, #2
    154e:	4b52      	ldr	r3, [pc, #328]	; (1698 <_timer_init+0x1a0>)
    1550:	189b      	adds	r3, r3, r2
    1552:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    1554:	6023      	str	r3, [r4, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    1556:	6923      	ldr	r3, [r4, #16]
    1558:	079b      	lsls	r3, r3, #30
    155a:	d1fc      	bne.n	1556 <_timer_init+0x5e>
	hri_tc_write_DBGCTRL_reg(hw, _tcs[i].dbg_ctrl);
    155c:	4b4e      	ldr	r3, [pc, #312]	; (1698 <_timer_init+0x1a0>)
    155e:	0019      	movs	r1, r3
    1560:	3120      	adds	r1, #32
    1562:	00aa      	lsls	r2, r5, #2
    1564:	1957      	adds	r7, r2, r5
    1566:	00b8      	lsls	r0, r7, #2
    1568:	1809      	adds	r1, r1, r0
    156a:	7a89      	ldrb	r1, [r1, #10]
}

static inline void hri_tc_write_DBGCTRL_reg(const void *const hw, hri_tc_dbgctrl_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.DBGCTRL.reg = data;
    156c:	73e1      	strb	r1, [r4, #15]
	hri_tc_write_EVCTRL_reg(hw, _tcs[i].event_ctrl);
    156e:	181b      	adds	r3, r3, r0
    1570:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
	((Tc *)hw)->COUNT16.EVCTRL.reg = data;
    1572:	80e2      	strh	r2, [r4, #6]
	((Tc *)hw)->COUNT16.WAVE.reg = data;
    1574:	2201      	movs	r2, #1
    1576:	7322      	strb	r2, [r4, #12]
	if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT32) {
    1578:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    157a:	230c      	movs	r3, #12
    157c:	4013      	ands	r3, r2
    157e:	2b08      	cmp	r3, #8
    1580:	d054      	beq.n	162c <_timer_init+0x134>
	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT16) {
    1582:	2b00      	cmp	r3, #0
    1584:	d161      	bne.n	164a <_timer_init+0x152>
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)_tcs[i].cc0);
    1586:	00ab      	lsls	r3, r5, #2
    1588:	195b      	adds	r3, r3, r5
    158a:	009a      	lsls	r2, r3, #2
    158c:	4b42      	ldr	r3, [pc, #264]	; (1698 <_timer_init+0x1a0>)
    158e:	189b      	adds	r3, r3, r2
    1590:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
}

static inline void hri_tccount16_write_CC_reg(const void *const hw, uint8_t index, hri_tccount16_cc_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    1592:	83a3      	strh	r3, [r4, #28]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    1594:	6923      	ldr	r3, [r4, #16]
    1596:	22c0      	movs	r2, #192	; 0xc0
    1598:	421a      	tst	r2, r3
    159a:	d1fb      	bne.n	1594 <_timer_init+0x9c>
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    159c:	2300      	movs	r3, #0
    159e:	83e3      	strh	r3, [r4, #30]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    15a0:	6923      	ldr	r3, [r4, #16]
    15a2:	22c0      	movs	r2, #192	; 0xc0
    15a4:	421a      	tst	r2, r3
    15a6:	d1fb      	bne.n	15a0 <_timer_init+0xa8>
	((Tc *)hw)->COUNT16.INTENSET.reg = TC_INTENSET_OVF;
    15a8:	2301      	movs	r3, #1
    15aa:	7263      	strb	r3, [r4, #9]
	_tc_init_irq_param(hw, (void *)device);
    15ac:	0031      	movs	r1, r6
    15ae:	0020      	movs	r0, r4
    15b0:	4b3a      	ldr	r3, [pc, #232]	; (169c <_timer_init+0x1a4>)
    15b2:	4798      	blx	r3
	NVIC_DisableIRQ(_tcs[i].irq);
    15b4:	00aa      	lsls	r2, r5, #2
    15b6:	1952      	adds	r2, r2, r5
    15b8:	0091      	lsls	r1, r2, #2
    15ba:	4b37      	ldr	r3, [pc, #220]	; (1698 <_timer_init+0x1a0>)
    15bc:	3320      	adds	r3, #32
    15be:	185b      	adds	r3, r3, r1
    15c0:	785b      	ldrb	r3, [r3, #1]
    15c2:	b25b      	sxtb	r3, r3
  if ((int32_t)(IRQn) >= 0)
    15c4:	2b00      	cmp	r3, #0
    15c6:	db0b      	blt.n	15e0 <_timer_init+0xe8>
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    15c8:	221f      	movs	r2, #31
    15ca:	4013      	ands	r3, r2
    15cc:	3a1e      	subs	r2, #30
    15ce:	409a      	lsls	r2, r3
    15d0:	0013      	movs	r3, r2
    15d2:	2280      	movs	r2, #128	; 0x80
    15d4:	4932      	ldr	r1, [pc, #200]	; (16a0 <_timer_init+0x1a8>)
    15d6:	508b      	str	r3, [r1, r2]
  __ASM volatile ("dsb 0xF":::"memory");
    15d8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    15dc:	f3bf 8f6f 	isb	sy
	NVIC_ClearPendingIRQ(_tcs[i].irq);
    15e0:	00aa      	lsls	r2, r5, #2
    15e2:	1952      	adds	r2, r2, r5
    15e4:	0091      	lsls	r1, r2, #2
    15e6:	4b2c      	ldr	r3, [pc, #176]	; (1698 <_timer_init+0x1a0>)
    15e8:	3320      	adds	r3, #32
    15ea:	185b      	adds	r3, r3, r1
    15ec:	785b      	ldrb	r3, [r3, #1]
    15ee:	b25b      	sxtb	r3, r3
  if ((int32_t)(IRQn) >= 0)
    15f0:	2b00      	cmp	r3, #0
    15f2:	db08      	blt.n	1606 <_timer_init+0x10e>
    NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    15f4:	221f      	movs	r2, #31
    15f6:	4013      	ands	r3, r2
    15f8:	3a1e      	subs	r2, #30
    15fa:	409a      	lsls	r2, r3
    15fc:	0013      	movs	r3, r2
    15fe:	22c0      	movs	r2, #192	; 0xc0
    1600:	0052      	lsls	r2, r2, #1
    1602:	4927      	ldr	r1, [pc, #156]	; (16a0 <_timer_init+0x1a8>)
    1604:	508b      	str	r3, [r1, r2]
	NVIC_EnableIRQ(_tcs[i].irq);
    1606:	00ab      	lsls	r3, r5, #2
    1608:	195d      	adds	r5, r3, r5
    160a:	00aa      	lsls	r2, r5, #2
    160c:	4b22      	ldr	r3, [pc, #136]	; (1698 <_timer_init+0x1a0>)
    160e:	3320      	adds	r3, #32
    1610:	189b      	adds	r3, r3, r2
    1612:	785b      	ldrb	r3, [r3, #1]
    1614:	b25b      	sxtb	r3, r3
  if ((int32_t)(IRQn) >= 0)
    1616:	2b00      	cmp	r3, #0
    1618:	db06      	blt.n	1628 <_timer_init+0x130>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    161a:	221f      	movs	r2, #31
    161c:	4013      	ands	r3, r2
    161e:	3a1e      	subs	r2, #30
    1620:	409a      	lsls	r2, r3
    1622:	0013      	movs	r3, r2
    1624:	4a1e      	ldr	r2, [pc, #120]	; (16a0 <_timer_init+0x1a8>)
    1626:	6013      	str	r3, [r2, #0]
}
    1628:	2000      	movs	r0, #0
    162a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		hri_tccount32_write_CC_reg(hw, 0, _tcs[i].cc0);
    162c:	4b1a      	ldr	r3, [pc, #104]	; (1698 <_timer_init+0x1a0>)
    162e:	181b      	adds	r3, r3, r0
    1630:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}

static inline void hri_tccount32_write_CC_reg(const void *const hw, uint8_t index, hri_tccount32_cc_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT32.CC[index].reg = data;
    1632:	61e3      	str	r3, [r4, #28]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    1634:	6923      	ldr	r3, [r4, #16]
    1636:	22c0      	movs	r2, #192	; 0xc0
    1638:	421a      	tst	r2, r3
    163a:	d1fb      	bne.n	1634 <_timer_init+0x13c>
	((Tc *)hw)->COUNT32.CC[index].reg = data;
    163c:	2300      	movs	r3, #0
    163e:	6223      	str	r3, [r4, #32]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    1640:	6923      	ldr	r3, [r4, #16]
    1642:	22c0      	movs	r2, #192	; 0xc0
    1644:	421a      	tst	r2, r3
    1646:	d1fb      	bne.n	1640 <_timer_init+0x148>
    1648:	e7ae      	b.n	15a8 <_timer_init+0xb0>
	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT8) {
    164a:	2b04      	cmp	r3, #4
    164c:	d1ac      	bne.n	15a8 <_timer_init+0xb0>
		hri_tccount8_write_CC_reg(hw, 0, (uint8_t)_tcs[i].cc0);
    164e:	00ab      	lsls	r3, r5, #2
    1650:	195b      	adds	r3, r3, r5
    1652:	009a      	lsls	r2, r3, #2
    1654:	4b10      	ldr	r3, [pc, #64]	; (1698 <_timer_init+0x1a0>)
    1656:	189b      	adds	r3, r3, r2
    1658:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    165a:	b2db      	uxtb	r3, r3
	((Tc *)hw)->COUNT8.CC[index].reg = data;
    165c:	7723      	strb	r3, [r4, #28]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    165e:	6923      	ldr	r3, [r4, #16]
    1660:	22c0      	movs	r2, #192	; 0xc0
    1662:	421a      	tst	r2, r3
    1664:	d1fb      	bne.n	165e <_timer_init+0x166>
	((Tc *)hw)->COUNT8.CC[index].reg = data;
    1666:	2300      	movs	r3, #0
    1668:	7763      	strb	r3, [r4, #29]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    166a:	6923      	ldr	r3, [r4, #16]
    166c:	22c0      	movs	r2, #192	; 0xc0
    166e:	421a      	tst	r2, r3
    1670:	d1fb      	bne.n	166a <_timer_init+0x172>
		hri_tccount8_write_PER_reg(hw, _tcs[i].per);
    1672:	00aa      	lsls	r2, r5, #2
    1674:	1952      	adds	r2, r2, r5
    1676:	0091      	lsls	r1, r2, #2
    1678:	4b07      	ldr	r3, [pc, #28]	; (1698 <_timer_init+0x1a0>)
    167a:	3320      	adds	r3, #32
    167c:	185b      	adds	r3, r3, r1
    167e:	7adb      	ldrb	r3, [r3, #11]
	((Tc *)hw)->COUNT8.PER.reg = data;
    1680:	76e3      	strb	r3, [r4, #27]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    1682:	6923      	ldr	r3, [r4, #16]
    1684:	069b      	lsls	r3, r3, #26
    1686:	d4fc      	bmi.n	1682 <_timer_init+0x18a>
    1688:	e78e      	b.n	15a8 <_timer_init+0xb0>
    168a:	46c0      	nop			; (mov r8, r8)
    168c:	00001479 	.word	0x00001479
    1690:	000031d4 	.word	0x000031d4
    1694:	00000ac9 	.word	0x00000ac9
    1698:	000031a0 	.word	0x000031a0
    169c:	00001461 	.word	0x00001461
    16a0:	e000e100 	.word	0xe000e100

000016a4 <_timer_deinit>:
{
    16a4:	b570      	push	{r4, r5, r6, lr}
	void *const hw = device->hw;
    16a6:	68c4      	ldr	r4, [r0, #12]
	int8_t      i  = get_tc_index(hw);
    16a8:	0020      	movs	r0, r4
    16aa:	4b16      	ldr	r3, [pc, #88]	; (1704 <_timer_deinit+0x60>)
    16ac:	4798      	blx	r3
    16ae:	0005      	movs	r5, r0
	ASSERT(ARRAY_SIZE(_tcs));
    16b0:	22ba      	movs	r2, #186	; 0xba
    16b2:	4915      	ldr	r1, [pc, #84]	; (1708 <_timer_deinit+0x64>)
    16b4:	2001      	movs	r0, #1
    16b6:	4b15      	ldr	r3, [pc, #84]	; (170c <_timer_deinit+0x68>)
    16b8:	4798      	blx	r3
	NVIC_DisableIRQ(_tcs[i].irq);
    16ba:	00a8      	lsls	r0, r5, #2
    16bc:	1940      	adds	r0, r0, r5
    16be:	0082      	lsls	r2, r0, #2
    16c0:	4b13      	ldr	r3, [pc, #76]	; (1710 <_timer_deinit+0x6c>)
    16c2:	3320      	adds	r3, #32
    16c4:	189b      	adds	r3, r3, r2
    16c6:	785b      	ldrb	r3, [r3, #1]
    16c8:	b25b      	sxtb	r3, r3
  if ((int32_t)(IRQn) >= 0)
    16ca:	2b00      	cmp	r3, #0
    16cc:	db0b      	blt.n	16e6 <_timer_deinit+0x42>
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    16ce:	221f      	movs	r2, #31
    16d0:	4013      	ands	r3, r2
    16d2:	3a1e      	subs	r2, #30
    16d4:	409a      	lsls	r2, r3
    16d6:	0013      	movs	r3, r2
    16d8:	2280      	movs	r2, #128	; 0x80
    16da:	490e      	ldr	r1, [pc, #56]	; (1714 <_timer_deinit+0x70>)
    16dc:	508b      	str	r3, [r1, r2]
  __ASM volatile ("dsb 0xF":::"memory");
    16de:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    16e2:	f3bf 8f6f 	isb	sy
	((Tc *)hw)->COUNT16.CTRLA.reg &= ~TC_CTRLA_ENABLE;
    16e6:	6823      	ldr	r3, [r4, #0]
    16e8:	2202      	movs	r2, #2
    16ea:	4393      	bics	r3, r2
    16ec:	6023      	str	r3, [r4, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    16ee:	6923      	ldr	r3, [r4, #16]
    16f0:	079b      	lsls	r3, r3, #30
    16f2:	d1fc      	bne.n	16ee <_timer_deinit+0x4a>
	((Tc *)hw)->COUNT16.CTRLA.reg |= TC_CTRLA_SWRST;
    16f4:	6823      	ldr	r3, [r4, #0]
    16f6:	2201      	movs	r2, #1
    16f8:	4313      	orrs	r3, r2
    16fa:	6023      	str	r3, [r4, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    16fc:	6923      	ldr	r3, [r4, #16]
    16fe:	07db      	lsls	r3, r3, #31
    1700:	d4fc      	bmi.n	16fc <_timer_deinit+0x58>
}
    1702:	bd70      	pop	{r4, r5, r6, pc}
    1704:	00001479 	.word	0x00001479
    1708:	000031d4 	.word	0x000031d4
    170c:	00000ac9 	.word	0x00000ac9
    1710:	000031a0 	.word	0x000031a0
    1714:	e000e100 	.word	0xe000e100

00001718 <_tc_get_timer>:
}
    1718:	2000      	movs	r0, #0
    171a:	4770      	bx	lr

0000171c <_timer_set_irq>:
{
    171c:	b510      	push	{r4, lr}
	void *const hw = device->hw;
    171e:	68c0      	ldr	r0, [r0, #12]
	int8_t      i  = get_tc_index(hw);
    1720:	4b09      	ldr	r3, [pc, #36]	; (1748 <_timer_set_irq+0x2c>)
    1722:	4798      	blx	r3
    1724:	0004      	movs	r4, r0
	ASSERT(ARRAY_SIZE(_tcs));
    1726:	2210      	movs	r2, #16
    1728:	32ff      	adds	r2, #255	; 0xff
    172a:	4908      	ldr	r1, [pc, #32]	; (174c <_timer_set_irq+0x30>)
    172c:	2001      	movs	r0, #1
    172e:	4b08      	ldr	r3, [pc, #32]	; (1750 <_timer_set_irq+0x34>)
    1730:	4798      	blx	r3
	_irq_set(_tcs[i].irq);
    1732:	00a0      	lsls	r0, r4, #2
    1734:	1900      	adds	r0, r0, r4
    1736:	0082      	lsls	r2, r0, #2
    1738:	4b06      	ldr	r3, [pc, #24]	; (1754 <_timer_set_irq+0x38>)
    173a:	3320      	adds	r3, #32
    173c:	189b      	adds	r3, r3, r2
    173e:	7858      	ldrb	r0, [r3, #1]
    1740:	4b05      	ldr	r3, [pc, #20]	; (1758 <_timer_set_irq+0x3c>)
    1742:	4798      	blx	r3
}
    1744:	bd10      	pop	{r4, pc}
    1746:	46c0      	nop			; (mov r8, r8)
    1748:	00001479 	.word	0x00001479
    174c:	000031d4 	.word	0x000031d4
    1750:	00000ac9 	.word	0x00000ac9
    1754:	000031a0 	.word	0x000031a0
    1758:	00000ddd 	.word	0x00000ddd

0000175c <INT20_Handler>:
{
    175c:	b510      	push	{r4, lr}
	tc_interrupt_handler(_tc0_dev);
    175e:	4b02      	ldr	r3, [pc, #8]	; (1768 <INT20_Handler+0xc>)
    1760:	6818      	ldr	r0, [r3, #0]
    1762:	4b02      	ldr	r3, [pc, #8]	; (176c <INT20_Handler+0x10>)
    1764:	4798      	blx	r3
}
    1766:	bd10      	pop	{r4, pc}
    1768:	2000023c 	.word	0x2000023c
    176c:	00001449 	.word	0x00001449

00001770 <isr_can_bus_off_error_cb>:

/* ISR for can bus off */
void isr_can_bus_off_error_cb(struct _can_async_device *dev, enum can_async_interrupt_type type)
{
	// ON the debug led for bus off condition
	if(hri_can_get_PSR_BO_bit(dev->hw)){
    1770:	6803      	ldr	r3, [r0, #0]
	return (((Can *)hw)->PSR.reg & CAN_PSR_BO) >> CAN_PSR_BO_Pos;
    1772:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    1774:	061b      	lsls	r3, r3, #24
    1776:	d504      	bpl.n	1782 <isr_can_bus_off_error_cb+0x12>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    1778:	2110      	movs	r1, #16
    177a:	2398      	movs	r3, #152	; 0x98
    177c:	22c0      	movs	r2, #192	; 0xc0
    177e:	05d2      	lsls	r2, r2, #23
    1780:	50d1      	str	r1, [r2, r3]
		gpio_set_pin_level(DEBUG_LED , true);
	}	
}
    1782:	4770      	bx	lr

00001784 <isr_timer_0_call>:
/* Application call */

/* ISR calls */
void isr_timer_0_call()
{
	timer_event_occured = 1;	
    1784:	2201      	movs	r2, #1
    1786:	4b01      	ldr	r3, [pc, #4]	; (178c <isr_timer_0_call+0x8>)
    1788:	601a      	str	r2, [r3, #0]
}
    178a:	4770      	bx	lr
    178c:	20000240 	.word	0x20000240

00001790 <isr_can_0_rx_call>:

void isr_can_0_rx_call()
{
	can_rx_event_occured = 0;
    1790:	2200      	movs	r2, #0
    1792:	4b01      	ldr	r3, [pc, #4]	; (1798 <isr_can_0_rx_call+0x8>)
    1794:	605a      	str	r2, [r3, #4]
}
    1796:	4770      	bx	lr
    1798:	20000240 	.word	0x20000240

0000179c <can_begin>:
{
    179c:	b570      	push	{r4, r5, r6, lr}
    179e:	0004      	movs	r4, r0
    17a0:	000e      	movs	r6, r1
    17a2:	001d      	movs	r5, r3
	baud_rate = baud_rate*1000;
    17a4:	21fa      	movs	r1, #250	; 0xfa
    17a6:	0089      	lsls	r1, r1, #2
    17a8:	4351      	muls	r1, r2
	can_nbtp_nbrp_value = CONF_GCLK_CAN1_FREQUENCY / baud_rate / (3 + can_nbtp_ntseg1_value + can_nbtp_ntseg2_value);
    17aa:	4830      	ldr	r0, [pc, #192]	; (186c <can_begin+0xd0>)
    17ac:	4b30      	ldr	r3, [pc, #192]	; (1870 <can_begin+0xd4>)
    17ae:	4798      	blx	r3
    17b0:	0900      	lsrs	r0, r0, #4
	int can_btp_reg_val = CAN_NBTP_NBRP(can_nbtp_nbrp_value) | CAN_NBTP_NTSEG1(can_nbtp_ntseg1_value) | CAN_NBTP_NTSEG2(can_nbtp_ntseg2_value) | CAN_NBTP_NSJW(can_nbtp_nsgw_value);
    17b2:	0400      	lsls	r0, r0, #16
    17b4:	4b2f      	ldr	r3, [pc, #188]	; (1874 <can_begin+0xd8>)
    17b6:	4018      	ands	r0, r3
    17b8:	4b2f      	ldr	r3, [pc, #188]	; (1878 <can_begin+0xdc>)
    17ba:	4318      	orrs	r0, r3
	dev->hw = hw;
    17bc:	6026      	str	r6, [r4, #0]
	((Can *)hw)->CCCR.reg |= CAN_CCCR_INIT;
    17be:	69b3      	ldr	r3, [r6, #24]
    17c0:	2201      	movs	r2, #1
    17c2:	4313      	orrs	r3, r2
    17c4:	61b3      	str	r3, [r6, #24]
	while (hri_can_get_CCCR_INIT_bit(dev->hw) == 0);
    17c6:	6823      	ldr	r3, [r4, #0]
	tmp = ((Can *)hw)->CCCR.reg;
    17c8:	699a      	ldr	r2, [r3, #24]
    17ca:	07d2      	lsls	r2, r2, #31
    17cc:	d5fb      	bpl.n	17c6 <can_begin+0x2a>
	((Can *)hw)->CCCR.reg |= CAN_CCCR_CCE;
    17ce:	699a      	ldr	r2, [r3, #24]
    17d0:	2102      	movs	r1, #2
    17d2:	430a      	orrs	r2, r1
    17d4:	619a      	str	r2, [r3, #24]
	if (hw == CAN1) {
    17d6:	4b29      	ldr	r3, [pc, #164]	; (187c <can_begin+0xe0>)
    17d8:	429e      	cmp	r6, r3
    17da:	d034      	beq.n	1846 <can_begin+0xaa>
	hri_can_clear_CCCR_CCE_bit(dev->hw);
    17dc:	6822      	ldr	r2, [r4, #0]
	((Can *)hw)->CCCR.reg &= ~CAN_CCCR_CCE;
    17de:	6993      	ldr	r3, [r2, #24]
    17e0:	2102      	movs	r1, #2
    17e2:	438b      	bics	r3, r1
    17e4:	6193      	str	r3, [r2, #24]
	hri_can_clear_CCCR_INIT_bit(dev->hw);
    17e6:	6822      	ldr	r2, [r4, #0]
	((Can *)hw)->CCCR.reg &= ~CAN_CCCR_INIT;
    17e8:	6993      	ldr	r3, [r2, #24]
    17ea:	3901      	subs	r1, #1
    17ec:	438b      	bics	r3, r1
    17ee:	6193      	str	r3, [r2, #24]
	while (hri_can_get_CCCR_INIT_bit(dev->hw)) 
    17f0:	6823      	ldr	r3, [r4, #0]
	tmp = ((Can *)hw)->CCCR.reg;
    17f2:	699b      	ldr	r3, [r3, #24]
    17f4:	07db      	lsls	r3, r3, #31
    17f6:	d4fb      	bmi.n	17f0 <can_begin+0x54>
	can_async_enable(descr);
    17f8:	0020      	movs	r0, r4
    17fa:	4b21      	ldr	r3, [pc, #132]	; (1880 <can_begin+0xe4>)
    17fc:	4798      	blx	r3
 *                      GPIO_DIRECTION_OFF = Disables the pin
 *                      (low power state)
 */
static inline void gpio_set_pin_direction(const uint8_t pin, const enum gpio_direction direction)
{
	_gpio_set_direction((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), direction);
    17fe:	096b      	lsrs	r3, r5, #5
    1800:	221f      	movs	r2, #31
    1802:	4015      	ands	r5, r2
    1804:	3a1e      	subs	r2, #30
    1806:	40aa      	lsls	r2, r5
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    1808:	24c0      	movs	r4, #192	; 0xc0
    180a:	05e4      	lsls	r4, r4, #23
    180c:	01db      	lsls	r3, r3, #7
    180e:	191e      	adds	r6, r3, r4
    1810:	60b2      	str	r2, [r6, #8]
		                                | ((mask & 0xffff0000) >> 16));
		break;

	case GPIO_DIRECTION_OUT:
		hri_port_set_DIR_reg(PORT_IOBUS, port, mask);
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
    1812:	0410      	lsls	r0, r2, #16
    1814:	0c00      	lsrs	r0, r0, #16
    1816:	2180      	movs	r1, #128	; 0x80
    1818:	05c9      	lsls	r1, r1, #23
    181a:	4301      	orrs	r1, r0

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    181c:	2082      	movs	r0, #130	; 0x82
    181e:	05c0      	lsls	r0, r0, #23
    1820:	4684      	mov	ip, r0
    1822:	4463      	add	r3, ip
    1824:	6299      	str	r1, [r3, #40]	; 0x28
		hri_port_write_WRCONFIG_reg(
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
    1826:	0c11      	lsrs	r1, r2, #16
		hri_port_write_WRCONFIG_reg(
    1828:	25c0      	movs	r5, #192	; 0xc0
    182a:	062d      	lsls	r5, r5, #24
    182c:	4329      	orrs	r1, r5
    182e:	6299      	str	r1, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    1830:	6172      	str	r2, [r6, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    1832:	2310      	movs	r3, #16
    1834:	2288      	movs	r2, #136	; 0x88
    1836:	50a3      	str	r3, [r4, r2]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    1838:	3220      	adds	r2, #32
    183a:	4912      	ldr	r1, [pc, #72]	; (1884 <can_begin+0xe8>)
    183c:	5081      	str	r1, [r0, r2]
    183e:	5085      	str	r5, [r0, r2]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    1840:	3a14      	subs	r2, #20
    1842:	50a3      	str	r3, [r4, r2]
}
    1844:	bd70      	pop	{r4, r5, r6, pc}
		hri_can_write_NBTP_reg(dev->hw, can_btp_reg_val);
    1846:	6823      	ldr	r3, [r4, #0]
	((Can *)hw)->NBTP.reg = data;
    1848:	61d8      	str	r0, [r3, #28]
    184a:	4b0f      	ldr	r3, [pc, #60]	; (1888 <can_begin+0xec>)
    184c:	2280      	movs	r2, #128	; 0x80
    184e:	0252      	lsls	r2, r2, #9
    1850:	317e      	adds	r1, #126	; 0x7e
    1852:	505a      	str	r2, [r3, r1]
  __ASM volatile ("dsb 0xF":::"memory");
    1854:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1858:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    185c:	3101      	adds	r1, #1
    185e:	31ff      	adds	r1, #255	; 0xff
    1860:	505a      	str	r2, [r3, r1]
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1862:	601a      	str	r2, [r3, #0]
		hri_can_write_ILE_reg(dev->hw, CAN_ILE_EINT0);
    1864:	6823      	ldr	r3, [r4, #0]
	((Can *)hw)->ILE.reg = data;
    1866:	2201      	movs	r2, #1
    1868:	65da      	str	r2, [r3, #92]	; 0x5c
    186a:	e7b7      	b.n	17dc <can_begin+0x40>
    186c:	02dc6800 	.word	0x02dc6800
    1870:	00000e6f 	.word	0x00000e6f
    1874:	01ff0000 	.word	0x01ff0000
    1878:	06000a03 	.word	0x06000a03
    187c:	42002000 	.word	0x42002000
    1880:	00000409 	.word	0x00000409
    1884:	40000010 	.word	0x40000010
    1888:	e000e100 	.word	0xe000e100

0000188c <can_set_rxcb>:
{
    188c:	b510      	push	{r4, lr}
    188e:	000a      	movs	r2, r1
	can_async_register_callback(descr, CAN_ASYNC_RX_CB, cb);
    1890:	2100      	movs	r1, #0
    1892:	4b01      	ldr	r3, [pc, #4]	; (1898 <can_set_rxcb+0xc>)
    1894:	4798      	blx	r3
}
    1896:	bd10      	pop	{r4, pc}
    1898:	00000431 	.word	0x00000431

0000189c <can_set_filter>:
{
    189c:	b510      	push	{r4, lr}
    189e:	b082      	sub	sp, #8
	filter.id   = ID;
    18a0:	9100      	str	r1, [sp, #0]
	filter.mask = mask;
    18a2:	9201      	str	r2, [sp, #4]
	if(ext) // Extended frame format
    18a4:	2b00      	cmp	r3, #0
    18a6:	d106      	bne.n	18b6 <can_set_filter+0x1a>
		can_async_set_filter(descr, 0, CAN_FMT_STDID , &filter); // Index 0
    18a8:	466b      	mov	r3, sp
    18aa:	2200      	movs	r2, #0
    18ac:	2100      	movs	r1, #0
    18ae:	4c05      	ldr	r4, [pc, #20]	; (18c4 <can_set_filter+0x28>)
    18b0:	47a0      	blx	r4
}
    18b2:	b002      	add	sp, #8
    18b4:	bd10      	pop	{r4, pc}
		can_async_set_filter(descr, 0, CAN_FMT_EXTID , &filter); // Index 0
    18b6:	466b      	mov	r3, sp
    18b8:	2201      	movs	r2, #1
    18ba:	2100      	movs	r1, #0
    18bc:	4c01      	ldr	r4, [pc, #4]	; (18c4 <can_set_filter+0x28>)
    18be:	47a0      	blx	r4
    18c0:	e7f7      	b.n	18b2 <can_set_filter+0x16>
    18c2:	46c0      	nop			; (mov r8, r8)
    18c4:	00000481 	.word	0x00000481

000018c8 <can_busoff_set_cb>:

void can_busoff_set_cb(struct can_async_descriptor *const descr)
{
	uint32_t ie;
	descr->cb.irq_handler = (void (*)(struct can_async_descriptor *const, enum can_async_interrupt_type)) isr_can_bus_off_error_cb;
    18c8:	4b05      	ldr	r3, [pc, #20]	; (18e0 <can_busoff_set_cb+0x18>)
    18ca:	6243      	str	r3, [r0, #36]	; 0x24
	//= (cb != NULL) ? (void (*)(struct can_async_descriptor *const, enum can_async_interrupt_type))cb : NULL;
	
	ie = hri_can_get_IE_reg((&descr->dev)->hw, CAN_IE_RF0NE | CAN_IE_TCE);
    18cc:	6801      	ldr	r1, [r0, #0]
	tmp = ((Can *)hw)->IE.reg;
    18ce:	6d4b      	ldr	r3, [r1, #84]	; 0x54
	tmp &= mask;
    18d0:	4a04      	ldr	r2, [pc, #16]	; (18e4 <can_busoff_set_cb+0x1c>)
    18d2:	401a      	ands	r2, r3
	hri_can_write_IE_reg((&descr->dev)->hw, ie | ( 1 << CAN_IR_BO_Pos));
    18d4:	2380      	movs	r3, #128	; 0x80
    18d6:	049b      	lsls	r3, r3, #18
    18d8:	4313      	orrs	r3, r2
	((Can *)hw)->IE.reg = data;
    18da:	654b      	str	r3, [r1, #84]	; 0x54
}
    18dc:	4770      	bx	lr
    18de:	46c0      	nop			; (mov r8, r8)
    18e0:	00001771 	.word	0x00001771
    18e4:	00000201 	.word	0x00000201

000018e8 <jump_to_application>:
		app.state = SERIAL_CAN_READ; // default will be read can commands
        break;
    }   
}
void jump_to_application()
{	
    18e8:	b510      	push	{r4, lr}
	/* Deinit all the peripherals */
	flash_deinit(&FLASH_0);
    18ea:	4808      	ldr	r0, [pc, #32]	; (190c <jump_to_application+0x24>)
    18ec:	4b08      	ldr	r3, [pc, #32]	; (1910 <jump_to_application+0x28>)
    18ee:	4798      	blx	r3
	can_async_deinit(&CAN_1);
    18f0:	4808      	ldr	r0, [pc, #32]	; (1914 <jump_to_application+0x2c>)
    18f2:	4b09      	ldr	r3, [pc, #36]	; (1918 <jump_to_application+0x30>)
    18f4:	4798      	blx	r3
	timer_deinit(&TIMER_0);
    18f6:	4809      	ldr	r0, [pc, #36]	; (191c <jump_to_application+0x34>)
    18f8:	4b09      	ldr	r3, [pc, #36]	; (1920 <jump_to_application+0x38>)
    18fa:	4798      	blx	r3
	usart_sync_deinit(&TARGET_IO);
    18fc:	4809      	ldr	r0, [pc, #36]	; (1924 <jump_to_application+0x3c>)
    18fe:	4b0a      	ldr	r3, [pc, #40]	; (1928 <jump_to_application+0x40>)
    1900:	4798      	blx	r3
	
	
	
	/* Jump to the application reset handler */
	void (* app_call)(void) = (void*)(*(volatile uint32_t *)(APP_START_BASE_ADDRESS+4));
    1902:	4b0a      	ldr	r3, [pc, #40]	; (192c <jump_to_application+0x44>)
    1904:	681b      	ldr	r3, [r3, #0]
	app_call();
    1906:	4798      	blx	r3
}
    1908:	bd10      	pop	{r4, pc}
    190a:	46c0      	nop			; (mov r8, r8)
    190c:	20000318 	.word	0x20000318
    1910:	00000539 	.word	0x00000539
    1914:	20000340 	.word	0x20000340
    1918:	000003e1 	.word	0x000003e1
    191c:	20000368 	.word	0x20000368
    1920:	00000811 	.word	0x00000811
    1924:	20000334 	.word	0x20000334
    1928:	00000a15 	.word	0x00000a15
    192c:	0000e004 	.word	0x0000e004

00001930 <write_array_data_to_flash>:
* params:
* return:
################################################
*/
void write_array_data_to_flash(uint8_t * data , int page_size , uint32_t abs_adress)
{
    1930:	b510      	push	{r4, lr}
    1932:	000b      	movs	r3, r1
    1934:	0011      	movs	r1, r2
    //ASF 4 api for write data
    flash_write(&FLASH_0, abs_adress, data, page_size);
    1936:	0002      	movs	r2, r0
    1938:	4801      	ldr	r0, [pc, #4]	; (1940 <write_array_data_to_flash+0x10>)
    193a:	4c02      	ldr	r4, [pc, #8]	; (1944 <write_array_data_to_flash+0x14>)
    193c:	47a0      	blx	r4
    
    #if BOOTLOADER_EVENT_PRINT_ENABLE
        printf("DRV: Flash Write [hex] -> %x\n\r",*abs_adress);
    #endif
}
    193e:	bd10      	pop	{r4, pc}
    1940:	20000318 	.word	0x20000318
    1944:	000005e1 	.word	0x000005e1

00001948 <get_flash_page_size>:
* params:
* return:
################################################
*/
int get_flash_page_size()
{
    1948:	b510      	push	{r4, lr}
    #if BOOTLOADER_EVENT_PRINT_ENABLE
        printf("DRV: Flash Page size ask!\n\r");
    #endif
     //ASF 4 api for get the flash page size
    return flash_get_page_size(&FLASH_0);
    194a:	4802      	ldr	r0, [pc, #8]	; (1954 <get_flash_page_size+0xc>)
    194c:	4b02      	ldr	r3, [pc, #8]	; (1958 <get_flash_page_size+0x10>)
    194e:	4798      	blx	r3
    
    
}
    1950:	bd10      	pop	{r4, pc}
    1952:	46c0      	nop			; (mov r8, r8)
    1954:	20000318 	.word	0x20000318
    1958:	00000679 	.word	0x00000679

0000195c <check_flash_data_array>:
* params:
* return:
################################################
*/
int check_flash_data_array(uint8_t * data , int * length , int * abs_adress)
{
    195c:	b570      	push	{r4, r5, r6, lr}
    195e:	b0a0      	sub	sp, #128	; 0x80
    1960:	0005      	movs	r5, r0
    1962:	000c      	movs	r4, r1
    
    
    uint8_t temp_data[MAX_FLASH_PAGE_SIZE_IN_BYTE];
    flash_read(&FLASH_0, *abs_adress, temp_data, *length);
    1964:	6811      	ldr	r1, [r2, #0]
    1966:	6823      	ldr	r3, [r4, #0]
    1968:	466a      	mov	r2, sp
    196a:	4809      	ldr	r0, [pc, #36]	; (1990 <check_flash_data_array+0x34>)
    196c:	4e09      	ldr	r6, [pc, #36]	; (1994 <check_flash_data_array+0x38>)
    196e:	47b0      	blx	r6
    int i;
    for(i=0;i< *length;i++){
    1970:	2300      	movs	r3, #0
    1972:	6822      	ldr	r2, [r4, #0]
    1974:	4293      	cmp	r3, r2
    1976:	da06      	bge.n	1986 <check_flash_data_array+0x2a>
        if(temp_data[i] != data[i]){
    1978:	466a      	mov	r2, sp
    197a:	5cd1      	ldrb	r1, [r2, r3]
    197c:	5cea      	ldrb	r2, [r5, r3]
    197e:	4291      	cmp	r1, r2
    1980:	d104      	bne.n	198c <check_flash_data_array+0x30>
    for(i=0;i< *length;i++){
    1982:	3301      	adds	r3, #1
    1984:	e7f5      	b.n	1972 <check_flash_data_array+0x16>
        }
    }
    #if BOOTLOADER_EVENT_PRINT_ENABLE
        printf("DRV: Flash write check! success");
    #endif
    return 1;
    1986:	2001      	movs	r0, #1
    
}
    1988:	b020      	add	sp, #128	; 0x80
    198a:	bd70      	pop	{r4, r5, r6, pc}
            return 0;
    198c:	2000      	movs	r0, #0
    198e:	e7fb      	b.n	1988 <check_flash_data_array+0x2c>
    1990:	20000318 	.word	0x20000318
    1994:	00000561 	.word	0x00000561

00001998 <decode_can_data>:
{
    1998:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	switch(can.can_id){
    199a:	4b6e      	ldr	r3, [pc, #440]	; (1b54 <decode_can_data+0x1bc>)
    199c:	681b      	ldr	r3, [r3, #0]
    199e:	2b0a      	cmp	r3, #10
    19a0:	d900      	bls.n	19a4 <decode_can_data+0xc>
    19a2:	e0d2      	b.n	1b4a <decode_can_data+0x1b2>
    19a4:	009b      	lsls	r3, r3, #2
    19a6:	4a6c      	ldr	r2, [pc, #432]	; (1b58 <decode_can_data+0x1c0>)
    19a8:	58d3      	ldr	r3, [r2, r3]
    19aa:	469f      	mov	pc, r3
		can.can_id = CAN_START_FLASH_WRITE;
    19ac:	4c69      	ldr	r4, [pc, #420]	; (1b54 <decode_can_data+0x1bc>)
    19ae:	2301      	movs	r3, #1
    19b0:	6023      	str	r3, [r4, #0]
		can.can_data[0] = (uint8_t)get_flash_page_size();
    19b2:	4b6a      	ldr	r3, [pc, #424]	; (1b5c <decode_can_data+0x1c4>)
    19b4:	4798      	blx	r3
    19b6:	b2c0      	uxtb	r0, r0
    19b8:	7120      	strb	r0, [r4, #4]
		page_size = can.can_data[0]; // update the page size
    19ba:	4b69      	ldr	r3, [pc, #420]	; (1b60 <decode_can_data+0x1c8>)
    19bc:	6018      	str	r0, [r3, #0]
		flash_write_info.temp_32bit_data = flash_write_info.curr_flash_write_addr;
    19be:	4a69      	ldr	r2, [pc, #420]	; (1b64 <decode_can_data+0x1cc>)
    19c0:	6813      	ldr	r3, [r2, #0]
    19c2:	218c      	movs	r1, #140	; 0x8c
    19c4:	5053      	str	r3, [r2, r1]
		can.can_data[1] = (uint8_t)flash_write_info.temp_32bit_data;
    19c6:	7163      	strb	r3, [r4, #5]
		can.can_data[2] = (uint8_t)(flash_write_info.temp_32bit_data >> 8);
    19c8:	0a1b      	lsrs	r3, r3, #8
    19ca:	71a3      	strb	r3, [r4, #6]
		can.len = 3;
    19cc:	2303      	movs	r3, #3
    19ce:	6463      	str	r3, [r4, #68]	; 0x44
		can_write(&can);
    19d0:	0020      	movs	r0, r4
    19d2:	4b65      	ldr	r3, [pc, #404]	; (1b68 <decode_can_data+0x1d0>)
    19d4:	4798      	blx	r3
		app.state = SERIAL_CAN_READ;
    19d6:	2202      	movs	r2, #2
    19d8:	4b64      	ldr	r3, [pc, #400]	; (1b6c <decode_can_data+0x1d4>)
    19da:	701a      	strb	r2, [r3, #0]
}
    19dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if(flash_write_info.page_byte_seq == can.can_data[0]){ // if the expected seq matched
    19de:	2388      	movs	r3, #136	; 0x88
    19e0:	4a60      	ldr	r2, [pc, #384]	; (1b64 <decode_can_data+0x1cc>)
    19e2:	58d6      	ldr	r6, [r2, r3]
    19e4:	4b5b      	ldr	r3, [pc, #364]	; (1b54 <decode_can_data+0x1bc>)
    19e6:	791b      	ldrb	r3, [r3, #4]
    19e8:	429e      	cmp	r6, r3
    19ea:	d121      	bne.n	1a30 <decode_can_data+0x98>
    19ec:	2002      	movs	r0, #2
    19ee:	2100      	movs	r1, #0
    19f0:	e00b      	b.n	1a0a <decode_can_data+0x72>
				flash_write_info.flash_wr_buffer[flash_write_info.flash_wr_buffer_index++] = can.can_data[j];
    19f2:	4b5c      	ldr	r3, [pc, #368]	; (1b64 <decode_can_data+0x1cc>)
    19f4:	2284      	movs	r2, #132	; 0x84
    19f6:	589c      	ldr	r4, [r3, r2]
    19f8:	1c65      	adds	r5, r4, #1
    19fa:	509d      	str	r5, [r3, r2]
    19fc:	4a55      	ldr	r2, [pc, #340]	; (1b54 <decode_can_data+0x1bc>)
    19fe:	1812      	adds	r2, r2, r0
    1a00:	7912      	ldrb	r2, [r2, #4]
    1a02:	191b      	adds	r3, r3, r4
    1a04:	711a      	strb	r2, [r3, #4]
			for(int i = 0 , j = 2; (i < can.can_data[1]) ; i++, j++){
    1a06:	3101      	adds	r1, #1
    1a08:	3001      	adds	r0, #1
    1a0a:	4b52      	ldr	r3, [pc, #328]	; (1b54 <decode_can_data+0x1bc>)
    1a0c:	795b      	ldrb	r3, [r3, #5]
    1a0e:	4299      	cmp	r1, r3
    1a10:	dbef      	blt.n	19f2 <decode_can_data+0x5a>
			flash_write_info.page_byte_seq++; // Increment the sequence
    1a12:	3601      	adds	r6, #1
    1a14:	2388      	movs	r3, #136	; 0x88
    1a16:	4a53      	ldr	r2, [pc, #332]	; (1b64 <decode_can_data+0x1cc>)
    1a18:	50d6      	str	r6, [r2, r3]
			can.can_id = CAN_SEND_FLASH_DATA;
    1a1a:	484e      	ldr	r0, [pc, #312]	; (1b54 <decode_can_data+0x1bc>)
    1a1c:	3b85      	subs	r3, #133	; 0x85
    1a1e:	6003      	str	r3, [r0, #0]
			can.len = 1;
    1a20:	3b02      	subs	r3, #2
    1a22:	6443      	str	r3, [r0, #68]	; 0x44
			can_write(&can);
    1a24:	4b50      	ldr	r3, [pc, #320]	; (1b68 <decode_can_data+0x1d0>)
    1a26:	4798      	blx	r3
			app.state = SERIAL_CAN_READ;
    1a28:	2202      	movs	r2, #2
    1a2a:	4b50      	ldr	r3, [pc, #320]	; (1b6c <decode_can_data+0x1d4>)
    1a2c:	701a      	strb	r2, [r3, #0]
    1a2e:	e7d5      	b.n	19dc <decode_can_data+0x44>
			can.can_id = CAN_SENT_FLASH_WRITE_ERROR;
    1a30:	4848      	ldr	r0, [pc, #288]	; (1b54 <decode_can_data+0x1bc>)
    1a32:	230d      	movs	r3, #13
    1a34:	6003      	str	r3, [r0, #0]
			can.can_data[0] = 0;
    1a36:	2400      	movs	r4, #0
    1a38:	7104      	strb	r4, [r0, #4]
			can.len = 1;
    1a3a:	3b0c      	subs	r3, #12
    1a3c:	6443      	str	r3, [r0, #68]	; 0x44
			can_write(&can);
    1a3e:	4b4a      	ldr	r3, [pc, #296]	; (1b68 <decode_can_data+0x1d0>)
    1a40:	4798      	blx	r3
			app.state = ERROR;
    1a42:	4b4a      	ldr	r3, [pc, #296]	; (1b6c <decode_can_data+0x1d4>)
    1a44:	701c      	strb	r4, [r3, #0]
    1a46:	e7c9      	b.n	19dc <decode_can_data+0x44>
		if(can.can_data[0]){ // write page and give ack
    1a48:	4b42      	ldr	r3, [pc, #264]	; (1b54 <decode_can_data+0x1bc>)
    1a4a:	791b      	ldrb	r3, [r3, #4]
    1a4c:	2b00      	cmp	r3, #0
    1a4e:	d034      	beq.n	1aba <decode_can_data+0x122>
			uint32_t temp_address = flash_write_info.curr_flash_write_addr;
    1a50:	4c44      	ldr	r4, [pc, #272]	; (1b64 <decode_can_data+0x1cc>)
			int byte_size = flash_write_info.flash_wr_buffer_index;
    1a52:	2684      	movs	r6, #132	; 0x84
			write_array_data_to_flash(flash_write_info.flash_wr_buffer , byte_size , temp_address);
    1a54:	1d25      	adds	r5, r4, #4
    1a56:	6822      	ldr	r2, [r4, #0]
    1a58:	59a1      	ldr	r1, [r4, r6]
    1a5a:	0028      	movs	r0, r5
    1a5c:	4b44      	ldr	r3, [pc, #272]	; (1b70 <decode_can_data+0x1d8>)
    1a5e:	4798      	blx	r3
			int ret =  check_flash_data_array(flash_write_info.flash_wr_buffer , &flash_write_info.flash_wr_buffer_index , &flash_write_info.curr_flash_write_addr);
    1a60:	0021      	movs	r1, r4
    1a62:	3184      	adds	r1, #132	; 0x84
    1a64:	0022      	movs	r2, r4
    1a66:	0028      	movs	r0, r5
    1a68:	4b42      	ldr	r3, [pc, #264]	; (1b74 <decode_can_data+0x1dc>)
    1a6a:	4798      	blx	r3
			can.can_id = CAN_SEND_PAGE_COMPLETE;
    1a6c:	4b39      	ldr	r3, [pc, #228]	; (1b54 <decode_can_data+0x1bc>)
    1a6e:	220a      	movs	r2, #10
    1a70:	601a      	str	r2, [r3, #0]
			can.can_data[0] = ret;
    1a72:	7118      	strb	r0, [r3, #4]
			can.can_data[1] = flash_write_info.flash_wr_buffer_index; // number of byte written
    1a74:	5da2      	ldrb	r2, [r4, r6]
    1a76:	715a      	strb	r2, [r3, #5]
			bit_to_arr_conv.bit32_data = flash_write_info.curr_flash_write_addr;
    1a78:	6822      	ldr	r2, [r4, #0]
    1a7a:	0a10      	lsrs	r0, r2, #8
    1a7c:	0c11      	lsrs	r1, r2, #16
    1a7e:	4f3e      	ldr	r7, [pc, #248]	; (1b78 <decode_can_data+0x1e0>)
    1a80:	603a      	str	r2, [r7, #0]
			can.can_data[2] = bit_to_arr_conv.byte_arr[0];
    1a82:	719a      	strb	r2, [r3, #6]
			can.can_data[3] = bit_to_arr_conv.byte_arr[1];
    1a84:	71d8      	strb	r0, [r3, #7]
			can.can_data[4] = bit_to_arr_conv.byte_arr[2];
    1a86:	7219      	strb	r1, [r3, #8]
			can.can_data[5] = bit_to_arr_conv.byte_arr[3];
    1a88:	0e12      	lsrs	r2, r2, #24
    1a8a:	725a      	strb	r2, [r3, #9]
			can.len = 6;
    1a8c:	2206      	movs	r2, #6
    1a8e:	645a      	str	r2, [r3, #68]	; 0x44
			can_write(&can);
    1a90:	0018      	movs	r0, r3
    1a92:	4b35      	ldr	r3, [pc, #212]	; (1b68 <decode_can_data+0x1d0>)
    1a94:	4798      	blx	r3
			flash_write_info.curr_flash_write_addr += flash_write_info.flash_wr_buffer_index;
    1a96:	6823      	ldr	r3, [r4, #0]
    1a98:	59a2      	ldr	r2, [r4, r6]
    1a9a:	4694      	mov	ip, r2
    1a9c:	4463      	add	r3, ip
    1a9e:	6023      	str	r3, [r4, #0]
			memset(flash_write_info.flash_wr_buffer , 0 , 128);
    1aa0:	2280      	movs	r2, #128	; 0x80
    1aa2:	2100      	movs	r1, #0
    1aa4:	0028      	movs	r0, r5
    1aa6:	4b35      	ldr	r3, [pc, #212]	; (1b7c <decode_can_data+0x1e4>)
    1aa8:	4798      	blx	r3
			flash_write_info.flash_wr_buffer_index = 0;
    1aaa:	2300      	movs	r3, #0
    1aac:	51a3      	str	r3, [r4, r6]
			flash_write_info.page_byte_seq = 0;
    1aae:	2288      	movs	r2, #136	; 0x88
    1ab0:	50a3      	str	r3, [r4, r2]
			app.state = SERIAL_CAN_READ;
    1ab2:	3a86      	subs	r2, #134	; 0x86
    1ab4:	4b2d      	ldr	r3, [pc, #180]	; (1b6c <decode_can_data+0x1d4>)
    1ab6:	701a      	strb	r2, [r3, #0]
    1ab8:	e790      	b.n	19dc <decode_can_data+0x44>
			can.can_id = CAN_SENT_FLASH_WRITE_ERROR;
    1aba:	4826      	ldr	r0, [pc, #152]	; (1b54 <decode_can_data+0x1bc>)
    1abc:	230d      	movs	r3, #13
    1abe:	6003      	str	r3, [r0, #0]
			can.can_data[0] = 0;
    1ac0:	2400      	movs	r4, #0
    1ac2:	7104      	strb	r4, [r0, #4]
			can.len = 1;
    1ac4:	3b0c      	subs	r3, #12
    1ac6:	6443      	str	r3, [r0, #68]	; 0x44
			can_write(&can);
    1ac8:	4b27      	ldr	r3, [pc, #156]	; (1b68 <decode_can_data+0x1d0>)
    1aca:	4798      	blx	r3
			app.state = ERROR;
    1acc:	4b27      	ldr	r3, [pc, #156]	; (1b6c <decode_can_data+0x1d4>)
    1ace:	701c      	strb	r4, [r3, #0]
    1ad0:	e784      	b.n	19dc <decode_can_data+0x44>
		temp_32bit_data = ( ( (can.can_data[0]<<8) & 0xff00 ) | ( (can.can_data[1]) & 0xff) );
    1ad2:	4820      	ldr	r0, [pc, #128]	; (1b54 <decode_can_data+0x1bc>)
    1ad4:	7903      	ldrb	r3, [r0, #4]
    1ad6:	021b      	lsls	r3, r3, #8
    1ad8:	7942      	ldrb	r2, [r0, #5]
    1ada:	4313      	orrs	r3, r2
    1adc:	4a28      	ldr	r2, [pc, #160]	; (1b80 <decode_can_data+0x1e8>)
    1ade:	6093      	str	r3, [r2, #8]
		flash_write_info.curr_flash_write_addr = (temp_32bit_data*16);
    1ae0:	011b      	lsls	r3, r3, #4
    1ae2:	4a20      	ldr	r2, [pc, #128]	; (1b64 <decode_can_data+0x1cc>)
    1ae4:	6013      	str	r3, [r2, #0]
		bit_to_arr_conv.bit32_data = flash_write_info.curr_flash_write_addr;
    1ae6:	0a1a      	lsrs	r2, r3, #8
    1ae8:	4923      	ldr	r1, [pc, #140]	; (1b78 <decode_can_data+0x1e0>)
    1aea:	600b      	str	r3, [r1, #0]
		can.can_data[0] = bit_to_arr_conv.byte_arr[0];
    1aec:	7103      	strb	r3, [r0, #4]
		can.can_data[1] = bit_to_arr_conv.byte_arr[1];
    1aee:	7142      	strb	r2, [r0, #5]
		can.can_data[2] = bit_to_arr_conv.byte_arr[2];
    1af0:	0c1b      	lsrs	r3, r3, #16
    1af2:	7183      	strb	r3, [r0, #6]
		can.can_data[3] = bit_to_arr_conv.byte_arr[3];
    1af4:	2300      	movs	r3, #0
    1af6:	71c3      	strb	r3, [r0, #7]
		can.can_id = CAN_SEND_EXT_SEG_ADDR;
    1af8:	3305      	adds	r3, #5
    1afa:	6003      	str	r3, [r0, #0]
		can.len = 4;
    1afc:	3b01      	subs	r3, #1
    1afe:	6443      	str	r3, [r0, #68]	; 0x44
		can_write(&can);
    1b00:	4b19      	ldr	r3, [pc, #100]	; (1b68 <decode_can_data+0x1d0>)
    1b02:	4798      	blx	r3
		app.state = SERIAL_CAN_READ;
    1b04:	2202      	movs	r2, #2
    1b06:	4b19      	ldr	r3, [pc, #100]	; (1b6c <decode_can_data+0x1d4>)
    1b08:	701a      	strb	r2, [r3, #0]
	break;
    1b0a:	e767      	b.n	19dc <decode_can_data+0x44>
		if(can.can_data[0]){
    1b0c:	4b11      	ldr	r3, [pc, #68]	; (1b54 <decode_can_data+0x1bc>)
    1b0e:	791b      	ldrb	r3, [r3, #4]
    1b10:	2b00      	cmp	r3, #0
    1b12:	d00e      	beq.n	1b32 <decode_can_data+0x19a>
			can.can_id = CAN_SEND_JUMP_TO_APP;
    1b14:	480f      	ldr	r0, [pc, #60]	; (1b54 <decode_can_data+0x1bc>)
    1b16:	2309      	movs	r3, #9
    1b18:	6003      	str	r3, [r0, #0]
			can.can_data[0] = 1;
    1b1a:	3b08      	subs	r3, #8
    1b1c:	7103      	strb	r3, [r0, #4]
			can.len = 1;
    1b1e:	6443      	str	r3, [r0, #68]	; 0x44
			can_write(&can);
    1b20:	4b11      	ldr	r3, [pc, #68]	; (1b68 <decode_can_data+0x1d0>)
    1b22:	4798      	blx	r3
			delay_ms(500);
    1b24:	20fa      	movs	r0, #250	; 0xfa
    1b26:	0040      	lsls	r0, r0, #1
    1b28:	4b16      	ldr	r3, [pc, #88]	; (1b84 <decode_can_data+0x1ec>)
    1b2a:	4798      	blx	r3
			jump_to_application();
    1b2c:	4b16      	ldr	r3, [pc, #88]	; (1b88 <decode_can_data+0x1f0>)
    1b2e:	4798      	blx	r3
    1b30:	e754      	b.n	19dc <decode_can_data+0x44>
			can.can_id = CAN_SENT_FLASH_WRITE_ERROR;
    1b32:	4808      	ldr	r0, [pc, #32]	; (1b54 <decode_can_data+0x1bc>)
    1b34:	230d      	movs	r3, #13
    1b36:	6003      	str	r3, [r0, #0]
			can.can_data[0] = 0;
    1b38:	2400      	movs	r4, #0
    1b3a:	7104      	strb	r4, [r0, #4]
			can.len = 1;
    1b3c:	3b0c      	subs	r3, #12
    1b3e:	6443      	str	r3, [r0, #68]	; 0x44
			can_write(&can);
    1b40:	4b09      	ldr	r3, [pc, #36]	; (1b68 <decode_can_data+0x1d0>)
    1b42:	4798      	blx	r3
			app.state = ERROR;
    1b44:	4b09      	ldr	r3, [pc, #36]	; (1b6c <decode_can_data+0x1d4>)
    1b46:	701c      	strb	r4, [r3, #0]
    1b48:	e748      	b.n	19dc <decode_can_data+0x44>
		app.state = SERIAL_CAN_READ; // default will be read can commands
    1b4a:	2202      	movs	r2, #2
    1b4c:	4b07      	ldr	r3, [pc, #28]	; (1b6c <decode_can_data+0x1d4>)
    1b4e:	701a      	strb	r2, [r3, #0]
}
    1b50:	e744      	b.n	19dc <decode_can_data+0x44>
    1b52:	46c0      	nop			; (mov r8, r8)
    1b54:	20000458 	.word	0x20000458
    1b58:	000031e8 	.word	0x000031e8
    1b5c:	00001949 	.word	0x00001949
    1b60:	20000014 	.word	0x20000014
    1b64:	200003c8 	.word	0x200003c8
    1b68:	00001cc9 	.word	0x00001cc9
    1b6c:	200004b4 	.word	0x200004b4
    1b70:	00001931 	.word	0x00001931
    1b74:	0000195d 	.word	0x0000195d
    1b78:	200004b0 	.word	0x200004b0
    1b7c:	00002197 	.word	0x00002197
    1b80:	20000240 	.word	0x20000240
    1b84:	000004b5 	.word	0x000004b5
    1b88:	000018e9 	.word	0x000018e9

00001b8c <main>:
{
    1b8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1b8e:	46ce      	mov	lr, r9
    1b90:	4647      	mov	r7, r8
    1b92:	b580      	push	{r7, lr}
	atmel_start_init();
    1b94:	4b33      	ldr	r3, [pc, #204]	; (1c64 <main+0xd8>)
    1b96:	4798      	blx	r3
	time_counts_events.cb     = isr_timer_0_call; // ISR function registration
    1b98:	4c33      	ldr	r4, [pc, #204]	; (1c68 <main+0xdc>)
    1b9a:	4b34      	ldr	r3, [pc, #208]	; (1c6c <main+0xe0>)
    1b9c:	61a3      	str	r3, [r4, #24]
	time_counts_events.mode   = TIMER_TASK_REPEAT;
    1b9e:	2301      	movs	r3, #1
    1ba0:	4699      	mov	r9, r3
    1ba2:	7723      	strb	r3, [r4, #28]
	time_counts_events.time_label = 0;
    1ba4:	2600      	movs	r6, #0
    1ba6:	6126      	str	r6, [r4, #16]
	timer_add_task(&TIMER_0, &time_counts_events);
    1ba8:	0021      	movs	r1, r4
    1baa:	310c      	adds	r1, #12
    1bac:	4830      	ldr	r0, [pc, #192]	; (1c70 <main+0xe4>)
    1bae:	4b31      	ldr	r3, [pc, #196]	; (1c74 <main+0xe8>)
    1bb0:	4798      	blx	r3
	can_begin(&CAN_1 , CAN1 , 500 , 73);	// Initialize the CAN0 instance at 500 kbps
    1bb2:	4d31      	ldr	r5, [pc, #196]	; (1c78 <main+0xec>)
    1bb4:	2349      	movs	r3, #73	; 0x49
    1bb6:	22fa      	movs	r2, #250	; 0xfa
    1bb8:	0052      	lsls	r2, r2, #1
    1bba:	4930      	ldr	r1, [pc, #192]	; (1c7c <main+0xf0>)
    1bbc:	0028      	movs	r0, r5
    1bbe:	4f30      	ldr	r7, [pc, #192]	; (1c80 <main+0xf4>)
    1bc0:	47b8      	blx	r7
	can_set_rxcb(&CAN_1 , (FUNC_PTR)isr_can_0_rx_call);	// Set the can rx callback function
    1bc2:	4930      	ldr	r1, [pc, #192]	; (1c84 <main+0xf8>)
    1bc4:	0028      	movs	r0, r5
    1bc6:	4b30      	ldr	r3, [pc, #192]	; (1c88 <main+0xfc>)
    1bc8:	4798      	blx	r3
	can_set_filter(&CAN_1 , 0 , 0 , STD_ID);	// Set the filter for receiving all the message
    1bca:	2300      	movs	r3, #0
    1bcc:	2200      	movs	r2, #0
    1bce:	2100      	movs	r1, #0
    1bd0:	0028      	movs	r0, r5
    1bd2:	4f2e      	ldr	r7, [pc, #184]	; (1c8c <main+0x100>)
    1bd4:	47b8      	blx	r7
	can_busoff_set_cb(&CAN_1); // Bus off condition
    1bd6:	0028      	movs	r0, r5
    1bd8:	4b2d      	ldr	r3, [pc, #180]	; (1c90 <main+0x104>)
    1bda:	4798      	blx	r3
	flash_write_info.curr_flash_write_addr	= APP_START_BASE_ADDRESS;
    1bdc:	4b2d      	ldr	r3, [pc, #180]	; (1c94 <main+0x108>)
    1bde:	22e0      	movs	r2, #224	; 0xe0
    1be0:	0212      	lsls	r2, r2, #8
    1be2:	601a      	str	r2, [r3, #0]
	flash_write_info.flash_wr_buffer_index	= 0; // reset after every page write
    1be4:	2284      	movs	r2, #132	; 0x84
    1be6:	509e      	str	r6, [r3, r2]
	flash_write_info.page_byte_seq		= 0;
    1be8:	3204      	adds	r2, #4
    1bea:	509e      	str	r6, [r3, r2]
	can.can_id				= -1;
    1bec:	3a89      	subs	r2, #137	; 0x89
    1bee:	4b2a      	ldr	r3, [pc, #168]	; (1c98 <main+0x10c>)
    1bf0:	601a      	str	r2, [r3, #0]
	app.state = INIT;
    1bf2:	4b2a      	ldr	r3, [pc, #168]	; (1c9c <main+0x110>)
    1bf4:	464a      	mov	r2, r9
    1bf6:	701a      	strb	r2, [r3, #0]
	time_counts_events.interval = BOOT_LOADER_TIMEOUT;
    1bf8:	23fa      	movs	r3, #250	; 0xfa
    1bfa:	00db      	lsls	r3, r3, #3
    1bfc:	6163      	str	r3, [r4, #20]
    1bfe:	e009      	b.n	1c14 <main+0x88>
				can_init(&can);
    1c00:	4825      	ldr	r0, [pc, #148]	; (1c98 <main+0x10c>)
    1c02:	4b27      	ldr	r3, [pc, #156]	; (1ca0 <main+0x114>)
    1c04:	4798      	blx	r3
				app.state = SERIAL_CAN_READ;
    1c06:	2202      	movs	r2, #2
    1c08:	4b24      	ldr	r3, [pc, #144]	; (1c9c <main+0x110>)
    1c0a:	701a      	strb	r2, [r3, #0]
		if(timer_event_occured){
    1c0c:	4b16      	ldr	r3, [pc, #88]	; (1c68 <main+0xdc>)
    1c0e:	681b      	ldr	r3, [r3, #0]
    1c10:	2b00      	cmp	r3, #0
    1c12:	d121      	bne.n	1c58 <main+0xcc>
		switch(app.state){
    1c14:	4b21      	ldr	r3, [pc, #132]	; (1c9c <main+0x110>)
    1c16:	781b      	ldrb	r3, [r3, #0]
    1c18:	2b01      	cmp	r3, #1
    1c1a:	d0f1      	beq.n	1c00 <main+0x74>
    1c1c:	2b00      	cmp	r3, #0
    1c1e:	d017      	beq.n	1c50 <main+0xc4>
    1c20:	2b02      	cmp	r3, #2
    1c22:	d005      	beq.n	1c30 <main+0xa4>
    1c24:	2b03      	cmp	r3, #3
    1c26:	d010      	beq.n	1c4a <main+0xbe>
				app.state = SERIAL_CAN_READ; // Always listen to programmer
    1c28:	2202      	movs	r2, #2
    1c2a:	4b1c      	ldr	r3, [pc, #112]	; (1c9c <main+0x110>)
    1c2c:	701a      	strb	r2, [r3, #0]
			break;
    1c2e:	e7ed      	b.n	1c0c <main+0x80>
				if(can_read(&can)){
    1c30:	4819      	ldr	r0, [pc, #100]	; (1c98 <main+0x10c>)
    1c32:	4b1c      	ldr	r3, [pc, #112]	; (1ca4 <main+0x118>)
    1c34:	4798      	blx	r3
    1c36:	2800      	cmp	r0, #0
    1c38:	d003      	beq.n	1c42 <main+0xb6>
					app.state = DECODE_CAN_DATA;
    1c3a:	2203      	movs	r2, #3
    1c3c:	4b17      	ldr	r3, [pc, #92]	; (1c9c <main+0x110>)
    1c3e:	701a      	strb	r2, [r3, #0]
    1c40:	e7e4      	b.n	1c0c <main+0x80>
					app.state = SERIAL_CAN_READ;
    1c42:	2202      	movs	r2, #2
    1c44:	4b15      	ldr	r3, [pc, #84]	; (1c9c <main+0x110>)
    1c46:	701a      	strb	r2, [r3, #0]
    1c48:	e7e0      	b.n	1c0c <main+0x80>
				decode_can_data();
    1c4a:	4b17      	ldr	r3, [pc, #92]	; (1ca8 <main+0x11c>)
    1c4c:	4798      	blx	r3
			break;
    1c4e:	e7dd      	b.n	1c0c <main+0x80>
				app.state = SERIAL_CAN_READ;
    1c50:	2202      	movs	r2, #2
    1c52:	4b12      	ldr	r3, [pc, #72]	; (1c9c <main+0x110>)
    1c54:	701a      	strb	r2, [r3, #0]
			break;			
    1c56:	e7d9      	b.n	1c0c <main+0x80>
			timer_event_occured = 0;
    1c58:	2200      	movs	r2, #0
    1c5a:	4b03      	ldr	r3, [pc, #12]	; (1c68 <main+0xdc>)
    1c5c:	601a      	str	r2, [r3, #0]
			jump_to_application();
    1c5e:	4b13      	ldr	r3, [pc, #76]	; (1cac <main+0x120>)
    1c60:	4798      	blx	r3
    1c62:	e7d7      	b.n	1c14 <main+0x88>
    1c64:	0000011d 	.word	0x0000011d
    1c68:	20000240 	.word	0x20000240
    1c6c:	00001785 	.word	0x00001785
    1c70:	20000368 	.word	0x20000368
    1c74:	00000839 	.word	0x00000839
    1c78:	20000340 	.word	0x20000340
    1c7c:	42002000 	.word	0x42002000
    1c80:	0000179d 	.word	0x0000179d
    1c84:	00001791 	.word	0x00001791
    1c88:	0000188d 	.word	0x0000188d
    1c8c:	0000189d 	.word	0x0000189d
    1c90:	000018c9 	.word	0x000018c9
    1c94:	200003c8 	.word	0x200003c8
    1c98:	20000458 	.word	0x20000458
    1c9c:	200004b4 	.word	0x200004b4
    1ca0:	00001cb1 	.word	0x00001cb1
    1ca4:	00001e81 	.word	0x00001e81
    1ca8:	00001999 	.word	0x00001999
    1cac:	000018e9 	.word	0x000018e9

00001cb0 <can_init>:
uint8_t rx_buffer[MAX_INCOMMING_STRING_LENGTH] = {0};
uint8_t rx_buff_index = 0;


void can_init(const can_context_type * can)
{
    1cb0:	b510      	push	{r4, lr}
       usart_sync_get_io_descriptor(&TARGET_IO, &serial_io);	// Get the descriptor
    1cb2:	4902      	ldr	r1, [pc, #8]	; (1cbc <can_init+0xc>)
    1cb4:	4802      	ldr	r0, [pc, #8]	; (1cc0 <can_init+0x10>)
    1cb6:	4b03      	ldr	r3, [pc, #12]	; (1cc4 <can_init+0x14>)
    1cb8:	4798      	blx	r3
}
    1cba:	bd10      	pop	{r4, pc}
    1cbc:	200004c0 	.word	0x200004c0
    1cc0:	20000334 	.word	0x20000334
    1cc4:	00000a71 	.word	0x00000a71

00001cc8 <can_write>:


void can_write(can_context_type * can)
{
    1cc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1cca:	0005      	movs	r5, r0
		--------------------------------------
	*/
	#else 	
	
        // Serial String Format tiiildddd..dd\n | max data is the byte
        memset(uart_tx_frame_buff , 0 , 23);
    1ccc:	4c63      	ldr	r4, [pc, #396]	; (1e5c <can_write+0x194>)
    1cce:	2217      	movs	r2, #23
    1cd0:	2100      	movs	r1, #0
    1cd2:	0020      	movs	r0, r4
    1cd4:	4f62      	ldr	r7, [pc, #392]	; (1e60 <can_write+0x198>)
    1cd6:	47b8      	blx	r7
        memset(temp_buff , 0 , 3);
    1cd8:	0026      	movs	r6, r4
    1cda:	3618      	adds	r6, #24
    1cdc:	2203      	movs	r2, #3
    1cde:	2100      	movs	r1, #0
    1ce0:	0030      	movs	r0, r6
    1ce2:	47b8      	blx	r7
        memset(temp_copy_buffer , 0 , 3);
    1ce4:	0020      	movs	r0, r4
    1ce6:	301c      	adds	r0, #28
    1ce8:	2203      	movs	r2, #3
    1cea:	2100      	movs	r1, #0
    1cec:	47b8      	blx	r7
        memset(temp_buff_data , 0 , 2);
    1cee:	2300      	movs	r3, #0
    1cf0:	8423      	strh	r3, [r4, #32]
	
        /*First element of the string is 't' */
        uart_tx_frame_buff[0] = 't';							
    1cf2:	3374      	adds	r3, #116	; 0x74
    1cf4:	7023      	strb	r3, [r4, #0]
        
        /* CAN ID convert to string and concat to uart_tx_buffer */
	//itoa (can->can_id,temp_buff,16);
        sprintf(temp_buff, "%x", can->can_id);
    1cf6:	682a      	ldr	r2, [r5, #0]
    1cf8:	495a      	ldr	r1, [pc, #360]	; (1e64 <can_write+0x19c>)
    1cfa:	0030      	movs	r0, r6
    1cfc:	4b5a      	ldr	r3, [pc, #360]	; (1e68 <can_write+0x1a0>)
    1cfe:	4798      	blx	r3

        // zero padding in MSb
        switch(strlen(temp_buff)){
    1d00:	0030      	movs	r0, r6
    1d02:	4b5a      	ldr	r3, [pc, #360]	; (1e6c <can_write+0x1a4>)
    1d04:	4798      	blx	r3
    1d06:	2802      	cmp	r0, #2
    1d08:	d00c      	beq.n	1d24 <can_write+0x5c>
    1d0a:	2803      	cmp	r0, #3
    1d0c:	d012      	beq.n	1d34 <can_write+0x6c>
    1d0e:	2801      	cmp	r0, #1
    1d10:	d001      	beq.n	1d16 <can_write+0x4e>
{
    1d12:	2400      	movs	r4, #0
    1d14:	e022      	b.n	1d5c <can_write+0x94>
		case 1: //if len is 1 the padding 0 to first 2 place
			temp_copy_buffer[0] = 0;
    1d16:	4b51      	ldr	r3, [pc, #324]	; (1e5c <can_write+0x194>)
    1d18:	2200      	movs	r2, #0
    1d1a:	771a      	strb	r2, [r3, #28]
			temp_copy_buffer[1] = 0;
    1d1c:	775a      	strb	r2, [r3, #29]
			temp_copy_buffer[2] = temp_buff[0];
    1d1e:	7e1a      	ldrb	r2, [r3, #24]
    1d20:	779a      	strb	r2, [r3, #30]
		break;
    1d22:	e7f6      	b.n	1d12 <can_write+0x4a>
            
		case 2: //if len is 1 the padding 0 to first 2 place
			temp_copy_buffer[0] = 0;
    1d24:	4b4d      	ldr	r3, [pc, #308]	; (1e5c <can_write+0x194>)
    1d26:	2200      	movs	r2, #0
    1d28:	771a      	strb	r2, [r3, #28]
			temp_copy_buffer[1] = temp_buff[0];
    1d2a:	7e1a      	ldrb	r2, [r3, #24]
    1d2c:	775a      	strb	r2, [r3, #29]
			temp_copy_buffer[2] = temp_buff[1];
    1d2e:	7e5a      	ldrb	r2, [r3, #25]
    1d30:	779a      	strb	r2, [r3, #30]
		break;
    1d32:	e7ee      	b.n	1d12 <can_write+0x4a>
            
		case 3: //if len is 1 the padding 0 to first 2 place
			temp_copy_buffer[0] = temp_buff[0];
    1d34:	4b49      	ldr	r3, [pc, #292]	; (1e5c <can_write+0x194>)
    1d36:	7e1a      	ldrb	r2, [r3, #24]
    1d38:	771a      	strb	r2, [r3, #28]
			temp_copy_buffer[1] = temp_buff[1];
    1d3a:	7e5a      	ldrb	r2, [r3, #25]
    1d3c:	775a      	strb	r2, [r3, #29]
			temp_copy_buffer[2] = temp_buff[2];
    1d3e:	7e9a      	ldrb	r2, [r3, #26]
    1d40:	779a      	strb	r2, [r3, #30]
		break;
    1d42:	e7e6      	b.n	1d12 <can_write+0x4a>
		break;
	}
	int i = 0;
	for(i=0; i < 3 ; i++){		
		if((temp_copy_buffer[i] >= 'a') && (temp_copy_buffer[i] <= 'f'))
			temp_copy_buffer[i] = toupper(temp_copy_buffer[i]);
    1d44:	4b4a      	ldr	r3, [pc, #296]	; (1e70 <can_write+0x1a8>)
    1d46:	4798      	blx	r3
    1d48:	1980      	adds	r0, r0, r6
    1d4a:	7842      	ldrb	r2, [r0, #1]
    1d4c:	2303      	movs	r3, #3
    1d4e:	4013      	ands	r3, r2
    1d50:	2b02      	cmp	r3, #2
    1d52:	d014      	beq.n	1d7e <can_write+0xb6>
    1d54:	4b41      	ldr	r3, [pc, #260]	; (1e5c <can_write+0x194>)
    1d56:	191b      	adds	r3, r3, r4
    1d58:	771e      	strb	r6, [r3, #28]
	for(i=0; i < 3 ; i++){		
    1d5a:	3401      	adds	r4, #1
    1d5c:	2c02      	cmp	r4, #2
    1d5e:	dc10      	bgt.n	1d82 <can_write+0xba>
		if((temp_copy_buffer[i] >= 'a') && (temp_copy_buffer[i] <= 'f'))
    1d60:	4b3e      	ldr	r3, [pc, #248]	; (1e5c <can_write+0x194>)
    1d62:	191b      	adds	r3, r3, r4
    1d64:	7f1e      	ldrb	r6, [r3, #28]
    1d66:	0033      	movs	r3, r6
    1d68:	3b61      	subs	r3, #97	; 0x61
    1d6a:	b2db      	uxtb	r3, r3
    1d6c:	2b05      	cmp	r3, #5
    1d6e:	d9e9      	bls.n	1d44 <can_write+0x7c>
		else if(temp_copy_buffer[i] == 0)
    1d70:	2e00      	cmp	r6, #0
    1d72:	d1f2      	bne.n	1d5a <can_write+0x92>
			temp_copy_buffer[i] = 48; // ascii of 0
    1d74:	4b39      	ldr	r3, [pc, #228]	; (1e5c <can_write+0x194>)
    1d76:	191b      	adds	r3, r3, r4
    1d78:	2230      	movs	r2, #48	; 0x30
    1d7a:	771a      	strb	r2, [r3, #28]
    1d7c:	e7ed      	b.n	1d5a <can_write+0x92>
			temp_copy_buffer[i] = toupper(temp_copy_buffer[i]);
    1d7e:	3e20      	subs	r6, #32
    1d80:	e7e8      	b.n	1d54 <can_write+0x8c>
        
	#if OUTGOING_CAN_DRIVER_PRINT
	printf("[CAN DRV] WR Seg ID [%d] :%s:\n", can->can_id, temp_copy_buffer);
	#endif
	       				
	strcat(uart_tx_frame_buff , temp_copy_buffer); /* concat with the uart_tx_frame_buffer*/	
    1d82:	4c36      	ldr	r4, [pc, #216]	; (1e5c <can_write+0x194>)
    1d84:	0021      	movs	r1, r4
    1d86:	311c      	adds	r1, #28
    1d88:	0020      	movs	r0, r4
    1d8a:	4b3a      	ldr	r3, [pc, #232]	; (1e74 <can_write+0x1ac>)
    1d8c:	4798      	blx	r3
	/*data len converted to sting and transmit */
	uart_tx_frame_buff[4] = (uint8_t)(can->len+48); /* Length cann't be greater than 4 so put it as same posion is 4th byte*/
    1d8e:	6c6b      	ldr	r3, [r5, #68]	; 0x44
    1d90:	3330      	adds	r3, #48	; 0x30
    1d92:	7123      	strb	r3, [r4, #4]
	#if OUTGOING_CAN_DRIVER_PRINT
	printf("[CAN DRV] WR Seg data: ");
	#endif		
	/* 8 byte data conversion and concat to uart_tx_frame_buff */
        i= 0;
	for(i=0 ; i < can->len; i++){
    1d94:	2400      	movs	r4, #0
    1d96:	e01e      	b.n	1dd6 <can_write+0x10e>
			temp_buff_data[1] = temp;
		}
				
		/*1st digit conversion of byte */
		if((temp_buff_data[0] >= 'a') && (temp_buff_data[0] <= 'f'))
			temp_buff_data[0] = toupper(temp_buff_data[0]);
    1d98:	4b35      	ldr	r3, [pc, #212]	; (1e70 <can_write+0x1a8>)
    1d9a:	4798      	blx	r3
    1d9c:	1980      	adds	r0, r0, r6
    1d9e:	7842      	ldrb	r2, [r0, #1]
    1da0:	2303      	movs	r3, #3
    1da2:	4013      	ands	r3, r2
    1da4:	2b02      	cmp	r3, #2
    1da6:	d003      	beq.n	1db0 <can_write+0xe8>
    1da8:	2320      	movs	r3, #32
    1daa:	4a2c      	ldr	r2, [pc, #176]	; (1e5c <can_write+0x194>)
    1dac:	54d6      	strb	r6, [r2, r3]
    1dae:	e036      	b.n	1e1e <can_write+0x156>
    1db0:	3e20      	subs	r6, #32
    1db2:	e7f9      	b.n	1da8 <can_write+0xe0>
			temp_buff_data[0] = 48;
		else{}
					
		/*2nd digit conversion of byte */
		if((temp_buff_data[1] >= 'a') && (temp_buff_data[1] <= 'f'))
			temp_buff_data[1] = toupper(temp_buff_data[1]);
    1db4:	4b2e      	ldr	r3, [pc, #184]	; (1e70 <can_write+0x1a8>)
    1db6:	4798      	blx	r3
    1db8:	1980      	adds	r0, r0, r6
    1dba:	7842      	ldrb	r2, [r0, #1]
    1dbc:	2303      	movs	r3, #3
    1dbe:	4013      	ands	r3, r2
    1dc0:	2b02      	cmp	r3, #2
    1dc2:	d03b      	beq.n	1e3c <can_write+0x174>
    1dc4:	4b25      	ldr	r3, [pc, #148]	; (1e5c <can_write+0x194>)
    1dc6:	3320      	adds	r3, #32
    1dc8:	705e      	strb	r6, [r3, #1]
		#if OUTGOING_CAN_DRIVER_PRINT
		printf("-[%d]:%s:-",can->can_data[i], temp_buff_data);
		#endif	
		/* concatenate to the main sting according to LSB to MSB
		one by one after every byte convention in loop*/
		strcat(uart_tx_frame_buff , temp_buff_data);						 
    1dca:	4824      	ldr	r0, [pc, #144]	; (1e5c <can_write+0x194>)
    1dcc:	0001      	movs	r1, r0
    1dce:	3120      	adds	r1, #32
    1dd0:	4b28      	ldr	r3, [pc, #160]	; (1e74 <can_write+0x1ac>)
    1dd2:	4798      	blx	r3
	for(i=0 ; i < can->len; i++){
    1dd4:	3401      	adds	r4, #1
    1dd6:	6c6b      	ldr	r3, [r5, #68]	; 0x44
    1dd8:	42a3      	cmp	r3, r4
    1dda:	d931      	bls.n	1e40 <can_write+0x178>
		sprintf(temp_buff_data , "%x" , can->can_data[i]);
    1ddc:	192e      	adds	r6, r5, r4
    1dde:	7932      	ldrb	r2, [r6, #4]
    1de0:	4920      	ldr	r1, [pc, #128]	; (1e64 <can_write+0x19c>)
    1de2:	481e      	ldr	r0, [pc, #120]	; (1e5c <can_write+0x194>)
    1de4:	3020      	adds	r0, #32
    1de6:	4b20      	ldr	r3, [pc, #128]	; (1e68 <can_write+0x1a0>)
    1de8:	4798      	blx	r3
		if(can->can_data[i]<16){
    1dea:	7933      	ldrb	r3, [r6, #4]
    1dec:	2b0f      	cmp	r3, #15
    1dee:	d808      	bhi.n	1e02 <can_write+0x13a>
			uint8_t temp = temp_buff_data[0];
    1df0:	4b1a      	ldr	r3, [pc, #104]	; (1e5c <can_write+0x194>)
    1df2:	2220      	movs	r2, #32
    1df4:	5c99      	ldrb	r1, [r3, r2]
			temp_buff_data[0] = temp_buff_data[1];
    1df6:	0018      	movs	r0, r3
    1df8:	3020      	adds	r0, #32
    1dfa:	7840      	ldrb	r0, [r0, #1]
    1dfc:	5498      	strb	r0, [r3, r2]
			temp_buff_data[1] = temp;
    1dfe:	3320      	adds	r3, #32
    1e00:	7059      	strb	r1, [r3, #1]
		if((temp_buff_data[0] >= 'a') && (temp_buff_data[0] <= 'f'))
    1e02:	2320      	movs	r3, #32
    1e04:	4a15      	ldr	r2, [pc, #84]	; (1e5c <can_write+0x194>)
    1e06:	5cd6      	ldrb	r6, [r2, r3]
    1e08:	0033      	movs	r3, r6
    1e0a:	3b61      	subs	r3, #97	; 0x61
    1e0c:	b2db      	uxtb	r3, r3
    1e0e:	2b05      	cmp	r3, #5
    1e10:	d9c2      	bls.n	1d98 <can_write+0xd0>
		else if(temp_buff_data[0] == 0)
    1e12:	2e00      	cmp	r6, #0
    1e14:	d103      	bne.n	1e1e <can_write+0x156>
			temp_buff_data[0] = 48;
    1e16:	2130      	movs	r1, #48	; 0x30
    1e18:	2320      	movs	r3, #32
    1e1a:	4a10      	ldr	r2, [pc, #64]	; (1e5c <can_write+0x194>)
    1e1c:	54d1      	strb	r1, [r2, r3]
		if((temp_buff_data[1] >= 'a') && (temp_buff_data[1] <= 'f'))
    1e1e:	4b0f      	ldr	r3, [pc, #60]	; (1e5c <can_write+0x194>)
    1e20:	3320      	adds	r3, #32
    1e22:	785e      	ldrb	r6, [r3, #1]
    1e24:	0033      	movs	r3, r6
    1e26:	3b61      	subs	r3, #97	; 0x61
    1e28:	b2db      	uxtb	r3, r3
    1e2a:	2b05      	cmp	r3, #5
    1e2c:	d9c2      	bls.n	1db4 <can_write+0xec>
		else if(temp_buff_data[1] == 0)
    1e2e:	2e00      	cmp	r6, #0
    1e30:	d1cb      	bne.n	1dca <can_write+0x102>
			temp_buff_data[1] = 48;
    1e32:	2230      	movs	r2, #48	; 0x30
    1e34:	4b09      	ldr	r3, [pc, #36]	; (1e5c <can_write+0x194>)
    1e36:	3320      	adds	r3, #32
    1e38:	705a      	strb	r2, [r3, #1]
    1e3a:	e7c6      	b.n	1dca <can_write+0x102>
			temp_buff_data[1] = toupper(temp_buff_data[1]);
    1e3c:	3e20      	subs	r6, #32
    1e3e:	e7c1      	b.n	1dc4 <can_write+0xfc>
        printf("\n");
        #endif 
	       
	//io_write(lv_io , temp_buff_data, 2);
	/* a \r should be padded after the bytes 5+ (i*2) */
	uart_tx_frame_buff[5+(i*2)] = '\n';											
    1e40:	0063      	lsls	r3, r4, #1
    1e42:	3305      	adds	r3, #5
    1e44:	4905      	ldr	r1, [pc, #20]	; (1e5c <can_write+0x194>)
    1e46:	220a      	movs	r2, #10
    1e48:	54ca      	strb	r2, [r1, r3]
	int serial_data_len = (6+(i*2));
    1e4a:	3403      	adds	r4, #3
    1e4c:	0064      	lsls	r4, r4, #1

        #if OUTGOING_CAN_DRIVER_PRINT
                printf("[CAN DRV] WR Write :%s:\n",uart_tx_frame_buff);
        #endif

	io_write(serial_io , uart_tx_frame_buff, serial_data_len); // Calculate based on the data len
    1e4e:	b2a2      	uxth	r2, r4
    1e50:	4b09      	ldr	r3, [pc, #36]	; (1e78 <can_write+0x1b0>)
    1e52:	6818      	ldr	r0, [r3, #0]
    1e54:	4b09      	ldr	r3, [pc, #36]	; (1e7c <can_write+0x1b4>)
    1e56:	4798      	blx	r3
	
	#endif                  
}
    1e58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1e5a:	46c0      	nop			; (mov r8, r8)
    1e5c:	20000260 	.word	0x20000260
    1e60:	00002197 	.word	0x00002197
    1e64:	00003214 	.word	0x00003214
    1e68:	00002311 	.word	0x00002311
    1e6c:	0000236f 	.word	0x0000236f
    1e70:	00002145 	.word	0x00002145
    1e74:	00002355 	.word	0x00002355
    1e78:	200004c0 	.word	0x200004c0
    1e7c:	000006a1 	.word	0x000006a1

00001e80 <can_read>:

int can_read(can_context_type * can)
{
    1e80:	b5f0      	push	{r4, r5, r6, r7, lr}
    1e82:	46c6      	mov	lr, r8
    1e84:	b500      	push	{lr}
    1e86:	0006      	movs	r6, r0
		--------------------------------------
	*/
	#else 
	
	/* Read characters */
	if(usart_sync_is_rx_not_empty(&TARGET_IO)){ //
    1e88:	484a      	ldr	r0, [pc, #296]	; (1fb4 <can_read+0x134>)
    1e8a:	4b4b      	ldr	r3, [pc, #300]	; (1fb8 <can_read+0x138>)
    1e8c:	4798      	blx	r3
    1e8e:	2800      	cmp	r0, #0
    1e90:	d108      	bne.n	1ea4 <can_read+0x24>
				rx_buffer[rx_buff_index++] = temp_char_buff[0]; // Fill the buffer character by character
		}	
	}
	
	/*  One complete usb frame is received and process the frame */
	if(frame_received){
    1e92:	2326      	movs	r3, #38	; 0x26
    1e94:	4a49      	ldr	r2, [pc, #292]	; (1fbc <can_read+0x13c>)
    1e96:	5cd3      	ldrb	r3, [r2, r3]
    1e98:	2b00      	cmp	r3, #0
    1e9a:	d127      	bne.n	1eec <can_read+0x6c>
		
		
	}
	#endif
	
	return 0;       
    1e9c:	2000      	movs	r0, #0
    1e9e:	bc04      	pop	{r2}
    1ea0:	4690      	mov	r8, r2
    1ea2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		io_read(serial_io, temp_char_buff , 1);
    1ea4:	4c45      	ldr	r4, [pc, #276]	; (1fbc <can_read+0x13c>)
    1ea6:	0021      	movs	r1, r4
    1ea8:	3124      	adds	r1, #36	; 0x24
    1eaa:	4b45      	ldr	r3, [pc, #276]	; (1fc0 <can_read+0x140>)
    1eac:	6818      	ldr	r0, [r3, #0]
    1eae:	2201      	movs	r2, #1
    1eb0:	4b44      	ldr	r3, [pc, #272]	; (1fc4 <can_read+0x144>)
    1eb2:	4798      	blx	r3
		if(temp_char_buff[0] == 't'){	// If the character is t reset all the values and start sampling the frame
    1eb4:	2324      	movs	r3, #36	; 0x24
    1eb6:	5ce3      	ldrb	r3, [r4, r3]
    1eb8:	2b74      	cmp	r3, #116	; 0x74
    1eba:	d00d      	beq.n	1ed8 <can_read+0x58>
		} else if((temp_char_buff[0] == '\n')) {	// If \r received then stop sampling character and start process the frame.
    1ebc:	2b0a      	cmp	r3, #10
    1ebe:	d010      	beq.n	1ee2 <can_read+0x62>
			if(rx_buff_index < MAX_INCOMMING_STRING_LENGTH)
    1ec0:	2225      	movs	r2, #37	; 0x25
    1ec2:	493e      	ldr	r1, [pc, #248]	; (1fbc <can_read+0x13c>)
    1ec4:	5c8a      	ldrb	r2, [r1, r2]
    1ec6:	2a63      	cmp	r2, #99	; 0x63
    1ec8:	d8e3      	bhi.n	1e92 <can_read+0x12>
				rx_buffer[rx_buff_index++] = temp_char_buff[0]; // Fill the buffer character by character
    1eca:	1c54      	adds	r4, r2, #1
    1ecc:	2025      	movs	r0, #37	; 0x25
    1ece:	540c      	strb	r4, [r1, r0]
    1ed0:	188a      	adds	r2, r1, r2
    1ed2:	2128      	movs	r1, #40	; 0x28
    1ed4:	5453      	strb	r3, [r2, r1]
    1ed6:	e7dc      	b.n	1e92 <can_read+0x12>
			rx_buff_index = 0; // Start the string	
    1ed8:	2100      	movs	r1, #0
    1eda:	3b4f      	subs	r3, #79	; 0x4f
    1edc:	4a37      	ldr	r2, [pc, #220]	; (1fbc <can_read+0x13c>)
    1ede:	54d1      	strb	r1, [r2, r3]
    1ee0:	e7d7      	b.n	1e92 <can_read+0x12>
			frame_received = 1;
    1ee2:	2101      	movs	r1, #1
    1ee4:	331c      	adds	r3, #28
    1ee6:	4a35      	ldr	r2, [pc, #212]	; (1fbc <can_read+0x13c>)
    1ee8:	54d1      	strb	r1, [r2, r3]
    1eea:	e7d2      	b.n	1e92 <can_read+0x12>
		frame_received = 0;
    1eec:	2700      	movs	r7, #0
    1eee:	2326      	movs	r3, #38	; 0x26
    1ef0:	54d7      	strb	r7, [r2, r3]
		memset(serial_can_data ,0 ,8);
    1ef2:	4c35      	ldr	r4, [pc, #212]	; (1fc8 <can_read+0x148>)
    1ef4:	0020      	movs	r0, r4
    1ef6:	300c      	adds	r0, #12
    1ef8:	2208      	movs	r2, #8
    1efa:	2100      	movs	r1, #0
    1efc:	4d33      	ldr	r5, [pc, #204]	; (1fcc <can_read+0x14c>)
    1efe:	47a8      	blx	r5
		memset(serial_recv_can_id_temp ,0 ,3);
    1f00:	0020      	movs	r0, r4
    1f02:	3014      	adds	r0, #20
    1f04:	2203      	movs	r2, #3
    1f06:	2100      	movs	r1, #0
    1f08:	47a8      	blx	r5
		memset(serial_recv_can_len ,0 ,1);
    1f0a:	7627      	strb	r7, [r4, #24]
		memset(can_tx_data ,0 ,8);
    1f0c:	0020      	movs	r0, r4
    1f0e:	301c      	adds	r0, #28
    1f10:	2208      	movs	r2, #8
    1f12:	2100      	movs	r1, #0
    1f14:	47a8      	blx	r5
		for(i = 0 ; i<3 ; i++){
    1f16:	2300      	movs	r3, #0
    1f18:	e007      	b.n	1f2a <can_read+0xaa>
			serial_recv_can_id_temp[i] = rx_buffer[i];
    1f1a:	4a28      	ldr	r2, [pc, #160]	; (1fbc <can_read+0x13c>)
    1f1c:	18d2      	adds	r2, r2, r3
    1f1e:	2128      	movs	r1, #40	; 0x28
    1f20:	5c51      	ldrb	r1, [r2, r1]
    1f22:	4a29      	ldr	r2, [pc, #164]	; (1fc8 <can_read+0x148>)
    1f24:	18d2      	adds	r2, r2, r3
    1f26:	7511      	strb	r1, [r2, #20]
		for(i = 0 ; i<3 ; i++){
    1f28:	3301      	adds	r3, #1
    1f2a:	2b02      	cmp	r3, #2
    1f2c:	ddf5      	ble.n	1f1a <can_read+0x9a>
		serial_can_tx_id = hexadecimalToDecimal(serial_recv_can_id_temp);
    1f2e:	4c26      	ldr	r4, [pc, #152]	; (1fc8 <can_read+0x148>)
    1f30:	0020      	movs	r0, r4
    1f32:	3014      	adds	r0, #20
    1f34:	4d26      	ldr	r5, [pc, #152]	; (1fd0 <can_read+0x150>)
    1f36:	47a8      	blx	r5
    1f38:	6260      	str	r0, [r4, #36]	; 0x24
		can->can_id = serial_can_tx_id;
    1f3a:	6030      	str	r0, [r6, #0]
		serial_recv_can_len[0] = rx_buffer[3];
    1f3c:	4b1f      	ldr	r3, [pc, #124]	; (1fbc <can_read+0x13c>)
    1f3e:	3328      	adds	r3, #40	; 0x28
    1f40:	78db      	ldrb	r3, [r3, #3]
    1f42:	7623      	strb	r3, [r4, #24]
		serial_can_tx_len = hexadecimalToDecimal(serial_recv_can_len);
    1f44:	0020      	movs	r0, r4
    1f46:	3018      	adds	r0, #24
    1f48:	47a8      	blx	r5
    1f4a:	b2c0      	uxtb	r0, r0
    1f4c:	2328      	movs	r3, #40	; 0x28
    1f4e:	54e0      	strb	r0, [r4, r3]
		can->len = serial_can_tx_len;
    1f50:	6470      	str	r0, [r6, #68]	; 0x44
		int index = 0;
    1f52:	2700      	movs	r7, #0
		for(i = 4 ; (i < (4 + (serial_can_tx_len*2)) ) ; i+=2){ // One byte means 2 character in serial
    1f54:	2504      	movs	r5, #4
    1f56:	e013      	b.n	1f80 <can_read+0x100>
			can_tx_data[0] = rx_buffer[i];
    1f58:	4b18      	ldr	r3, [pc, #96]	; (1fbc <can_read+0x13c>)
    1f5a:	2228      	movs	r2, #40	; 0x28
    1f5c:	1959      	adds	r1, r3, r5
    1f5e:	5c89      	ldrb	r1, [r1, r2]
    1f60:	4c19      	ldr	r4, [pc, #100]	; (1fc8 <can_read+0x148>)
    1f62:	7721      	strb	r1, [r4, #28]
			can_tx_data[1] = rx_buffer[i+1];
    1f64:	1c69      	adds	r1, r5, #1
    1f66:	185b      	adds	r3, r3, r1
    1f68:	5c9b      	ldrb	r3, [r3, r2]
    1f6a:	7763      	strb	r3, [r4, #29]
			serial_can_data[index++] = hexadecimalToDecimal(can_tx_data);
    1f6c:	1c7b      	adds	r3, r7, #1
    1f6e:	4698      	mov	r8, r3
    1f70:	0020      	movs	r0, r4
    1f72:	301c      	adds	r0, #28
    1f74:	4b16      	ldr	r3, [pc, #88]	; (1fd0 <can_read+0x150>)
    1f76:	4798      	blx	r3
    1f78:	19e4      	adds	r4, r4, r7
    1f7a:	7320      	strb	r0, [r4, #12]
		for(i = 4 ; (i < (4 + (serial_can_tx_len*2)) ) ; i+=2){ // One byte means 2 character in serial
    1f7c:	3502      	adds	r5, #2
			serial_can_data[index++] = hexadecimalToDecimal(can_tx_data);
    1f7e:	4647      	mov	r7, r8
		for(i = 4 ; (i < (4 + (serial_can_tx_len*2)) ) ; i+=2){ // One byte means 2 character in serial
    1f80:	2328      	movs	r3, #40	; 0x28
    1f82:	4a11      	ldr	r2, [pc, #68]	; (1fc8 <can_read+0x148>)
    1f84:	5cd3      	ldrb	r3, [r2, r3]
    1f86:	3302      	adds	r3, #2
    1f88:	005b      	lsls	r3, r3, #1
    1f8a:	429d      	cmp	r5, r3
    1f8c:	dbe4      	blt.n	1f58 <can_read+0xd8>
    1f8e:	2300      	movs	r3, #0
    1f90:	e005      	b.n	1f9e <can_read+0x11e>
			can->can_data[i] = serial_can_data[i];
    1f92:	4a0d      	ldr	r2, [pc, #52]	; (1fc8 <can_read+0x148>)
    1f94:	18d2      	adds	r2, r2, r3
    1f96:	7b11      	ldrb	r1, [r2, #12]
    1f98:	18f2      	adds	r2, r6, r3
    1f9a:	7111      	strb	r1, [r2, #4]
		for(int i= 0 ; i<8 ; i++ ){
    1f9c:	3301      	adds	r3, #1
    1f9e:	2b07      	cmp	r3, #7
    1fa0:	ddf7      	ble.n	1f92 <can_read+0x112>
		memset(rx_buffer,0,MAX_INCOMMING_STRING_LENGTH);
    1fa2:	2264      	movs	r2, #100	; 0x64
    1fa4:	2100      	movs	r1, #0
    1fa6:	4805      	ldr	r0, [pc, #20]	; (1fbc <can_read+0x13c>)
    1fa8:	3028      	adds	r0, #40	; 0x28
    1faa:	4b08      	ldr	r3, [pc, #32]	; (1fcc <can_read+0x14c>)
    1fac:	4798      	blx	r3
		return 1;
    1fae:	2001      	movs	r0, #1
    1fb0:	e775      	b.n	1e9e <can_read+0x1e>
    1fb2:	46c0      	nop			; (mov r8, r8)
    1fb4:	20000334 	.word	0x20000334
    1fb8:	00000aa1 	.word	0x00000aa1
    1fbc:	20000260 	.word	0x20000260
    1fc0:	200004c0 	.word	0x200004c0
    1fc4:	000006d9 	.word	0x000006d9
    1fc8:	200002e0 	.word	0x200002e0
    1fcc:	00002197 	.word	0x00002197
    1fd0:	00001fd5 	.word	0x00001fd5

00001fd4 <hexadecimalToDecimal>:
#include "utility_support.h"



int hexadecimalToDecimal(char hexVal[])
{
    1fd4:	b570      	push	{r4, r5, r6, lr}
    1fd6:	0004      	movs	r4, r0
	int len = strlen(hexVal);
    1fd8:	4b0e      	ldr	r3, [pc, #56]	; (2014 <STACK_SIZE+0x14>)
    1fda:	4798      	blx	r3
	int base = 1;
	int dec_val = 0;
	int i;
	for (i=len-1; i>=0; i--)
    1fdc:	1e42      	subs	r2, r0, #1
	int dec_val = 0;
    1fde:	2000      	movs	r0, #0
	int base = 1;
    1fe0:	2501      	movs	r5, #1
	for (i=len-1; i>=0; i--)
    1fe2:	e009      	b.n	1ff8 <hexadecimalToDecimal+0x24>
		if (hexVal[i]>='0' && hexVal[i]<='9')
		{
			dec_val += (hexVal[i] - 48)*base;
			base = base * 16;
		}
		else if (hexVal[i]>='A' && hexVal[i]<='F')
    1fe4:	0019      	movs	r1, r3
    1fe6:	3941      	subs	r1, #65	; 0x41
    1fe8:	b2c9      	uxtb	r1, r1
    1fea:	2905      	cmp	r1, #5
    1fec:	d803      	bhi.n	1ff6 <hexadecimalToDecimal+0x22>
		{
			dec_val += (hexVal[i] - 55)*base;
    1fee:	3b37      	subs	r3, #55	; 0x37
    1ff0:	436b      	muls	r3, r5
    1ff2:	18c0      	adds	r0, r0, r3
			base = base*16;
    1ff4:	012d      	lsls	r5, r5, #4
	for (i=len-1; i>=0; i--)
    1ff6:	3a01      	subs	r2, #1
    1ff8:	2a00      	cmp	r2, #0
    1ffa:	db0a      	blt.n	2012 <STACK_SIZE+0x12>
		if (hexVal[i]>='0' && hexVal[i]<='9')
    1ffc:	5ca3      	ldrb	r3, [r4, r2]
    1ffe:	0019      	movs	r1, r3
    2000:	3930      	subs	r1, #48	; 0x30
    2002:	b2c9      	uxtb	r1, r1
    2004:	2909      	cmp	r1, #9
    2006:	d8ed      	bhi.n	1fe4 <hexadecimalToDecimal+0x10>
			dec_val += (hexVal[i] - 48)*base;
    2008:	3b30      	subs	r3, #48	; 0x30
    200a:	436b      	muls	r3, r5
    200c:	18c0      	adds	r0, r0, r3
			base = base * 16;
    200e:	012d      	lsls	r5, r5, #4
    2010:	e7f1      	b.n	1ff6 <hexadecimalToDecimal+0x22>
		}
	}
	
	return dec_val;
}
    2012:	bd70      	pop	{r4, r5, r6, pc}
    2014:	0000236f 	.word	0x0000236f

00002018 <_read>:
#include <stdio.h>

int __attribute__((weak)) _read(int file, char *ptr, int len); /* Remove GCC compiler warning */

int __attribute__((weak)) _read(int file, char *ptr, int len)
{
    2018:	b510      	push	{r4, lr}
    201a:	000b      	movs	r3, r1
	int n = 0;

	if (file != 0) {
    201c:	2800      	cmp	r0, #0
    201e:	d109      	bne.n	2034 <_read+0x1c>
		return -1;
	}

	n = stdio_io_read((uint8_t *)ptr, len);
    2020:	0011      	movs	r1, r2
    2022:	0018      	movs	r0, r3
    2024:	4b05      	ldr	r3, [pc, #20]	; (203c <_read+0x24>)
    2026:	4798      	blx	r3
	if (n < 0) {
    2028:	2800      	cmp	r0, #0
    202a:	db00      	blt.n	202e <_read+0x16>
		return -1;
	}

	return n;
}
    202c:	bd10      	pop	{r4, pc}
		return -1;
    202e:	2001      	movs	r0, #1
    2030:	4240      	negs	r0, r0
    2032:	e7fb      	b.n	202c <_read+0x14>
		return -1;
    2034:	2001      	movs	r0, #1
    2036:	4240      	negs	r0, r0
    2038:	e7f8      	b.n	202c <_read+0x14>
    203a:	46c0      	nop			; (mov r8, r8)
    203c:	00002095 	.word	0x00002095

00002040 <_write>:
#include <stdio.h>

int __attribute__((weak)) _write(int file, char *ptr, int len); /* Remove GCC compiler warning */

int __attribute__((weak)) _write(int file, char *ptr, int len)
{
    2040:	b510      	push	{r4, lr}
    2042:	000b      	movs	r3, r1
	int n = 0;

	if ((file != 1) && (file != 2) && (file != 3)) {
    2044:	3801      	subs	r0, #1
    2046:	2802      	cmp	r0, #2
    2048:	d809      	bhi.n	205e <_write+0x1e>
		return -1;
	}

	n = stdio_io_write((const uint8_t *)ptr, len);
    204a:	0011      	movs	r1, r2
    204c:	0018      	movs	r0, r3
    204e:	4b05      	ldr	r3, [pc, #20]	; (2064 <_write+0x24>)
    2050:	4798      	blx	r3
	if (n < 0) {
    2052:	2800      	cmp	r0, #0
    2054:	db00      	blt.n	2058 <_write+0x18>
		return -1;
	}

	return n;
}
    2056:	bd10      	pop	{r4, pc}
		return -1;
    2058:	2001      	movs	r0, #1
    205a:	4240      	negs	r0, r0
    205c:	e7fb      	b.n	2056 <_write+0x16>
		return -1;
    205e:	2001      	movs	r0, #1
    2060:	4240      	negs	r0, r0
    2062:	e7f8      	b.n	2056 <_write+0x16>
    2064:	000020b9 	.word	0x000020b9

00002068 <stdio_io_init>:

/** IO descriptor for STDIO access. */
static struct io_descriptor *stdio_io = NULL;

void stdio_io_init(struct io_descriptor *io)
{
    2068:	b570      	push	{r4, r5, r6, lr}
    206a:	0006      	movs	r6, r0
#if defined(__GNUC__)
	/* Specify that stdout and stdin should not be buffered. */
	setbuf(stdout, NULL);
    206c:	4d06      	ldr	r5, [pc, #24]	; (2088 <stdio_io_init+0x20>)
    206e:	682b      	ldr	r3, [r5, #0]
    2070:	6898      	ldr	r0, [r3, #8]
    2072:	2100      	movs	r1, #0
    2074:	4c05      	ldr	r4, [pc, #20]	; (208c <stdio_io_init+0x24>)
    2076:	47a0      	blx	r4
	setbuf(stdin, NULL);
    2078:	682b      	ldr	r3, [r5, #0]
    207a:	6858      	ldr	r0, [r3, #4]
    207c:	2100      	movs	r1, #0
    207e:	47a0      	blx	r4
	 * and AVR GCC library:
	 * - printf() emits one character at a time.
	 * - getchar() requests only 1 byte to exit.
	 */
#endif
	stdio_io = io;
    2080:	4b03      	ldr	r3, [pc, #12]	; (2090 <stdio_io_init+0x28>)
    2082:	601e      	str	r6, [r3, #0]
}
    2084:	bd70      	pop	{r4, r5, r6, pc}
    2086:	46c0      	nop			; (mov r8, r8)
    2088:	20000018 	.word	0x20000018
    208c:	000021a7 	.word	0x000021a7
    2090:	2000030c 	.word	0x2000030c

00002094 <stdio_io_read>:
{
	stdio_io = io;
}

int32_t stdio_io_read(uint8_t *buf, const int32_t len)
{
    2094:	b510      	push	{r4, lr}
    2096:	0004      	movs	r4, r0
	if (stdio_io == NULL) {
    2098:	4b05      	ldr	r3, [pc, #20]	; (20b0 <stdio_io_read+0x1c>)
    209a:	6818      	ldr	r0, [r3, #0]
    209c:	2800      	cmp	r0, #0
    209e:	d004      	beq.n	20aa <stdio_io_read+0x16>
		return 0;
	}
	return io_read(stdio_io, buf, len);
    20a0:	b28a      	uxth	r2, r1
    20a2:	0021      	movs	r1, r4
    20a4:	4b03      	ldr	r3, [pc, #12]	; (20b4 <stdio_io_read+0x20>)
    20a6:	4798      	blx	r3
}
    20a8:	bd10      	pop	{r4, pc}
		return 0;
    20aa:	2000      	movs	r0, #0
    20ac:	e7fc      	b.n	20a8 <stdio_io_read+0x14>
    20ae:	46c0      	nop			; (mov r8, r8)
    20b0:	2000030c 	.word	0x2000030c
    20b4:	000006d9 	.word	0x000006d9

000020b8 <stdio_io_write>:

int32_t stdio_io_write(const uint8_t *buf, const int32_t len)
{
    20b8:	b510      	push	{r4, lr}
    20ba:	0004      	movs	r4, r0
	if (stdio_io == NULL) {
    20bc:	4b05      	ldr	r3, [pc, #20]	; (20d4 <stdio_io_write+0x1c>)
    20be:	6818      	ldr	r0, [r3, #0]
    20c0:	2800      	cmp	r0, #0
    20c2:	d004      	beq.n	20ce <stdio_io_write+0x16>
		return 0;
	}
	return io_write(stdio_io, buf, len);
    20c4:	b28a      	uxth	r2, r1
    20c6:	0021      	movs	r1, r4
    20c8:	4b03      	ldr	r3, [pc, #12]	; (20d8 <stdio_io_write+0x20>)
    20ca:	4798      	blx	r3
}
    20cc:	bd10      	pop	{r4, pc}
		return 0;
    20ce:	2000      	movs	r0, #0
    20d0:	e7fc      	b.n	20cc <stdio_io_write+0x14>
    20d2:	46c0      	nop			; (mov r8, r8)
    20d4:	2000030c 	.word	0x2000030c
    20d8:	000006a1 	.word	0x000006a1

000020dc <stdio_redirect_init>:
	/* Print welcome message */
	printf("\r\nHello ATMEL World!\r\n");
}

void stdio_redirect_init(void)
{
    20dc:	b510      	push	{r4, lr}

	usart_sync_enable(&TARGET_IO);
    20de:	4c04      	ldr	r4, [pc, #16]	; (20f0 <stdio_redirect_init+0x14>)
    20e0:	0020      	movs	r0, r4
    20e2:	4b04      	ldr	r3, [pc, #16]	; (20f4 <stdio_redirect_init+0x18>)
    20e4:	4798      	blx	r3
	stdio_io_init(&TARGET_IO.io);
    20e6:	0020      	movs	r0, r4
    20e8:	4b03      	ldr	r3, [pc, #12]	; (20f8 <stdio_redirect_init+0x1c>)
    20ea:	4798      	blx	r3
}
    20ec:	bd10      	pop	{r4, pc}
    20ee:	46c0      	nop			; (mov r8, r8)
    20f0:	20000334 	.word	0x20000334
    20f4:	00000a45 	.word	0x00000a45
    20f8:	00002069 	.word	0x00002069

000020fc <__libc_init_array>:
    20fc:	b570      	push	{r4, r5, r6, lr}
    20fe:	2600      	movs	r6, #0
    2100:	4d0c      	ldr	r5, [pc, #48]	; (2134 <__libc_init_array+0x38>)
    2102:	4c0d      	ldr	r4, [pc, #52]	; (2138 <__libc_init_array+0x3c>)
    2104:	1b64      	subs	r4, r4, r5
    2106:	10a4      	asrs	r4, r4, #2
    2108:	42a6      	cmp	r6, r4
    210a:	d109      	bne.n	2120 <__libc_init_array+0x24>
    210c:	2600      	movs	r6, #0
    210e:	f001 f955 	bl	33bc <_init>
    2112:	4d0a      	ldr	r5, [pc, #40]	; (213c <__libc_init_array+0x40>)
    2114:	4c0a      	ldr	r4, [pc, #40]	; (2140 <__libc_init_array+0x44>)
    2116:	1b64      	subs	r4, r4, r5
    2118:	10a4      	asrs	r4, r4, #2
    211a:	42a6      	cmp	r6, r4
    211c:	d105      	bne.n	212a <__libc_init_array+0x2e>
    211e:	bd70      	pop	{r4, r5, r6, pc}
    2120:	00b3      	lsls	r3, r6, #2
    2122:	58eb      	ldr	r3, [r5, r3]
    2124:	4798      	blx	r3
    2126:	3601      	adds	r6, #1
    2128:	e7ee      	b.n	2108 <__libc_init_array+0xc>
    212a:	00b3      	lsls	r3, r6, #2
    212c:	58eb      	ldr	r3, [r5, r3]
    212e:	4798      	blx	r3
    2130:	3601      	adds	r6, #1
    2132:	e7f2      	b.n	211a <__libc_init_array+0x1e>
    2134:	000033c8 	.word	0x000033c8
    2138:	000033c8 	.word	0x000033c8
    213c:	000033c8 	.word	0x000033c8
    2140:	000033cc 	.word	0x000033cc

00002144 <__locale_ctype_ptr>:
    2144:	4b04      	ldr	r3, [pc, #16]	; (2158 <__locale_ctype_ptr+0x14>)
    2146:	681b      	ldr	r3, [r3, #0]
    2148:	6a1b      	ldr	r3, [r3, #32]
    214a:	2b00      	cmp	r3, #0
    214c:	d100      	bne.n	2150 <__locale_ctype_ptr+0xc>
    214e:	4b03      	ldr	r3, [pc, #12]	; (215c <__locale_ctype_ptr+0x18>)
    2150:	33ec      	adds	r3, #236	; 0xec
    2152:	6818      	ldr	r0, [r3, #0]
    2154:	4770      	bx	lr
    2156:	46c0      	nop			; (mov r8, r8)
    2158:	20000018 	.word	0x20000018
    215c:	2000007c 	.word	0x2000007c

00002160 <__ascii_mbtowc>:
    2160:	b082      	sub	sp, #8
    2162:	2900      	cmp	r1, #0
    2164:	d100      	bne.n	2168 <__ascii_mbtowc+0x8>
    2166:	a901      	add	r1, sp, #4
    2168:	1e10      	subs	r0, r2, #0
    216a:	d006      	beq.n	217a <__ascii_mbtowc+0x1a>
    216c:	2b00      	cmp	r3, #0
    216e:	d006      	beq.n	217e <__ascii_mbtowc+0x1e>
    2170:	7813      	ldrb	r3, [r2, #0]
    2172:	600b      	str	r3, [r1, #0]
    2174:	7810      	ldrb	r0, [r2, #0]
    2176:	1e43      	subs	r3, r0, #1
    2178:	4198      	sbcs	r0, r3
    217a:	b002      	add	sp, #8
    217c:	4770      	bx	lr
    217e:	2002      	movs	r0, #2
    2180:	4240      	negs	r0, r0
    2182:	e7fa      	b.n	217a <__ascii_mbtowc+0x1a>

00002184 <memcpy>:
    2184:	2300      	movs	r3, #0
    2186:	b510      	push	{r4, lr}
    2188:	429a      	cmp	r2, r3
    218a:	d100      	bne.n	218e <memcpy+0xa>
    218c:	bd10      	pop	{r4, pc}
    218e:	5ccc      	ldrb	r4, [r1, r3]
    2190:	54c4      	strb	r4, [r0, r3]
    2192:	3301      	adds	r3, #1
    2194:	e7f8      	b.n	2188 <memcpy+0x4>

00002196 <memset>:
    2196:	0003      	movs	r3, r0
    2198:	1882      	adds	r2, r0, r2
    219a:	4293      	cmp	r3, r2
    219c:	d100      	bne.n	21a0 <memset+0xa>
    219e:	4770      	bx	lr
    21a0:	7019      	strb	r1, [r3, #0]
    21a2:	3301      	adds	r3, #1
    21a4:	e7f9      	b.n	219a <memset+0x4>

000021a6 <setbuf>:
    21a6:	424a      	negs	r2, r1
    21a8:	414a      	adcs	r2, r1
    21aa:	2380      	movs	r3, #128	; 0x80
    21ac:	b510      	push	{r4, lr}
    21ae:	0052      	lsls	r2, r2, #1
    21b0:	00db      	lsls	r3, r3, #3
    21b2:	f000 f801 	bl	21b8 <setvbuf>
    21b6:	bd10      	pop	{r4, pc}

000021b8 <setvbuf>:
    21b8:	b5f0      	push	{r4, r5, r6, r7, lr}
    21ba:	001d      	movs	r5, r3
    21bc:	4b4f      	ldr	r3, [pc, #316]	; (22fc <setvbuf+0x144>)
    21be:	b085      	sub	sp, #20
    21c0:	681e      	ldr	r6, [r3, #0]
    21c2:	0004      	movs	r4, r0
    21c4:	000f      	movs	r7, r1
    21c6:	9200      	str	r2, [sp, #0]
    21c8:	2e00      	cmp	r6, #0
    21ca:	d005      	beq.n	21d8 <setvbuf+0x20>
    21cc:	69b3      	ldr	r3, [r6, #24]
    21ce:	2b00      	cmp	r3, #0
    21d0:	d102      	bne.n	21d8 <setvbuf+0x20>
    21d2:	0030      	movs	r0, r6
    21d4:	f000 f9d6 	bl	2584 <__sinit>
    21d8:	4b49      	ldr	r3, [pc, #292]	; (2300 <setvbuf+0x148>)
    21da:	429c      	cmp	r4, r3
    21dc:	d150      	bne.n	2280 <setvbuf+0xc8>
    21de:	6874      	ldr	r4, [r6, #4]
    21e0:	9b00      	ldr	r3, [sp, #0]
    21e2:	2b02      	cmp	r3, #2
    21e4:	d005      	beq.n	21f2 <setvbuf+0x3a>
    21e6:	2b01      	cmp	r3, #1
    21e8:	d900      	bls.n	21ec <setvbuf+0x34>
    21ea:	e084      	b.n	22f6 <setvbuf+0x13e>
    21ec:	2d00      	cmp	r5, #0
    21ee:	da00      	bge.n	21f2 <setvbuf+0x3a>
    21f0:	e081      	b.n	22f6 <setvbuf+0x13e>
    21f2:	0021      	movs	r1, r4
    21f4:	0030      	movs	r0, r6
    21f6:	f000 f957 	bl	24a8 <_fflush_r>
    21fa:	6b61      	ldr	r1, [r4, #52]	; 0x34
    21fc:	2900      	cmp	r1, #0
    21fe:	d008      	beq.n	2212 <setvbuf+0x5a>
    2200:	0023      	movs	r3, r4
    2202:	3344      	adds	r3, #68	; 0x44
    2204:	4299      	cmp	r1, r3
    2206:	d002      	beq.n	220e <setvbuf+0x56>
    2208:	0030      	movs	r0, r6
    220a:	f000 fa83 	bl	2714 <_free_r>
    220e:	2300      	movs	r3, #0
    2210:	6363      	str	r3, [r4, #52]	; 0x34
    2212:	2300      	movs	r3, #0
    2214:	61a3      	str	r3, [r4, #24]
    2216:	6063      	str	r3, [r4, #4]
    2218:	89a3      	ldrh	r3, [r4, #12]
    221a:	061b      	lsls	r3, r3, #24
    221c:	d503      	bpl.n	2226 <setvbuf+0x6e>
    221e:	6921      	ldr	r1, [r4, #16]
    2220:	0030      	movs	r0, r6
    2222:	f000 fa77 	bl	2714 <_free_r>
    2226:	89a3      	ldrh	r3, [r4, #12]
    2228:	4a36      	ldr	r2, [pc, #216]	; (2304 <setvbuf+0x14c>)
    222a:	4013      	ands	r3, r2
    222c:	81a3      	strh	r3, [r4, #12]
    222e:	9b00      	ldr	r3, [sp, #0]
    2230:	2b02      	cmp	r3, #2
    2232:	d05a      	beq.n	22ea <setvbuf+0x132>
    2234:	ab03      	add	r3, sp, #12
    2236:	aa02      	add	r2, sp, #8
    2238:	0021      	movs	r1, r4
    223a:	0030      	movs	r0, r6
    223c:	f000 fa38 	bl	26b0 <__swhatbuf_r>
    2240:	89a3      	ldrh	r3, [r4, #12]
    2242:	4318      	orrs	r0, r3
    2244:	81a0      	strh	r0, [r4, #12]
    2246:	2d00      	cmp	r5, #0
    2248:	d124      	bne.n	2294 <setvbuf+0xdc>
    224a:	9d02      	ldr	r5, [sp, #8]
    224c:	0028      	movs	r0, r5
    224e:	f000 fa57 	bl	2700 <malloc>
    2252:	9501      	str	r5, [sp, #4]
    2254:	1e07      	subs	r7, r0, #0
    2256:	d142      	bne.n	22de <setvbuf+0x126>
    2258:	9b02      	ldr	r3, [sp, #8]
    225a:	9301      	str	r3, [sp, #4]
    225c:	42ab      	cmp	r3, r5
    225e:	d139      	bne.n	22d4 <setvbuf+0x11c>
    2260:	2001      	movs	r0, #1
    2262:	4240      	negs	r0, r0
    2264:	2302      	movs	r3, #2
    2266:	89a2      	ldrh	r2, [r4, #12]
    2268:	4313      	orrs	r3, r2
    226a:	81a3      	strh	r3, [r4, #12]
    226c:	2300      	movs	r3, #0
    226e:	60a3      	str	r3, [r4, #8]
    2270:	0023      	movs	r3, r4
    2272:	3347      	adds	r3, #71	; 0x47
    2274:	6023      	str	r3, [r4, #0]
    2276:	6123      	str	r3, [r4, #16]
    2278:	2301      	movs	r3, #1
    227a:	6163      	str	r3, [r4, #20]
    227c:	b005      	add	sp, #20
    227e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2280:	4b21      	ldr	r3, [pc, #132]	; (2308 <setvbuf+0x150>)
    2282:	429c      	cmp	r4, r3
    2284:	d101      	bne.n	228a <setvbuf+0xd2>
    2286:	68b4      	ldr	r4, [r6, #8]
    2288:	e7aa      	b.n	21e0 <setvbuf+0x28>
    228a:	4b20      	ldr	r3, [pc, #128]	; (230c <setvbuf+0x154>)
    228c:	429c      	cmp	r4, r3
    228e:	d1a7      	bne.n	21e0 <setvbuf+0x28>
    2290:	68f4      	ldr	r4, [r6, #12]
    2292:	e7a5      	b.n	21e0 <setvbuf+0x28>
    2294:	2f00      	cmp	r7, #0
    2296:	d0d9      	beq.n	224c <setvbuf+0x94>
    2298:	69b3      	ldr	r3, [r6, #24]
    229a:	2b00      	cmp	r3, #0
    229c:	d102      	bne.n	22a4 <setvbuf+0xec>
    229e:	0030      	movs	r0, r6
    22a0:	f000 f970 	bl	2584 <__sinit>
    22a4:	9b00      	ldr	r3, [sp, #0]
    22a6:	2b01      	cmp	r3, #1
    22a8:	d103      	bne.n	22b2 <setvbuf+0xfa>
    22aa:	89a3      	ldrh	r3, [r4, #12]
    22ac:	9a00      	ldr	r2, [sp, #0]
    22ae:	431a      	orrs	r2, r3
    22b0:	81a2      	strh	r2, [r4, #12]
    22b2:	2008      	movs	r0, #8
    22b4:	89a3      	ldrh	r3, [r4, #12]
    22b6:	6027      	str	r7, [r4, #0]
    22b8:	6127      	str	r7, [r4, #16]
    22ba:	6165      	str	r5, [r4, #20]
    22bc:	4018      	ands	r0, r3
    22be:	d018      	beq.n	22f2 <setvbuf+0x13a>
    22c0:	2001      	movs	r0, #1
    22c2:	4018      	ands	r0, r3
    22c4:	2300      	movs	r3, #0
    22c6:	4298      	cmp	r0, r3
    22c8:	d011      	beq.n	22ee <setvbuf+0x136>
    22ca:	426d      	negs	r5, r5
    22cc:	60a3      	str	r3, [r4, #8]
    22ce:	61a5      	str	r5, [r4, #24]
    22d0:	0018      	movs	r0, r3
    22d2:	e7d3      	b.n	227c <setvbuf+0xc4>
    22d4:	9801      	ldr	r0, [sp, #4]
    22d6:	f000 fa13 	bl	2700 <malloc>
    22da:	1e07      	subs	r7, r0, #0
    22dc:	d0c0      	beq.n	2260 <setvbuf+0xa8>
    22de:	2380      	movs	r3, #128	; 0x80
    22e0:	89a2      	ldrh	r2, [r4, #12]
    22e2:	9d01      	ldr	r5, [sp, #4]
    22e4:	4313      	orrs	r3, r2
    22e6:	81a3      	strh	r3, [r4, #12]
    22e8:	e7d6      	b.n	2298 <setvbuf+0xe0>
    22ea:	2000      	movs	r0, #0
    22ec:	e7ba      	b.n	2264 <setvbuf+0xac>
    22ee:	60a5      	str	r5, [r4, #8]
    22f0:	e7c4      	b.n	227c <setvbuf+0xc4>
    22f2:	60a0      	str	r0, [r4, #8]
    22f4:	e7c2      	b.n	227c <setvbuf+0xc4>
    22f6:	2001      	movs	r0, #1
    22f8:	4240      	negs	r0, r0
    22fa:	e7bf      	b.n	227c <setvbuf+0xc4>
    22fc:	20000018 	.word	0x20000018
    2300:	00003348 	.word	0x00003348
    2304:	fffff35c 	.word	0xfffff35c
    2308:	00003368 	.word	0x00003368
    230c:	00003328 	.word	0x00003328

00002310 <siprintf>:
    2310:	b40e      	push	{r1, r2, r3}
    2312:	b510      	push	{r4, lr}
    2314:	b09d      	sub	sp, #116	; 0x74
    2316:	a902      	add	r1, sp, #8
    2318:	9002      	str	r0, [sp, #8]
    231a:	6108      	str	r0, [r1, #16]
    231c:	480b      	ldr	r0, [pc, #44]	; (234c <siprintf+0x3c>)
    231e:	2482      	movs	r4, #130	; 0x82
    2320:	6088      	str	r0, [r1, #8]
    2322:	6148      	str	r0, [r1, #20]
    2324:	2001      	movs	r0, #1
    2326:	4240      	negs	r0, r0
    2328:	ab1f      	add	r3, sp, #124	; 0x7c
    232a:	81c8      	strh	r0, [r1, #14]
    232c:	4808      	ldr	r0, [pc, #32]	; (2350 <siprintf+0x40>)
    232e:	cb04      	ldmia	r3!, {r2}
    2330:	00a4      	lsls	r4, r4, #2
    2332:	6800      	ldr	r0, [r0, #0]
    2334:	9301      	str	r3, [sp, #4]
    2336:	818c      	strh	r4, [r1, #12]
    2338:	f000 faf6 	bl	2928 <_svfiprintf_r>
    233c:	2300      	movs	r3, #0
    233e:	9a02      	ldr	r2, [sp, #8]
    2340:	7013      	strb	r3, [r2, #0]
    2342:	b01d      	add	sp, #116	; 0x74
    2344:	bc10      	pop	{r4}
    2346:	bc08      	pop	{r3}
    2348:	b003      	add	sp, #12
    234a:	4718      	bx	r3
    234c:	7fffffff 	.word	0x7fffffff
    2350:	20000018 	.word	0x20000018

00002354 <strcat>:
    2354:	0002      	movs	r2, r0
    2356:	b510      	push	{r4, lr}
    2358:	7813      	ldrb	r3, [r2, #0]
    235a:	2b00      	cmp	r3, #0
    235c:	d105      	bne.n	236a <strcat+0x16>
    235e:	5ccc      	ldrb	r4, [r1, r3]
    2360:	54d4      	strb	r4, [r2, r3]
    2362:	3301      	adds	r3, #1
    2364:	2c00      	cmp	r4, #0
    2366:	d1fa      	bne.n	235e <strcat+0xa>
    2368:	bd10      	pop	{r4, pc}
    236a:	3201      	adds	r2, #1
    236c:	e7f4      	b.n	2358 <strcat+0x4>

0000236e <strlen>:
    236e:	2300      	movs	r3, #0
    2370:	5cc2      	ldrb	r2, [r0, r3]
    2372:	3301      	adds	r3, #1
    2374:	2a00      	cmp	r2, #0
    2376:	d1fb      	bne.n	2370 <strlen+0x2>
    2378:	1e58      	subs	r0, r3, #1
    237a:	4770      	bx	lr

0000237c <__ascii_wctomb>:
    237c:	1e0b      	subs	r3, r1, #0
    237e:	d004      	beq.n	238a <__ascii_wctomb+0xe>
    2380:	2aff      	cmp	r2, #255	; 0xff
    2382:	d904      	bls.n	238e <__ascii_wctomb+0x12>
    2384:	238a      	movs	r3, #138	; 0x8a
    2386:	6003      	str	r3, [r0, #0]
    2388:	3b8b      	subs	r3, #139	; 0x8b
    238a:	0018      	movs	r0, r3
    238c:	4770      	bx	lr
    238e:	700a      	strb	r2, [r1, #0]
    2390:	2301      	movs	r3, #1
    2392:	e7fa      	b.n	238a <__ascii_wctomb+0xe>

00002394 <__sflush_r>:
    2394:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    2396:	898a      	ldrh	r2, [r1, #12]
    2398:	0005      	movs	r5, r0
    239a:	000c      	movs	r4, r1
    239c:	0713      	lsls	r3, r2, #28
    239e:	d460      	bmi.n	2462 <__sflush_r+0xce>
    23a0:	684b      	ldr	r3, [r1, #4]
    23a2:	2b00      	cmp	r3, #0
    23a4:	dc04      	bgt.n	23b0 <__sflush_r+0x1c>
    23a6:	6c0b      	ldr	r3, [r1, #64]	; 0x40
    23a8:	2b00      	cmp	r3, #0
    23aa:	dc01      	bgt.n	23b0 <__sflush_r+0x1c>
    23ac:	2000      	movs	r0, #0
    23ae:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    23b0:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    23b2:	2f00      	cmp	r7, #0
    23b4:	d0fa      	beq.n	23ac <__sflush_r+0x18>
    23b6:	2300      	movs	r3, #0
    23b8:	682e      	ldr	r6, [r5, #0]
    23ba:	602b      	str	r3, [r5, #0]
    23bc:	2380      	movs	r3, #128	; 0x80
    23be:	015b      	lsls	r3, r3, #5
    23c0:	401a      	ands	r2, r3
    23c2:	d034      	beq.n	242e <__sflush_r+0x9a>
    23c4:	6d60      	ldr	r0, [r4, #84]	; 0x54
    23c6:	89a3      	ldrh	r3, [r4, #12]
    23c8:	075b      	lsls	r3, r3, #29
    23ca:	d506      	bpl.n	23da <__sflush_r+0x46>
    23cc:	6863      	ldr	r3, [r4, #4]
    23ce:	1ac0      	subs	r0, r0, r3
    23d0:	6b63      	ldr	r3, [r4, #52]	; 0x34
    23d2:	2b00      	cmp	r3, #0
    23d4:	d001      	beq.n	23da <__sflush_r+0x46>
    23d6:	6c23      	ldr	r3, [r4, #64]	; 0x40
    23d8:	1ac0      	subs	r0, r0, r3
    23da:	0002      	movs	r2, r0
    23dc:	6a21      	ldr	r1, [r4, #32]
    23de:	2300      	movs	r3, #0
    23e0:	0028      	movs	r0, r5
    23e2:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    23e4:	47b8      	blx	r7
    23e6:	89a1      	ldrh	r1, [r4, #12]
    23e8:	1c43      	adds	r3, r0, #1
    23ea:	d106      	bne.n	23fa <__sflush_r+0x66>
    23ec:	682b      	ldr	r3, [r5, #0]
    23ee:	2b1d      	cmp	r3, #29
    23f0:	d831      	bhi.n	2456 <__sflush_r+0xc2>
    23f2:	4a2c      	ldr	r2, [pc, #176]	; (24a4 <__sflush_r+0x110>)
    23f4:	40da      	lsrs	r2, r3
    23f6:	07d3      	lsls	r3, r2, #31
    23f8:	d52d      	bpl.n	2456 <__sflush_r+0xc2>
    23fa:	2300      	movs	r3, #0
    23fc:	6063      	str	r3, [r4, #4]
    23fe:	6923      	ldr	r3, [r4, #16]
    2400:	6023      	str	r3, [r4, #0]
    2402:	04cb      	lsls	r3, r1, #19
    2404:	d505      	bpl.n	2412 <__sflush_r+0x7e>
    2406:	1c43      	adds	r3, r0, #1
    2408:	d102      	bne.n	2410 <__sflush_r+0x7c>
    240a:	682b      	ldr	r3, [r5, #0]
    240c:	2b00      	cmp	r3, #0
    240e:	d100      	bne.n	2412 <__sflush_r+0x7e>
    2410:	6560      	str	r0, [r4, #84]	; 0x54
    2412:	6b61      	ldr	r1, [r4, #52]	; 0x34
    2414:	602e      	str	r6, [r5, #0]
    2416:	2900      	cmp	r1, #0
    2418:	d0c8      	beq.n	23ac <__sflush_r+0x18>
    241a:	0023      	movs	r3, r4
    241c:	3344      	adds	r3, #68	; 0x44
    241e:	4299      	cmp	r1, r3
    2420:	d002      	beq.n	2428 <__sflush_r+0x94>
    2422:	0028      	movs	r0, r5
    2424:	f000 f976 	bl	2714 <_free_r>
    2428:	2000      	movs	r0, #0
    242a:	6360      	str	r0, [r4, #52]	; 0x34
    242c:	e7bf      	b.n	23ae <__sflush_r+0x1a>
    242e:	2301      	movs	r3, #1
    2430:	6a21      	ldr	r1, [r4, #32]
    2432:	0028      	movs	r0, r5
    2434:	47b8      	blx	r7
    2436:	1c43      	adds	r3, r0, #1
    2438:	d1c5      	bne.n	23c6 <__sflush_r+0x32>
    243a:	682b      	ldr	r3, [r5, #0]
    243c:	2b00      	cmp	r3, #0
    243e:	d0c2      	beq.n	23c6 <__sflush_r+0x32>
    2440:	2b1d      	cmp	r3, #29
    2442:	d001      	beq.n	2448 <__sflush_r+0xb4>
    2444:	2b16      	cmp	r3, #22
    2446:	d101      	bne.n	244c <__sflush_r+0xb8>
    2448:	602e      	str	r6, [r5, #0]
    244a:	e7af      	b.n	23ac <__sflush_r+0x18>
    244c:	2340      	movs	r3, #64	; 0x40
    244e:	89a2      	ldrh	r2, [r4, #12]
    2450:	4313      	orrs	r3, r2
    2452:	81a3      	strh	r3, [r4, #12]
    2454:	e7ab      	b.n	23ae <__sflush_r+0x1a>
    2456:	2340      	movs	r3, #64	; 0x40
    2458:	430b      	orrs	r3, r1
    245a:	2001      	movs	r0, #1
    245c:	81a3      	strh	r3, [r4, #12]
    245e:	4240      	negs	r0, r0
    2460:	e7a5      	b.n	23ae <__sflush_r+0x1a>
    2462:	690f      	ldr	r7, [r1, #16]
    2464:	2f00      	cmp	r7, #0
    2466:	d0a1      	beq.n	23ac <__sflush_r+0x18>
    2468:	680b      	ldr	r3, [r1, #0]
    246a:	600f      	str	r7, [r1, #0]
    246c:	1bdb      	subs	r3, r3, r7
    246e:	9301      	str	r3, [sp, #4]
    2470:	2300      	movs	r3, #0
    2472:	0792      	lsls	r2, r2, #30
    2474:	d100      	bne.n	2478 <__sflush_r+0xe4>
    2476:	694b      	ldr	r3, [r1, #20]
    2478:	60a3      	str	r3, [r4, #8]
    247a:	9b01      	ldr	r3, [sp, #4]
    247c:	2b00      	cmp	r3, #0
    247e:	dc00      	bgt.n	2482 <__sflush_r+0xee>
    2480:	e794      	b.n	23ac <__sflush_r+0x18>
    2482:	9b01      	ldr	r3, [sp, #4]
    2484:	003a      	movs	r2, r7
    2486:	6a21      	ldr	r1, [r4, #32]
    2488:	0028      	movs	r0, r5
    248a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    248c:	47b0      	blx	r6
    248e:	2800      	cmp	r0, #0
    2490:	dc03      	bgt.n	249a <__sflush_r+0x106>
    2492:	2340      	movs	r3, #64	; 0x40
    2494:	89a2      	ldrh	r2, [r4, #12]
    2496:	4313      	orrs	r3, r2
    2498:	e7df      	b.n	245a <__sflush_r+0xc6>
    249a:	9b01      	ldr	r3, [sp, #4]
    249c:	183f      	adds	r7, r7, r0
    249e:	1a1b      	subs	r3, r3, r0
    24a0:	9301      	str	r3, [sp, #4]
    24a2:	e7ea      	b.n	247a <__sflush_r+0xe6>
    24a4:	20400001 	.word	0x20400001

000024a8 <_fflush_r>:
    24a8:	690b      	ldr	r3, [r1, #16]
    24aa:	b570      	push	{r4, r5, r6, lr}
    24ac:	0005      	movs	r5, r0
    24ae:	000c      	movs	r4, r1
    24b0:	2b00      	cmp	r3, #0
    24b2:	d101      	bne.n	24b8 <_fflush_r+0x10>
    24b4:	2000      	movs	r0, #0
    24b6:	bd70      	pop	{r4, r5, r6, pc}
    24b8:	2800      	cmp	r0, #0
    24ba:	d004      	beq.n	24c6 <_fflush_r+0x1e>
    24bc:	6983      	ldr	r3, [r0, #24]
    24be:	2b00      	cmp	r3, #0
    24c0:	d101      	bne.n	24c6 <_fflush_r+0x1e>
    24c2:	f000 f85f 	bl	2584 <__sinit>
    24c6:	4b0b      	ldr	r3, [pc, #44]	; (24f4 <_fflush_r+0x4c>)
    24c8:	429c      	cmp	r4, r3
    24ca:	d109      	bne.n	24e0 <_fflush_r+0x38>
    24cc:	686c      	ldr	r4, [r5, #4]
    24ce:	220c      	movs	r2, #12
    24d0:	5ea3      	ldrsh	r3, [r4, r2]
    24d2:	2b00      	cmp	r3, #0
    24d4:	d0ee      	beq.n	24b4 <_fflush_r+0xc>
    24d6:	0021      	movs	r1, r4
    24d8:	0028      	movs	r0, r5
    24da:	f7ff ff5b 	bl	2394 <__sflush_r>
    24de:	e7ea      	b.n	24b6 <_fflush_r+0xe>
    24e0:	4b05      	ldr	r3, [pc, #20]	; (24f8 <_fflush_r+0x50>)
    24e2:	429c      	cmp	r4, r3
    24e4:	d101      	bne.n	24ea <_fflush_r+0x42>
    24e6:	68ac      	ldr	r4, [r5, #8]
    24e8:	e7f1      	b.n	24ce <_fflush_r+0x26>
    24ea:	4b04      	ldr	r3, [pc, #16]	; (24fc <_fflush_r+0x54>)
    24ec:	429c      	cmp	r4, r3
    24ee:	d1ee      	bne.n	24ce <_fflush_r+0x26>
    24f0:	68ec      	ldr	r4, [r5, #12]
    24f2:	e7ec      	b.n	24ce <_fflush_r+0x26>
    24f4:	00003348 	.word	0x00003348
    24f8:	00003368 	.word	0x00003368
    24fc:	00003328 	.word	0x00003328

00002500 <_cleanup_r>:
    2500:	b510      	push	{r4, lr}
    2502:	4902      	ldr	r1, [pc, #8]	; (250c <_cleanup_r+0xc>)
    2504:	f000 f8b2 	bl	266c <_fwalk_reent>
    2508:	bd10      	pop	{r4, pc}
    250a:	46c0      	nop			; (mov r8, r8)
    250c:	000024a9 	.word	0x000024a9

00002510 <std.isra.0>:
    2510:	2300      	movs	r3, #0
    2512:	b510      	push	{r4, lr}
    2514:	0004      	movs	r4, r0
    2516:	6003      	str	r3, [r0, #0]
    2518:	6043      	str	r3, [r0, #4]
    251a:	6083      	str	r3, [r0, #8]
    251c:	8181      	strh	r1, [r0, #12]
    251e:	6643      	str	r3, [r0, #100]	; 0x64
    2520:	81c2      	strh	r2, [r0, #14]
    2522:	6103      	str	r3, [r0, #16]
    2524:	6143      	str	r3, [r0, #20]
    2526:	6183      	str	r3, [r0, #24]
    2528:	0019      	movs	r1, r3
    252a:	2208      	movs	r2, #8
    252c:	305c      	adds	r0, #92	; 0x5c
    252e:	f7ff fe32 	bl	2196 <memset>
    2532:	4b05      	ldr	r3, [pc, #20]	; (2548 <std.isra.0+0x38>)
    2534:	6224      	str	r4, [r4, #32]
    2536:	6263      	str	r3, [r4, #36]	; 0x24
    2538:	4b04      	ldr	r3, [pc, #16]	; (254c <std.isra.0+0x3c>)
    253a:	62a3      	str	r3, [r4, #40]	; 0x28
    253c:	4b04      	ldr	r3, [pc, #16]	; (2550 <std.isra.0+0x40>)
    253e:	62e3      	str	r3, [r4, #44]	; 0x2c
    2540:	4b04      	ldr	r3, [pc, #16]	; (2554 <std.isra.0+0x44>)
    2542:	6323      	str	r3, [r4, #48]	; 0x30
    2544:	bd10      	pop	{r4, pc}
    2546:	46c0      	nop			; (mov r8, r8)
    2548:	00002e65 	.word	0x00002e65
    254c:	00002e8d 	.word	0x00002e8d
    2550:	00002ec5 	.word	0x00002ec5
    2554:	00002ef1 	.word	0x00002ef1

00002558 <__sfmoreglue>:
    2558:	b570      	push	{r4, r5, r6, lr}
    255a:	2568      	movs	r5, #104	; 0x68
    255c:	1e4a      	subs	r2, r1, #1
    255e:	4355      	muls	r5, r2
    2560:	000e      	movs	r6, r1
    2562:	0029      	movs	r1, r5
    2564:	3174      	adds	r1, #116	; 0x74
    2566:	f000 f91f 	bl	27a8 <_malloc_r>
    256a:	1e04      	subs	r4, r0, #0
    256c:	d008      	beq.n	2580 <__sfmoreglue+0x28>
    256e:	2100      	movs	r1, #0
    2570:	002a      	movs	r2, r5
    2572:	6001      	str	r1, [r0, #0]
    2574:	6046      	str	r6, [r0, #4]
    2576:	300c      	adds	r0, #12
    2578:	60a0      	str	r0, [r4, #8]
    257a:	3268      	adds	r2, #104	; 0x68
    257c:	f7ff fe0b 	bl	2196 <memset>
    2580:	0020      	movs	r0, r4
    2582:	bd70      	pop	{r4, r5, r6, pc}

00002584 <__sinit>:
    2584:	6983      	ldr	r3, [r0, #24]
    2586:	b513      	push	{r0, r1, r4, lr}
    2588:	0004      	movs	r4, r0
    258a:	2b00      	cmp	r3, #0
    258c:	d128      	bne.n	25e0 <__sinit+0x5c>
    258e:	6483      	str	r3, [r0, #72]	; 0x48
    2590:	64c3      	str	r3, [r0, #76]	; 0x4c
    2592:	6503      	str	r3, [r0, #80]	; 0x50
    2594:	4b13      	ldr	r3, [pc, #76]	; (25e4 <__sinit+0x60>)
    2596:	4a14      	ldr	r2, [pc, #80]	; (25e8 <__sinit+0x64>)
    2598:	681b      	ldr	r3, [r3, #0]
    259a:	6282      	str	r2, [r0, #40]	; 0x28
    259c:	9301      	str	r3, [sp, #4]
    259e:	4298      	cmp	r0, r3
    25a0:	d101      	bne.n	25a6 <__sinit+0x22>
    25a2:	2301      	movs	r3, #1
    25a4:	6183      	str	r3, [r0, #24]
    25a6:	0020      	movs	r0, r4
    25a8:	f000 f820 	bl	25ec <__sfp>
    25ac:	6060      	str	r0, [r4, #4]
    25ae:	0020      	movs	r0, r4
    25b0:	f000 f81c 	bl	25ec <__sfp>
    25b4:	60a0      	str	r0, [r4, #8]
    25b6:	0020      	movs	r0, r4
    25b8:	f000 f818 	bl	25ec <__sfp>
    25bc:	2200      	movs	r2, #0
    25be:	60e0      	str	r0, [r4, #12]
    25c0:	2104      	movs	r1, #4
    25c2:	6860      	ldr	r0, [r4, #4]
    25c4:	f7ff ffa4 	bl	2510 <std.isra.0>
    25c8:	2201      	movs	r2, #1
    25ca:	2109      	movs	r1, #9
    25cc:	68a0      	ldr	r0, [r4, #8]
    25ce:	f7ff ff9f 	bl	2510 <std.isra.0>
    25d2:	2202      	movs	r2, #2
    25d4:	2112      	movs	r1, #18
    25d6:	68e0      	ldr	r0, [r4, #12]
    25d8:	f7ff ff9a 	bl	2510 <std.isra.0>
    25dc:	2301      	movs	r3, #1
    25de:	61a3      	str	r3, [r4, #24]
    25e0:	bd13      	pop	{r0, r1, r4, pc}
    25e2:	46c0      	nop			; (mov r8, r8)
    25e4:	00003218 	.word	0x00003218
    25e8:	00002501 	.word	0x00002501

000025ec <__sfp>:
    25ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    25ee:	4b1e      	ldr	r3, [pc, #120]	; (2668 <__sfp+0x7c>)
    25f0:	0007      	movs	r7, r0
    25f2:	681e      	ldr	r6, [r3, #0]
    25f4:	69b3      	ldr	r3, [r6, #24]
    25f6:	2b00      	cmp	r3, #0
    25f8:	d102      	bne.n	2600 <__sfp+0x14>
    25fa:	0030      	movs	r0, r6
    25fc:	f7ff ffc2 	bl	2584 <__sinit>
    2600:	3648      	adds	r6, #72	; 0x48
    2602:	68b4      	ldr	r4, [r6, #8]
    2604:	6873      	ldr	r3, [r6, #4]
    2606:	3b01      	subs	r3, #1
    2608:	d504      	bpl.n	2614 <__sfp+0x28>
    260a:	6833      	ldr	r3, [r6, #0]
    260c:	2b00      	cmp	r3, #0
    260e:	d007      	beq.n	2620 <__sfp+0x34>
    2610:	6836      	ldr	r6, [r6, #0]
    2612:	e7f6      	b.n	2602 <__sfp+0x16>
    2614:	220c      	movs	r2, #12
    2616:	5ea5      	ldrsh	r5, [r4, r2]
    2618:	2d00      	cmp	r5, #0
    261a:	d00d      	beq.n	2638 <__sfp+0x4c>
    261c:	3468      	adds	r4, #104	; 0x68
    261e:	e7f2      	b.n	2606 <__sfp+0x1a>
    2620:	2104      	movs	r1, #4
    2622:	0038      	movs	r0, r7
    2624:	f7ff ff98 	bl	2558 <__sfmoreglue>
    2628:	6030      	str	r0, [r6, #0]
    262a:	2800      	cmp	r0, #0
    262c:	d1f0      	bne.n	2610 <__sfp+0x24>
    262e:	230c      	movs	r3, #12
    2630:	0004      	movs	r4, r0
    2632:	603b      	str	r3, [r7, #0]
    2634:	0020      	movs	r0, r4
    2636:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2638:	2301      	movs	r3, #1
    263a:	0020      	movs	r0, r4
    263c:	425b      	negs	r3, r3
    263e:	81e3      	strh	r3, [r4, #14]
    2640:	3302      	adds	r3, #2
    2642:	81a3      	strh	r3, [r4, #12]
    2644:	6665      	str	r5, [r4, #100]	; 0x64
    2646:	6025      	str	r5, [r4, #0]
    2648:	60a5      	str	r5, [r4, #8]
    264a:	6065      	str	r5, [r4, #4]
    264c:	6125      	str	r5, [r4, #16]
    264e:	6165      	str	r5, [r4, #20]
    2650:	61a5      	str	r5, [r4, #24]
    2652:	2208      	movs	r2, #8
    2654:	0029      	movs	r1, r5
    2656:	305c      	adds	r0, #92	; 0x5c
    2658:	f7ff fd9d 	bl	2196 <memset>
    265c:	6365      	str	r5, [r4, #52]	; 0x34
    265e:	63a5      	str	r5, [r4, #56]	; 0x38
    2660:	64a5      	str	r5, [r4, #72]	; 0x48
    2662:	64e5      	str	r5, [r4, #76]	; 0x4c
    2664:	e7e6      	b.n	2634 <__sfp+0x48>
    2666:	46c0      	nop			; (mov r8, r8)
    2668:	00003218 	.word	0x00003218

0000266c <_fwalk_reent>:
    266c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    266e:	0004      	movs	r4, r0
    2670:	0007      	movs	r7, r0
    2672:	2600      	movs	r6, #0
    2674:	9101      	str	r1, [sp, #4]
    2676:	3448      	adds	r4, #72	; 0x48
    2678:	2c00      	cmp	r4, #0
    267a:	d101      	bne.n	2680 <_fwalk_reent+0x14>
    267c:	0030      	movs	r0, r6
    267e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    2680:	6863      	ldr	r3, [r4, #4]
    2682:	68a5      	ldr	r5, [r4, #8]
    2684:	9300      	str	r3, [sp, #0]
    2686:	9b00      	ldr	r3, [sp, #0]
    2688:	3b01      	subs	r3, #1
    268a:	9300      	str	r3, [sp, #0]
    268c:	d501      	bpl.n	2692 <_fwalk_reent+0x26>
    268e:	6824      	ldr	r4, [r4, #0]
    2690:	e7f2      	b.n	2678 <_fwalk_reent+0xc>
    2692:	89ab      	ldrh	r3, [r5, #12]
    2694:	2b01      	cmp	r3, #1
    2696:	d908      	bls.n	26aa <_fwalk_reent+0x3e>
    2698:	220e      	movs	r2, #14
    269a:	5eab      	ldrsh	r3, [r5, r2]
    269c:	3301      	adds	r3, #1
    269e:	d004      	beq.n	26aa <_fwalk_reent+0x3e>
    26a0:	0029      	movs	r1, r5
    26a2:	0038      	movs	r0, r7
    26a4:	9b01      	ldr	r3, [sp, #4]
    26a6:	4798      	blx	r3
    26a8:	4306      	orrs	r6, r0
    26aa:	3568      	adds	r5, #104	; 0x68
    26ac:	e7eb      	b.n	2686 <_fwalk_reent+0x1a>
	...

000026b0 <__swhatbuf_r>:
    26b0:	b570      	push	{r4, r5, r6, lr}
    26b2:	000e      	movs	r6, r1
    26b4:	001d      	movs	r5, r3
    26b6:	230e      	movs	r3, #14
    26b8:	5ec9      	ldrsh	r1, [r1, r3]
    26ba:	b090      	sub	sp, #64	; 0x40
    26bc:	0014      	movs	r4, r2
    26be:	2900      	cmp	r1, #0
    26c0:	da07      	bge.n	26d2 <__swhatbuf_r+0x22>
    26c2:	2300      	movs	r3, #0
    26c4:	602b      	str	r3, [r5, #0]
    26c6:	89b3      	ldrh	r3, [r6, #12]
    26c8:	061b      	lsls	r3, r3, #24
    26ca:	d411      	bmi.n	26f0 <__swhatbuf_r+0x40>
    26cc:	2380      	movs	r3, #128	; 0x80
    26ce:	00db      	lsls	r3, r3, #3
    26d0:	e00f      	b.n	26f2 <__swhatbuf_r+0x42>
    26d2:	aa01      	add	r2, sp, #4
    26d4:	f000 fc38 	bl	2f48 <_fstat_r>
    26d8:	2800      	cmp	r0, #0
    26da:	dbf2      	blt.n	26c2 <__swhatbuf_r+0x12>
    26dc:	22f0      	movs	r2, #240	; 0xf0
    26de:	9b02      	ldr	r3, [sp, #8]
    26e0:	0212      	lsls	r2, r2, #8
    26e2:	4013      	ands	r3, r2
    26e4:	4a05      	ldr	r2, [pc, #20]	; (26fc <__swhatbuf_r+0x4c>)
    26e6:	189b      	adds	r3, r3, r2
    26e8:	425a      	negs	r2, r3
    26ea:	4153      	adcs	r3, r2
    26ec:	602b      	str	r3, [r5, #0]
    26ee:	e7ed      	b.n	26cc <__swhatbuf_r+0x1c>
    26f0:	2340      	movs	r3, #64	; 0x40
    26f2:	2000      	movs	r0, #0
    26f4:	6023      	str	r3, [r4, #0]
    26f6:	b010      	add	sp, #64	; 0x40
    26f8:	bd70      	pop	{r4, r5, r6, pc}
    26fa:	46c0      	nop			; (mov r8, r8)
    26fc:	ffffe000 	.word	0xffffe000

00002700 <malloc>:
    2700:	b510      	push	{r4, lr}
    2702:	4b03      	ldr	r3, [pc, #12]	; (2710 <malloc+0x10>)
    2704:	0001      	movs	r1, r0
    2706:	6818      	ldr	r0, [r3, #0]
    2708:	f000 f84e 	bl	27a8 <_malloc_r>
    270c:	bd10      	pop	{r4, pc}
    270e:	46c0      	nop			; (mov r8, r8)
    2710:	20000018 	.word	0x20000018

00002714 <_free_r>:
    2714:	b570      	push	{r4, r5, r6, lr}
    2716:	0005      	movs	r5, r0
    2718:	2900      	cmp	r1, #0
    271a:	d010      	beq.n	273e <_free_r+0x2a>
    271c:	1f0c      	subs	r4, r1, #4
    271e:	6823      	ldr	r3, [r4, #0]
    2720:	2b00      	cmp	r3, #0
    2722:	da00      	bge.n	2726 <_free_r+0x12>
    2724:	18e4      	adds	r4, r4, r3
    2726:	0028      	movs	r0, r5
    2728:	f000 fc51 	bl	2fce <__malloc_lock>
    272c:	4a1d      	ldr	r2, [pc, #116]	; (27a4 <_free_r+0x90>)
    272e:	6813      	ldr	r3, [r2, #0]
    2730:	2b00      	cmp	r3, #0
    2732:	d105      	bne.n	2740 <_free_r+0x2c>
    2734:	6063      	str	r3, [r4, #4]
    2736:	6014      	str	r4, [r2, #0]
    2738:	0028      	movs	r0, r5
    273a:	f000 fc49 	bl	2fd0 <__malloc_unlock>
    273e:	bd70      	pop	{r4, r5, r6, pc}
    2740:	42a3      	cmp	r3, r4
    2742:	d909      	bls.n	2758 <_free_r+0x44>
    2744:	6821      	ldr	r1, [r4, #0]
    2746:	1860      	adds	r0, r4, r1
    2748:	4283      	cmp	r3, r0
    274a:	d1f3      	bne.n	2734 <_free_r+0x20>
    274c:	6818      	ldr	r0, [r3, #0]
    274e:	685b      	ldr	r3, [r3, #4]
    2750:	1841      	adds	r1, r0, r1
    2752:	6021      	str	r1, [r4, #0]
    2754:	e7ee      	b.n	2734 <_free_r+0x20>
    2756:	0013      	movs	r3, r2
    2758:	685a      	ldr	r2, [r3, #4]
    275a:	2a00      	cmp	r2, #0
    275c:	d001      	beq.n	2762 <_free_r+0x4e>
    275e:	42a2      	cmp	r2, r4
    2760:	d9f9      	bls.n	2756 <_free_r+0x42>
    2762:	6819      	ldr	r1, [r3, #0]
    2764:	1858      	adds	r0, r3, r1
    2766:	42a0      	cmp	r0, r4
    2768:	d10b      	bne.n	2782 <_free_r+0x6e>
    276a:	6820      	ldr	r0, [r4, #0]
    276c:	1809      	adds	r1, r1, r0
    276e:	1858      	adds	r0, r3, r1
    2770:	6019      	str	r1, [r3, #0]
    2772:	4282      	cmp	r2, r0
    2774:	d1e0      	bne.n	2738 <_free_r+0x24>
    2776:	6810      	ldr	r0, [r2, #0]
    2778:	6852      	ldr	r2, [r2, #4]
    277a:	1841      	adds	r1, r0, r1
    277c:	6019      	str	r1, [r3, #0]
    277e:	605a      	str	r2, [r3, #4]
    2780:	e7da      	b.n	2738 <_free_r+0x24>
    2782:	42a0      	cmp	r0, r4
    2784:	d902      	bls.n	278c <_free_r+0x78>
    2786:	230c      	movs	r3, #12
    2788:	602b      	str	r3, [r5, #0]
    278a:	e7d5      	b.n	2738 <_free_r+0x24>
    278c:	6821      	ldr	r1, [r4, #0]
    278e:	1860      	adds	r0, r4, r1
    2790:	4282      	cmp	r2, r0
    2792:	d103      	bne.n	279c <_free_r+0x88>
    2794:	6810      	ldr	r0, [r2, #0]
    2796:	6852      	ldr	r2, [r2, #4]
    2798:	1841      	adds	r1, r0, r1
    279a:	6021      	str	r1, [r4, #0]
    279c:	6062      	str	r2, [r4, #4]
    279e:	605c      	str	r4, [r3, #4]
    27a0:	e7ca      	b.n	2738 <_free_r+0x24>
    27a2:	46c0      	nop			; (mov r8, r8)
    27a4:	20000310 	.word	0x20000310

000027a8 <_malloc_r>:
    27a8:	2303      	movs	r3, #3
    27aa:	b570      	push	{r4, r5, r6, lr}
    27ac:	1ccd      	adds	r5, r1, #3
    27ae:	439d      	bics	r5, r3
    27b0:	3508      	adds	r5, #8
    27b2:	0006      	movs	r6, r0
    27b4:	2d0c      	cmp	r5, #12
    27b6:	d21e      	bcs.n	27f6 <_malloc_r+0x4e>
    27b8:	250c      	movs	r5, #12
    27ba:	42a9      	cmp	r1, r5
    27bc:	d81d      	bhi.n	27fa <_malloc_r+0x52>
    27be:	0030      	movs	r0, r6
    27c0:	f000 fc05 	bl	2fce <__malloc_lock>
    27c4:	4a25      	ldr	r2, [pc, #148]	; (285c <_malloc_r+0xb4>)
    27c6:	6814      	ldr	r4, [r2, #0]
    27c8:	0021      	movs	r1, r4
    27ca:	2900      	cmp	r1, #0
    27cc:	d119      	bne.n	2802 <_malloc_r+0x5a>
    27ce:	4c24      	ldr	r4, [pc, #144]	; (2860 <_malloc_r+0xb8>)
    27d0:	6823      	ldr	r3, [r4, #0]
    27d2:	2b00      	cmp	r3, #0
    27d4:	d103      	bne.n	27de <_malloc_r+0x36>
    27d6:	0030      	movs	r0, r6
    27d8:	f000 fb32 	bl	2e40 <_sbrk_r>
    27dc:	6020      	str	r0, [r4, #0]
    27de:	0029      	movs	r1, r5
    27e0:	0030      	movs	r0, r6
    27e2:	f000 fb2d 	bl	2e40 <_sbrk_r>
    27e6:	1c43      	adds	r3, r0, #1
    27e8:	d12c      	bne.n	2844 <_malloc_r+0x9c>
    27ea:	230c      	movs	r3, #12
    27ec:	0030      	movs	r0, r6
    27ee:	6033      	str	r3, [r6, #0]
    27f0:	f000 fbee 	bl	2fd0 <__malloc_unlock>
    27f4:	e003      	b.n	27fe <_malloc_r+0x56>
    27f6:	2d00      	cmp	r5, #0
    27f8:	dadf      	bge.n	27ba <_malloc_r+0x12>
    27fa:	230c      	movs	r3, #12
    27fc:	6033      	str	r3, [r6, #0]
    27fe:	2000      	movs	r0, #0
    2800:	bd70      	pop	{r4, r5, r6, pc}
    2802:	680b      	ldr	r3, [r1, #0]
    2804:	1b5b      	subs	r3, r3, r5
    2806:	d41a      	bmi.n	283e <_malloc_r+0x96>
    2808:	2b0b      	cmp	r3, #11
    280a:	d903      	bls.n	2814 <_malloc_r+0x6c>
    280c:	600b      	str	r3, [r1, #0]
    280e:	18cc      	adds	r4, r1, r3
    2810:	6025      	str	r5, [r4, #0]
    2812:	e003      	b.n	281c <_malloc_r+0x74>
    2814:	428c      	cmp	r4, r1
    2816:	d10e      	bne.n	2836 <_malloc_r+0x8e>
    2818:	6863      	ldr	r3, [r4, #4]
    281a:	6013      	str	r3, [r2, #0]
    281c:	0030      	movs	r0, r6
    281e:	f000 fbd7 	bl	2fd0 <__malloc_unlock>
    2822:	0020      	movs	r0, r4
    2824:	2207      	movs	r2, #7
    2826:	300b      	adds	r0, #11
    2828:	1d23      	adds	r3, r4, #4
    282a:	4390      	bics	r0, r2
    282c:	1ac3      	subs	r3, r0, r3
    282e:	d0e7      	beq.n	2800 <_malloc_r+0x58>
    2830:	425a      	negs	r2, r3
    2832:	50e2      	str	r2, [r4, r3]
    2834:	e7e4      	b.n	2800 <_malloc_r+0x58>
    2836:	684b      	ldr	r3, [r1, #4]
    2838:	6063      	str	r3, [r4, #4]
    283a:	000c      	movs	r4, r1
    283c:	e7ee      	b.n	281c <_malloc_r+0x74>
    283e:	000c      	movs	r4, r1
    2840:	6849      	ldr	r1, [r1, #4]
    2842:	e7c2      	b.n	27ca <_malloc_r+0x22>
    2844:	2303      	movs	r3, #3
    2846:	1cc4      	adds	r4, r0, #3
    2848:	439c      	bics	r4, r3
    284a:	42a0      	cmp	r0, r4
    284c:	d0e0      	beq.n	2810 <_malloc_r+0x68>
    284e:	1a21      	subs	r1, r4, r0
    2850:	0030      	movs	r0, r6
    2852:	f000 faf5 	bl	2e40 <_sbrk_r>
    2856:	1c43      	adds	r3, r0, #1
    2858:	d1da      	bne.n	2810 <_malloc_r+0x68>
    285a:	e7c6      	b.n	27ea <_malloc_r+0x42>
    285c:	20000310 	.word	0x20000310
    2860:	20000314 	.word	0x20000314

00002864 <__ssputs_r>:
    2864:	b5f0      	push	{r4, r5, r6, r7, lr}
    2866:	688e      	ldr	r6, [r1, #8]
    2868:	b085      	sub	sp, #20
    286a:	0007      	movs	r7, r0
    286c:	000c      	movs	r4, r1
    286e:	9203      	str	r2, [sp, #12]
    2870:	9301      	str	r3, [sp, #4]
    2872:	429e      	cmp	r6, r3
    2874:	d839      	bhi.n	28ea <__ssputs_r+0x86>
    2876:	2390      	movs	r3, #144	; 0x90
    2878:	898a      	ldrh	r2, [r1, #12]
    287a:	00db      	lsls	r3, r3, #3
    287c:	421a      	tst	r2, r3
    287e:	d034      	beq.n	28ea <__ssputs_r+0x86>
    2880:	2503      	movs	r5, #3
    2882:	6909      	ldr	r1, [r1, #16]
    2884:	6823      	ldr	r3, [r4, #0]
    2886:	1a5b      	subs	r3, r3, r1
    2888:	9302      	str	r3, [sp, #8]
    288a:	6963      	ldr	r3, [r4, #20]
    288c:	9802      	ldr	r0, [sp, #8]
    288e:	435d      	muls	r5, r3
    2890:	0feb      	lsrs	r3, r5, #31
    2892:	195d      	adds	r5, r3, r5
    2894:	9b01      	ldr	r3, [sp, #4]
    2896:	106d      	asrs	r5, r5, #1
    2898:	3301      	adds	r3, #1
    289a:	181b      	adds	r3, r3, r0
    289c:	42ab      	cmp	r3, r5
    289e:	d900      	bls.n	28a2 <__ssputs_r+0x3e>
    28a0:	001d      	movs	r5, r3
    28a2:	0553      	lsls	r3, r2, #21
    28a4:	d532      	bpl.n	290c <__ssputs_r+0xa8>
    28a6:	0029      	movs	r1, r5
    28a8:	0038      	movs	r0, r7
    28aa:	f7ff ff7d 	bl	27a8 <_malloc_r>
    28ae:	1e06      	subs	r6, r0, #0
    28b0:	d109      	bne.n	28c6 <__ssputs_r+0x62>
    28b2:	230c      	movs	r3, #12
    28b4:	603b      	str	r3, [r7, #0]
    28b6:	2340      	movs	r3, #64	; 0x40
    28b8:	2001      	movs	r0, #1
    28ba:	89a2      	ldrh	r2, [r4, #12]
    28bc:	4240      	negs	r0, r0
    28be:	4313      	orrs	r3, r2
    28c0:	81a3      	strh	r3, [r4, #12]
    28c2:	b005      	add	sp, #20
    28c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    28c6:	9a02      	ldr	r2, [sp, #8]
    28c8:	6921      	ldr	r1, [r4, #16]
    28ca:	f7ff fc5b 	bl	2184 <memcpy>
    28ce:	89a3      	ldrh	r3, [r4, #12]
    28d0:	4a14      	ldr	r2, [pc, #80]	; (2924 <__ssputs_r+0xc0>)
    28d2:	401a      	ands	r2, r3
    28d4:	2380      	movs	r3, #128	; 0x80
    28d6:	4313      	orrs	r3, r2
    28d8:	81a3      	strh	r3, [r4, #12]
    28da:	9b02      	ldr	r3, [sp, #8]
    28dc:	6126      	str	r6, [r4, #16]
    28de:	18f6      	adds	r6, r6, r3
    28e0:	6026      	str	r6, [r4, #0]
    28e2:	6165      	str	r5, [r4, #20]
    28e4:	9e01      	ldr	r6, [sp, #4]
    28e6:	1aed      	subs	r5, r5, r3
    28e8:	60a5      	str	r5, [r4, #8]
    28ea:	9b01      	ldr	r3, [sp, #4]
    28ec:	42b3      	cmp	r3, r6
    28ee:	d200      	bcs.n	28f2 <__ssputs_r+0x8e>
    28f0:	001e      	movs	r6, r3
    28f2:	0032      	movs	r2, r6
    28f4:	9903      	ldr	r1, [sp, #12]
    28f6:	6820      	ldr	r0, [r4, #0]
    28f8:	f000 fb57 	bl	2faa <memmove>
    28fc:	68a3      	ldr	r3, [r4, #8]
    28fe:	2000      	movs	r0, #0
    2900:	1b9b      	subs	r3, r3, r6
    2902:	60a3      	str	r3, [r4, #8]
    2904:	6823      	ldr	r3, [r4, #0]
    2906:	199e      	adds	r6, r3, r6
    2908:	6026      	str	r6, [r4, #0]
    290a:	e7da      	b.n	28c2 <__ssputs_r+0x5e>
    290c:	002a      	movs	r2, r5
    290e:	0038      	movs	r0, r7
    2910:	f000 fb5f 	bl	2fd2 <_realloc_r>
    2914:	1e06      	subs	r6, r0, #0
    2916:	d1e0      	bne.n	28da <__ssputs_r+0x76>
    2918:	6921      	ldr	r1, [r4, #16]
    291a:	0038      	movs	r0, r7
    291c:	f7ff fefa 	bl	2714 <_free_r>
    2920:	e7c7      	b.n	28b2 <__ssputs_r+0x4e>
    2922:	46c0      	nop			; (mov r8, r8)
    2924:	fffffb7f 	.word	0xfffffb7f

00002928 <_svfiprintf_r>:
    2928:	b5f0      	push	{r4, r5, r6, r7, lr}
    292a:	b09f      	sub	sp, #124	; 0x7c
    292c:	9002      	str	r0, [sp, #8]
    292e:	9305      	str	r3, [sp, #20]
    2930:	898b      	ldrh	r3, [r1, #12]
    2932:	000f      	movs	r7, r1
    2934:	0016      	movs	r6, r2
    2936:	061b      	lsls	r3, r3, #24
    2938:	d511      	bpl.n	295e <_svfiprintf_r+0x36>
    293a:	690b      	ldr	r3, [r1, #16]
    293c:	2b00      	cmp	r3, #0
    293e:	d10e      	bne.n	295e <_svfiprintf_r+0x36>
    2940:	2140      	movs	r1, #64	; 0x40
    2942:	f7ff ff31 	bl	27a8 <_malloc_r>
    2946:	6038      	str	r0, [r7, #0]
    2948:	6138      	str	r0, [r7, #16]
    294a:	2800      	cmp	r0, #0
    294c:	d105      	bne.n	295a <_svfiprintf_r+0x32>
    294e:	230c      	movs	r3, #12
    2950:	9a02      	ldr	r2, [sp, #8]
    2952:	3801      	subs	r0, #1
    2954:	6013      	str	r3, [r2, #0]
    2956:	b01f      	add	sp, #124	; 0x7c
    2958:	bdf0      	pop	{r4, r5, r6, r7, pc}
    295a:	2340      	movs	r3, #64	; 0x40
    295c:	617b      	str	r3, [r7, #20]
    295e:	2300      	movs	r3, #0
    2960:	ad06      	add	r5, sp, #24
    2962:	616b      	str	r3, [r5, #20]
    2964:	3320      	adds	r3, #32
    2966:	766b      	strb	r3, [r5, #25]
    2968:	3310      	adds	r3, #16
    296a:	76ab      	strb	r3, [r5, #26]
    296c:	0034      	movs	r4, r6
    296e:	7823      	ldrb	r3, [r4, #0]
    2970:	2b00      	cmp	r3, #0
    2972:	d147      	bne.n	2a04 <_svfiprintf_r+0xdc>
    2974:	1ba3      	subs	r3, r4, r6
    2976:	9304      	str	r3, [sp, #16]
    2978:	d00d      	beq.n	2996 <_svfiprintf_r+0x6e>
    297a:	1ba3      	subs	r3, r4, r6
    297c:	0032      	movs	r2, r6
    297e:	0039      	movs	r1, r7
    2980:	9802      	ldr	r0, [sp, #8]
    2982:	f7ff ff6f 	bl	2864 <__ssputs_r>
    2986:	1c43      	adds	r3, r0, #1
    2988:	d100      	bne.n	298c <_svfiprintf_r+0x64>
    298a:	e0b5      	b.n	2af8 <_svfiprintf_r+0x1d0>
    298c:	696a      	ldr	r2, [r5, #20]
    298e:	9b04      	ldr	r3, [sp, #16]
    2990:	4694      	mov	ip, r2
    2992:	4463      	add	r3, ip
    2994:	616b      	str	r3, [r5, #20]
    2996:	7823      	ldrb	r3, [r4, #0]
    2998:	2b00      	cmp	r3, #0
    299a:	d100      	bne.n	299e <_svfiprintf_r+0x76>
    299c:	e0ac      	b.n	2af8 <_svfiprintf_r+0x1d0>
    299e:	2201      	movs	r2, #1
    29a0:	2300      	movs	r3, #0
    29a2:	4252      	negs	r2, r2
    29a4:	606a      	str	r2, [r5, #4]
    29a6:	a902      	add	r1, sp, #8
    29a8:	3254      	adds	r2, #84	; 0x54
    29aa:	1852      	adds	r2, r2, r1
    29ac:	3401      	adds	r4, #1
    29ae:	602b      	str	r3, [r5, #0]
    29b0:	60eb      	str	r3, [r5, #12]
    29b2:	60ab      	str	r3, [r5, #8]
    29b4:	7013      	strb	r3, [r2, #0]
    29b6:	65ab      	str	r3, [r5, #88]	; 0x58
    29b8:	4e58      	ldr	r6, [pc, #352]	; (2b1c <_svfiprintf_r+0x1f4>)
    29ba:	2205      	movs	r2, #5
    29bc:	7821      	ldrb	r1, [r4, #0]
    29be:	0030      	movs	r0, r6
    29c0:	f000 fae8 	bl	2f94 <memchr>
    29c4:	1c62      	adds	r2, r4, #1
    29c6:	2800      	cmp	r0, #0
    29c8:	d120      	bne.n	2a0c <_svfiprintf_r+0xe4>
    29ca:	6829      	ldr	r1, [r5, #0]
    29cc:	06cb      	lsls	r3, r1, #27
    29ce:	d504      	bpl.n	29da <_svfiprintf_r+0xb2>
    29d0:	2353      	movs	r3, #83	; 0x53
    29d2:	ae02      	add	r6, sp, #8
    29d4:	3020      	adds	r0, #32
    29d6:	199b      	adds	r3, r3, r6
    29d8:	7018      	strb	r0, [r3, #0]
    29da:	070b      	lsls	r3, r1, #28
    29dc:	d504      	bpl.n	29e8 <_svfiprintf_r+0xc0>
    29de:	2353      	movs	r3, #83	; 0x53
    29e0:	202b      	movs	r0, #43	; 0x2b
    29e2:	ae02      	add	r6, sp, #8
    29e4:	199b      	adds	r3, r3, r6
    29e6:	7018      	strb	r0, [r3, #0]
    29e8:	7823      	ldrb	r3, [r4, #0]
    29ea:	2b2a      	cmp	r3, #42	; 0x2a
    29ec:	d016      	beq.n	2a1c <_svfiprintf_r+0xf4>
    29ee:	2000      	movs	r0, #0
    29f0:	210a      	movs	r1, #10
    29f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
    29f4:	7822      	ldrb	r2, [r4, #0]
    29f6:	3a30      	subs	r2, #48	; 0x30
    29f8:	2a09      	cmp	r2, #9
    29fa:	d955      	bls.n	2aa8 <_svfiprintf_r+0x180>
    29fc:	2800      	cmp	r0, #0
    29fe:	d015      	beq.n	2a2c <_svfiprintf_r+0x104>
    2a00:	9309      	str	r3, [sp, #36]	; 0x24
    2a02:	e013      	b.n	2a2c <_svfiprintf_r+0x104>
    2a04:	2b25      	cmp	r3, #37	; 0x25
    2a06:	d0b5      	beq.n	2974 <_svfiprintf_r+0x4c>
    2a08:	3401      	adds	r4, #1
    2a0a:	e7b0      	b.n	296e <_svfiprintf_r+0x46>
    2a0c:	2301      	movs	r3, #1
    2a0e:	1b80      	subs	r0, r0, r6
    2a10:	4083      	lsls	r3, r0
    2a12:	6829      	ldr	r1, [r5, #0]
    2a14:	0014      	movs	r4, r2
    2a16:	430b      	orrs	r3, r1
    2a18:	602b      	str	r3, [r5, #0]
    2a1a:	e7cd      	b.n	29b8 <_svfiprintf_r+0x90>
    2a1c:	9b05      	ldr	r3, [sp, #20]
    2a1e:	1d18      	adds	r0, r3, #4
    2a20:	681b      	ldr	r3, [r3, #0]
    2a22:	9005      	str	r0, [sp, #20]
    2a24:	2b00      	cmp	r3, #0
    2a26:	db39      	blt.n	2a9c <_svfiprintf_r+0x174>
    2a28:	9309      	str	r3, [sp, #36]	; 0x24
    2a2a:	0014      	movs	r4, r2
    2a2c:	7823      	ldrb	r3, [r4, #0]
    2a2e:	2b2e      	cmp	r3, #46	; 0x2e
    2a30:	d10b      	bne.n	2a4a <_svfiprintf_r+0x122>
    2a32:	7863      	ldrb	r3, [r4, #1]
    2a34:	1c62      	adds	r2, r4, #1
    2a36:	2b2a      	cmp	r3, #42	; 0x2a
    2a38:	d13e      	bne.n	2ab8 <_svfiprintf_r+0x190>
    2a3a:	9b05      	ldr	r3, [sp, #20]
    2a3c:	3402      	adds	r4, #2
    2a3e:	1d1a      	adds	r2, r3, #4
    2a40:	681b      	ldr	r3, [r3, #0]
    2a42:	9205      	str	r2, [sp, #20]
    2a44:	2b00      	cmp	r3, #0
    2a46:	db34      	blt.n	2ab2 <_svfiprintf_r+0x18a>
    2a48:	9307      	str	r3, [sp, #28]
    2a4a:	4e35      	ldr	r6, [pc, #212]	; (2b20 <_svfiprintf_r+0x1f8>)
    2a4c:	7821      	ldrb	r1, [r4, #0]
    2a4e:	2203      	movs	r2, #3
    2a50:	0030      	movs	r0, r6
    2a52:	f000 fa9f 	bl	2f94 <memchr>
    2a56:	2800      	cmp	r0, #0
    2a58:	d006      	beq.n	2a68 <_svfiprintf_r+0x140>
    2a5a:	2340      	movs	r3, #64	; 0x40
    2a5c:	1b80      	subs	r0, r0, r6
    2a5e:	4083      	lsls	r3, r0
    2a60:	682a      	ldr	r2, [r5, #0]
    2a62:	3401      	adds	r4, #1
    2a64:	4313      	orrs	r3, r2
    2a66:	602b      	str	r3, [r5, #0]
    2a68:	7821      	ldrb	r1, [r4, #0]
    2a6a:	2206      	movs	r2, #6
    2a6c:	482d      	ldr	r0, [pc, #180]	; (2b24 <_svfiprintf_r+0x1fc>)
    2a6e:	1c66      	adds	r6, r4, #1
    2a70:	7629      	strb	r1, [r5, #24]
    2a72:	f000 fa8f 	bl	2f94 <memchr>
    2a76:	2800      	cmp	r0, #0
    2a78:	d046      	beq.n	2b08 <_svfiprintf_r+0x1e0>
    2a7a:	4b2b      	ldr	r3, [pc, #172]	; (2b28 <_svfiprintf_r+0x200>)
    2a7c:	2b00      	cmp	r3, #0
    2a7e:	d12f      	bne.n	2ae0 <_svfiprintf_r+0x1b8>
    2a80:	6829      	ldr	r1, [r5, #0]
    2a82:	9b05      	ldr	r3, [sp, #20]
    2a84:	2207      	movs	r2, #7
    2a86:	05c9      	lsls	r1, r1, #23
    2a88:	d528      	bpl.n	2adc <_svfiprintf_r+0x1b4>
    2a8a:	189b      	adds	r3, r3, r2
    2a8c:	4393      	bics	r3, r2
    2a8e:	3308      	adds	r3, #8
    2a90:	9305      	str	r3, [sp, #20]
    2a92:	696b      	ldr	r3, [r5, #20]
    2a94:	9a03      	ldr	r2, [sp, #12]
    2a96:	189b      	adds	r3, r3, r2
    2a98:	616b      	str	r3, [r5, #20]
    2a9a:	e767      	b.n	296c <_svfiprintf_r+0x44>
    2a9c:	425b      	negs	r3, r3
    2a9e:	60eb      	str	r3, [r5, #12]
    2aa0:	2302      	movs	r3, #2
    2aa2:	430b      	orrs	r3, r1
    2aa4:	602b      	str	r3, [r5, #0]
    2aa6:	e7c0      	b.n	2a2a <_svfiprintf_r+0x102>
    2aa8:	434b      	muls	r3, r1
    2aaa:	3401      	adds	r4, #1
    2aac:	189b      	adds	r3, r3, r2
    2aae:	2001      	movs	r0, #1
    2ab0:	e7a0      	b.n	29f4 <_svfiprintf_r+0xcc>
    2ab2:	2301      	movs	r3, #1
    2ab4:	425b      	negs	r3, r3
    2ab6:	e7c7      	b.n	2a48 <_svfiprintf_r+0x120>
    2ab8:	2300      	movs	r3, #0
    2aba:	0014      	movs	r4, r2
    2abc:	200a      	movs	r0, #10
    2abe:	001a      	movs	r2, r3
    2ac0:	606b      	str	r3, [r5, #4]
    2ac2:	7821      	ldrb	r1, [r4, #0]
    2ac4:	3930      	subs	r1, #48	; 0x30
    2ac6:	2909      	cmp	r1, #9
    2ac8:	d903      	bls.n	2ad2 <_svfiprintf_r+0x1aa>
    2aca:	2b00      	cmp	r3, #0
    2acc:	d0bd      	beq.n	2a4a <_svfiprintf_r+0x122>
    2ace:	9207      	str	r2, [sp, #28]
    2ad0:	e7bb      	b.n	2a4a <_svfiprintf_r+0x122>
    2ad2:	4342      	muls	r2, r0
    2ad4:	3401      	adds	r4, #1
    2ad6:	1852      	adds	r2, r2, r1
    2ad8:	2301      	movs	r3, #1
    2ada:	e7f2      	b.n	2ac2 <_svfiprintf_r+0x19a>
    2adc:	3307      	adds	r3, #7
    2ade:	e7d5      	b.n	2a8c <_svfiprintf_r+0x164>
    2ae0:	ab05      	add	r3, sp, #20
    2ae2:	9300      	str	r3, [sp, #0]
    2ae4:	003a      	movs	r2, r7
    2ae6:	4b11      	ldr	r3, [pc, #68]	; (2b2c <_svfiprintf_r+0x204>)
    2ae8:	0029      	movs	r1, r5
    2aea:	9802      	ldr	r0, [sp, #8]
    2aec:	e000      	b.n	2af0 <_svfiprintf_r+0x1c8>
    2aee:	bf00      	nop
    2af0:	9003      	str	r0, [sp, #12]
    2af2:	9b03      	ldr	r3, [sp, #12]
    2af4:	3301      	adds	r3, #1
    2af6:	d1cc      	bne.n	2a92 <_svfiprintf_r+0x16a>
    2af8:	89bb      	ldrh	r3, [r7, #12]
    2afa:	980b      	ldr	r0, [sp, #44]	; 0x2c
    2afc:	065b      	lsls	r3, r3, #25
    2afe:	d400      	bmi.n	2b02 <_svfiprintf_r+0x1da>
    2b00:	e729      	b.n	2956 <_svfiprintf_r+0x2e>
    2b02:	2001      	movs	r0, #1
    2b04:	4240      	negs	r0, r0
    2b06:	e726      	b.n	2956 <_svfiprintf_r+0x2e>
    2b08:	ab05      	add	r3, sp, #20
    2b0a:	9300      	str	r3, [sp, #0]
    2b0c:	003a      	movs	r2, r7
    2b0e:	4b07      	ldr	r3, [pc, #28]	; (2b2c <_svfiprintf_r+0x204>)
    2b10:	0029      	movs	r1, r5
    2b12:	9802      	ldr	r0, [sp, #8]
    2b14:	f000 f87a 	bl	2c0c <_printf_i>
    2b18:	e7ea      	b.n	2af0 <_svfiprintf_r+0x1c8>
    2b1a:	46c0      	nop			; (mov r8, r8)
    2b1c:	00003388 	.word	0x00003388
    2b20:	0000338e 	.word	0x0000338e
    2b24:	00003392 	.word	0x00003392
    2b28:	00000000 	.word	0x00000000
    2b2c:	00002865 	.word	0x00002865

00002b30 <_printf_common>:
    2b30:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    2b32:	0015      	movs	r5, r2
    2b34:	9301      	str	r3, [sp, #4]
    2b36:	688a      	ldr	r2, [r1, #8]
    2b38:	690b      	ldr	r3, [r1, #16]
    2b3a:	9000      	str	r0, [sp, #0]
    2b3c:	000c      	movs	r4, r1
    2b3e:	4293      	cmp	r3, r2
    2b40:	da00      	bge.n	2b44 <_printf_common+0x14>
    2b42:	0013      	movs	r3, r2
    2b44:	0022      	movs	r2, r4
    2b46:	602b      	str	r3, [r5, #0]
    2b48:	3243      	adds	r2, #67	; 0x43
    2b4a:	7812      	ldrb	r2, [r2, #0]
    2b4c:	2a00      	cmp	r2, #0
    2b4e:	d001      	beq.n	2b54 <_printf_common+0x24>
    2b50:	3301      	adds	r3, #1
    2b52:	602b      	str	r3, [r5, #0]
    2b54:	6823      	ldr	r3, [r4, #0]
    2b56:	069b      	lsls	r3, r3, #26
    2b58:	d502      	bpl.n	2b60 <_printf_common+0x30>
    2b5a:	682b      	ldr	r3, [r5, #0]
    2b5c:	3302      	adds	r3, #2
    2b5e:	602b      	str	r3, [r5, #0]
    2b60:	2706      	movs	r7, #6
    2b62:	6823      	ldr	r3, [r4, #0]
    2b64:	401f      	ands	r7, r3
    2b66:	d027      	beq.n	2bb8 <_printf_common+0x88>
    2b68:	0023      	movs	r3, r4
    2b6a:	3343      	adds	r3, #67	; 0x43
    2b6c:	781b      	ldrb	r3, [r3, #0]
    2b6e:	1e5a      	subs	r2, r3, #1
    2b70:	4193      	sbcs	r3, r2
    2b72:	6822      	ldr	r2, [r4, #0]
    2b74:	0692      	lsls	r2, r2, #26
    2b76:	d430      	bmi.n	2bda <_printf_common+0xaa>
    2b78:	0022      	movs	r2, r4
    2b7a:	9901      	ldr	r1, [sp, #4]
    2b7c:	3243      	adds	r2, #67	; 0x43
    2b7e:	9800      	ldr	r0, [sp, #0]
    2b80:	9e08      	ldr	r6, [sp, #32]
    2b82:	47b0      	blx	r6
    2b84:	1c43      	adds	r3, r0, #1
    2b86:	d025      	beq.n	2bd4 <_printf_common+0xa4>
    2b88:	2306      	movs	r3, #6
    2b8a:	6820      	ldr	r0, [r4, #0]
    2b8c:	682a      	ldr	r2, [r5, #0]
    2b8e:	68e1      	ldr	r1, [r4, #12]
    2b90:	4003      	ands	r3, r0
    2b92:	2500      	movs	r5, #0
    2b94:	2b04      	cmp	r3, #4
    2b96:	d103      	bne.n	2ba0 <_printf_common+0x70>
    2b98:	1a8d      	subs	r5, r1, r2
    2b9a:	43eb      	mvns	r3, r5
    2b9c:	17db      	asrs	r3, r3, #31
    2b9e:	401d      	ands	r5, r3
    2ba0:	68a3      	ldr	r3, [r4, #8]
    2ba2:	6922      	ldr	r2, [r4, #16]
    2ba4:	4293      	cmp	r3, r2
    2ba6:	dd01      	ble.n	2bac <_printf_common+0x7c>
    2ba8:	1a9b      	subs	r3, r3, r2
    2baa:	18ed      	adds	r5, r5, r3
    2bac:	2700      	movs	r7, #0
    2bae:	42bd      	cmp	r5, r7
    2bb0:	d120      	bne.n	2bf4 <_printf_common+0xc4>
    2bb2:	2000      	movs	r0, #0
    2bb4:	e010      	b.n	2bd8 <_printf_common+0xa8>
    2bb6:	3701      	adds	r7, #1
    2bb8:	68e3      	ldr	r3, [r4, #12]
    2bba:	682a      	ldr	r2, [r5, #0]
    2bbc:	1a9b      	subs	r3, r3, r2
    2bbe:	429f      	cmp	r7, r3
    2bc0:	dad2      	bge.n	2b68 <_printf_common+0x38>
    2bc2:	0022      	movs	r2, r4
    2bc4:	2301      	movs	r3, #1
    2bc6:	3219      	adds	r2, #25
    2bc8:	9901      	ldr	r1, [sp, #4]
    2bca:	9800      	ldr	r0, [sp, #0]
    2bcc:	9e08      	ldr	r6, [sp, #32]
    2bce:	47b0      	blx	r6
    2bd0:	1c43      	adds	r3, r0, #1
    2bd2:	d1f0      	bne.n	2bb6 <_printf_common+0x86>
    2bd4:	2001      	movs	r0, #1
    2bd6:	4240      	negs	r0, r0
    2bd8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    2bda:	2030      	movs	r0, #48	; 0x30
    2bdc:	18e1      	adds	r1, r4, r3
    2bde:	3143      	adds	r1, #67	; 0x43
    2be0:	7008      	strb	r0, [r1, #0]
    2be2:	0021      	movs	r1, r4
    2be4:	1c5a      	adds	r2, r3, #1
    2be6:	3145      	adds	r1, #69	; 0x45
    2be8:	7809      	ldrb	r1, [r1, #0]
    2bea:	18a2      	adds	r2, r4, r2
    2bec:	3243      	adds	r2, #67	; 0x43
    2bee:	3302      	adds	r3, #2
    2bf0:	7011      	strb	r1, [r2, #0]
    2bf2:	e7c1      	b.n	2b78 <_printf_common+0x48>
    2bf4:	0022      	movs	r2, r4
    2bf6:	2301      	movs	r3, #1
    2bf8:	321a      	adds	r2, #26
    2bfa:	9901      	ldr	r1, [sp, #4]
    2bfc:	9800      	ldr	r0, [sp, #0]
    2bfe:	9e08      	ldr	r6, [sp, #32]
    2c00:	47b0      	blx	r6
    2c02:	1c43      	adds	r3, r0, #1
    2c04:	d0e6      	beq.n	2bd4 <_printf_common+0xa4>
    2c06:	3701      	adds	r7, #1
    2c08:	e7d1      	b.n	2bae <_printf_common+0x7e>
	...

00002c0c <_printf_i>:
    2c0c:	b5f0      	push	{r4, r5, r6, r7, lr}
    2c0e:	b08b      	sub	sp, #44	; 0x2c
    2c10:	9206      	str	r2, [sp, #24]
    2c12:	000a      	movs	r2, r1
    2c14:	3243      	adds	r2, #67	; 0x43
    2c16:	9307      	str	r3, [sp, #28]
    2c18:	9005      	str	r0, [sp, #20]
    2c1a:	9204      	str	r2, [sp, #16]
    2c1c:	7e0a      	ldrb	r2, [r1, #24]
    2c1e:	000c      	movs	r4, r1
    2c20:	9b10      	ldr	r3, [sp, #64]	; 0x40
    2c22:	2a6e      	cmp	r2, #110	; 0x6e
    2c24:	d100      	bne.n	2c28 <_printf_i+0x1c>
    2c26:	e08f      	b.n	2d48 <_printf_i+0x13c>
    2c28:	d817      	bhi.n	2c5a <_printf_i+0x4e>
    2c2a:	2a63      	cmp	r2, #99	; 0x63
    2c2c:	d02c      	beq.n	2c88 <_printf_i+0x7c>
    2c2e:	d808      	bhi.n	2c42 <_printf_i+0x36>
    2c30:	2a00      	cmp	r2, #0
    2c32:	d100      	bne.n	2c36 <_printf_i+0x2a>
    2c34:	e099      	b.n	2d6a <_printf_i+0x15e>
    2c36:	2a58      	cmp	r2, #88	; 0x58
    2c38:	d054      	beq.n	2ce4 <_printf_i+0xd8>
    2c3a:	0026      	movs	r6, r4
    2c3c:	3642      	adds	r6, #66	; 0x42
    2c3e:	7032      	strb	r2, [r6, #0]
    2c40:	e029      	b.n	2c96 <_printf_i+0x8a>
    2c42:	2a64      	cmp	r2, #100	; 0x64
    2c44:	d001      	beq.n	2c4a <_printf_i+0x3e>
    2c46:	2a69      	cmp	r2, #105	; 0x69
    2c48:	d1f7      	bne.n	2c3a <_printf_i+0x2e>
    2c4a:	6821      	ldr	r1, [r4, #0]
    2c4c:	681a      	ldr	r2, [r3, #0]
    2c4e:	0608      	lsls	r0, r1, #24
    2c50:	d523      	bpl.n	2c9a <_printf_i+0x8e>
    2c52:	1d11      	adds	r1, r2, #4
    2c54:	6019      	str	r1, [r3, #0]
    2c56:	6815      	ldr	r5, [r2, #0]
    2c58:	e025      	b.n	2ca6 <_printf_i+0x9a>
    2c5a:	2a73      	cmp	r2, #115	; 0x73
    2c5c:	d100      	bne.n	2c60 <_printf_i+0x54>
    2c5e:	e088      	b.n	2d72 <_printf_i+0x166>
    2c60:	d808      	bhi.n	2c74 <_printf_i+0x68>
    2c62:	2a6f      	cmp	r2, #111	; 0x6f
    2c64:	d029      	beq.n	2cba <_printf_i+0xae>
    2c66:	2a70      	cmp	r2, #112	; 0x70
    2c68:	d1e7      	bne.n	2c3a <_printf_i+0x2e>
    2c6a:	2220      	movs	r2, #32
    2c6c:	6809      	ldr	r1, [r1, #0]
    2c6e:	430a      	orrs	r2, r1
    2c70:	6022      	str	r2, [r4, #0]
    2c72:	e003      	b.n	2c7c <_printf_i+0x70>
    2c74:	2a75      	cmp	r2, #117	; 0x75
    2c76:	d020      	beq.n	2cba <_printf_i+0xae>
    2c78:	2a78      	cmp	r2, #120	; 0x78
    2c7a:	d1de      	bne.n	2c3a <_printf_i+0x2e>
    2c7c:	0022      	movs	r2, r4
    2c7e:	2178      	movs	r1, #120	; 0x78
    2c80:	3245      	adds	r2, #69	; 0x45
    2c82:	7011      	strb	r1, [r2, #0]
    2c84:	4a6c      	ldr	r2, [pc, #432]	; (2e38 <_printf_i+0x22c>)
    2c86:	e030      	b.n	2cea <_printf_i+0xde>
    2c88:	000e      	movs	r6, r1
    2c8a:	681a      	ldr	r2, [r3, #0]
    2c8c:	3642      	adds	r6, #66	; 0x42
    2c8e:	1d11      	adds	r1, r2, #4
    2c90:	6019      	str	r1, [r3, #0]
    2c92:	6813      	ldr	r3, [r2, #0]
    2c94:	7033      	strb	r3, [r6, #0]
    2c96:	2301      	movs	r3, #1
    2c98:	e079      	b.n	2d8e <_printf_i+0x182>
    2c9a:	0649      	lsls	r1, r1, #25
    2c9c:	d5d9      	bpl.n	2c52 <_printf_i+0x46>
    2c9e:	1d11      	adds	r1, r2, #4
    2ca0:	6019      	str	r1, [r3, #0]
    2ca2:	2300      	movs	r3, #0
    2ca4:	5ed5      	ldrsh	r5, [r2, r3]
    2ca6:	2d00      	cmp	r5, #0
    2ca8:	da03      	bge.n	2cb2 <_printf_i+0xa6>
    2caa:	232d      	movs	r3, #45	; 0x2d
    2cac:	9a04      	ldr	r2, [sp, #16]
    2cae:	426d      	negs	r5, r5
    2cb0:	7013      	strb	r3, [r2, #0]
    2cb2:	4b62      	ldr	r3, [pc, #392]	; (2e3c <_printf_i+0x230>)
    2cb4:	270a      	movs	r7, #10
    2cb6:	9303      	str	r3, [sp, #12]
    2cb8:	e02f      	b.n	2d1a <_printf_i+0x10e>
    2cba:	6820      	ldr	r0, [r4, #0]
    2cbc:	6819      	ldr	r1, [r3, #0]
    2cbe:	0605      	lsls	r5, r0, #24
    2cc0:	d503      	bpl.n	2cca <_printf_i+0xbe>
    2cc2:	1d08      	adds	r0, r1, #4
    2cc4:	6018      	str	r0, [r3, #0]
    2cc6:	680d      	ldr	r5, [r1, #0]
    2cc8:	e005      	b.n	2cd6 <_printf_i+0xca>
    2cca:	0640      	lsls	r0, r0, #25
    2ccc:	d5f9      	bpl.n	2cc2 <_printf_i+0xb6>
    2cce:	680d      	ldr	r5, [r1, #0]
    2cd0:	1d08      	adds	r0, r1, #4
    2cd2:	6018      	str	r0, [r3, #0]
    2cd4:	b2ad      	uxth	r5, r5
    2cd6:	4b59      	ldr	r3, [pc, #356]	; (2e3c <_printf_i+0x230>)
    2cd8:	2708      	movs	r7, #8
    2cda:	9303      	str	r3, [sp, #12]
    2cdc:	2a6f      	cmp	r2, #111	; 0x6f
    2cde:	d018      	beq.n	2d12 <_printf_i+0x106>
    2ce0:	270a      	movs	r7, #10
    2ce2:	e016      	b.n	2d12 <_printf_i+0x106>
    2ce4:	3145      	adds	r1, #69	; 0x45
    2ce6:	700a      	strb	r2, [r1, #0]
    2ce8:	4a54      	ldr	r2, [pc, #336]	; (2e3c <_printf_i+0x230>)
    2cea:	9203      	str	r2, [sp, #12]
    2cec:	681a      	ldr	r2, [r3, #0]
    2cee:	6821      	ldr	r1, [r4, #0]
    2cf0:	1d10      	adds	r0, r2, #4
    2cf2:	6018      	str	r0, [r3, #0]
    2cf4:	6815      	ldr	r5, [r2, #0]
    2cf6:	0608      	lsls	r0, r1, #24
    2cf8:	d522      	bpl.n	2d40 <_printf_i+0x134>
    2cfa:	07cb      	lsls	r3, r1, #31
    2cfc:	d502      	bpl.n	2d04 <_printf_i+0xf8>
    2cfe:	2320      	movs	r3, #32
    2d00:	4319      	orrs	r1, r3
    2d02:	6021      	str	r1, [r4, #0]
    2d04:	2710      	movs	r7, #16
    2d06:	2d00      	cmp	r5, #0
    2d08:	d103      	bne.n	2d12 <_printf_i+0x106>
    2d0a:	2320      	movs	r3, #32
    2d0c:	6822      	ldr	r2, [r4, #0]
    2d0e:	439a      	bics	r2, r3
    2d10:	6022      	str	r2, [r4, #0]
    2d12:	0023      	movs	r3, r4
    2d14:	2200      	movs	r2, #0
    2d16:	3343      	adds	r3, #67	; 0x43
    2d18:	701a      	strb	r2, [r3, #0]
    2d1a:	6863      	ldr	r3, [r4, #4]
    2d1c:	60a3      	str	r3, [r4, #8]
    2d1e:	2b00      	cmp	r3, #0
    2d20:	db5c      	blt.n	2ddc <_printf_i+0x1d0>
    2d22:	2204      	movs	r2, #4
    2d24:	6821      	ldr	r1, [r4, #0]
    2d26:	4391      	bics	r1, r2
    2d28:	6021      	str	r1, [r4, #0]
    2d2a:	2d00      	cmp	r5, #0
    2d2c:	d158      	bne.n	2de0 <_printf_i+0x1d4>
    2d2e:	9e04      	ldr	r6, [sp, #16]
    2d30:	2b00      	cmp	r3, #0
    2d32:	d064      	beq.n	2dfe <_printf_i+0x1f2>
    2d34:	0026      	movs	r6, r4
    2d36:	9b03      	ldr	r3, [sp, #12]
    2d38:	3642      	adds	r6, #66	; 0x42
    2d3a:	781b      	ldrb	r3, [r3, #0]
    2d3c:	7033      	strb	r3, [r6, #0]
    2d3e:	e05e      	b.n	2dfe <_printf_i+0x1f2>
    2d40:	0648      	lsls	r0, r1, #25
    2d42:	d5da      	bpl.n	2cfa <_printf_i+0xee>
    2d44:	b2ad      	uxth	r5, r5
    2d46:	e7d8      	b.n	2cfa <_printf_i+0xee>
    2d48:	6809      	ldr	r1, [r1, #0]
    2d4a:	681a      	ldr	r2, [r3, #0]
    2d4c:	0608      	lsls	r0, r1, #24
    2d4e:	d505      	bpl.n	2d5c <_printf_i+0x150>
    2d50:	1d11      	adds	r1, r2, #4
    2d52:	6019      	str	r1, [r3, #0]
    2d54:	6813      	ldr	r3, [r2, #0]
    2d56:	6962      	ldr	r2, [r4, #20]
    2d58:	601a      	str	r2, [r3, #0]
    2d5a:	e006      	b.n	2d6a <_printf_i+0x15e>
    2d5c:	0649      	lsls	r1, r1, #25
    2d5e:	d5f7      	bpl.n	2d50 <_printf_i+0x144>
    2d60:	1d11      	adds	r1, r2, #4
    2d62:	6019      	str	r1, [r3, #0]
    2d64:	6813      	ldr	r3, [r2, #0]
    2d66:	8aa2      	ldrh	r2, [r4, #20]
    2d68:	801a      	strh	r2, [r3, #0]
    2d6a:	2300      	movs	r3, #0
    2d6c:	9e04      	ldr	r6, [sp, #16]
    2d6e:	6123      	str	r3, [r4, #16]
    2d70:	e054      	b.n	2e1c <_printf_i+0x210>
    2d72:	681a      	ldr	r2, [r3, #0]
    2d74:	1d11      	adds	r1, r2, #4
    2d76:	6019      	str	r1, [r3, #0]
    2d78:	6816      	ldr	r6, [r2, #0]
    2d7a:	2100      	movs	r1, #0
    2d7c:	6862      	ldr	r2, [r4, #4]
    2d7e:	0030      	movs	r0, r6
    2d80:	f000 f908 	bl	2f94 <memchr>
    2d84:	2800      	cmp	r0, #0
    2d86:	d001      	beq.n	2d8c <_printf_i+0x180>
    2d88:	1b80      	subs	r0, r0, r6
    2d8a:	6060      	str	r0, [r4, #4]
    2d8c:	6863      	ldr	r3, [r4, #4]
    2d8e:	6123      	str	r3, [r4, #16]
    2d90:	2300      	movs	r3, #0
    2d92:	9a04      	ldr	r2, [sp, #16]
    2d94:	7013      	strb	r3, [r2, #0]
    2d96:	e041      	b.n	2e1c <_printf_i+0x210>
    2d98:	6923      	ldr	r3, [r4, #16]
    2d9a:	0032      	movs	r2, r6
    2d9c:	9906      	ldr	r1, [sp, #24]
    2d9e:	9805      	ldr	r0, [sp, #20]
    2da0:	9d07      	ldr	r5, [sp, #28]
    2da2:	47a8      	blx	r5
    2da4:	1c43      	adds	r3, r0, #1
    2da6:	d043      	beq.n	2e30 <_printf_i+0x224>
    2da8:	6823      	ldr	r3, [r4, #0]
    2daa:	2500      	movs	r5, #0
    2dac:	079b      	lsls	r3, r3, #30
    2dae:	d40f      	bmi.n	2dd0 <_printf_i+0x1c4>
    2db0:	9b09      	ldr	r3, [sp, #36]	; 0x24
    2db2:	68e0      	ldr	r0, [r4, #12]
    2db4:	4298      	cmp	r0, r3
    2db6:	da3d      	bge.n	2e34 <_printf_i+0x228>
    2db8:	0018      	movs	r0, r3
    2dba:	e03b      	b.n	2e34 <_printf_i+0x228>
    2dbc:	0022      	movs	r2, r4
    2dbe:	2301      	movs	r3, #1
    2dc0:	3219      	adds	r2, #25
    2dc2:	9906      	ldr	r1, [sp, #24]
    2dc4:	9805      	ldr	r0, [sp, #20]
    2dc6:	9e07      	ldr	r6, [sp, #28]
    2dc8:	47b0      	blx	r6
    2dca:	1c43      	adds	r3, r0, #1
    2dcc:	d030      	beq.n	2e30 <_printf_i+0x224>
    2dce:	3501      	adds	r5, #1
    2dd0:	68e3      	ldr	r3, [r4, #12]
    2dd2:	9a09      	ldr	r2, [sp, #36]	; 0x24
    2dd4:	1a9b      	subs	r3, r3, r2
    2dd6:	429d      	cmp	r5, r3
    2dd8:	dbf0      	blt.n	2dbc <_printf_i+0x1b0>
    2dda:	e7e9      	b.n	2db0 <_printf_i+0x1a4>
    2ddc:	2d00      	cmp	r5, #0
    2dde:	d0a9      	beq.n	2d34 <_printf_i+0x128>
    2de0:	9e04      	ldr	r6, [sp, #16]
    2de2:	0028      	movs	r0, r5
    2de4:	0039      	movs	r1, r7
    2de6:	f7fe f85d 	bl	ea4 <__aeabi_uidivmod>
    2dea:	9b03      	ldr	r3, [sp, #12]
    2dec:	3e01      	subs	r6, #1
    2dee:	5c5b      	ldrb	r3, [r3, r1]
    2df0:	0028      	movs	r0, r5
    2df2:	7033      	strb	r3, [r6, #0]
    2df4:	0039      	movs	r1, r7
    2df6:	f7fe f83a 	bl	e6e <__aeabi_uidiv>
    2dfa:	1e05      	subs	r5, r0, #0
    2dfc:	d1f1      	bne.n	2de2 <_printf_i+0x1d6>
    2dfe:	2f08      	cmp	r7, #8
    2e00:	d109      	bne.n	2e16 <_printf_i+0x20a>
    2e02:	6823      	ldr	r3, [r4, #0]
    2e04:	07db      	lsls	r3, r3, #31
    2e06:	d506      	bpl.n	2e16 <_printf_i+0x20a>
    2e08:	6863      	ldr	r3, [r4, #4]
    2e0a:	6922      	ldr	r2, [r4, #16]
    2e0c:	4293      	cmp	r3, r2
    2e0e:	dc02      	bgt.n	2e16 <_printf_i+0x20a>
    2e10:	2330      	movs	r3, #48	; 0x30
    2e12:	3e01      	subs	r6, #1
    2e14:	7033      	strb	r3, [r6, #0]
    2e16:	9b04      	ldr	r3, [sp, #16]
    2e18:	1b9b      	subs	r3, r3, r6
    2e1a:	6123      	str	r3, [r4, #16]
    2e1c:	9b07      	ldr	r3, [sp, #28]
    2e1e:	aa09      	add	r2, sp, #36	; 0x24
    2e20:	9300      	str	r3, [sp, #0]
    2e22:	0021      	movs	r1, r4
    2e24:	9b06      	ldr	r3, [sp, #24]
    2e26:	9805      	ldr	r0, [sp, #20]
    2e28:	f7ff fe82 	bl	2b30 <_printf_common>
    2e2c:	1c43      	adds	r3, r0, #1
    2e2e:	d1b3      	bne.n	2d98 <_printf_i+0x18c>
    2e30:	2001      	movs	r0, #1
    2e32:	4240      	negs	r0, r0
    2e34:	b00b      	add	sp, #44	; 0x2c
    2e36:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2e38:	000033aa 	.word	0x000033aa
    2e3c:	00003399 	.word	0x00003399

00002e40 <_sbrk_r>:
    2e40:	2300      	movs	r3, #0
    2e42:	b570      	push	{r4, r5, r6, lr}
    2e44:	4c06      	ldr	r4, [pc, #24]	; (2e60 <_sbrk_r+0x20>)
    2e46:	0005      	movs	r5, r0
    2e48:	0008      	movs	r0, r1
    2e4a:	6023      	str	r3, [r4, #0]
    2e4c:	f7fd fe70 	bl	b30 <_sbrk>
    2e50:	1c43      	adds	r3, r0, #1
    2e52:	d103      	bne.n	2e5c <_sbrk_r+0x1c>
    2e54:	6823      	ldr	r3, [r4, #0]
    2e56:	2b00      	cmp	r3, #0
    2e58:	d000      	beq.n	2e5c <_sbrk_r+0x1c>
    2e5a:	602b      	str	r3, [r5, #0]
    2e5c:	bd70      	pop	{r4, r5, r6, pc}
    2e5e:	46c0      	nop			; (mov r8, r8)
    2e60:	20000528 	.word	0x20000528

00002e64 <__sread>:
    2e64:	b570      	push	{r4, r5, r6, lr}
    2e66:	000c      	movs	r4, r1
    2e68:	250e      	movs	r5, #14
    2e6a:	5f49      	ldrsh	r1, [r1, r5]
    2e6c:	f000 f8d8 	bl	3020 <_read_r>
    2e70:	2800      	cmp	r0, #0
    2e72:	db03      	blt.n	2e7c <__sread+0x18>
    2e74:	6d63      	ldr	r3, [r4, #84]	; 0x54
    2e76:	181b      	adds	r3, r3, r0
    2e78:	6563      	str	r3, [r4, #84]	; 0x54
    2e7a:	bd70      	pop	{r4, r5, r6, pc}
    2e7c:	89a3      	ldrh	r3, [r4, #12]
    2e7e:	4a02      	ldr	r2, [pc, #8]	; (2e88 <__sread+0x24>)
    2e80:	4013      	ands	r3, r2
    2e82:	81a3      	strh	r3, [r4, #12]
    2e84:	e7f9      	b.n	2e7a <__sread+0x16>
    2e86:	46c0      	nop			; (mov r8, r8)
    2e88:	ffffefff 	.word	0xffffefff

00002e8c <__swrite>:
    2e8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2e8e:	001f      	movs	r7, r3
    2e90:	898b      	ldrh	r3, [r1, #12]
    2e92:	0005      	movs	r5, r0
    2e94:	000c      	movs	r4, r1
    2e96:	0016      	movs	r6, r2
    2e98:	05db      	lsls	r3, r3, #23
    2e9a:	d505      	bpl.n	2ea8 <__swrite+0x1c>
    2e9c:	230e      	movs	r3, #14
    2e9e:	5ec9      	ldrsh	r1, [r1, r3]
    2ea0:	2200      	movs	r2, #0
    2ea2:	2302      	movs	r3, #2
    2ea4:	f000 f862 	bl	2f6c <_lseek_r>
    2ea8:	89a3      	ldrh	r3, [r4, #12]
    2eaa:	4a05      	ldr	r2, [pc, #20]	; (2ec0 <__swrite+0x34>)
    2eac:	0028      	movs	r0, r5
    2eae:	4013      	ands	r3, r2
    2eb0:	81a3      	strh	r3, [r4, #12]
    2eb2:	0032      	movs	r2, r6
    2eb4:	230e      	movs	r3, #14
    2eb6:	5ee1      	ldrsh	r1, [r4, r3]
    2eb8:	003b      	movs	r3, r7
    2eba:	f000 f81f 	bl	2efc <_write_r>
    2ebe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2ec0:	ffffefff 	.word	0xffffefff

00002ec4 <__sseek>:
    2ec4:	b570      	push	{r4, r5, r6, lr}
    2ec6:	000c      	movs	r4, r1
    2ec8:	250e      	movs	r5, #14
    2eca:	5f49      	ldrsh	r1, [r1, r5]
    2ecc:	f000 f84e 	bl	2f6c <_lseek_r>
    2ed0:	89a3      	ldrh	r3, [r4, #12]
    2ed2:	1c42      	adds	r2, r0, #1
    2ed4:	d103      	bne.n	2ede <__sseek+0x1a>
    2ed6:	4a05      	ldr	r2, [pc, #20]	; (2eec <__sseek+0x28>)
    2ed8:	4013      	ands	r3, r2
    2eda:	81a3      	strh	r3, [r4, #12]
    2edc:	bd70      	pop	{r4, r5, r6, pc}
    2ede:	2280      	movs	r2, #128	; 0x80
    2ee0:	0152      	lsls	r2, r2, #5
    2ee2:	4313      	orrs	r3, r2
    2ee4:	81a3      	strh	r3, [r4, #12]
    2ee6:	6560      	str	r0, [r4, #84]	; 0x54
    2ee8:	e7f8      	b.n	2edc <__sseek+0x18>
    2eea:	46c0      	nop			; (mov r8, r8)
    2eec:	ffffefff 	.word	0xffffefff

00002ef0 <__sclose>:
    2ef0:	b510      	push	{r4, lr}
    2ef2:	230e      	movs	r3, #14
    2ef4:	5ec9      	ldrsh	r1, [r1, r3]
    2ef6:	f000 f815 	bl	2f24 <_close_r>
    2efa:	bd10      	pop	{r4, pc}

00002efc <_write_r>:
    2efc:	b570      	push	{r4, r5, r6, lr}
    2efe:	0005      	movs	r5, r0
    2f00:	0008      	movs	r0, r1
    2f02:	0011      	movs	r1, r2
    2f04:	2200      	movs	r2, #0
    2f06:	4c06      	ldr	r4, [pc, #24]	; (2f20 <_write_r+0x24>)
    2f08:	6022      	str	r2, [r4, #0]
    2f0a:	001a      	movs	r2, r3
    2f0c:	f7ff f898 	bl	2040 <_write>
    2f10:	1c43      	adds	r3, r0, #1
    2f12:	d103      	bne.n	2f1c <_write_r+0x20>
    2f14:	6823      	ldr	r3, [r4, #0]
    2f16:	2b00      	cmp	r3, #0
    2f18:	d000      	beq.n	2f1c <_write_r+0x20>
    2f1a:	602b      	str	r3, [r5, #0]
    2f1c:	bd70      	pop	{r4, r5, r6, pc}
    2f1e:	46c0      	nop			; (mov r8, r8)
    2f20:	20000528 	.word	0x20000528

00002f24 <_close_r>:
    2f24:	2300      	movs	r3, #0
    2f26:	b570      	push	{r4, r5, r6, lr}
    2f28:	4c06      	ldr	r4, [pc, #24]	; (2f44 <_close_r+0x20>)
    2f2a:	0005      	movs	r5, r0
    2f2c:	0008      	movs	r0, r1
    2f2e:	6023      	str	r3, [r4, #0]
    2f30:	f7fd fe10 	bl	b54 <_close>
    2f34:	1c43      	adds	r3, r0, #1
    2f36:	d103      	bne.n	2f40 <_close_r+0x1c>
    2f38:	6823      	ldr	r3, [r4, #0]
    2f3a:	2b00      	cmp	r3, #0
    2f3c:	d000      	beq.n	2f40 <_close_r+0x1c>
    2f3e:	602b      	str	r3, [r5, #0]
    2f40:	bd70      	pop	{r4, r5, r6, pc}
    2f42:	46c0      	nop			; (mov r8, r8)
    2f44:	20000528 	.word	0x20000528

00002f48 <_fstat_r>:
    2f48:	2300      	movs	r3, #0
    2f4a:	b570      	push	{r4, r5, r6, lr}
    2f4c:	4c06      	ldr	r4, [pc, #24]	; (2f68 <_fstat_r+0x20>)
    2f4e:	0005      	movs	r5, r0
    2f50:	0008      	movs	r0, r1
    2f52:	0011      	movs	r1, r2
    2f54:	6023      	str	r3, [r4, #0]
    2f56:	f7fd fe00 	bl	b5a <_fstat>
    2f5a:	1c43      	adds	r3, r0, #1
    2f5c:	d103      	bne.n	2f66 <_fstat_r+0x1e>
    2f5e:	6823      	ldr	r3, [r4, #0]
    2f60:	2b00      	cmp	r3, #0
    2f62:	d000      	beq.n	2f66 <_fstat_r+0x1e>
    2f64:	602b      	str	r3, [r5, #0]
    2f66:	bd70      	pop	{r4, r5, r6, pc}
    2f68:	20000528 	.word	0x20000528

00002f6c <_lseek_r>:
    2f6c:	b570      	push	{r4, r5, r6, lr}
    2f6e:	0005      	movs	r5, r0
    2f70:	0008      	movs	r0, r1
    2f72:	0011      	movs	r1, r2
    2f74:	2200      	movs	r2, #0
    2f76:	4c06      	ldr	r4, [pc, #24]	; (2f90 <_lseek_r+0x24>)
    2f78:	6022      	str	r2, [r4, #0]
    2f7a:	001a      	movs	r2, r3
    2f7c:	f7fd fdf2 	bl	b64 <_lseek>
    2f80:	1c43      	adds	r3, r0, #1
    2f82:	d103      	bne.n	2f8c <_lseek_r+0x20>
    2f84:	6823      	ldr	r3, [r4, #0]
    2f86:	2b00      	cmp	r3, #0
    2f88:	d000      	beq.n	2f8c <_lseek_r+0x20>
    2f8a:	602b      	str	r3, [r5, #0]
    2f8c:	bd70      	pop	{r4, r5, r6, pc}
    2f8e:	46c0      	nop			; (mov r8, r8)
    2f90:	20000528 	.word	0x20000528

00002f94 <memchr>:
    2f94:	b2c9      	uxtb	r1, r1
    2f96:	1882      	adds	r2, r0, r2
    2f98:	4290      	cmp	r0, r2
    2f9a:	d101      	bne.n	2fa0 <memchr+0xc>
    2f9c:	2000      	movs	r0, #0
    2f9e:	4770      	bx	lr
    2fa0:	7803      	ldrb	r3, [r0, #0]
    2fa2:	428b      	cmp	r3, r1
    2fa4:	d0fb      	beq.n	2f9e <memchr+0xa>
    2fa6:	3001      	adds	r0, #1
    2fa8:	e7f6      	b.n	2f98 <memchr+0x4>

00002faa <memmove>:
    2faa:	b510      	push	{r4, lr}
    2fac:	4288      	cmp	r0, r1
    2fae:	d902      	bls.n	2fb6 <memmove+0xc>
    2fb0:	188b      	adds	r3, r1, r2
    2fb2:	4298      	cmp	r0, r3
    2fb4:	d308      	bcc.n	2fc8 <memmove+0x1e>
    2fb6:	2300      	movs	r3, #0
    2fb8:	429a      	cmp	r2, r3
    2fba:	d007      	beq.n	2fcc <memmove+0x22>
    2fbc:	5ccc      	ldrb	r4, [r1, r3]
    2fbe:	54c4      	strb	r4, [r0, r3]
    2fc0:	3301      	adds	r3, #1
    2fc2:	e7f9      	b.n	2fb8 <memmove+0xe>
    2fc4:	5c8b      	ldrb	r3, [r1, r2]
    2fc6:	5483      	strb	r3, [r0, r2]
    2fc8:	3a01      	subs	r2, #1
    2fca:	d2fb      	bcs.n	2fc4 <memmove+0x1a>
    2fcc:	bd10      	pop	{r4, pc}

00002fce <__malloc_lock>:
    2fce:	4770      	bx	lr

00002fd0 <__malloc_unlock>:
    2fd0:	4770      	bx	lr

00002fd2 <_realloc_r>:
    2fd2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2fd4:	0007      	movs	r7, r0
    2fd6:	000d      	movs	r5, r1
    2fd8:	0016      	movs	r6, r2
    2fda:	2900      	cmp	r1, #0
    2fdc:	d105      	bne.n	2fea <_realloc_r+0x18>
    2fde:	0011      	movs	r1, r2
    2fe0:	f7ff fbe2 	bl	27a8 <_malloc_r>
    2fe4:	0004      	movs	r4, r0
    2fe6:	0020      	movs	r0, r4
    2fe8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2fea:	2a00      	cmp	r2, #0
    2fec:	d103      	bne.n	2ff6 <_realloc_r+0x24>
    2fee:	f7ff fb91 	bl	2714 <_free_r>
    2ff2:	0034      	movs	r4, r6
    2ff4:	e7f7      	b.n	2fe6 <_realloc_r+0x14>
    2ff6:	f000 f827 	bl	3048 <_malloc_usable_size_r>
    2ffa:	002c      	movs	r4, r5
    2ffc:	4286      	cmp	r6, r0
    2ffe:	d9f2      	bls.n	2fe6 <_realloc_r+0x14>
    3000:	0031      	movs	r1, r6
    3002:	0038      	movs	r0, r7
    3004:	f7ff fbd0 	bl	27a8 <_malloc_r>
    3008:	1e04      	subs	r4, r0, #0
    300a:	d0ec      	beq.n	2fe6 <_realloc_r+0x14>
    300c:	0029      	movs	r1, r5
    300e:	0032      	movs	r2, r6
    3010:	f7ff f8b8 	bl	2184 <memcpy>
    3014:	0029      	movs	r1, r5
    3016:	0038      	movs	r0, r7
    3018:	f7ff fb7c 	bl	2714 <_free_r>
    301c:	e7e3      	b.n	2fe6 <_realloc_r+0x14>
	...

00003020 <_read_r>:
    3020:	b570      	push	{r4, r5, r6, lr}
    3022:	0005      	movs	r5, r0
    3024:	0008      	movs	r0, r1
    3026:	0011      	movs	r1, r2
    3028:	2200      	movs	r2, #0
    302a:	4c06      	ldr	r4, [pc, #24]	; (3044 <_read_r+0x24>)
    302c:	6022      	str	r2, [r4, #0]
    302e:	001a      	movs	r2, r3
    3030:	f7fe fff2 	bl	2018 <_read>
    3034:	1c43      	adds	r3, r0, #1
    3036:	d103      	bne.n	3040 <_read_r+0x20>
    3038:	6823      	ldr	r3, [r4, #0]
    303a:	2b00      	cmp	r3, #0
    303c:	d000      	beq.n	3040 <_read_r+0x20>
    303e:	602b      	str	r3, [r5, #0]
    3040:	bd70      	pop	{r4, r5, r6, pc}
    3042:	46c0      	nop			; (mov r8, r8)
    3044:	20000528 	.word	0x20000528

00003048 <_malloc_usable_size_r>:
    3048:	1f0b      	subs	r3, r1, #4
    304a:	681b      	ldr	r3, [r3, #0]
    304c:	1f18      	subs	r0, r3, #4
    304e:	2b00      	cmp	r3, #0
    3050:	da01      	bge.n	3056 <_malloc_usable_size_r+0xe>
    3052:	580b      	ldr	r3, [r1, r0]
    3054:	18c0      	adds	r0, r0, r3
    3056:	4770      	bx	lr
    3058:	682f2e2e 	.word	0x682f2e2e
    305c:	732f6c61 	.word	0x732f6c61
    3060:	682f6372 	.word	0x682f6372
    3064:	635f6c61 	.word	0x635f6c61
    3068:	615f6e61 	.word	0x615f6e61
    306c:	636e7973 	.word	0x636e7973
    3070:	0000632e 	.word	0x0000632e
    3074:	682f2e2e 	.word	0x682f2e2e
    3078:	732f6c61 	.word	0x732f6c61
    307c:	682f6372 	.word	0x682f6372
    3080:	665f6c61 	.word	0x665f6c61
    3084:	6873616c 	.word	0x6873616c
    3088:	0000632e 	.word	0x0000632e
    308c:	682f2e2e 	.word	0x682f2e2e
    3090:	732f6c61 	.word	0x732f6c61
    3094:	682f6372 	.word	0x682f6372
    3098:	695f6c61 	.word	0x695f6c61
    309c:	00632e6f 	.word	0x00632e6f
    30a0:	682f2e2e 	.word	0x682f2e2e
    30a4:	732f6c61 	.word	0x732f6c61
    30a8:	682f6372 	.word	0x682f6372
    30ac:	745f6c61 	.word	0x745f6c61
    30b0:	72656d69 	.word	0x72656d69
    30b4:	0000632e 	.word	0x0000632e
    30b8:	682f2e2e 	.word	0x682f2e2e
    30bc:	732f6c61 	.word	0x732f6c61
    30c0:	682f6372 	.word	0x682f6372
    30c4:	755f6c61 	.word	0x755f6c61
    30c8:	74726173 	.word	0x74726173
    30cc:	6e79735f 	.word	0x6e79735f
    30d0:	00632e63 	.word	0x00632e63
    30d4:	682f2e2e 	.word	0x682f2e2e
    30d8:	752f6c61 	.word	0x752f6c61
    30dc:	736c6974 	.word	0x736c6974
    30e0:	6372732f 	.word	0x6372732f
    30e4:	6974752f 	.word	0x6974752f
    30e8:	6c5f736c 	.word	0x6c5f736c
    30ec:	2e747369 	.word	0x2e747369
    30f0:	00000063 	.word	0x00000063
    30f4:	682f2e2e 	.word	0x682f2e2e
    30f8:	6e2f6c70 	.word	0x6e2f6c70
    30fc:	74636d76 	.word	0x74636d76
    3100:	682f6c72 	.word	0x682f6c72
    3104:	6e5f6c70 	.word	0x6e5f6c70
    3108:	74636d76 	.word	0x74636d76
    310c:	632e6c72 	.word	0x632e6c72
    3110:	00000000 	.word	0x00000000
    3114:	42000400 	.word	0x42000400
    3118:	42000800 	.word	0x42000800
    311c:	42000c00 	.word	0x42000c00
    3120:	42001000 	.word	0x42001000
    3124:	42001400 	.word	0x42001400
    3128:	42001800 	.word	0x42001800
    312c:	43000000 	.word	0x43000000
    3130:	43000400 	.word	0x43000400

00003134 <_usarts>:
    3134:	00000004 40310004 00030000 0000ea27     ......1@....'...
    3144:	00000000                                ....

00003148 <_i2cms>:
	...

00003160 <_i2css>:
	...

00003170 <sercomspi_regs>:
	...
    3184:	682f2e2e 732f6c70 6f637265 70682f6d     ../hpl/sercom/hp
    3194:	65735f6c 6d6f6372 0000632e 42003000     l_sercom.c...0.B
    31a4:	42003400 42003800 42003c00 42004000     .4.B.8.B.<.B.@.B
    31b4:	43000800 43000c00 43001000              ...C...C...C

000031c0 <_tcs>:
    31c0:	00001400 00000308 00000000 0000176f     ............o...
    31d0:	00000000 682f2e2e 742f6c70 70682f63     ....../hpl/tc/hp
    31e0:	63745f6c 0000632e 00001b4a 000019ac     l_tc.c..J.......
    31f0:	00001b4a 000019de 00001b4a 00001ad2     J.......J.......
    3200:	00001b4a 00001b4a 00001b4a 00001b0c     J...J...J.......
    3210:	00001a48 00007825                       H...%x..

00003218 <_global_impure_ptr>:
    3218:	2000001c 4f500043 00584953 2000002e              ... C.POSIX...

00003226 <_ctype_>:
    3226:	20202000 20202020 28282020 20282828     .         ((((( 
    3236:	20202020 20202020 20202020 20202020                     
    3246:	10108820 10101010 10101010 10101010      ...............
    3256:	04040410 04040404 10040404 10101010     ................
    3266:	41411010 41414141 01010101 01010101     ..AAAAAA........
    3276:	01010101 01010101 01010101 10101010     ................
    3286:	42421010 42424242 02020202 02020202     ..BBBBBB........
    3296:	02020202 02020202 02020202 10101010     ................
    32a6:	00000020 00000000 00000000 00000000      ...............
	...

00003328 <__sf_fake_stderr>:
	...

00003348 <__sf_fake_stdin>:
	...

00003368 <__sf_fake_stdout>:
	...
    3388:	2b302d23 6c680020 6665004c 47464567     #-0+ .hlL.efgEFG
    3398:	32313000 36353433 41393837 45444342     .0123456789ABCDE
    33a8:	31300046 35343332 39383736 64636261     F.0123456789abcd
    33b8:	00006665                                ef..

000033bc <_init>:
    33bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    33be:	46c0      	nop			; (mov r8, r8)
    33c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
    33c2:	bc08      	pop	{r3}
    33c4:	469e      	mov	lr, r3
    33c6:	4770      	bx	lr

000033c8 <__init_array_start>:
    33c8:	000000e5 	.word	0x000000e5

000033cc <_fini>:
    33cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    33ce:	46c0      	nop			; (mov r8, r8)
    33d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
    33d2:	bc08      	pop	{r3}
    33d4:	469e      	mov	lr, r3
    33d6:	4770      	bx	lr

000033d8 <__fini_array_start>:
    33d8:	000000bd 	.word	0x000000bd
